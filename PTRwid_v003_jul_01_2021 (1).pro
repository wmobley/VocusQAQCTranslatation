
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;
;;;;;;;
;;;;;;;                   PTRWID routines
;;;;;;;
;;;;;;;  .FULL_RESET_SESSION
;;;;;;;   RESOLVE_ALL
;;;;;;;   SAVE, /ROUTINES, FILENAME = 'C:/PTRwid/PTRwid.sav'
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



 PRO ____________PTRwid
 end
 
PRO PTRwid
   compile_opt idl2
   version='v003' 
   date='jul_01_2021'
   parfile='C:/PTRwid/'+version+'_'+date+'_par.txt'
   codefile='C:/PTRwid/PTRwid_'+version+'_'+date+'.pro'
   help,/source_files, output=mis
   source=strtrim(string(strmid(mis[where(strpos(mis,'PTRWID_EVENT') eq 0)],12,1111)),2)
   
   inf=file_info('C:/PTRwid/')
   if (inf.directory eq 0) then FILE_MKDIR, 'C:/PTRwid/'
   
 makecsv,'C:/PTRwid/parfile.txt',parfile
 inf=file_info('C:/PTRwid/TransmissionArchive.txt')
 if (inf.exists eq 0) then  makecsv,'C:/PTRwid/TransmissionArchive.txt',transpose(['transmission parameters stored by Instrunent ID and time','time in days since Jan 1, 2009','','format1 (6 parameters): _InstrumentID=time, ex, mLOW, wLOW, mHigh, wHigh','INFO: for details see https://doi.org/10.5194/amt-12-6193-2019','','format2 (14 parameters): _InstrumentID=time, a1,b1,c1,d1,e1,f1,g1,mass,a2,b2,c2,d2,e2','INFO:', 'ion weights below "mass" are fitted with a  6th order polinomial (tr= a1*m^6+b1*m^5+c1*m^4+d1*m^3+e1*m^2+f1*m+g1)', 'ion weights above "mass" are fitted with a  4th order polinomial (tr=a2*m^4+b2*m^3+c2*m^2+d2*m+e2)','', '_default=0,0.5,10,1,2000,1'])
 ;if (inf.exists eq 0) then  makecsv,'C:/PTRwid/TransmissionArchive.txt',transpose(['transmission parameters stored by Instrunent ID and time','time in days since Jan 1, 2009','','format1 (6 parameters): _InstrumentID=time, ex, mLOW, wLOW, mHigh, wHigh','INFO: for details see https://doi.org/10.5194/amt-12-6193-2019','','format2 (14 parameters): _InstrumentID=time, a1,b1,c1,d1,e1,f1,g1,mass,a2,b2,c2,d2,e2','INFO:', 'ion weights below "mass" are fitted with a  6th order polinomial (tr= a1*m^6+b1*m^5+c1*m^4+d1*m^3+e1*m^2+f1*m+g1)', 'ion weights above "mass" are fitted with a  4th order polinomial (tr=a2*m^4+b2*m^3+c2*m^2+d2*m+e2)','', '_default=0, 0.7, 29.4, 3, 330, 80'])
inf=file_info('C:/PTRwid/InstrumentID.txt')
 if (inf.exists eq 0) then  makecsv,'C:/PTRwid/InstrumentID.txt','default'

   
   
   
   
   inf=file_info(parfile)
    info='>  processing info '
   if (inf.exists eq 0) then begin
   
          log=['PTRwid_'+version+' released '+date,'Default parfile has been created:', parfile, '','Values can be adjusted (advanced users only).' ]
         
          ;create default PTRwid_parameter.txt
          PTRwidParameter=[$
            ' _Selection=5',$ 
           '',$
           'INSTRUMENTS',           $  
            '',$
     ;       '_INST01=UUptr8000',$
     ;     '_INST02=UUptr1000',$
     ;     '_INST03=UUptr4000',$
          '_INST01=IoniTOFqi',$
          '_INST02=Vocus',$
          '_INST03=Inst3',$
       '_INST04=Inst4',$
          '_INST05=Inst5',$
           '_INST06=',$
          '_INST07=',$
          '_INST08=',$
            '',$
            'VOCUS',           $
            '',$
            '_pdriftVOCUS=SSQ pressure m*',$
            '_udriftVOCUS=QUAD3_RFAMPL m*',$
            '_tdriftVOCUS=Reactor temp m*',$
            '_AveragePrimIonsThresh=150000',$

            
           'PATHS',           $
           '',$
           '_#file1=20',$
           '_H1_01nam=-9999',$
           '_H1_01dat=/TimingData/BufTimes',$
           '_H1_02nam=-9999',$
           '_H1_02dat=/SPECdata/Times',$
           '_H1_03nam=-9999',$
           '_H1_03dat=/FullSpectra/SumSpectrum',$
           '_H1_04nam=-9999',$
           '_H1_04dat=/SPECdata/AverageSpec',$
           '_H1_05nam=/PTR-Reaction/TwInfo',$
           '_H1_05dat=/PTR-Reaction/TwData',$
           '_H1_06nam=/AddTraces/PTR-Reaction/TwInfo',$
           '_H1_06dat=/AddTraces/PTR-Reaction/TwData',$
           '_H1_07nam=/AddTraces/PTR-Reaction/Info',$
           '_H1_07dat=/AddTraces/PTR-Reaction/Data',$
           '_H1_08nam=/PTR-Instrument/TwInfo',$
           '_H1_08dat=/PTR-Instrument/TwData',$
           '_H1_09nam=/AddTraces/PTR-Instrument/TwInfo',$
           '_H1_09dat=/AddTraces/PTR-Instrument/TwData',$
           '_H1_10nam=/AddTraces/PTR-Instrument/Info',$
           '_H1_10dat=/AddTraces/PTR-Instrument/Data',$
           '_H1_11nam=/PTR-Misc/TwInfo',$
           '_H1_11dat=/PTR-Misc/TwData',$
           '_H1_12nam=/AddTraces/PTR-Misc/TwInfo',$
           '_H1_12dat=/AddTraces/PTR-Misc/TwData',$
           '_H1_13nam=/AddTraces/PTR-Misc/Info',$
           '_H1_13dat=/AddTraces/PTR-Misc/Data',$
           '_H1_14nam=/AddTraces/OptionBOX/TwInfo',$
           '_H1_14dat=/AddTraces/OptionBOX/TwData',$
           '_H1_15nam=/AddTraces/OptionBOX/Info',$
           '_H1_15dat=/AddTraces/OptionBOX/Data',$
           '_H1_16nam=/AddTraces/Denuder/TwInfo',$
           '_H1_16dat=/AddTraces/Denuder/TwData',$
           '_H1_17nam=/AddTraces/Denuder/Info',$
           '_H1_17dat=/AddTraces/Denuder/Data',$
           '_H1_18nam=/TPS2/TwInfo',$
           '_H1_18dat=/TPS2/TwData',$
           '_H1_19nam=/Pressure/TwInfo',$
           '_H1_19dat=/Pressure/TwData',$
           '_H1_20nam=/AddTraces/LCU/Info',$
           '_H1_20dat=/AddTraces/LCU/Data',$
           '',$
           '_#file2=3',$
           '_H2_01nam=/PTR-Reaction/Info',$
           '_H2_01dat=/PTR-Reaction/Data',$
           '_H2_02nam=/PTR-Instrument/Info',$
           '_H2_02dat=/PTR-Instrument/Data',$
           '_H2_03nam=/PTR-Misc/Info',$
           '_H2_03dat=/PTR-Misc/Data',$
           '',$
           'PTR DEFAULT VALUES',$
           '',$
           '_p_drift_default=2.4',$   ; hPa
           '_u_drift_default=600',$   ;volt
           '_udx_default=35',$   ;volt
           '_t_drift_default=50',$ ; celcius
           '_reactionlength=9.6',$ ;reactionlength in cm
           '_reduced_mobility=2.7',$ ;reduced mobility of H3O+ in N2
           '',$
           'TOF DEFAULT VALUES',$
           '',$
           '_useCRUDEdefault=0',$   ; hPa
           '_CRUDEa=7356',$   ;raw a
           '_CRUDEt0=-28190',$   ;raw t0
           '',$
           'TIME INDEX',$
           '',$
           '_StartExperiment=2555',$   ; time in 't09' format
           '_PeriodExperiment=60',$   ; minutes
           '',$
           'CRUDE CALIBRATION',$
           '',$
           '_PeaksToConsider=24',$
           '',$
           'TRANSMISSION ARCHIVE',$
           '',$
           '_UniqueCampaignName=default',$
           '',$
           'UNIFIED MASS LIST',$
           '',$
           '_PeakAnalysis=1',$
           '_DefaultRes=4500',$
           '_Desired_Min_Signal=1.0E6',$   ;counts
           '_Max_Time_Gap=10',$    ;minutes
           '',$
           'PS1 _ peak search',$
           '',$
           '_Min_Mass=10',$   ;Da
           '_SmFact=1',$
           '',$
           
            'PS2 _ unified mass list',$
           '',$
           '_LowThresh=0.05',$   ;Da
           '',$
          
           
           'COMPOUND CLASS',$
           '',$
           '_N_ox_st=-1',$   ;Nitrogen oxidation state
           '',$
           'MassScsale Calibration Parameter Boundaries',$
           '',$
           '_default_a_1000=7800', '_default_a_8000=17300',$
           '_default_t0_1000=-28500', '_default_t0_8000=750',$
           '_exMin=0.49', '_exMax=0.500000015',$
           '',$
           '3-POINT MASS-SCALE-CALIBRATION ',$
           '',$
           '_M1a=21.0221', '_M1b=42.034',$
           '_M2a=59.0491', '_M2b=116.906',$
           '_M3a=203.943', '_M3b=355.0731',$
           '_ForceThroughMaSet=0',$
           '_tol_ppm=300',$ ;acceptable tollerance to find peak
           '',$
           'Define up to 3 ions that are present in all spectra (and maximum allowed deviation from target m/z)',$
           'set to zero if not used',$
           '',$
           '_ION1=21.0221',$
           '_DEV1=0.002',$
         ;  '_ION2=0',$
           '_ION2=59.049',$
           '_DEV2=0.003',$
           '_ION3=0',$
           '_DEV3=0',$
           
              '',$
           'PEAK SHAPE',$
           '',$
           '_MinSig=800',$
           '',$ 
           'MIXING RATIO:',$
           '',$ 
           '_k19=3',$
           '_k37=3',$
           '_m38=1',$
           '',$    
           'Transmission Fit:',$
           '',$ 
           ' _P0=9.1323863212E-02',$
           ' _P1=4.2137768341E-03',$
           ' _P2=-1.3332441405E-5',$
           ' _P3=2.9151001160E-8',$
           ' _P4=-3.4829484108E-11',$
           ' _P5=2.0979046465E-14',$
           ' _P6=-4.9852341527E-18',$
           '',$ 
           'EXPORT OPTIONS:',$
           '',$
           '_ExportOne=0',$
           '_CorrectOverlap=1',$
           '_SaveCsv=1',$
           '_JunkSize=1.0E8',$
           '',$
           'CORRECTIONS:',$
           '',$
           '_DriftCorrection=0',$
           '_CorrectionON=0',$
           '_NonExtendingDeadTime=15',$
           '_ExtendingDeadTime=1.3',$
           '',$
          
           'Custom procedure:',$
           '',$
           '_custprocname=PICAB',$
           '',$
           'ACTRIS GAS STANDARD PROTOCOL:',$
           '',$
           '_ApplyProtocol=0',$
           '_TraceNameMarker=DO1',$
           '_MarkerValue=1',$
           '_Duration=8',$ ;minutes
           '']
 
 if( strmatch(!Version.OS_family,'Windows') eq 1) then begin
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;
;;;;;;;                   WINDOWS Size Parameters here:
;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   
           
           DisplayParameter=[ 'PTRwid  WIDGET ELEMENTS & SIZE',$
          '',$
          '_base_1x=480',  '_base_1y=900',$
          '_base_2x=260',  '_base_2y=900',$;left column
          '_base_4x=250',  '_base_4y=240',$;engineering data, masslist
          '_base_5x=110',  '_base_5y=250',$
          '_base_6x=110',  '_base_6y=250',$
          '_base_7x=200',  '_base_7y=28',$; label 
          '_base_8x=200',  '_base_8y=45', $
          '_base_9x=200',  '_base_9y=30',$
          '_base_10x=200', '_base_10y=24', $
          '_base_11x=200', '_base_11y=30',$
          '_base_12x=210', '_base_12y=700', $; right column
          '_Text_DataDiry=2', '_Text_DestDiry=2', '_List_Filesy=8',  '_List_EngDaty=10',$
          '_Text_Ind1x=40',   '_Text_Ind1x2=40',  '_Text_Ind2x=40',  '_Text_Ind2x2=40', '_Text_logy=30','_Text_infoy=17',$
          '',$
          'ExtendedProc  WIDGET ELEMENTS & SIZE',$
          '',$
          '_EXbase_1x=210',  '_EXbase_1y=96',$
          '',$
          'ProcPTR  WIDGET ELEMENTS & SIZE',$
          '',$
          '_PRbase_1x=290',  '_PRbase_1y=920',$
          '_PRbase_2x=280',  '_PRbase_2y=910',$
          '_PRbase_4x=280',  '_PRbase_4y=320',$
          '_PRbase_5x=140',  '_PRbase_5y=140',$
          '_PRbase_6x=140',  '_PRbase_6y=140',$
          '_PRbase_10x=260',  '_PRbase_10y=36',$
          '_PRwText1=2','_PRwText2=6','_PRwText6=6','_PRlabel=30','_PRdrop=120','_PRtextfield=40',$
          '_PRmassLx=11',  '_PRmassLy=12',  '_PRengLy=12',$
          '',$
          'NewIndex  WIDGET ELEMENTS & SIZE',$
          '',$
          '_NEbase_1x=510',  '_NEbase_1y=715',$
          '_NEbase_2x=500',  '_NEbase_2y=26',$
          '_NEbase_3x=500',  '_NEbase_3y=18',$
          '_NEbase_4x=500',  '_NEbase_4y=24',$
          '_NEbase_5x=500',  '_NEbase_5y=18',$
          '_NEbase_6x=500',  '_NEbase_6y=30',$
          '_NEbase_7x=500',  '_NEbase_7y=30',$
          '_NEbase_8x=500',  '_NEbase_8y=30',$
          '_NEbase_9x=500',  '_NEbase_9y=30',$
          '_NEbase_10x=500',  '_NEbase_10y=18',$
          '_NEbase_11x=500',  '_NEbase_11y=24',$
          '_NElab_1x=20','_NElab_2x=170','_NElab_3x=500','_NElab_4x=120','_NElab_5x=90',$
          '_NElab_6x=80','_NElab_7x=70','_NElab_8x=15','_NElab_9x=60','_NElab_10x=200','_NElab_11x=50',$
          '_NEtxt_1x=7', '_NEtxt_2x=12', '_NEtxt_3x=8', '_NEtxt_1y=1', '_NEtxt_2y=2', $
          '',$
          'IdentPTR  WIDGET ELEMENTS & SIZE',$
          '',$
          '_IDbase_1x=660',  '_IDbase_1y=600',$
          '_IDtxt_1y=2', '_IDtxt_2y=25', $
          '',$
          'FiltPTR  WIDGET ELEMENTS & SIZE',$
          '',$
          '_FIbase_1x=230',  '_FIbase_1y=735',$
          '_FIbase_2x=200',  '_FIbase_2y=25',$
          '_FIbase_3x=200',  '_FIbase_3y=20',$
          '_FItxt_1x=5', '_FItxt_2x=4', '_FItxt_3x=16','_FItxt_4x=7','_FItxt_5x=10',$
          '_FItxt_1y=3', '_FItxt_2y=1','']
  
  endif else begin
  
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;
;;;;;;;                   MAC/LINUX Size Parameters here:
;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

           DisplayParameter=[ 'PTRwid  WIDGET ELEMENTS & SIZE',$
          '',$
          '_base_1x=510',  '_base_1y=740',$
          '_base_2x=240',  '_base_2y=740',$;left column
          '_base_4x=220',  '_base_4y=220',$;engineering data, masslist
          '_base_5x=110',  '_base_5y=220',$
          '_base_6x=110',  '_base_6y=220',$
          '_base_7x=220',  '_base_7y=28',$; label 
          '_base_8x=220',  '_base_8y=45', $
          '_base_9x=220',  '_base_9y=30',$
          '_base_10x=220', '_base_10y=30', $
          '_base_11x=220', '_base_11y=30',$
          '_base_12x=220', '_base_12y=740', $; right column
          '_Text_DataDiry=2', '_Text_DestDiry=2', '_List_Filesy=8',  '_List_EngDaty=15',$
          '_Text_Ind1x=40',   '_Text_Ind1x2=40',  '_Text_Ind2x=40',  '_Text_Ind2x2=40', '_Text_logy=30','_Text_infoy=17',$
          '',$
          'ExtendedProc  WIDGET ELEMENTS & SIZE',$
          '',$
          '_EXbase_1x=210',  '_EXbase_1y=96',$
          '',$
          'ProcPTR  WIDGET ELEMENTS & SIZE',$
          '',$
          '_PRbase_1x=250',  '_PRbase_1y=800',$
          '_PRbase_2x=240',  '_PRbase_2y=800',$
          '_PRbase_4x=240',  '_PRbase_4y=400',$
          '_PRbase_5x=110',  '_PRbase_5y=250',$
          '_PRbase_6x=110',  '_PRbase_6y=250',$
          '_PRbase_10x=210',  '_PRbase_10y=30',$
          '_PRwText1=2','_PRwText2=6','_PRwText6=6','_PRlabel=22','_PRdrop=85','_PRtextfield=40',$
          '_PRmassLx=11',  '_PRmassLy=14',  '_PRengLy=15',$
          '',$
          'NewIndex  WIDGET ELEMENTS & SIZE',$
          '',$
          '_NEbase_1x=1000',  '_NEbase_1y=1000',$
          '_NEbase_2x=690',  '_NEbase_2y=30',$
          '_NEbase_3x=690',  '_NEbase_3y=30',$
          '_NEbase_4x=690',  '_NEbase_4y=30',$
          '_NEbase_5x=690',  '_NEbase_5y=24',$
          '_NEbase_6x=690',  '_NEbase_6y=30',$
          '_NEbase_7x=690',  '_NEbase_7y=30',$
          '_NEbase_8x=690',  '_NEbase_8y=30',$
          '_NEbase_9x=690',  '_NEbase_9y=30',$
          '_NEbase_10x=690',  '_NEbase_10y=18',$
          '_NEbase_11x=690',  '_NEbase_11y=24',$
          '_NElab_1x=20','_NElab_2x=170','_NElab_3x=500','_NElab_4x=240','_NElab_5x=90',$
          '_NElab_6x=120','_NElab_7x=70','_NElab_8x=15','_NElab_9x=60','_NElab_10x=200','_NElab_11x=50',$
          '_NEtxt_1x=12', '_NEtxt_2x=48', '_NEtxt_3x=36', '_NEtxt_1y=1', '_NEtxt_2y=2', $
          '',$
          'IdentPTR  WIDGET ELEMENTS & SIZE',$
          '',$
          '_IDbase_1x=660',  '_IDbase_1y=600',$
          '_IDtxt_1y=2', '_IDtxt_2y=25', $
          '',$
          'FiltPTR  WIDGET ELEMENTS & SIZE',$
          '',$
          '_FIbase_1x=230',  '_FIbase_1y=735',$
          '_FIbase_2x=200',  '_FIbase_2y=25',$
          '_FIbase_3x=200',  '_FIbase_3y=20',$
          '_FItxt_1x=5', '_FItxt_2x=4', '_FItxt_3x=16','_FItxt_4x=7','_FItxt_5x=10',$
          '_FItxt_1y=3', '_FItxt_2y=1','']
  
  
  
    
  endelse
  
         PTRwidpar=transpose([PTRwidParameter,DisplayParameter, 'End of file'])
        
          File_copy,source[0],codefile
          makecsv,parfile,PTRwidpar
          
          
   endif else begin
          PTRwidpar=readcsvstr(parfile)
          log=['PTRwid_'+version+' released '+date,'Parfile loaded']
   endelse
  
    
   mainBS = WIDGET_BASE(/Row ,uname='base_1', XSIZE = getpar('base_1x'), YSIZE = getpar('base_1y'))
        LeftHalf=widget_base(mainBS,/column,uname='base_2',xsize=getpar('base_2x'),ysize=getpar('base_2y'))
              split1=widget_base(LeftHalf,/row,xsize=getpar('base_4x'),ysize=36)
                  Label23=Widget_label(split1,/Align_left,value="Instrument ID:")
                  Drop_0=widget_droplist(split1,uname='Drop_0',event_pro='setdrop0',value=['default',getstr('INST01'),getstr('INST02'),getstr('INST03'), getstr('INST04'),getstr('INST05'),getstr('INST06'),getstr('INST07'),getstr('INST08')])
              Label_1=Widget_label(LeftHalf,/Align_left,uname='label_1', value="Data directory (HDF5 data):")
              Text_DataDir = WIDGET_TEXT(LeftHalf, uname="Text_DataDir", VALUE="click right mouse button to select a HDF5-data directory", /EDITABLE,/ALL_EVENTS, /NO_NEWLINE,/wrap , /CONTEXT_EVENTS, YSIZE = getpar('Text_DataDiry'),uvalue=-9999)
                              base_3= WIDGET_BASE(Text_DataDir,  /CONTEXT_MENU,  UNAME="base_3")
                              But_1 = WIDGET_BUTTON(base_3, uname='But_1', VALUE = 'browse',  EVENT_PRO = 'getDataDir')
                              But_111 = WIDGET_BUTTON(base_3, uname='But_111', VALUE = 'last settings',  EVENT_PRO = 'LoadSet')
              Label_2=Widget_label(LeftHalf,/Align_left,uname='label_2',value="Destination directory:")
              Text_DestDir = WIDGET_TEXT(LeftHalf, uname="Text_DestDir", VALUE="   ",/ALL_EVENTS, /NO_NEWLINE,/wrap , YSIZE = getpar('Text_DestDiry'))
              Label_3=Widget_label(LeftHalf,/Align_left,uname='Label_3', value="File Creation times:",uvalue=CREATE_STRUCT('name1',['']))
              List_Files=WIDGET_LIST(LeftHalf,UNAME = 'List_Files',event_pro="SingleFile",ysize=getpar('List_Filesy'))
              Eng_Mss=widget_base(LeftHalf,/row,uname='base_4',xsize=getpar('base_4x'),ysize=getpar('base_4y'))
                      EngCol=widget_base(Eng_Mss,/column,uname='base_5',xsize=getpar('base_5x'),ysize=getpar('base_5y'))
                              Label_xx=Widget_label(EngCol,/Align_left,uname='Label_xx',uvalue="haha", value="Extract single mass:")
                              Text_xx = WIDGET_TEXT(EngCol, uname='Text_xx',uvalue="haha" ,event_pro="plot_extr", VALUE='0',/EDITABLE)
                              Label_4=Widget_label(EngCol,/Align_left,uname='Label_4', value="Engineering:")
                              List_EngDat=WIDGET_LIST(EngCol,UNAME = 'List_EngDat',event_pro="plot1", ysize=getpar('List_EngDaty'))
                      MssCol=widget_base(Eng_Mss,/column,uname='base_6',xsize=getpar('base_6x'),ysize=getpar('base_6y'))
                              Label_5=Widget_label(MssCol,/Align_left,uname='Label_5', value="Mass peaks:",uvalue=CREATE_STRUCT('masslist',[-9999],'MaxMass',[5]))
                              Drop_1=widget_droplist(MssCol,uname='Drop_1',event_pro='setdrop1',value=['no timeline','residual model','time vs cps', 'time vs ppb'])
                              List_Masses=WIDGET_LIST(MssCol,UNAME = 'List_Masses',event_pro="plot2", ysize=11,xsize=11)
                        Label_6=Widget_label(LeftHalf,/Align_left,uname='Label_6', value="Unified Mass List:")
                      But_2 = WIDGET_BUTTON(LeftHalf, uname='But_2',event_pro='UniMassList',value='Unified Mass List',uvalue=CREATE_STRUCT('PeakLoc',[-9999])) 
              ExpChoice=widget_base(LeftHalf,/row,uname='base_8',xsize=getpar('base_8x'),ysize=getpar('base_8y'))
                    Label_7=Widget_label(ExpChoice,/Align_left,uname='Label_7', value="Data Export:")
                    But_4 = CW_PDMENU(ExpChoice, uname='But_4', ['1\X\selList','0\unified mass list','2\file mass list'], /RETURN_FULL_NAME) 
                    Label_8=Widget_label(ExpChoice, uname='Label_8', value="     unified mass list     ", uvalue='unified mass list')
             But_6 = WIDGET_BUTTON(LeftHalf, uname='But_6', event_pro='export', value='       Export        ')
              IndiChoice=widget_base(LeftHalf,/row,uname='base_10',xsize=getpar('base_10x'),ysize=getpar('base_10y'))
                      Label_9=Widget_label(IndiChoice,/Align_left, uname='Label_9', value="File number (first - last):")
                      Text_Ind1 = WIDGET_TEXT(IndiChoice, uname='Text_Ind1', VALUE='0',/EDITABLE,xsize=getpar('Text_Ind1x'), scr_xsize=getpar('Text_Ind1x2'))
                      Text_Ind2 = WIDGET_TEXT(IndiChoice, uname='Text_Ind2', VALUE='0',/EDITABLE,xsize=getpar('Text_Ind2x'), scr_xsize=getpar('Text_Ind2x2'))
              But_9 = WIDGET_BUTTON(LeftHalf, uname='But_9',event_pro='ExtendedProc', value='       Extended processing      ')
             RightHalf=widget_base(mainBS,/column,uname='base_12',xsize=getpar('base_12x'),ysize=getpar('base_12y'))
                     Text_log = WIDGET_TEXT(RightHalf, uname="Text_log", VALUE=[log],/ALL_EVENTS, /wrap ,/scroll, YSIZE = getpar('Text_logy'))
                     Text_info = WIDGET_TEXT(RightHalf, uname="Text_info", VALUE=[info],/ALL_EVENTS, /wrap ,/scroll, YSIZE = getpar('Text_infoy'))
      button22 = WIDGET_BUTTON(LeftHalf, event_pro=getstr('custprocname'),value='User program (IDL only)',uname='user',uvalue=CREATE_STRUCT('user',[-9999],'pathDAT',['nix'],'pathERR',['nix'],'pathNAM',['nix'],'DAT',[-9999],'ERR',[-9999],'NAM',['nix'])) 
   
  WIDGET_CONTROL, mainBS, /REALIZE
  XMANAGER, 'PTRwid', mainBS, /NO_BLOCK 
END



pro export, event
; called by button 'export'
;this routine retrieves and exports cps and ppb from the specified files (adjust index i in the main loop)
;UNIFIED MASS LIST MUST BE AVAILABLE
; if you want to re-calculate a file, remove the corresponding ppb-file from the destination folder
compile_opt idl2
WIDGET_CONTROL, /HOURGLASS 
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_8'), get_uVALUE= MassListType 
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), GET_VALUE=DestFolder 
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Ind1'), get_VALUE=iFile1
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Ind2'), get_VALUE=iFile2
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Files'), GET_uVALUE=Files
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), get_uVALUE= msss 
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_5'), get_uVALUE= Filepar 
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'label_2'), gET_uVALUE= Names
mist=systime(1)


; if export is called from "export one" pics of the mass spectrum are produced
iFile1=max(long(iFile1))
iFile2=max(long(iFile2))
length=max(size(files,/dimensions))
if(iFile2 gt length-1) then iFile2=length-1
if(iFile2 lt iFile1) then iFile2=iFile1

if(getpar('ExportOne') eq 1) then begin 
      jpeg=1
      iFile2=iFile1
      WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Ind2'), SET_VALUE=string(iFile2, format='(I5)')
endif else jpeg=0


ID=''
if (MassListType eq 'unified mass list') then  ID='UL'
if (MassListType eq 'file mass list') then  ID='FL'
  

; clear lost memory
help,/memory
print, 'heap_gc'
heap_gc
help,/memory

 
if (ID eq 'UL') then begin
        massesUL=readcsv(strjoin([DestFolder,'unifiedmasslist.csv']))
        if(massesUL[0] eq -9999) then begin 
              UniMassList, event
              massesUL=readcsv(strjoin([DestFolder,'unifiedmasslist.csv']))
        endif 
endif


;set tol parameter  
tol=0.05



helpi=1
helpi2=1

CATCH, Error_status 
IF Error_status NE 0 THEN BEGIN 
        if (helpi2 eq 0 ) then   CATCH, /CANCEL
        if (helpi eq 0 ) then helpi2=0
        helpi=0    
ENDIF 

if (helpi2 eq 1) then begin  ; do the regular stuff otherwise prepare QMS files

Name2=names[iFile1+helpi] 
                
if(iFile2-iFile1 gt 0) then  files=files[iFile1+indgen(iFile2-iFile1+1)] else files=files[iFile1]
if(iFile2-iFile1 gt 0) then  names=names[iFile1+indgen(iFile2-iFile1+1)] else names=names[iFile1]

for i=0,iFile2-iFile1 do begin

    ;    missttii=0
    ;    delvar, Sumspec
    ;    print, [var_exists(sumspec),123]
        help,/memory
        ;check if file exits already
        Name1=names[i]
        exists=file_info(strjoin([DestFolder,'Export\',ID,'\ppb\','ppb',Name1,ID,'.fdt'],'')) & exists=exists.exists
        if (jpeg eq 1) then exists=0  ;i.e. if exportOne is selected the files will be overwritten anyway
        if (exists eq 1)then begin
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), gET_VALUE= log
                log=[strjoin(['FILE:  ', Name1,'',ID]),'File index: '+strtrim(string(i+iFile1,Format='(I4)'),2), 'Export data exist already','------------','',log]
                if(max(size(log,/dimensions)) gt 100) then log=log[0:99]
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), sET_VALUE= log
        endif
        if (exists ne 1) then begin      
                NamePar=''
                NameBaseline=''
                exists2=file_info(destfolder+'FileInfo/Time2MassPAR/'+name1+'PAR2.fdt') & exists2=exists2.exists
                if (exists2 eq 1)then NamePar=destfolder+'FileInfo/Time2MassPAR/'+name1+'PAR2.fdt' 
                if (exists2 eq 1)then NameBaseline=destfolder+'FileInfo/Baseline/'+name1+'Baseline.fdt' 
                if (NamePar ne '') then  if (max(readfloat(NamePar)) eq -9999) then NamePar=''
                if (NameBaseline ne '') then   baseline=readfloat(NameBaseline)
                if (NamePar ne '') then begin       
                        par=readfloat(NamePar)
                        a=par[0]
                        t0=par[1]
                        ex=par[2]
                        maxmass=par[3]
                        res=par[8]
                        mode=par[9] 
                        a_init=par[10] 
                        t0_init=par[11]
                endif else begin
                        EngData=getengdata(event,files[i])
                        if(max(sumspec.duration) ne -9999) then begin
                                Filepar=PS1(event,EngData.sumspec, EngData.SampInt, EngData.duration, EngData.cycles, EngData.extractions,destfolder,names[i],EngData.instrument)
                                a_init=Filepar.a
                                t0_init=Filepar.t0
                                if( getpar('DriftCorrection') eq 1) then begin
                                  sumspec=readfloat(destfolder+'FileInfo/Sumspec'+name1+'.fdt')
                                  if(max(sumspec) eq -9999) then begin
                                    haha=getsplit(Files[i])
                                    split=haha.split
                                    misst=LoadCycles(Files[i],haha.locatie,haha.start2[*,0],haha.count[*,0])
                                    DeDri=DeDrift(*misst,a_init,t0_init, EngData.SampInt,-9999,-9999,-9999,-9999,-9999,-9999,split,1)
                                    sumspec=dedri.sumspec
                                    if(split gt 1.5) then for ppp=1,split-1 do begin
                                      misst=LoadCycles(Files[i],haha.locatie,haha.start2[*,ppp],haha.count[*,ppp])
                                      DeDri=DeDrift(*misst,a_init,t0_init, EngData.SampInt,dedri.rest,dedri.maxis,dedri.t1start,dedri.t2start,dedri.m1,dedri.m2,split,ppp+1)
                                      sumspec=sumspec+dedri.sumspec
                                    endfor
                                    makefloat, destfolder+'FileInfo/Sumspec'+name1+'.fdt',sumspec
                                  endif
                                  Filepar=PS1(event,sumspec, EngData.SampInt, EngData.duration, EngData.cycles, EngData.extractions,destfolder,names[i],EngData.instrument)
                             endif
   
                               
                               
                               
                               
                               
                                if(max(Filepar.counts) ne -9999)then  Filepar.counts[where(Filepar.counts gt 0)]=Filepar.counts[where(Filepar.counts gt 0)]/EngData.duration
                                a=Filepar.a
                                t0=Filepar.t0
                                ex=Filepar.ex
                                maxmass=Filepar.maxmass
                                res=Filepar.resolution
                                mode=strpos('H3O+ NO+ O2+',filepar.mode)
                                baseline=Filepar.baseline
                                makefloat, destfolder+'FileInfo/IonList/'+names[i]+'FL2.fdt', Filepar.masslist 
                                makefloat, destfolder+'FileInfo/Time2MassPAR/'+names[i]+'PAR2.fdt', [Filepar.a,Filepar.t0,Filepar.ex,Filepar.maxmass,EngData.SampInt,Filepar.a3,Filepar.t03,Filepar.ex3,Filepar.resolution,strpos('H3O+ NO+ O2+',filepar.mode),a_init,t0_init] 
                                makefloat, destfolder+'FileInfo/PeakShape/'+names[i]+'PeakShape.fdt', Filepar.PeakShape 
                                makefloat, destfolder+'FileInfo/Baseline/'+names[i]+'Baseline.fdt', baseline 
                        endif 
                endelse
                
                
                
                
                if (ID eq 'UL' and var_exists(a) eq 1) then   begin
                        massessUL=massesUL[*,0]
                        exists2=file_info(destfolder+'FileInfo/IonList/'+name1+'FL2.fdt') & exists2=exists2.exists
                        if (exists2 eq 1)then NameMsss=destfolder+'FileInfo/IonList/'+name1+'FL2.fdt' else NameMsss='jjj'
                        if (NameMsss ne '') then msss=readfloat(NameMsss)
                        massessFL=msss[*,0]
                        if (mode eq 0) then begin
                                iUL=where(abs(massessUL-21.0221 ) eq min(abs(massessUL-21.0221 )))
                                iFL=where(abs(massessFL-21.0221 ) eq min(abs(massessFL-21.0221 )))
                                massessUL[iUL[0]]=massessFL[iFL[0]]
                                if(getpar('m38') eq 1) then begin
                                        iUL=where(abs(massessUL-38.0326 ) eq min(abs(massessUL-38.0326 )))
                                        iFL=where(abs(massessFL-38.0326 ) eq min(abs(massessFL-38.0326 )))
                                        massessUL[iUL[0]]=massessFL[iFL[0]]
                                endif else begin
                                        iUL=where(abs(massessUL-39.0327 ) eq min(abs(massessUL-39.0327 )))
                                        iFL=where(abs(massessFL-39.0327 ) eq min(abs(massessFL-39.0327 )))
                                        massessUL[iUL[0]]=massessFL[iFL[0]]
                                endelse
                        endif
                        if (mode eq 5) then begin
                                iUL=where(abs(massessUL-30.994 ) eq min(abs(massessUL-30.994 )))
                                iFL=where(abs(massessFL-30.994 ) eq min(abs(massessFL-30.994 )))
                                massessUL[iUL[0]]=massessFL[iFL[0]]
                                iUL=where(abs(massessUL-47.9966) eq min(abs(massessUL-47.9966 )))
                                iFL=where(abs(massessFL-47.9966 ) eq min(abs(massessFL-47.9966 )))
                                massessUL[iUL[0]]=massessFL[iFL[0]]
                        endif
                        if (mode eq 9) then begin
                                iUL=where(abs(massessUL-33.9935 ) eq min(abs(massessUL-33.9935 )))
                                iFL=where(abs(massessFL-33.9935 ) eq min(abs(massessFL-33.9935 )))
                                massessUL[iUL[0]]=massessFL[iFL[0]]
                        endif
        
                     
                        
                        peakTable=peaktable(massessUL,res)
                endif
                if (ID eq 'FL' and var_exists(a) eq 1) then begin
                        NameMsss=''
                        exists2=file_info(destfolder+'FileInfo/IonList/'+name1+'FL2.fdt') & exists2=exists2.exists
                        if (exists2 eq 1)then NameMsss=destfolder+'FileInfo/IonList/'+name1+'FL2.fdt'
                        if (NameMsss ne '') then msss=readfloat(NameMsss)
                        peakTable=peaktable(msss[*,0],res)
                endif
                
               if(var_exists(a) eq 1) then if(var_exists(maxmass) eq 1) then m_max=min([maxmass-0.3,max(PeakTable[*,0])-0.1]) else m_max=max(PeakTable[*,0])-0.1
                m_min=10.5
                if(NamePar eq '') then missttii=EngData.duration else missttii=111
                if (missttii eq -9999)then begin
                        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), gET_VALUE= log
                        log=[strjoin(['FILE:  ', Name1,'',ID]),'File index: '+strtrim(string(i+iFile1,Format='(I4)'),2), 'Problem reading SumSpec','------------','',log]
                        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), sET_VALUE= log
                endif
                if(var_exists(a) eq 1) then  if (a eq -9999)then begin
                        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), gET_VALUE= log
                        log=[strjoin(['FILE:  ', Name1,'',ID]),'File index: '+strtrim(string(i+iFile1,Format='(I4)'),2), 'Crude cal FAILED','------------','',log]
                        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), sET_VALUE= log
                endif
                if(var_exists(a) eq 1) then  if (missttii ne -9999 and a ne -9999)then begin
                    info=['Start data export:','']
                                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info
   
                        EngData=GetEngData(event,files[i])
                        SingleIonSignal= engdata.SingleIonSignal
                        sampint= engdata.sampint
                        ComputerID=EngData.ComputerID
    
               
                        
                        misst=loadmassrange(Files[i],20.5,20.7,a,t0,ex, SampInt)
                        
                        if ( mean(*misst[0]) eq -9999 or max(engdata.duration) eq -9999)then begin
                                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), gET_VALUE= log
                                log=[strjoin(['FILE:  ', Name1,'',ID]),'File index: '+strtrim(string(i+iFile1,Format='(I4)'),2), 'NOT EXPORTED:','HD5 READ PROBLEM','',log]
                                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), sET_VALUE= log
                        endif
                        if(max(engdata.duration) gt 0 and mean(*misst[0]) ne -9999) then begin
                                cycles=size(*misst,/dimensions)
                                cycles=min(cycles[1])
                                cycles2=cycles
                                sig=total(*misst,1)
                                while(sig[cycles-1] eq 0) do cycles=cycles-1
                                cyc=indgen(cycles)
                                *misst=0
                                SampInt=EngData.SampInt
                                Extractions=EngData.extractions
                                poiscor=EngData.poiscor
                                engdati=engdata.data
                                engdati=engdati[cyc,*]
                                udrift= engdati[*,min(where(strmatch(engdata.names,'Udrift*') eq 1)) ]
                                pdrift= engdati[*,where(strmatch(engdata.names,'p_drift*') eq 1 or strmatch(engdata.names,'p-Drift*') eq 1)]
                                tdrift= 273.15 +engdati[*,WHERE(strmatch(engdata.names,'Drift_Temp*') eq 1 or strmatch(engdata.names,'T-Drift*') eq 1)]
                                pdrift=pdrift[*,0]
                                udrift=udrift[*,0]            
                                tdrift=tdrift[*,0]
                                if(strmatch('VOCUS', EngData.instrument) eq 1) then pdrift= engdati[*,max(WHERE(strmatch(engdata.names,getstr('pdriftVOCUS')) eq 1 ))]
                                if(strmatch('VOCUS', EngData.instrument) eq 1) then tdrift= 273.15 +engdati[*,max(WHERE(strmatch(engdata.names,getstr('tdriftVOCUS')) eq 1 ))]
                                if(strmatch('VOCUS', EngData.instrument) eq 1) then udrift= engdati[*,max(WHERE(strmatch(engdata.names,getstr('udriftVOCUS')) eq 1 ))]               
                              
                                                       
                             
                                 makeCsv, strjoin([DestFolder,'Export/EngData/','EngDataNames',Name1,'.csv'],''), transpose(EngData.names)
            ;                     if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  begin  ; VOCUS  PTR-TOF
             ;                      Pdrift=ProtEngData[*,where(strpos(engnames,'SSQ pressure monitor [mbar]') gt -0.5)] & Pdrift=Pdrift[*,0]
              ;                     Tdrift=ProtEngData[*,where(strpos(engnames,'TOF temp monitor') gt -0.5 )]
               ;                    Udrift=ProtEngData[*,where(strpos(engnames,'Spare 1 monitor [V]') gt -0.5)] & Udrift=Udrift[*,0]-25
                ;                 endif   ; VOCUS  PTR-TOF
                               
                                print, 'engineering data loaded; time =  ', systime(1)-mist
                                info=[info,'Engineering data loaded']
                                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info
            
                                ;create a list of 'masses'and 'deltas'which defines the integration boundaries for each mass peak; save a list with mass names
                                PeakTable2= PeakTable[where(PeakTable[*,0] gt m_min),*] & PeakTable2=PeakTable2[where(PeakTable2[*,0] lt m_max),*]
                                masses=(PeakTable2[*,2]+PeakTable2[*,1])/2
                                if(strmatch('VOCUS', EngData.instrument) eq 1) then begin
                                  filt19=where(abs(masses-19.018) lt 0.01)
                                  delli=(PeakTable2[filt19,2]-PeakTable2[filt19,1])/2.0
                                  PeakTable2[filt19,1]=PeakTable2[filt19,1]-delli
                                  PeakTable2[filt19,2]=PeakTable2[filt19,2]+delli
                                endif
    
                                deltas=PeakTable2[*,2]-PeakTable2[*,1]
                             ;    if(strmatch('VOCUS', EngData.instrument) eq 1) then deltas[where(abs(masses-19.018) lt 0.01)]=deltas[where(abs(masses-19.018) lt 0.01)]*2.0
                                makeCsv,strjoin([DestFolder,'Export/',ID,'/IonList/','MassIDs_',Name1,ID,'.csv'],''),transpose(PeakTable2[*,0]) 
                             
                             
                             
                             
                                ;prepare parameters for reading HDF5
                                Start =floor(m2t(m_min, a, t0, ex,SampInt)) 
                                if(Start lt 0) then Start=0
                                Width = ceil(m2t(m_max, a, t0, ex,SampInt)- Start)
                                timerow=LINDGEN(Width)+Start
                                split=max(ceil(float(Width)*engdata.cycles/getpar('JunkSize')) )
                               
                               
                                
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;     NEW May 2018: Split cycles and not mass spectrum. This allows to load full mass spectra and re-calibration of mass scale
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;










                   ;             NEWNEWNEW=1
                   ;             if(  NEWNEWNEW eq 1) then begin
   if( getpar('DriftCorrection') eq 1) then begin
                                haha=getsplit(Files[i])
                                split=haha.split
                                locatie=haha.locatie
                                start2=haha.start2
                                count=haha.count

                          ;    a_ini=a
                           ;   t0_ini=t0
                              
                                print, split
                               info=[info,'Importing Raw Data in'+string(split,format='(I3)')+' junk(s)']
                              WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info


                               ; !P.MULTI = [0,1,2]
                                ;for ppp=0,split-1 do begin
                                 ;       misst=LoadCycles(Files[i],locatie,start2[*,ppp],count[*,ppp])
                                  ;      if(ppp eq 0) then t1start=-9999 else t1start=dedri.t1start
                                   ;     if(ppp eq 0) then t2start=-9999 else t2start=dedri.t2start
                                    ;    if(ppp eq 0) then m1=-9999 else m1=dedri.m1
                                     ;   if(ppp eq 0) then m2=-9999 else m2=dedri.m2
                                      ;  if(ppp eq 0) then maxis=-9999 else maxis=dedri.maxis
                                       ; if(ppp eq 0) then rest=-9999 else rest=dedri.rest
                                        ;DeDri=DeDrift(*misst,a_ini,t0_ini, SampInt,rest,maxis,t1start,t2start,m1,m2,split,ppp+1)
            ;                            if(ppp eq 0) then sumspec=dedri.sumspec else sumspec=[[sumspec],[dedri.sumspec]]
             ;                           cols=[0,-250,-180,250,200]
              ;                          for aaa=0,ppp do if(aaa eq 0) then  plot, sumspec[25000:30000,aaa] else oplot, sumspec[25000:30000,aaa], color=cols[aaa]
               ;                         print,  'haha'
                ;                 endfor
                  ;               sumCORR=readfloat(destfolder+'FileInfo/Sumspec'+name1+'.fdt')
                 ;                sumORG=engdata.sumspec
                  ;               plot, sumCORR[25000:30000]
                   ;              oplot, sumORG[25000:30000],color=-200
                    ;             Filepar=PS1(event,sumCORR, engdata.SampInt, engdata.duration, engdata.cycles, engdata.extractions,destfolder,names[i],engdata.instrument)
                     ;            if(max(Filepar.counts) ne -9999)then  Filepar.counts[where(Filepar.counts gt 0)]=Filepar.counts[where(Filepar.counts gt 0)]/engdata.duration
                      ;           a=Filepar.a
                       ;          t0=Filepar.t0
                        ;         ex=Filepar.ex
                         ;        maxmass=Filepar.maxmass
                          ;       res=Filepar.resolution
                           ;      mode=strpos('H3O+ NO+ O2+',filepar.mode)
                            ;     baseline=Filepar.baseline
                             ;    makefloat, destfolder+'FileInfo/IonList/'+names[i]+'FL2corr.fdt', Filepar.masslist
                              ;   makefloat, destfolder+'FileInfo/Time2MassPAR/'+names[i]+'PAR2corr.fdt', [Filepar.a,Filepar.t0,Filepar.ex,Filepar.maxmass,engdata.SampInt,Filepar.a3,Filepar.t03,Filepar.ex3,Filepar.resolution,strpos('H3O+ NO+ O2+',filepar.mode)]
                               ;  makefloat, destfolder+'FileInfo/PeakShape/'+names[i]+'PeakShapecorr.fdt', Filepar.PeakShape
                                ; makefloat, destfolder+'FileInfo/Baseline/'+names[i]+'Baselinecorr.fdt', baseline

;
 ;                                msss= Filepar.masslist
  ;                               peakTable=peaktable(msss[*,0],res)
   ;                              ;create a list of 'masses'and 'deltas'which defines the integration boundaries for each mass peak; save a list with mass names
    ;                             PeakTable2= PeakTable[where(PeakTable[*,0] gt m_min),*] & PeakTable2=PeakTable2[where(PeakTable2[*,0] lt m_max),*]
     ;                            masses=(PeakTable2[*,2]+PeakTable2[*,1])/2
      ;                           deltas=PeakTable2[*,2]-PeakTable2[*,1]
       ;                          makeCsv,strjoin([DestFolder,'Export/',ID,'/IonList/','MassIDs_',Name1,ID,'.csv'],''),transpose(PeakTable2[*,0])



                                 for ppp=0,split-1 do begin
                                   misst=LoadCycles(Files[i],locatie,start2[*,ppp],count[*,ppp])
                                    if(ppp eq 0) then t1start=-9999 else t1start=dedri.t1start
                                   if(ppp eq 0) then t2start=-9999 else t2start=dedri.t2start
                                   if(ppp eq 0) then m1=-9999 else m1=dedri.m1
                                   if(ppp eq 0) then m2=-9999 else m2=dedri.m2
                                   if(ppp eq 0) then maxis=-9999 else maxis=dedri.maxis
                                   if(ppp eq 0) then rest=-9999 else rest=dedri.rest

                                   DeDri=DeDrift(*misst,a_init,t0_init, SampInt,rest,maxis,t1start,t2start,m1,m2,split,ppp+1)
                                   rsch=string(indgen(split))
                                   ccc=integrate(dedri.data,baseline, lindgen(max(d(baseline))),masses,deltas,tol,a,t0,ex,fltarr(cycles2)+a,fltarr(cycles2)+t0,fltarr(cycles2)+ex,strjoin([DestFolder,'Export/',ID,'/cps/',Name1,rsch[ppp]],''),jpeg,SampInt,extractions,poiscor,SingleIonSignal)
                                   *misst=0
                                   if(ppp eq 0) then cps=ccc else cps=[[cps],[ccc]]
                                   info=[info,'Junk'+string(ppp+1,format='(I3)')+'  imported']
                                   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info

                                 
                                  endfor
                                  mmaaxx= max(cps[*,0])
                                   ccyy=d(cps)
                                   for ik=1,ccyy[1]-1 do mmaaxx=[mmaaxx, max(cps[*,ik])]
                                   cps=cps[*,where(mmaaxx gt 0)]
                                   engdati=engdati[where(mmaaxx gt 0),*]
      
 
endif else begin
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;    END  NEW May 2018
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              
                               
                               
                               
                               
  ;        OLDOLDOLD=0               
  ;     if(  OLDOLDOLD eq 1) then begin                      
              print, split
              info=[info,'Importing Raw Data in'+string(split,format='(I3)')+' junk(s)']
              WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info
              leng=floor(float(Width)/(split))
              ;read junks of the HDF5 raw data, perform integration of peaks and create a cps-file
              cps=fltarr(1,cycles)
              m_check=0
              for k=0,split-1 do begin
                                         if(k gt 0) then mmi=mma+0.00001 else  mmi=m2t(timerow[0], a, t0, ex,SampInt,/time)
                                         if(timerow[0] eq 0 and k eq 0) then mmi=mmi+2*tol
                                         mma=m2t(timerow[leng*(k+1)-1], a, t0, ex,SampInt,/time)
                                        if (max(where(masses gt mmi and masses le mma)) gt -0.5) then begin
                                                mistm=masses[where(masses gt mmi)] 
                                                mistd=deltas[where(masses gt mmi)]
                                                msses=mistm[where(mistm le mma)]
                                                dltas=mistd[where(mistm le mma)]
                                                if(min(msses-dltas/2) gt mmi) then  tollow=2*tol  else tollow=2*tol+mmi-min(msses-dltas/2)
                                                if(max(msses+dltas/2) lt mma) then  tolhig=2*tol  else tolhig=2*tol+max(msses+dltas/2)-mma
                                                Start2 =floor(m2t(mmi-tollow, a, t0, ex,SampInt)) 
                                                Width2 = ceil(m2t(mma+tolhig, a, t0, ex,SampInt)- Start2)
                                                tmrow=LINDGEN(Width2)+Start2
         
                                                data=LoadMassRange(Files[i],mmi-tollow,mma+tolhig,a,t0,ex,SampInt)
          
                                                if(max(baseline) eq -9999) then baseline1=-9999 else baseline1=baseline[Start2+lindgen(Width2)]
                                                rsch=string(indgen(split))
                                                ccc=integrate(*data,baseline1, tmrow,msses,dltas,tol,a,t0,ex,fltarr(cycles2)+a,fltarr(cycles2)+t0,fltarr(cycles2)+ex,strjoin([DestFolder,'Export/',ID,'/cps/',Name1,rsch[k]],''),jpeg,SampInt,extractions,poiscor,SingleIonSignal)
                                                ccc=ccc[*,cyc]
                                                cps=[(cps),ccc]
                                                *data=0
                                                info=[info,'Junk'+string(k+1,format='(I3)')+'  imported']
                                                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info
                                                m_check=[m_check,msses]  
                                     endif
                                endfor
                                m_check=m_check[1:*]           
                                low_m= where(masses lt min(m_check))
                                high_m=where(masses gt max(m_check))
                                if (max(low_m) gt -0.5) then for qq=0,max(d(low_m))-1 do  cps=[transpose(fltarr(max(d(cyc)))),cps]
                                if (max(high_m) gt -0.5) then for qq=0,max(d(high_m))-1 do  cps=[cps,transpose(fltarr(max(d(cyc))))]
                                print,'data',i+iFile1,'  integrated','    time', systime(1)-mist
                                info=[info,'Data integrated']
                                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info
 ; helpi= max(size(masses,/dimensions))-1 ; aug 2016 long PTR100data
                                 cps=cps[1:*,*]
 ;      endif         ;  (  OLDOLDOLD eq 1)               
   endelse                              
 
 
   engnames=engdata.names

   ;;; GET Engineering DATA Biosphere Oct 2019 to Feb 2020
   if(strpos('Biosphere2019',getstr('UniqueCampaignName')) gt -0.5 ) then begin
     Recur_Pattern = '*B2Stream*'
     LabviewFiles = FILE_SEARCH(DestFolder+'Labview',Recur_Pattern)
     if (max(d(LabviewFiles)) ne 0) then begin
     for rsc2=0,max(d(LabviewFiles))-2 do  begin
       year=float(strmid(LabviewFiles[rsc2],max(strpos(LabviewFiles[rsc2],'B2Stream'))+10,4))
       month=float(strmid(LabviewFiles[rsc2],max(strpos(LabviewFiles[rsc2],'B2Stream'))+14,2))
       day=float(strmid(LabviewFiles[rsc2],max(strpos(LabviewFiles[rsc2],'B2Stream'))+16,2))
       hour=float(strmid(LabviewFiles[rsc2],max(strpos(LabviewFiles[rsc2],'B2Stream'))+19,2))
       minute=float(strmid(LabviewFiles[rsc2],max(strpos(LabviewFiles[rsc2],'B2Stream'))+21,2))
       second=float(strmid(LabviewFiles[rsc2],max(strpos(LabviewFiles[rsc2],'B2Stream'))+23,2))
       year2=float(strmid(LabviewFiles[rsc2+1],max(strpos(LabviewFiles[rsc2+1],'B2Stream'))+10,4))
       month2=float(strmid(LabviewFiles[rsc2+1],max(strpos(LabviewFiles[rsc2+1],'B2Stream'))+14,2))
       day2=float(strmid(LabviewFiles[rsc2+1],max(strpos(LabviewFiles[rsc2+1],'B2Stream'))+16,2))
       hour2=float(strmid(LabviewFiles[rsc2+1],max(strpos(LabviewFiles[rsc2+1],'B2Stream'))+19,2))
       minute2=float(strmid(LabviewFiles[rsc2+1],max(strpos(LabviewFiles[rsc2+1],'B2Stream'))+21,2))
       second2=float(strmid(LabviewFiles[rsc2+1],max(strpos(LabviewFiles[rsc2+1],'B2Stream'))+23,2))
       t09loc = JULDAY(Month, Day, Year, Hour, Minute, Second)-Julday(1,1,2009,0,0,0)+7.0/24.0 ; 7 stunden zeitverschiebung zu UTC
       t09loc2 = JULDAY(Month2, Day2, Year2, Hour2, Minute2, Second2)-Julday(1,1,2009,0,0,0)+7.0/24.0
       if(min(range(engdati[*,0])) gt t09loc and min(range(engdati[*,0])) le t09loc2) then begin
         Logfile=readcsvstr(LabviewFiles[rsc2],/long,/variable)
         year=strmid(logfile[*,0],0,4)
         month=strmid(logfile[*,0],5,2)
         day=strmid(logfile[*,0],8,2)
         hour=strmid(logfile[*,0],11,2)
         minute=strmid(logfile[*,0],14,2)
         second=strmid(logfile[*,0],17,2)
         timerow= JULDAY(Month, Day, Year, Hour, Minute, Second)-Julday(1,1,2009,0,0,0)+7.0/24.0
         logfile[where(strpos(logfile[*,1],'C') gt -0.5),1]='-1'
         codeNUM=float(logfile[*,1])
         codeNUMcham=float(logfile[*,1])
         codeSTR=logfile[*,2]
         while (max(range(engdati[*,0]))gt t09loc2) do begin
           Logfile=readcsvstr(LabviewFiles[rsc2+1],/long,/variable)
           year=strmid(logfile[*,0],0,4)
           month=strmid(logfile[*,0],5,2)
           day=strmid(logfile[*,0],8,2)
           hour=strmid(logfile[*,0],11,2)
           minute=strmid(logfile[*,0],14,2)
           second=strmid(logfile[*,0],17,2)
           timerow= [timerow,JULDAY(Month, Day, Year, Hour, Minute, Second)-Julday(1,1,2009,0,0,0)+7.0/24.0]
           logfile[where(strpos(logfile[*,1],'C') gt -0.5),1]='-1'
           codeNUM=[codeNUM, float(logfile[*,1])]
           codeNUMcham=[codeNUMcham, float(logfile[*,1])]
           codeSTR=[codeSTR, logfile[*,2]]
           t09loc2=max(timerow)
           rsc2=rsc2+1
         endwhile


         print, 'hallo'
       endif
     endfor
 codeNUMcham=codeNUMcham-codeNUMcham


fi=where(strpos(codeSTR,'BL2') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=1
fi=where(strpos(codeSTR,'A03') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=2
fi=where(strpos(codeSTR,'A14') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=3
fi=where(strpos(codeSTR,'CF3') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=4
fi=where(strpos(codeSTR,'CF4') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=5
fi=where(strpos(codeSTR,'CF5') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=6
fi=where(strpos(codeSTR,'HR1') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=7
fi=where(strpos(codeSTR,'HR2') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=8
fi=where(strpos(codeSTR,'HR3') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=9
fi=where(strpos(codeSTR,'PA3') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=10
fi=where(strpos(codeSTR,'PA4') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=11
fi=where(strpos(codeSTR,'PA7') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=12
fi=where(strpos(codeSTR,'PI1') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=13
fi=where(strpos(codeSTR,'PI2') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=14
fi=where(strpos(codeSTR,'PI3') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=15
fi=where(strpos(codeSTR,'PI4') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=16
fi=where(strpos(codeSTR,'PD1') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=17
fi=where(strpos(codeSTR,'PD2') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=18
fi=where(strpos(codeSTR,'PD4') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=19
fi=where(strpos(codeSTR,'CP1') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=20
fi=where(strpos(codeSTR,'HE1') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=21
fi=where(strpos(codeSTR,'HC1') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=22
fi=where(strpos(codeSTR,'CCU') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=23
fi=where(strpos(codeSTR,'LCU') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=24

fi=where(strpos(codeSTR,'S7-CH1') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=1.5
fi=where(strpos(codeSTR,'S7-CH2') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=2.5
fi=where(strpos(codeSTR,'S7-CH3') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=3.5
fi=where(strpos(codeSTR,'S7-CH4') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=4.5
fi=where(strpos(codeSTR,'S7-CH5') gt -0.5) & if(max(fi) gt -0.5) then codeNUMcham[fi]=5.5

engdati[*,where(strpos(engnames,'DO4') gt -0.5)]=interpol(codenum,timerow,reform(engdati[*,0]))
engnames[where(strpos(engnames,'DO4') gt -0.5)]='codeNUM     '
engdati[*,where(strpos(engnames,'DO3') gt -0.5)]=interpol(codenumcham,timerow,reform(engdati[*,0]))
engnames[where(strpos(engnames,'DO3') gt -0.5)]='codeNUMcham     '

endif

     print, 'hallo'
     print, 'hallo'

   endif


   makeFloat, strjoin([DestFolder,'Export/EngData/','EngData',Name1,'.fdt'],''), engdati
  ; if(getpar('SaveCsv') eq 1) then MakeCsv,strjoin([DestFolder,'Export/EngData/','EngData',Name1,'.csv'],''),engdati
   if(getpar('SaveCsv') eq 1) then begin
     lis=['',engnames]
     hed=strarr(max(d(lis)))
     hed[0]='Engineering data; 2nd row: names; 1st column: timerow [days since 1.1.2009]'
     timrow=string(engdati[*,0],format='(D14.8)')
     str=[transpose(timrow),transpose(string(engdati))]
     str=[[hed],[lis],[str]]
     
     
     MakeCsv,strjoin([DestFolder,'Export/EngData/','EngData',Name1,'.csv'],''),str


   endif

   
   
   
   print, 'engineering data  saved; time =  ', systime(1)-mist
   info=[info,'Engineering data saved']
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info

 
 
  

 
 
                              ;  cps=cps[1:helpi,*] ; aug 2016 long PTR100data
                                if( strmatch(engdata.instrument,'TOF1000') ne 1) then cps=cps*engdata.cycles/engdata.duration
                                MakeFloat,strjoin([DestFolder,'Export/',ID,'/cps/','cps',Name1,ID,'.fdt'],''),cps
                           
                           
                           
                           
                           
                              print,'cps.fdt',i+iFile1,'  saved','    time', systime(1)-mist
                               
                                if(getpar('SaveCsv') eq 1) then begin
                                        lis=['',string(PeakTable2[*,0],format='(F9.3)')]
                                        hed=strarr(max(d(lis)))
                                        hed[0]='Integrated signal [counts per second; cps]; 2nd row: m/z; 1st column: timerow [days since 1.1.2009]'
                                        timrow=string(engdati[*,0],format='(D14.8)')
                                        str=[transpose(timrow),string(cps[*,lindgen(max(d(timrow)))])]
                                        str=[[hed],[lis],[str]]
                                        MakeCsv,strjoin([DestFolder,'Export/',ID,'/cps/','cps',Name1,ID,'.csv'],''),str
                                        
                                        
                                endif
                                print,'cps.csv',i+iFile1,'  saved','    time', systime(1)-mist
                                 info=[info,'File saved: cps']
                                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info
  
                                if(getpar('CorrectOverlap') eq 1) then begin
                                        misss=name1
                                        corrcps=overlap(masses,cps,misss,destfolder)
                                        MakeFloat,strjoin([DestFolder,'Export/',ID,'/cps/OCorr/','corrcps',Name1,ID,'.fdt'],''),corrcps
                                        if(getpar('SaveCsv') eq 1) then begin
                                                lis=['',string(PeakTable2[*,0],format='(F9.3)')]
                                                hed=strarr(max(d(lis)))
                                                hed[0]='Integrated signal corrected for overlapping peaks [counts per second; cps]; 2nd row: m/z; 1st column: timerow [days since 1.1.2009]'
                                                timrow=string(engdati[*,0],format='(D14.8)')
                                                str=[transpose(timrow),string(corrcps[*,lindgen(max(d(timrow)))])]
                                                str=[[hed],[lis],[str]]
                                                MakeCsv,strjoin([DestFolder,'Export/',ID,'/cps/OCorr/','corrcps',Name1,ID,'.csv'],''),str
                                        endif
                                        print,'corrcps',i+iFile1,'  saved','    time', systime(1)-mist
                                        info=[info,'File saved: corrcps']
                                        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info
                                
                                endif
                                
                                
                                
                                
                                ; fix if engineering data and raw TOF data do not contain the same number of cycles
                                l2= max(size(pdrift,/dimensions))
                                if(cycles ne l2) then begin
                                        print, 'WARNING: mismatch length engineering and tof data', l2,cycles 
                                        if(cycles gt l2) then begin
                                                for kkk=1,cycles-l2 do begin
                                                        udrift=[udrift,mean(udrift)]
                                                        pdrift=[pdrift,mean(pdrift)]
                                                        tdrift=[tdrift,mean(tdrift)]
                                                endfor
                                        endif else begin
                                                udrift=udrift[0,cycles-1]
                                                pdrift=pdrift[0,cycles-1]
                                                tdrift=tdrift[0,cycles-1]
                                        endelse
                                endif
                                ; compute and save ppb data
                                
                                Prim=getPrimIons(masses,cps,mode)
                                ppb=calcppb( cps, masses,Prim.A, Prim.B,pdrift,udrift,tdrift,min(engdati[0]))
                         
                                               
                                MakeFloat,strjoin([DestFolder,'Export/',ID,'/ppb/','ppb',Name1,ID,'.fdt'],''),ppb
                                if(getpar('SaveCsv') eq 1) then begin
                                        lis=['',string(PeakTable2[*,0],format='(F9.3)')]
                                        hed=strarr(max(d(lis)))
                                        hed[0]='Volume mixing ratio [nmol/mol; ppb]; 2nd row: m/z; 1st column: timerow [days since 1.1.2009]'
                                        timrow=string(engdati[*,0],format='(D14.8)')
                                        str=[transpose(timrow),string(ppb)]
                                        str=[[hed],[lis],[str]]
                                        MakeCsv,strjoin([DestFolder,'Export/',ID,'/ppb/','ppb',Name1,ID,'.csv'],''),str
                                endif
                                info=[info,'File saved: ppb']
                                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info
    
                              
                                if(getpar('CorrectOverlap') eq 1) then begin
                                        corrppb=calcppb( corrcps, masses,Prim.A, Prim.B,pdrift,udrift,tdrift,min(engdati[0]))
                                        MakeFloat,strjoin([DestFolder,'Export/',ID,'/ppb/OCorr/','corrppb',Name1,ID,'.fdt'],''),corrppb
                                        if(getpar('SaveCsv') eq 1) then begin
                                                lis=['',string(PeakTable2[*,0],format='(F9.3)')]
                                                hed=strarr(max(d(lis)))
                                                hed[0]='Volume mixing ratio corrected for overlapping peaks [nmol/mol; ppb]; 2nd row: m/z; 1st column: timerow [days since 1.1.2009]'
                                                timrow=string(engdati[*,0],format='(D14.8)')
                                                str=[transpose(timrow),string(corrppb)]
                                                str=[[hed],[lis],[str]]
                                                MakeCsv,strjoin([DestFolder,'Export/',ID,'/ppb/OCorr/','corrppb',Name1,ID,'.csv'],''),str
                                        endif
                                        info=[info,'File saved: corrppb']
                                        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info
                                endif
                                print,'ppb',i+iFile1,'  calculated & saved','    time', systime(1)-mist
                              
                                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), gET_VALUE= log
                                log=[strjoin(['FILE:  ', Name1,'',ID]),'File index: '+strtrim(string(i+iFile1,Format='(I4)'),2), 'EXPORT successful', 'processing time: '+strtrim(string( systime(1)-mist,Format='(I6)'),2)+'s','------------','',log]
                                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), sET_VALUE= log
                                info=[info,'','Export complete']
                                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info
                         
                        endif
                endif
        endif
;print, missttii
;print, var_exists(sumspec)
 endfor

endif else begin  ; prepare QMS files
  cps=transpose(readcsv(files,/semicolon,/decimalcomma))
  cps=cps[1:*,1:*]
 cps2=transpose(readcsv(files,/semicolon,/decimalcomma,/returnstring))
 
 poscomma=strpos(cps2[1:*,0],'.')
 masses=cps2[1:*,0]
 for i=0,max(d(poscomma))-1 do masses[i]= strmid(masses[i],poscomma[i]-3,7)
 zeit09=cps2[0,1:*]
 start=t09(zeit09[0],/format6)
 ende=t09(zeit09[max(d(zeit09))-1],/format6)
 step=(ende-start)/max(d(zeit09))
 engdata=dblarr(max(d(zeit09)))
  for i=0,max(d(zeit09))-1 do engdata[i]=start+step*i
  
  pdrift=engdata-engdata+2.3
  H2Oscc=engdata-engdata+5
  Udrift=engdata-engdata+600
  Udx=engdata-engdata+30
  Tdrift=engdata-engdata+25
  FCinlet=engdata-engdata+50
  PC=engdata-engdata+280
engdata=[[engdata],[pdrift],[H2Oscc],[Udrift],[Udx],[Tdrift],[FCinlet],[PC]]
  
  
  
 engdatanames=["t09","p-Drift","H2O scc","Udrift","Udx","T-Drift","FCinlet","PC mba"]
 
print, 'hallo'

endelse
 
  if ( getpar('ApplyProtocol') eq 1) then begin
   Fha2o=[0,0,0]
   S_val=fltarr(23)          
   Serr_val=fltarr(23)          
   S_val2=fltarr(23)          
   Serr_val2=fltarr(23)          
   
   
   
  if (helpi2 eq 1) then begin 
   
          Namearker=getstr('TraceNameMarker')
        MarkerValue=getpar('MarkerValue')
        DurationProtocol=getpar('Duration')
       engdata=readFloat(strjoin([DestFolder,'Export/EngData/','EngData',Name1,'.fdt'],''))
      engdatanames=readCsvstr(strjoin([DestFolder,'Export/EngData/','EngDataNames',Name1,'.csv'],''))
      cps=readFloat(strjoin([DestFolder,'Export/',ID,'/cps/','cps',Name1,ID,'.fdt'],''))
      masses=readcsv(DestFolder+'Export/'+ID+'/IonList/'+'MassIDs_'+ Name1 + ID + '.csv')
       RelTime=(engdata[*,0]- min(engdata[*,0]))*24*60
   
   endif
    
CATCH, Error_status 
IF Error_status NE 0 THEN BEGIN 
              PRINT, 'Error index: ', Error_status 
              PRINT, 'Error message: ', !ERROR_STATE.MSG 
              PRINT, 'LOADING CSV FILES'
 
      cps=readcsv(strjoin([DestFolder,'Export/',ID,'/cps/','cps',Name1,ID,'.csv'],''))
      cps=transpose(cps[2:*,1:*])
         engdata=readFloat(strjoin([DestFolder,'Export/EngData/','EngData',Name1,'.fdt'],''))
        engdata2=readFloat(strjoin([DestFolder,'Export/EngData/','EngData',Name2,'.fdt'],''))
   engdata=[engdata,engdata2]
      CATCH, /CANCEL 
ENDIF 
 
   
      
      SS1=ActrisProtocol(DestFolder, files,cps,masses,engdata,engdatanames)
                      Fha2o=[[Fha2o],[SS1.Fptr]]
                    S_val=[[S_val],[SS1.S_val]]
                    Serr_val=[[Serr_val],[SS1.Serr_val]]
                ;    S_val2=[[S_val2],[SS1.S_val2]]
                 ;   Serr_val2=[[Serr_val2],[SS1.Serr_val2]]
      
      
      
      
      
      
        
   endif
 




print, 'fertig'

end
 
 

          
PRO ExtendedProc, event
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), GET_VALUE=path 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), GET_uVALUE=lib 
 
  if(strpos(path,'w_data') lt -0.5) then path='click the right mouse button to select "w_data" directory'
  base = WIDGET_BASE(/column, XSIZE = getpar('EXbase_1x'), YSIZE = getpar('EXbase_1y'), RESOURCE_NAME = 'Extended Processing')
            buti1 = WIDGET_BUTTON(base,event_pro='ProcPTR', value='Average and Merge Data',uname='Buti1',uvalue=path) 
            buti2 = WIDGET_BUTTON(base,event_pro='IdentPTR', value='Attribute Forulas',uname='Buti2',uvalue=lib) 
            buti3 = WIDGET_BUTTON(base,event_pro='FiltPTR', value='Filter samples',uname='Buti3') 
        WIDGET_CONTROL, base, /REALIZE
  XMANAGER, 'ExtendedProc', base, /NO_BLOCK
 print, buti1
 print, buti2
END
    


PRO getDataDir, event
 compile_opt idl2
  COMPILE_OPT hidden
  Path=''
  ; Prompt for path to catalog files 
  Path=dialog_pickfile( TITLE='Select directory BBB', /DIRECTORY )
  Path2=path+'w_data/'
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), SET_VALUE= Path2
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Drop_1'), SET_uVALUE= 0
  print, "fileinfo"
  miist=file_info(path2)
  print, miist.directory
  if (miist.directory eq 0) then begin 
          FILE_MKDIR, path2
     ;     FILE_MKDIR, path2+'FL'
     ;     FILE_MKDIR, path2+'temp'
          FILE_MKDIR, path2+'Export'
          FILE_MKDIR, path2+'Export/EngData'
          FILE_MKDIR, path2+'Export/FL'
          FILE_MKDIR, path2+'Export/FL/CPS'
          FILE_MKDIR, path2+'Export/FL/CPS/OCorr'
          FILE_MKDIR, path2+'Export/FL/IonList'
          FILE_MKDIR, path2+'Export/FL/PPB'
          FILE_MKDIR, path2+'Export/FL/PPB/OCorr'
          FILE_MKDIR, path2+'Export/UL'
          FILE_MKDIR, path2+'Export/UL/CPS'
          FILE_MKDIR, path2+'Export/UL/CPS/OCorr'
          FILE_MKDIR, path2+'Export/UL/IonList'
          FILE_MKDIR, path2+'Export/UL/PPB'
          FILE_MKDIR, path2+'Export/UL/PPB/OCorr'
          FILE_MKDIR, path2+'FileInfo'
          FILE_MKDIR, path2+'FileInfo/Baseline'
          FILE_MKDIR, path2+'FileInfo/IonList'
          FILE_MKDIR, path2+'FileInfo/PeakShape'
          FILE_MKDIR, path2+'FileInfo/Time2MassPAR'
          FILE_MKDIR, path2+'temp'
endif
  if (path NE '') then begin
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), SET_VALUE= path
          WIDGET_CONTROL,  WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Files'), SET_VALUE= ''
          Files=Filelist(event,path)
          num=string(indgen(max(size(Files.disp,/dimensions))),format='(I4)')+':  '
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Files'), SET_VALUE= num+Files.disp
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_xx'), SET_uVALUE= num+Files.disp
 
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Files'), SET_uVALUE= Files.path
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'label_2'), SET_uVALUE= Files.disp
          mmist=file_info('C:/PTRwid/')
          if (mmist.directory eq 0) then FILE_MKDIR, 'C:/PTRwid/'
          makeCsv, 'C:/PTRwid/LastWidgetSettings.csv', transpose([path,path2,string(0)])
 
 
  endif
END
 
 

pro LoadSet,event
;called by button 'load last settings'
; loads last saved settings
    file='C:/PTRwid/LastWidgetSettings.csv'
    OPENR, lun, file, /GET_LUN
    data = STRARR(FILE_LINES(file))
    READF, lun, data
    Free_Lun, lun
    datadir=Data[0]
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), SET_VALUE= datadir
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), SET_VALUE=Data[1] 
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Drop_1'), set_uVALUE= uint(Data[2])
path2=Data[1]
 miist=file_info(path2)
  print, miist.directory
  if (miist.directory eq 0) then begin 
          FILE_MKDIR, path2
     ;     FILE_MKDIR, path2+'FL'
     ;     FILE_MKDIR, path2+'temp'
          FILE_MKDIR, path2+'Export'
          FILE_MKDIR, path2+'Export/EngData'
          FILE_MKDIR, path2+'Export/FL'
          FILE_MKDIR, path2+'Export/FL/CPS'
          FILE_MKDIR, path2+'Export/FL/CPS/OCorr'
          FILE_MKDIR, path2+'Export/FL/IonList'
          FILE_MKDIR, path2+'Export/FL/PPB'
          FILE_MKDIR, path2+'Export/FL/PPB/OCorr'
          FILE_MKDIR, path2+'Export/UL'
          FILE_MKDIR, path2+'Export/UL/CPS'
          FILE_MKDIR, path2+'Export/UL/CPS/OCorr'
          FILE_MKDIR, path2+'Export/UL/IonList'
          FILE_MKDIR, path2+'Export/UL/PPB'
          FILE_MKDIR, path2+'Export/UL/PPB/OCorr'
          FILE_MKDIR, path2+'FileInfo'
          FILE_MKDIR, path2+'FileInfo/Baseline'
          FILE_MKDIR, path2+'FileInfo/IonList'
          FILE_MKDIR, path2+'FileInfo/PeakShape'
          FILE_MKDIR, path2+'FileInfo/Time2MassPAR'
          FILE_MKDIR, path2+'temp'
 endif
  
  Files=Filelist(event, datadir)
  num=string(indgen(max(size(Files.disp,/dimensions))),format='(I4)')+':  '
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Files'), SET_VALUE= num+Files.disp
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Files'), SET_uVALUE= Files.path
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'label_2'), SET_uVALUE= Files.disp
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_xx'), SET_uVALUE= num+Files.disp

 
end
 
 
 
 
pro plot1,event
DEVICE, DECOMPOSED = 0 
loadct,38
; color tabble No. 31:
; black 16
; white 239
; red 28
; light red 140
; magenta 31
; purple 43
; blue 3
; light blue 179
; dark blue 50
; cyan 211
;light cyan= 251
; green 176
; light green 224
; dark green 144
; brown 8
; grey 187


  ;called by click on a engineering dataset
  ;plots engineering dataset
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_EngDat'), GET_uVALUE= EngData
  !P.MULTI = [0,1,1] 
  i=event.index
  dim=size(EngData.data,/dimensions)
  mist=indgen(dim[0])
  plot, mist,  EngData.data[*,i], /YNOZERO,  PSYM = 4, XTITLE='Cycles', YTITLE=EngData.names[i] , color=0, background=-1
  xyouts,0.15,0.9,/normal,EngData.names[i], color=5, charsize=2,charthick=3
  
end


pro plot2,event

compile_opt idl2
  DEVICE, DECOMPOSED = 0 
     !x.oMARGIN=[0,0]
    !Y.MARGIN = [4, 2]
 
  loadct,31
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), GET_uVALUE= msslst
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), GET_uVALUE=lib 
  
  if (max(lib) eq -9999) then  begin 
          lib=masslib(/extended)
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), sET_uVALUE=lib
  endif
  
  
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), GET_VALUE=DestDir 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_EngDat'), GET_uVALUE=EngData 
  if(var_exists(EngData) gt 0) then SampInt=EngData.sampint else begin
      WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Files'), GET_uVALUE=Files
      Sumspec=getengdata(event,files[0])
      SampInt=Sumspec.sampint
  endelse
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;   Unified mass list mDa-bin scale  evaluation
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
  ; check whether values are from "unified mass list" (integer masses starting at 0) or a masslist from an individual file
  if(min(msslst) eq 1) then begin  ;unified mass list
          i=event.index-1
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'But_2'), gET_uVALUE= UniList
          masslist=unilist.peakloc
          sigmalist=UniList.PeakWidth
          y=UniList.PeakCountsPERppmBINS
          ysm=smooth(y,5)
          x=UniList.PpmBINscale
          mass=masslist[i]
          sigm=sigmalist[i]
          filter=where(x gt mass-0.15 and x lt mass+0.15)
          x1=x[filter]
          y1=y[filter]
          filter=where(abs(x-mass) eq min(abs(x-mass)))
          filter=lindgen(11)-5+max(filter)
          x2=x[filter]
          y2=y[filter]
          y2sm=ysm[filter]
          if(max(y2)le 10 ) then  begin
                  r=gaussfit(x2,y2, nterms=3,coeff) 
                  str='P3'
          endif else begin 
                  r=gaussfit(x2,y2+0.0001, coeff)
                  str='P6'
          endelse
          if(coeff[0] lt 0 or coeff[0] gt max(y2)*3 or 1e6*abs(coeff[2])/mass lt 5 or  max(y2)le 5 ) then begin
                  r=gaussfit(x2,y2sm, nterms=3,coeff)
                  str='P3, SM5'
          endif    
          sig1='sigma ='+string(1000*abs(coeff[2]),format='(f4.1)')+ ' mDa'
          sig2=' (i.e. '+string(1e6*coeff[2]/mass,format='(I3)')+' ppm)'
          x3=min(x2)+findgen(100)*(max(x2)-min(x2))/100
          z=(x3-coeff[1])/coeff[2]
          coeff=[coeff,0,0,0]
          yy=coeff[0]*exp((-z^2)/2)+coeff[3]+coeff[4]*x3+coeff[5]*x3^2
          !P.MULTI = [0,1,1]   
          loadct,38
          plot,x1,y1,psym=4,  XTITLE='bin mass scale [Da] (bin size: max of 8 ppm or 1mDa)', YTITLE='# of Files with peak in bin' , color=0, background=-1, charsize=1.5, charthick=2,thick=3, yrange=[0,max(y1)*1.2]
          loadct,31
          oplot,[mass-coeff[2],mass-coeff[2]],[max(y1)*1.05,max(y1)*1.2],thick=1,color=28
          oplot,[mass+coeff[2],mass+coeff[2]],[max(y1)*1.05,max(y1)*1.2],thick=1,color=28
          oplot,[mass-2*coeff[2],mass-2*coeff[2]],[max(y1)*1.05,max(y1)*1.2],thick=1,color=51
          oplot,[mass+2*coeff[2],mass+2*coeff[2]],[max(y1)*1.05,max(y1)*1.2],thick=1,color=51
          oplot, x1, y1, thick=3, color=16
          oplot, x3,yy,color=28, thick=4 ;gaussfit
          oplot, x1, y1, thick=3, color=16,psym=4
          oplot,x2,y2,psym=4, color=28, thick =3
          xyouts,mean(x2),max(y2)+max(y1)*0.025,str,color=24, charsize=1.5,charthick=2
          xyouts, mass-0.15,max(y1)*1.11,strjoin(['m/z:',string(mass,Format='(F8.3)')],'   '),color=16,charthick=2, charsize=1.5
          match=match(mass,lib)
          xyouts, mass-0.15,max(y1)*1.03,'closest matches, dm [mDa]:',color=16,charthick=2, charsize=1.5
          for r=0,8 do begin
                mis=match(mass+match.devi[r]/1000,lib)
                kleur=16
                if (abs(match.devi[r])/1000 lt 2*coeff[2]) then kleur=51
                if (abs(match.devi[r])/1000 lt coeff[2]) then kleur=28
                xyouts, mass-0.15,max(y1)*(0.98-0.04*r),strjoin([string(match.devi[r],format='(F6.1)'),mis.formula],'  '),color=kleur,charthick=2, charsize=1.2
                oplot, [mass+match.devi[r]/1000,mass+match.devi[r]/1000],[(max(y1)*0.97),(max(y1)*1.03)]/0.9,color=kleur,thick=2
          endfor
          xyouts, mass-0.15,max(y1)*0.60,sig1,charthick=2,color=28, charsize=1.5
          xyouts, mass-0.15,max(y1)*0.56,sig2,charthick=2,color=28, charsize=1.5
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= ''
  
  endif
 
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;   END
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;   PeakCountPERmDa evaluation
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
  if(min(msslst) eq 0) then begin  ;PeakCountPERmDa evaluation
          ;plot for unified mass list
          i=event.index
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'But_2'), gET_uVALUE= UniList
          y=UniList.PeakCountsPERppmBINS
          x=UniList.PpmBINscale
          ysm=smooth(y,5)
          dysm=deriv(x,ysm)  
          filter=where(x gt i-0.4 and x lt i+0.6)
          if(min(filter) gt -0.5) then begin 
                  x1=x[filter]
                  y1=y[filter] ;raw data 'PeakCountsPERmDA'
                  ysm=ysm[filter]
                  dysm=dysm[filter]
                  filter=where((UniList.PeakLoc-min(x1)lt 1) and (UniList.PeakLoc-min(x1) gt 0))
                  if(min(filter) gt -0.5) then begin 
                          xpeaks=UniList.PeakLoc[filter] 
                          xpeaksDer=UniList.PeakLocDer[filter] 
                          sigma=UniList.PeakWidth[filter] 
                          ymax=UniList.PeakHeight[filter] 
                  endif else begin 
                          xpeaks=0
                          sigma=0
                          ymax=0
                  endelse
                  fwhm=sigma*2*SQRT(2*ALOG(2))
         
               
                  print, 'mass   (Da)', xpeaks
                  print, 'fwhm   (mDa)',  fwhm*1000
                  print,'ymax (#files)',  ymax
                  print, 'accur. (ppm)',1E6*sigma/xpeaks
                  print, 'area (#files)',ymax*sigma*1000*2*SQRT(2*ALOG(2))
                 
                 info=['Peaks added to UnigfiesMassList:','',strjoin(['mass   (Da)', string(xpeaks,format='(F9.3)')]),strjoin(['fwhm   (mDa)', string(fwhm*1000,format='(F9.1)')]),strjoin(['ymax (#files)', string(ymax,format='(I9)')]),strjoin(['accur. (ppm)', string(1E6*sigma/xpeaks,format='(I9)')]),strjoin(['area (#files)', string(ymax*sigma*1000*2*SQRT(2*ALOG(2)),format='(I9)')])]
      
      
      
                   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info
  
                  !P.MULTI = [0,1,1] 
                  len=max(size(y1,/dimensions))
                  if( max(y1[0:floor(len/3)]) lt 3) then inXr=floor(len/3)+1 else inXr=0
                  if( max(y1[floor(2*len/3):len-1]) lt 3) then inXr2=floor(2*len/3)+1 else inXr2=len-1
                  loadct,38
                  plot, x1,y1,yrange=[0,max([20,2*y1])],xrange=[x1[inXr],x1[inXr2]],title=total(y1), color=0, background=-1, charsize=2, charthick=3, ytitle='# of peak detections in mDa-bin', xtitle='m/z'
                  loadct,31
                  if(max(y1) lt 80) then for i=1,floor(max([20,2*y1])) do oplot,[min(x1),max(x1)],[i,i], color=187
                  oplot, x1,y1, color=16 ;black
                  oplot, x1,dysm/300+max([15,y1*1.4]),color=28 ;red
                  oplot, x1,ysm+max([15,y1*1.4]),color=50  ;blue
                  oplot, x1,y1,thick=3, color=16
                  mist=size(xpeaks,/dimensions)
                  for i=0,mist[0]-1 do begin
                          oplot, [xpeaks[i],xpeaks[i]],[0,abs(ymax[i])],color=211,thick=3 ;cyan
                          oplot, [xpeaks[i],xpeaks[i]],[0,ymax[i]],color=28,thick=3  ;red
                          oplot, [xpeaks[i]-fwhm[i]/2,xpeaks[i]+fwhm[i]/2],[ymax[i]/2,ymax[i]/2],color=28,thick=3
                          PPP=max(where(abs(x1-xpeaks[i]) eq min(abs(x1-xpeaks[i])))) 
                          indis=lindgen(11)+PPP-5
                          xi=x1[indis]
                          r=gaussfit(xi,y1[indis], coeff)
                          z=(xi-coeff[1])/coeff[2]
                          yy=coeff[0]*exp((-z^2)/2)+coeff[3]+coeff[4]*xi+coeff[5]*xi^2
                          oplot, xi,yy,color=3, thick=3
                          oplot,[coeff[1]-coeff[2],coeff[1]+coeff[2]],[0,0],color=3,thick=3
                          xyouts,coeff[1],max(y1[indis])+1*max([20,2*y1])/40,string(1000*coeff[2]*2*SQRT(2*ALOG(2)),format='(f4.1)'),charsize=1.2,charthick=1.5,color=3
                          if(max(y1[indis])le 10 ) then begin
                                  r=gaussfit(xi,y1[indis], nterms=3,coeff)
                                  z=(xi-coeff[1])/coeff[2]
                                  yy=coeff[0]*exp((-z^2)/2);+coeff[3]+coeff[4]*xi+coeff[5]*xi^2
                                  oplot, xi,yy,color=180, thick=3
                                  xyouts,coeff[1],max(y1[indis])+2*max([20,2*y1])/40,string(1000*coeff[2]*2*SQRT(2*ALOG(2)),format='(f4.1)'),charsize=1.2,charthick=1.5,color=180
                          endif
                          if(coeff[0] lt 0 or coeff[0] gt max(y1[indis])*3 or max(y1[indis])le 5 ) then begin 
                                  r=gaussfit(xi,ysm[indis], nterms=3,coeff)
                                  z=(xi-coeff[1])/coeff[2]
                                  yy=coeff[0]*exp((-z^2)/2)
                                  oplot, xi,yy,color=28, thick=3
                                  xyouts,coeff[1],max(y1[indis])+3*max([20,2*y1])/40,string(1000*coeff[2]*2*SQRT(2*ALOG(2)),format='(f4.1)'),charsize=1.2,charthick=1.5,color=28
                          endif
                  endfor
          endif   else plot, [i,i],[i,i]   
  endif
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;   END
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
 
  
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;   plot for masslist from individual file
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
  
  if(min(msslst) gt 1.5) then begin  ;plot for masslist from individual file
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_5'), GET_uVALUE= Filepar
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), GET_VALUE=DestFolder 
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_EngDat'), GET_uVALUE= Engdata
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Drop_1'), Get_uVALUE= drop1
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_8'), get_uVALUE= MassListType 
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), get_uVALUE= masses 
          i=event.index
          a=filepar.a
          t0=filepar.t0
          ex=filepar.ex
          File=EngData.FileName
          mass=masses[i]
          Intlist=peaktable(masses,filepar.resolution)
          IntStart=Intlist[i,1]
          IntEnd=Intlist[i,2]
          if (MassListType eq 'file mass list')then Pstart=Filepar.masslist[i,1] else Pstart=IntStart
          Pcenter=mass
          if (MassListType eq 'file mass list')then Pend=Filepar.masslist[i,2] else Pend=IntEnd
          baseline=filepar.baseline*engdata.cycles*engdata.extractions 
        ;  peakshape=filepar.peakshape 
          resolution=filepar.resolution
          data=readfloat(destfolder+'FileInfo/Sumspec'+t09str(EngData.starttime)+'.fdt')
          if(max(data) eq -9999) then  data=EngData.SumSpec
     
           
  smoo=SmoothSumSpec(Data, a,t0,ex,sampint,engdata.instrument)
  data2=smoo.data
  derivData=smoo.derivData
  Npts=smoo.Npts
 
               !x.MARGIN = [8,1]
  
          mist=size(data,/dimensions)
          x=lindgen(max(mist)-1)
          xmin=round(m2t(round(mass-0.1)-0.4,a,t0,ex,SampInt,/mass))
          xmax=round(m2t(round(mass-0.1)+0.6,a,t0,ex,SampInt,/mass))
          !P.MULTI = [0,1,2] 
          loadct,38
          if(drop1 lt 1.5) then  !x.oMARGIN=[0,0] else  !x.oMARGIN=[0,0]
          plot, m2t(x[xmin:xmax],a,t0,ex,SampInt,/time),  data[xmin:xmax], /YNOZERO, xstyle=1,ystyle=1,  XTITLE='Da', YTITLE='signal' , color=0, background=-1,yrange=[0,max(data[xmin:xmax])+max(data[xmin:xmax])/10], charsize=1.5
          loadct,31
          oplot, [intstart,intstart],[min(data[xmin:xmax]),max(data[xmin:xmax])],color=28
          oplot, [intend,intend],[min(data[xmin:xmax]),max(data[xmin:xmax])],color=28
          oplot, m2t(x[xmin:xmax],a,t0,ex,SampInt,/time),  baseline[xmin:xmax], color=28, thick=2 
          oplot, m2t(x[xmin:xmax],a,t0,ex,SampInt,/time),  data2[xmin:xmax], color=35, thick=2 
          oplot, [pstart,pend],[max(data[xmin:xmax]),max(data[xmin:xmax])],color=35
          oplot, [pstart,pend],[min(data[xmin:xmax]),min(data[xmin:xmax])],color=35, thick=3
          oplot, [Pcenter,Pcenter],[max(data[xmin:xmax])-max(data[xmin:xmax])/20,max(data[xmin:xmax])+max(data[xmin:xmax])/20],color=35
          oplot, [Pcenter,Pcenter],[min(data[xmin:xmax]),min(data[xmin:xmax])+max(data[xmin:xmax])/20],color=35, thick=3
          xgauss= m2t(x[m2t(pstart,a,t0,ex,SampInt,/mass): m2t(pend,a,t0,ex,SampInt,/mass)],a,t0,ex,SampInt,/time)
          ygauss=data2[m2t(pstart,a,t0,ex,SampInt,/mass): m2t(pend,a,t0,ex,SampInt,/mass)]
          weights=replicate(1.0, N_ELEMENTS(ygauss))
          AA=[max(ygauss),Pcenter,Pcenter/(4000* 2*SQRT(2*ALOG(2)))]
          xyouts, m2t(x[xmin],a,t0,ex,SampInt,/time)+0.025,max(data[xmin:xmax]),t09str(EngData.starttime),color=0, charsize=1.1,charthick=2
          xyouts, m2t(x[xmin],a,t0,ex,SampInt,/time)+0.025,max(data[xmin:xmax])*0.9,'m/z:'+string(mass,Format='(F8.3)'),color=0, charsize=1.1,charthick=2
          match=match(mass,lib)
          xyouts, m2t(x[xmin],a,t0,ex,SampInt,/time)+0.180,max(data[xmin:xmax])*0.9,match.formula,color=28, charsize=1.1,charthick=2
          xyouts, m2t(x[xmin],a,t0,ex,SampInt,/time)+0.025,max(data[xmin:xmax])*0.8,'Closest matches, dm [mDa]:',color=0, charsize=1.1,charthick=1
          for r=0,8 do if (abs(match.devi[r]) gt 3 or r ne 4) then begin
                  mis=match(mass+match.devi[r]/1000,lib)
                  xyouts, m2t(x[xmin],a,t0,ex,SampInt,/time)+0.025,max(data[xmin:xmax])*(0.73-0.07*r),strjoin([string(match.devi[r],format='(F6.1)'),mis.formula],'  '),color=0, charsize=1.1
                  oplot, [Pcenter+match.devi[r]/1000,Pcenter+match.devi[r]/1000],[max(data[xmin:xmax])+max(data[xmin:xmax])/30,max(data[xmin:xmax])+max(data[xmin:xmax])/18],color=0
          endif else begin 
                  xyouts, m2t(x[xmin],a,t0,ex,SampInt,/time)+0.025,max(data[xmin:xmax])*(0.73-0.07*r),strjoin([string(match.devi[r],format='(F6.1)'),'match'],'  '),color=28, charsize=1.1
                  oplot, [Pcenter+match.devi[r]/1000,Pcenter+match.devi[r]/1000],[max(data[xmin:xmax])+max(data[xmin:xmax])/30,max(data[xmin:xmax])+max(data[xmin:xmax])/12],color=28
                  oplot, [Pcenter+match.devi[r]/1000,Pcenter+match.devi[r]/1000],[max(data[xmin:xmax])+max(data[xmin:xmax])/12,max(data[xmin:xmax])+max(data[xmin:xmax])/10],color=28,thick=3
          endelse
     
     
     
     
     
     
          if(drop1 gt 0.5) then  begin
                  Name1=filepar.name1
                  S1=GetFileExport(event, destfolder, Name1)
                  if(max([max(S1.cpsFL),max(S1.corrcpsFL),max(S1.cpsUL),max(S1.corrcpsUL)]) eq -9999) then begin 
                          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_8'), set_VALUE= 'file mass list' 
                          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_8'), set_uVALUE= 'file mass list'                
                          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Ind1'), SET_VALUE=string(filepar.index, format='(I5)')
                          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Ind2'), SET_VALUE=string(filepar.index, format='(I5)')
                          export, event   
                          S1=GetFileExport(event, destfolder, Name1)
                  endif
                  if(drop1 eq 1) then begin
                          SingleSpectrumTime=EngData.duration/(EngData.cycles*EngData.extractions)
                          masz=m2t(xmax,a,t0,ex,sampint,/time)
                          xmax2=xmax+SingleSpectrumTime/SampInt
                          FWHMbins2=m2t(m2t(xmax2,a,t0,ex,sampint,/time)+m2t(xmax2,a,t0,ex,sampint,/time)/resolution ,a,t0,ex,sampint,/mass)-xmax2
                          resolution2nd=masz/(m2t(xmax+FWHMbins2,a,t0,ex,sampint,/time)-masz)
                          Smodel=resimodel(xmin,xmax,EngData.SumSpec,baseline,resolution,resolution2nd,s1.peakshape, a, t0, ex ,sampint,EngData.instrument)  
                          oplot,Smodel.mscale,Smodel.priori,color=28, thick=2
                          oplot,Smodel.mscale,Smodel.posteriori,color=176, thick=2
                          modpri=Smodel.model
                          mist=d(modpri)
                          if(size(mist,/n_elements) lt 1.5) then  mist=[1,1]
                          for i=0,mist[1]-1 do oplot, [modpri[0,i],modpri[0,i]],mean(baseline)+[0,modpri[1,i]],color=28, thick=3
                          modpost=Smodel.model
                          for i=0,mist[1]-1 do oplot, [modpost[0,i],modpost[0,i]],mean(baseline)+[0,modpost[1,i]],color=176, thick=3
                           mpeaks=Smodel.mass
                          for i=0,max(d(mpeaks))-1 do xyouts, 0.6,0.9-0.03*i,/normal,string(mpeaks[i],format='(f10.3)'),color=176,charsize=1.5,charthick=2
                          loadct,38
                          plot, Smodel.mscale, Smodel.residual, /YNOZERO, xstyle=1,ystyle=1,yrange=range(Smodel.residual),  XTITLE='Da', YTITLE='residual signal' , color=0, background=-1, charsize=1.5
                          loadct,31
                        ;  oplot,Smodel.mscale, Smodel.model,color=0, thick =3
                        mist=smodel.priori
     oplot,Smodel.mscale, Smodel.residual,color=28, thick =3
       oplot,Smodel.mscale,(mist[*,1]-mist[*,0]), color=240
     oplot,Smodel.mscale,(mist[*,2]-mist[*,0]), color=240
                   oplot,[0,10000],[0,0],color=0
                          hlpi=d(modpost)
                          if(size(hlpi,/n_elements) lt 1.5) then hlpi=[hlpi,1]
                          xyouts, 0.5,0.92,'    LOD_5='+string(smodel.lod5,format='(F5.1)')+ ' , dm='+string(1000*smodel.dm,format='(F4.1)')+' mDa'    ,color=176 ,/normal, size=1.5, charthick=3
                          hlpind=sort(modpost[0,*])
                          for hh=0,hlpi[1]-1 do begin
                                  massii=modpost[0,hlpind[hh]]
                                  cpi=match(massii,lib,/narrow)
                                  xyouts, 0.5,0.87-0.03*hh,string(massii,format='(F10.3)')    ,color=176 ,/normal, size=1.5, charthick=3
                                  xyouts, 0.59,0.87-0.03*hh,string(modpost[1,hlpind[hh]],format='(I7)')    ,color=176 ,/normal, size=1.5, charthick=3
                                  xyouts, 0.68,0.87-0.03*hh,string(modpost[2,hlpind[hh]],format='(I7)')    ,color=176 ,/normal, size=1.5, charthick=3
                                  xyouts, 0.76,0.87-0.03*hh, string(min(abs(cpi.devi)),format='(F6.1)')+' '+formula(cpi.entry) ,color=176 ,/normal, size=1.5, charthick=3
                          endfor
                          xyouts, 0.3,0.87,string(Smodel.LOD5,format='(I9)')    ,color=60 ,/normal, size=1.5, charthick=3
                          xyouts, 0.3,0.84,string(Smodel.dm,format='(F10.3)')    ,color=60 ,/normal, size=1.5, charthick=3
                          xyouts, 0.3,0.81,string(resolution2nd,format='(I9)')    ,color=60 ,/normal, size=1.5, charthick=3

                          print, ''
                  endif
                 
                  
                  tol=max([0.006,50*pcenter/1e6])
                  if(drop1 eq 2) then begin
                          if(max(S1.cpsFL) gt -9999) then begin
                                  filte=where(abs(S1.massFL-pcenter) lt tol)
                                  if(max(filte) gt -0.5) then datFL=reform(S1.cpsFL[filte,*]) else datFL=-9999
                          endif else datFL=-9999
                          if(max(S1.corrcpsFL) gt -9999 and max(datFL) ne -9999) then corrdatFL=reform(S1.corrcpsFL[filte,*]) else corrdatFL=-9999
                          if(max(S1.cpsUL) gt -9999) then begin
                                  filte=where(abs(S1.massUL-pcenter) lt tol)
                                  if(max(filte) gt -0.5) then datUL=reform(S1.cpsUL[filte,*]) else datUL=-9999
                          endif else datUL=-9999
                          if(max(S1.corrcpsUL) gt -9999 and max(datUL) ne -9999) then corrdatUL=reform(S1.corrcpsUL[filte,*]) else corrdatUL=-9999
                          if(max(datFL) ne -9999) then dat=datFL else if(max(datUL) ne -9999) then dat=datUL
                          ytit='cps'
                          if(getpar('calibration')  eq 9 ) then begin
                                print, 'calli'
                          endif           
                  endif             
                  if(drop1 eq 3) then begin
                          if(max(S1.ppbFL) gt -9999) then begin
                                  filte=where(abs(S1.massFL-pcenter) lt tol)
                                  if(max(filte) gt -0.5) then datFL=reform(S1.ppbFL[filte,*]) else datFL=-9999
                          endif else datFL=-9999
                          if(max(S1.corrppbFL) gt -9999 and max(datFL) ne -9999) then corrdatFL=reform(S1.corrppbFL[filte,*]) else corrdatFL=-9999
                          if(max(S1.ppbUL) gt -9999) then begin
                                  filte=where(abs(S1.massUL-pcenter) lt tol)
                                  if(max(filte) gt -0.5) then datUL=reform(S1.ppbUL[filte,*]) else datUL=-9999
                          endif else datUL=-9999
                          if(max(S1.corrppbUL) gt -9999 and max(datUL) ne -9999) then corrdatUL=reform(S1.corrppbUL[filte,*]) else corrdatUL=-9999
                          if(max(datFL) ne -9999) then dat=datFL else if(max(datUL) ne -9999) then dat=datUL
                          ytit='ppb'
                  endif             
                   if(drop1 gt 1.5) then begin
                
                 ; if (var_exists(dat) eq 1) then begin
                          if(max(S1.massUL) gt -9999) then begin
                                  Intlist=peaktable(S1.massUL,filepar.resolution)
                                  IntStart=Intlist[*,1]
                                  IntEnd=Intlist[*,2]
                                  xyouts,m2t(x[xmin],a,t0,ex,SampInt)+0.025,max(data[xmin:xmax])/15,'int. bound. UnifMassList:', color=28,  charthick=1
                                  xyouts,IntEnd,intarr(max(d(IntEnd)))+max(data[xmin:xmax])/15,strarr(max(d(IntEnd)))+'|', color=208,  charthick=3
                                  xyouts,IntStart,intarr(max(d(IntStart)))+max(data[xmin:xmax])/15,strarr(max(d(IntStart)))+'|', color=28,  charthick=1
                          endif
                          if(max(S1.massFL) gt -9999) then begin
                                  Intlist=peaktable(S1.massFL,filepar.resolution)
                                  IntStart=Intlist[*,1]
                                  IntEnd=Intlist[*,2]
                                  xyouts,m2t(x[xmin],a,t0,ex,SampInt)+0.025,0,'int. bound. FileMassList:', color=28,  charthick=1
                                  xyouts,IntEnd,intarr(max(d(IntEnd)))+0,strarr(max(d(IntEnd)))+'|', color=208,  charthick=3
                                  xyouts,IntStart,intarr(max(d(IntStart)))+0,strarr(max(d(IntStart)))+'|', color=28,  charthick=1
                          endif
                          
                   if (var_exists(dat) eq 1) then begin
                         
                          
                          loadct,38 
                         cycles=indgen(max(d(dat)))
                        dat2=dat
                          plot,cycles, dat2, /YNOZERO  ,  XTITLE='cycles',YTITLE=ytit , yrange=range(dat2[where(dat2 ne -9999)]), color=0, background=-1, thick=2, charsize=1.5
                          if(max(corrdatUL) ne -9999) then oplot, corrdatUL, color=100,  thick=2
                          if(max(datUL) ne -9999) then oplot, datUL, color=50,  thick=2
                          if(max(corrdatFL) ne -9999) then oplot, corrdatFL, color=90,  thick=2
                          if(max(datFL) ne -9999) then oplot, datFL, color=40,  thick=2
                          if(max(datFL) ne -9999) then xyouts,0.91,0.44,'FL', color=40,/normal,  charthick=2
                          if(max(corrdatFL) ne -9999) then xyouts,0.91,0.415,'corr FL', color=90,/normal,  charthick=2
                          if(max(datUL) ne -9999) then xyouts,0.91,0.39,'UL', color=50,/normal,  charthick=2
                          if(max(corrdatUL) ne -9999) then xyouts,0.91,0.365,'corr UL', color=100,/normal,  charthick=2
                          makecsv,DestDir+'temp/last_cps_row.csv' ,transpose(dat)
                          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= ['Data (no overlap correction):', reform(string(dat[0,*]))]
  
                        
                 endif else plot, [0,0],[0,0]
                 endif
          endif else begin ; print derivdata
                  loadct,38
                  plot, m2t(x[xmin:xmax],a,t0,ex,SampInt),  derivdata[xmin:xmax], /YNOZERO, xstyle=1,   XTITLE='Da', YTITLE='dSig/dm' , color=0, background=-1, charsize=1.5
                 scale=max(abs(derivdata[xmin:xmax]))/max(abs(deriv(derivdata[xmin:xmax])))
                  oplot, m2t(x[xmin:xmax],a,t0,ex,SampInt),  scale*deriv(derivdata[xmin:xmax]), color=0
                  oplot, range(m2t(x[xmin:xmax],a,t0,ex,SampInt)), [0.2,0.2]* min(scale*deriv(derivdata[xmin:xmax])), color=0
                  loadct,31
                  oplot, m2t(x[xmin:xmax],a,t0,ex,SampInt),  derivdata[xmin:xmax],color=35, thick=3
                  oplot,m2t([x[xmin],x[xmax]],a,t0,ex,SampInt),[0,0],color=0
                  oplot, [Pcenter,Pcenter],[-max(derivdata[xmin:xmax])/10, max(derivdata[xmin:xmax])/10],color=28, thick=3
                  oplot, [pstart,pend],[0,0],color=28, thick=3
          endelse
  endif

end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;   END
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
 
  

pro plot_extr,event


    DEVICE, DECOMPOSED = 0 
    !x.oMARGIN=[0,0]
    !Y.MARGIN = [4, 2]
    loadct,31
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), GET_uVALUE= msslst
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), GET_uVALUE=lib 
    if (max(lib) eq -9999) then  begin 
            lib=masslib(/extended)
            WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), sET_uVALUE=lib
    endif
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), GET_VALUE=DestDir 
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_EngDat'), GET_uVALUE=EngData 
    if(var_exists(EngData) gt 0) then SampInt=EngData.sampint else begin
            WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Files'), GET_uVALUE=Files
            Sumspec=getengdata(event,files[0])
            SampInt=Sumspec.sampint
    endelse
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_5'), GET_uVALUE= Filepar
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), GET_VALUE=DestFolder 
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_EngDat'), GET_uVALUE= Engdata
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Drop_1'), Get_uVALUE= drop1
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_8'), get_uVALUE= MassListType 
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), get_uVALUE= masses 
     WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_xx'), GET_VALUE=mass 
     WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Files'), GET_uVALUE=Files
      WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_xx'), gET_uVALUE= starttimes
         
       
  mass=max(float(mass))
           a=filepar.a
          t0=filepar.t0
          ex=filepar.ex
          File=EngData.FileName
          Intlist=peaktable([mass],filepar.resolution)
          IntStart=Intlist[0,1]
          IntEnd=Intlist[0,2]
          Pstart=IntStart
          Pcenter=mass
          Pend=IntEnd
          baseline=filepar.baseline*engdata.cycles*engdata.extractions 
        ;  peakshape=filepar.peakshape 
          resolution=filepar.resolution
          data=EngData.SumSpec
     
           
  smoo=SmoothSumSpec(Data, a,t0,ex,sampint,engdata.instrument)
  data2=smoo.data
  derivData=smoo.derivData
  Npts=smoo.Npts
 
       
         
          mist=size(data,/dimensions)
          x=lindgen(max(mist)-1)
          xmin=round(m2t(round(mass-0.1)-0.4,a,t0,ex,SampInt,/mass))
          xmax=round(m2t(round(mass-0.1)+0.6,a,t0,ex,SampInt,/mass))
          !P.MULTI = [0,1,2] 
          loadct,38
           plot, m2t(x[xmin:xmax],a,t0,ex,SampInt,/time),  data[xmin:xmax], /YNOZERO, xstyle=1,ystyle=1,  XTITLE='Da', YTITLE='signal' , color=0, background=-1,yrange=[0,max(data[xmin:xmax])+max(data[xmin:xmax])/10], charsize=1.5
          loadct,31
          oplot, [intstart,intstart],[min(data[xmin:xmax]),max(data[xmin:xmax])],color=28
          oplot, [intend,intend],[min(data[xmin:xmax]),max(data[xmin:xmax])],color=28
          oplot, m2t(x[xmin:xmax],a,t0,ex,SampInt,/time),  baseline[xmin:xmax], color=28, thick=2 
          oplot, m2t(x[xmin:xmax],a,t0,ex,SampInt,/time),  data2[xmin:xmax], color=35, thick=2 
          oplot, [pstart,pend],[max(data[xmin:xmax]),max(data[xmin:xmax])],color=35
          oplot, [pstart,pend],[min(data[xmin:xmax]),min(data[xmin:xmax])],color=35, thick=3
          oplot, [Pcenter,Pcenter],[max(data[xmin:xmax])-max(data[xmin:xmax])/20,max(data[xmin:xmax])+max(data[xmin:xmax])/20],color=35
          oplot, [Pcenter,Pcenter],[min(data[xmin:xmax]),min(data[xmin:xmax])+max(data[xmin:xmax])/20],color=35, thick=3
          xgauss= m2t(x[m2t(pstart,a,t0,ex,SampInt,/mass): m2t(pend,a,t0,ex,SampInt,/mass)],a,t0,ex,SampInt,/time)
          ygauss=data2[m2t(pstart,a,t0,ex,SampInt,/mass): m2t(pend,a,t0,ex,SampInt,/mass)]
          weights=replicate(1.0, N_ELEMENTS(ygauss))
          AA=[max(ygauss),Pcenter,Pcenter/(4000* 2*SQRT(2*ALOG(2)))]
          xyouts, m2t(x[xmin],a,t0,ex,SampInt,/time)+0.025,max(data[xmin:xmax]),t09str(EngData.starttime),color=0, charsize=1.1,charthick=2
          xyouts, m2t(x[xmin],a,t0,ex,SampInt,/time)+0.025,max(data[xmin:xmax])*0.9,'m/z:'+string(mass,Format='(F8.3)'),color=0, charsize=1.1,charthick=2
          match=match(mass,lib)
          xyouts, m2t(x[xmin],a,t0,ex,SampInt,/time)+0.180,max(data[xmin:xmax])*0.9,match.formula,color=28, charsize=1.1,charthick=2
          xyouts, m2t(x[xmin],a,t0,ex,SampInt,/time)+0.025,max(data[xmin:xmax])*0.8,'Closest matches, dm [mDa]:',color=0, charsize=1.1,charthick=1
          for r=0,8 do if (abs(match.devi[r]) gt 3 or r ne 4) then begin
                  mis=match(mass+match.devi[r]/1000,lib)
                  xyouts, m2t(x[xmin],a,t0,ex,SampInt,/time)+0.025,max(data[xmin:xmax])*(0.73-0.07*r),strjoin([string(match.devi[r],format='(F6.1)'),mis.formula],'  '),color=0, charsize=1.1
                  oplot, [Pcenter+match.devi[r]/1000,Pcenter+match.devi[r]/1000],[max(data[xmin:xmax])+max(data[xmin:xmax])/30,max(data[xmin:xmax])+max(data[xmin:xmax])/18],color=0
          endif else begin 
                  xyouts, m2t(x[xmin],a,t0,ex,SampInt,/time)+0.025,max(data[xmin:xmax])*(0.73-0.07*r),strjoin([string(match.devi[r],format='(F6.1)'),'match'],'  '),color=28, charsize=1.1
                  oplot, [Pcenter+match.devi[r]/1000,Pcenter+match.devi[r]/1000],[max(data[xmin:xmax])+max(data[xmin:xmax])/30,max(data[xmin:xmax])+max(data[xmin:xmax])/12],color=28
                  oplot, [Pcenter+match.devi[r]/1000,Pcenter+match.devi[r]/1000],[max(data[xmin:xmax])+max(data[xmin:xmax])/12,max(data[xmin:xmax])+max(data[xmin:xmax])/10],color=28,thick=3
          endelse
     
     
                     
     
     
     
                  Name1=filepar.name1
                  i=where(strpos(starttimes, name1) gt -0.5)
         dati=LoadMassRange(Files[i],Pstart,Pend,a,t0,ex, SampInt)
             dat=total(*dati,1)/(engdata.SingleIonSignal*1e-9/SampInt) 
             *dati=0






                  
                   if (var_exists(dat) eq 1) then begin
                          loadct,38 
                         
                          plot, dat, /YNOZERO  ,  XTITLE='cycles',YTITLE=ytit , yrange=range(dat[where(dat ne -9999)]), color=0, background=-1, thick=2, charsize=1.5
                          makecsv,DestDir+'temp/last_cps_row.csv' ,dat
                          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= ['Data (no overlap correction):', reform(string(dat[0,*]))]
  
                        
                 endif else plot, [0,0],[0,0]
                 


end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;   END
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
 
  

PRO plot3, event
;called by button 'Plot Mass Peaks'
; plots unified masslist: x= integer mass, y= fractional deviation from integer mass
DEVICE, DECOMPOSED = 0 
loadct,38
!P.MULTI = [0,1,1] 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), GET_VALUE=DestFolder 
 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'But_2'), gET_uVALUE= UniList
  if (var_exists(masses) eq 1 ) then begin
 if(min(masses) eq 1 or min(masses) eq 1.8) then   if (max(unilist.peakloc) ne -9999 ) then begin
          plot,UniList.PpmBINscale,UniList.PeakCountsPERppmBINS, background=-1,color=0, XTITLE='bin mass scale [Da] (bin size: max of 8 ppm or 1mDa)', YTITLE='# of Files with peak in bin', charsize=2,thick=2
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_VALUE= string(indgen(1300))
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_uVALUE= indgen(1300)
endif else unimasslist,event

 if(min(masses) eq 0) then  begin
     masses=readcsv(DestFolder+'UnifiedMassList.csv')
  xpeaks=masses[*,0]
 
    ; xpeaks=UniList.PeakLoc 
     WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_VALUE= string([1,xpeaks], format='(F8.3)')
     WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_uVALUE= [1,xpeaks]
  endif 
  
   if(min(masses) gt 2) then  begin
     WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_5'), gET_uVALUE= filepar
     xpeaks=filepar.masslist[*,0]
     WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_VALUE= string([1.8,xpeaks], format='(F8.3)')
     WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_uVALUE= [1.8,xpeaks]
  endif

 if(min(masses) ne 1 and min(masses) ne 1.8) then  begin
      x=floor(xpeaks+0.4)
      y=1000*(xpeaks-x)
      filter=where(2*floor(x/2) eq x) ;selects even masses
      plot, x,y,psym = 4, thick=5, xrange=[0,360],yrange=[-100,400], color=0, background=-1, XTITLE='integer mass [Da]', YTITLE='deviation from integer mass [mDa]', charsize=2
      loadct,31
      for i=1,350 do oplot, [i,i]*2, [-500,800], color=203
      for i=-9,35 do oplot, [0,800],[i,i]*50, color=84
      for i=1,150 do oplot, [i,i]*10, [-500,800], color=84
      oplot, x[filter],y[filter],color=28, psym = 4, thick=4
      filter=where(2*floor(x/2) ne x) ;selects odd masses
      oplot, x[filter],y[filter],color=16, psym = 4, thick=4
      oplot, [0,800],1.1161*[0,800] + 6.6339, color=16, thick=2
      oplot, [0,800],1.1122*[0,800] - 43.173, color=16, thick=2
endif
endif else print, 'No Mass List'

end


 
 PRO PTRwid_event, event
  IF (TAG_NAMES(event, /STRUCTURE_NAME) EQ 'WIDGET_CONTEXT') THEN BEGIN
    contextBase = WIDGET_INFO(event.ID, FIND_BY_UNAME = 'base_3')
    WIDGET_DISPLAYCONTEXTMENU, event.ID, event.X, event.Y, contextBase
  ENDIF
END
 




pro selList,event
;called by selecting item from droplist
 
 WIDGET_CONTROL, event.id, get_VALUE= MassListOption
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_8'), set_VALUE= MassListOption 
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_8'), set_uVALUE= MassListOption 
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), GET_VALUE=DestFolder 
  
  if (MassListOption eq 'file mass list') then begin
        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_5'), gET_uVALUE= Filepar
        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), sET_VALUE= string(Filepar.masslist[*,0], format='(F10.3)')
        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), sET_uVALUE= Filepar.masslist[*,0]
 endif
 
 if (MassListOption eq 'unified mass list') then begin
    masses=readcsv(DestFolder+'UnifiedMassList.csv')
  masses=masses[*,0]
  
       WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_VALUE= string(masses , format='(F10.3)')
       WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_uVALUE= masses 
 endif
 
 if (MassListOption eq 'unit mass list') then begin
       WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_5'), gET_uVALUE= Filepar
       WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_VALUE= string(findgen(Filepar.maxmass-4)+3)
       WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_uVALUE= findgen(Filepar.maxmass-4)+3
 endif
  
 if (MassListOption eq 'user mass list') then begin
       WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), gET_VALUE= Destdir
       Path=dialog_pickfile( TITLE='Select mass list file' ,path=Destdir)
       if (path NE '') then begin
            m_list=readCsv(Path)
            WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), sET_VALUE= string(m_list[*,0])
            WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), sET_uVALUE= m_list[*,0]
       endif
 endif
   
  
  
   
end


pro setdrop1,event
;called by selecting item from droplist
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Drop_1'), set_uVALUE= event.index  
   print, 'jjssj'
  
  if (event.index eq 0) then  print,'no timeline' 
   if (event.index eq 1) then  print,'cps timeline chosen'
   if (event.index eq 2) then  print,'ppb timeline chosen'
          
  
end


pro setdrop0,event
  ;called by selecting item from droplist
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Drop_0'), set_uVALUE= event.index
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Drop_0'), GET_VALUE=instrumentID
  instrumentID=instrumentID[event.index]
  makecsv,'C:/PTRwid/InstrumentID.txt', instrumentID

end


PRO SingleFile, event
; called by clicking a file from the file list.
; performs single file evaluation 
  WIDGET_CONTROL, /HOURGLASS 
  runtime_strt=systime(1)
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), GET_VALUE=DestFolder 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Files'), GET_uVALUE=Files
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'label_2'), gET_uVALUE= Names
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), gET_VALUE= log
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), gET_VALUE= info
         
  i=event.index
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Ind1'), SET_VALUE=string(i, format='(I5)')
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Ind2'), SET_VALUE=string(i, format='(I5)')
 
 ;delete data from previous file
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_6'), set_uVALUE= -9999 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_7'), set_uVALUE= -9999 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_1'), set_uVALUE= -9999 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_2'), set_uVALUE= -9999 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_3'), set_uVALUE= -9999 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_4'), set_uVALUE= -9999 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_5'), set_uVALUE= -9999 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_6'), set_uVALUE= -9999 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_10'), set_uVALUE= -9999 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_12'), set_uVALUE= -9999 
                   
 
 
  
  Name1=Names[i]
  EngData=getengdata(event, files[i])
 Print, 'engdat'
  print, systime(1)-runtime_strt
  runtime_OpenFile=systime(1)-runtime_strt
  if(engdata.duration ne -9999) then begin
          NamePar=''
          exists=file_info(destfolder+'FileInfo/Time2MassPAR/'+name1+'PAR2.fdt') & exists=exists.exists
          exists3=file_info(destfolder+'FileInfo/IonList/'+name1+'FL2.fdt') & exists3=exists3.exists
          if (exists eq 1)then NamePar=destfolder+'FileInfo/Time2MassPAR/'+name1+'PAR2.fdt' 
          if (exists3 eq 1)then NameMsss=destfolder+'FileInfo/IonList/'+name1+'FL2.fdt' 
          if (NamePar ne '') then   if (max(readfloat(NamePar)) eq -9999) then NamePar=''
          if (NamePar ne '') then begin       
                  par=readfloat(NamePar)
                  a=par[0]
                  t0=par[1]
                  ex=par[2]
                  maxmass=par[3]
                  msss=readfloat(NameMsss)
                  baseline=readfloat(destfolder+'FileInfo/Baseline/'+name1+'Baseline.fdt') 
                  peakshape=readfloat(destfolder+'FileInfo/PeakShape/'+name1+'PeakShape.fdt') 
                  Filepar=create_struct('file',files[i],'name1',name1,'index',i,'baseline',baseline,'PeakShape',PeakShape,'maxmass', maxmass,'a',a,'t0',t0,'ex',ex,'masslist',msss,'masslistnames',['PeakMax[Da]','StartPeak[Da]','EndPeak[Da]','PeakBroadness','SlopeMax','SlopeMin','PeakHight[counts]','PeakMax[time]','BaseHight[counts]'],'resolution',par[8])   
  
 
 Print, 'filepar'
   print, systime(1)-runtime_strt
 
          endif else begin
            
            
            
            
            
            
          

     
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
                  S1=PS1(event,EngData.SumSpec,EngData.SampInt,EngData.duration,EngData.cycles, EngData.extractions, destfolder,Name1,  EngData.instrument)
                  a_init=S1.a
                  t0_init=S1.t0
                  if( getpar('DriftCorrection') eq 1) then begin
                      sumspec=readfloat(destfolder+'FileInfo/Sumspec'+name1+'.fdt')
                      if(max(sumspec) eq -9999) then begin
                          haha=getsplit(Files[i])
                          split=haha.split
                          misst=LoadCycles(Files[i],haha.locatie,haha.start2[*,0],haha.count[*,0])
                          DeDri=DeDrift(*misst,a_init,t0_init, EngData.SampInt,-9999,-9999,-9999,-9999,-9999,-9999,split,1)
                          sumspec=dedri.sumspec 
                          if(split gt 1.5) then for ppp=1,split-1 do begin
                                  misst=LoadCycles(Files[i],haha.locatie,haha.start2[*,ppp],haha.count[*,ppp])
                                  DeDri=DeDrift(*misst,a_init,t0_init, EngData.SampInt,dedri.rest,dedri.maxis,dedri.t1start,dedri.t2start,dedri.m1,dedri.m2,split,ppp+1)
                                  sumspec=sumspec+dedri.sumspec
                          endfor
                          makefloat, destfolder+'FileInfo/Sumspec'+name1+'.fdt',sumspec
                      endif
                      S1=PS1(event,SumSpec,EngData.SampInt,EngData.duration,EngData.cycles, EngData.extractions, destfolder,Name1,  EngData.instrument)
                  endif


 ;masslistnames=['PeakMax[Da]','StartPeak[Da]','EndPeak[Da]','Resolution','SlopeMax','SlopeMin','PeakHight[counts]','PeakMax[time]','BaseHight[counts]']
;    s1=CREATE_STRUCT('MaxMass',maxMass,'a', a,'t0',t0,'ex',ex,'scorParVar',scorParVar,'a3', a3,'t03',t03,'ex3',ex3,'scor3',scor3,'massnames',massnames,$
;    'counts', counts[1:10],'res',res[1:10], 'ErrCode', ErrCode,'masslistnames',masslistnames,'MassList',MassList, $
;    'baseline', baselineSM/extr, 'PeakShape',[[x7],[dataX3]],'resolution',reso)
                  Filepar=create_struct('file',files[i],'name1',name1,'index',i,S1)
                  if(max(Filepar.counts) gt 0) then Filepar.counts[where(Filepar.counts gt 0)]=Filepar.counts[where(Filepar.counts gt 0)]/EngData.duration
          endelse   
          if(Filepar.a ne -9999) then begin  ;don't do stuff below if calcrude failed
                  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_EngDat'), SET_VALUE= EngData.names
                  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_EngDat'), SET_uVALUE= EngData
                  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_VALUE= string(Filepar.masslist[*,0],FormaT='(f9.3)')
                  info=[info,'',string(Filepar.masslist[*,0],FormaT='(f12.3)')]
                  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), SET_VALUE= info
         
                
                  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_uVALUE= Filepar.masslist[*,0]
                  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_5'), SET_uVALUE= Filepar
                  DetectedPeaks=size(Filepar.masslist,/dimensions)
                  OutputString=[strjoin(['#',string(i, format='(I5)'),':  ', Name1]),$
                  strjoin(['PTR:        ',string(engdata.instrument)]) ,$
                   strjoin(['Cycles:        ',string(engdata.cycles)]) ,$
                  strjoin(['Duration [min]:   ',string(engdata.duration/60, format='(F8.2)')]) ,$
                  strjoin(['MaxSignal:   ',string( max(EngData.SumSpec), format='(E10.2)')]) ,$
                  strjoin(['MaxSignal/s:   ',string( max(EngData.SumSpec)/engdata.duration, format='(I10)')]) ,$
                  strjoin(['StrtTime [T09]:   ',string(engdata.starttime, format='(F9.3)')]) ,$
                  strjoin(['Maxmass [Da]:',string(Filepar.maxmass)]) ,$
                  strjoin(['a:                     ',string(Filepar.a)]) , $
                  strjoin(['t0:                    ',string(Filepar.t0)]) ,$
                  strjoin(['ex:                    ',string(Filepar.ex)]) , $
                  strjoin(['Resolution (FWHM):     ',string(Filepar.resolution, Format='(I5)')]) , $
                  strjoin(['Detected peaks:', string(max(DetectedPeaks))]),$
                  strjoin(['Total processing time: ',string(systime(1)-runtime_strt , format='(F5.1)'),'s']),'------------','']
                  if (NamePar ne '') then begin       
                          log=[OutputString, log] 
                  endif else begin
                          testdat=strjoin([Filepar.massnames[0],string(Filepar.counts[0], format='(I10)'),string(Filepar.res[0], format='(I10)')])
                          for ij=1,9 do testdat=[testdat,strjoin([Filepar.massnames[ij],string(Filepar.counts[ij], format='(I10)'),string(Filepar.res[ij], format='(I10)')])]
                          log=[OutputString,'Test: mass, [cps], [FWHM]',testdat,'------------','', log ]   
                          makefloat, destfolder+'FileInfo/IonList/'+name1+'FL2.fdt', Filepar.masslist 
                          makefloat, destfolder+'FileInfo/Time2MassPAR/'+name1+'PAR2.fdt', [Filepar.a,Filepar.t0,Filepar.ex,filepar.maxmass, EngData.SampInt,Filepar.a3,Filepar.t03,Filepar.ex3,Filepar.resolution,strpos('H3O+ NO+ O2+',filepar.mode),a_init,t0_init]
                          makefloat, destfolder+'FileInfo/PeakShape/'+name1+'PeakShape.fdt', Filepar.PeakShape
                          makefloat, destfolder+'FileInfo/BaseLine/'+name1+'Baseline.fdt', Filepar.baseline
                  endelse
          endif else begin ;calcrude failed
                  OutputString=[strjoin(['#',string(i, format='(I5)'),':  ', Name1]),$
                    'Crude calibration FAILED', '------------','']
                  log=[OutputString, log] 
          endelse        
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), sET_VALUE= log
          Print, 'fertig'
   print, systime(1)-runtime_strt
 
  endif ; read engdata failed
END



pro UniMassList, event
; called by button 'Unified Mass List'
;sumspectrum of each file is evaluated: Peak search, mass scale calibration, parameters a, t0, and ex are optimized for each file 
;after single file evaluation a unified mass list is created and saved
; TO RE-RUN THE SINGLE FILE EVALUATION: remove the 'PeakCountsPermDa' file from the destination folder 
compile_opt idl2
 WIDGET_CONTROL, /HOURGLASS 
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), GET_uVALUE=lib 
 if (max(lib) eq -9999) then  begin 
          lib=masslib(/extended)
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), sET_uVALUE=lib
  endif
  
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), GET_VALUE=DestFolder 
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Files'), GET_uVALUE=Files
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'label_2'), gET_uVALUE= Names
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), gET_VALUE= log
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= ''                         
 NumFiles=max(size(Files,/dimensions))
 time_process=0
 TimePerFile=15
 NewFile=0
 Lastcheck=max(readfloat(strjoin([DestFolder,'Lastcheck.fdt'],'')))
 Now=max(t09('01/01/1970, 00:00:00')+systime(/seconds)/(24.0*3600.0))
 exsts1=file_info(strjoin([DestFolder,'binScale.fdt'],'')) & exsts1=exsts1.exists
 exsts2=file_info(strjoin([DestFolder,'resolution.fdt'],'')) & exsts2=exsts2.exists
 exsts3=file_info(strjoin([DestFolder,'PeakPar.fdt'],'')) & exsts3=exsts3.exists
 
 if(now-lastcheck gt 0.5 or exsts1+exsts2+exsts3 ne 3) then begin
        makefloat, DestFolder+'Lastcheck.fdt',fltarr(1)+Now
        if(exsts1+exsts2+exsts3 ne 3) then NewFile=1
        for i=0,NumFiles-1 do begin
                exists=file_info(destfolder+'FileInfo/IonList/'+names[i]+'FL2.fdt') & exists=exists.exists
                if (exists eq 0) then begin ; no par file
                        NewFile=1
                        runtime_strt=systime(1)
                        EngData=getengdata(event,files[i])
                        if( EngData.duration  gt 0) then begin    
                                if(strmatch('TOF1000', EngData.instrument) eq 1) then MinRes=500  else   if(strmatch('VOCUS', EngData.instrument) eq 1) then MinRes=5000 else  MinRes=1800
                                jj=0
                                duration=EngData.duration
                                sumspectr=EngData.sumspec
                                nextStartTime=EngData.starttime+duration/(3600*24)
                                sig=max(smooth(sumspectr,3))
                                while(sig lt getpar('Desired_Min_Signal')) do begin
                                        IF (i+jj+1 gt NumFiles-1) THEN BREAK 
                                        next=getengdata(event,files[i+jj+1 ])
                                        if(next.duration  eq -9999) then BREAK     
                                        if(abs(next.starttime-nextStartTime)*24*60  gt getpar('Max_Time_Gap')) then BREAK    
                                        jj=jj+1
                                        duration=duration+next.duration
                                        sumspectr=sumspectr+next.sumspec
                                        sig=sig+max(smooth(next.sumspec,3))
                                        nextStartTime=next.starttime+next.duration/(3600*24)
                                endwhile 
                                runtime_OpenFile=systime(1)-runtime_strt        
                                if(duration gt 0) then begin
                                        goodF=0
                                        fls= names[i]
                                        if(jj gt 0.5) then for kk=1,jj do fls=[fls, Names[i+kk ]]
                               print, files[i]
                                        Filepar=PS1(event,sumspectr, EngData.SampInt, EngData.duration, EngData.cycles, EngData.extractions,destfolder,fls,EngData.instrument)
                                         a_init=Filepar.a
                                        t0_init=Filepar.t0
                                        if( getpar('DriftCorrection') eq 1) then begin
                                          sumspec=readfloat(destfolder+'FileInfo/Sumspec'+names[i]+'.fdt')
                                          if(max(sumspec) eq -9999) then begin
                                            haha=getsplit(Files[i])
                                            split=haha.split
                                            misst=LoadCycles(Files[i],haha.locatie,haha.start2[*,0],haha.count[*,0])
                                            DeDri=DeDrift(*misst,a_init,t0_init, EngData.SampInt,-9999,-9999,-9999,-9999,-9999,-9999,split,1)
                                            sumspec=dedri.sumspec
                                            if(split gt 1.5) then for ppp=1,split-1 do begin
                                              misst=LoadCycles(Files[i],haha.locatie,haha.start2[*,ppp],haha.count[*,ppp])
                                              DeDri=DeDrift(*misst,a_init,t0_init, EngData.SampInt,dedri.rest,dedri.maxis,dedri.t1start,dedri.t2start,dedri.m1,dedri.m2,split,ppp+1)
                                              sumspec=sumspec+dedri.sumspec
                                            endfor
                                            makefloat, destfolder+'FileInfo/Sumspec'+names[i]+'.fdt',sumspec
                                          endif
                                          Filepar=PS1(event,sumspec, EngData.SampInt, EngData.duration, EngData.cycles, EngData.extractions,destfolder,fls,EngData.instrument)
                                      endif

                                     
                                     
                                     
                                     
                                     
                                     
                                     
                                        if(max(Filepar.counts) ne -9999)then  Filepar.counts[where(Filepar.counts gt 0)]=Filepar.counts[where(Filepar.counts gt 0)]/duration
                                        if (max(Filepar.res)gt MinRes) then goodF=1
                                        if (max(Filepar.a) ne -9999) then begin
                                                time_process=time_process+systime(1)-runtime_strt
                                                TimePerFile=[TimePerFile,systime(1)-runtime_strt]
                                                DetectedPeaks=size(Filepar.masslist,/dimensions)
                                                testdat=strjoin([Filepar.massnames[0],string(Filepar.counts[0], format='(I10)'),string(Filepar.res[0], format='(I10)')])
                                                for ij=1,9 do testdat=[testdat,strjoin([Filepar.massnames[ij],string(Filepar.counts[ij], format='(I10)'),string(Filepar.res[ij], format='(I10)')])]
                                                log=[fls,$
                                                  strjoin(['StrtTime [T09]:   ',string(EngData.starttime, format='(F9.3)')]) ,$
                                                  strjoin(['Duration [min]:   ',string(duration/60, format='(F8.2)')]) ,$
                                                  strjoin(['MaxSignal:   ',string( max(sumspectr), format='(E10.2)')]) ,$
                                                  strjoin(['MaxSignal/s:   ',string( max(sumspectr)/duration, format='(I10)')]) ,$
                                                  strjoin(['Maxmass [Da]:',string(Filepar.maxmass)]) ,$
                                                  strjoin(['a:                     ',string(Filepar.a)]) , $
                                                  strjoin(['t0:                    ',string(Filepar.t0)]) ,$
                                                  strjoin(['ex:                    ',string(Filepar.ex)]) , $
                                                  strjoin(['Resolution (FWHM):     ',string(Filepar.resolution, Format='(I5)')]) , $
                                                  strjoin(['Detected peaks:', string(max(DetectedPeaks))]),$
                                                  '------------',$
                                                  '',$
                                                  'Test: mass, [cps], [FWHM]',$
                                                  testdat,$
                                                  strjoin(['Total processing time: ',string(systime(1)-runtime_strt , format='(F5.1)'),'s']),$   
                                                  strjoin(['Files remaining: ',string((NumFiles-i-1) , format='(I4)')]),$   
                                                  strjoin(['Time remaining: ',string(quantile(TimePerFile,0.8)*(NumFiles-i-1) , format='(I6)'),'s']),'------------','', log ]   
                                                  if(max(size(log,/dimensions)) gt 100) then log=log[0:99]
    
                                        endif else begin
                                                log=[fls,'Crude calibration FAILED', '------------','', log] 
                                                if(max(size(log,/dimensions)) gt 100) then log=log[0:99]
    
                                        endelse
                                        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), sET_VALUE= log
                                        for kk=0,jj do if(goodF eq 1) then  makefloat, destfolder+'FileInfo/IonList/'+names[i+kk]+'FL2.fdt', Filepar.masslist else  makefloat, destfolder+'FileInfo/IonList/'+names[i+kk]+'FL2.fdt', [-9999]
                                        for kk=0,jj do if(goodF eq 1) then makefloat, destfolder+'FileInfo/Time2MassPAR/'+names[i+kk]+'PAR2.fdt', [Filepar.a,Filepar.t0,Filepar.ex,Filepar.maxmass,EngData.SampInt,Filepar.a3,Filepar.t03,Filepar.ex3,Filepar.resolution, strpos('H3O+ NO+ O2+',Filepar.mode),a_init,t0_init] else makefloat, destfolder+'FileInfo/Time2MassPAR/'+names[i+kk]+'PAR2.fdt', [-9999] 
                                        for kk=0,jj do if(goodF eq 1) then makefloat, destfolder+'FileInfo/PeakShape/'+names[i+kk]+'PeakShape.fdt', Filepar.PeakShape else makefloat, destfolder+'FileInfo/PeakShape/'+names[i+kk]+'PeakShape.fdt', [-9999] 
                                        for kk=0,jj do if(goodF eq 1) then makefloat, destfolder+'FileInfo/Baseline/'+names[i+kk]+'Baseline.fdt', Filepar.baseline else makefloat, destfolder+'FileInfo/Baseline/'+names[i+kk]+'Baseline.fdt', [-9999] 
                                        i=i+jj
                                endif
                        endif
                endif 
        endfor ; loop over files
    endif       
 runtime_strt= systime(1)
 if(NewFile eq 1) then begin
        masslist=float(0)
        resolution=float(0)
        for i=0,NumFiles-1 do begin
                exists=file_info(destfolder+'FileInfo/IonList/'+names[i]+'FL2.fdt') & exists=exists.exists
                if (exists ne 0) then begin 
                        FL2=readfloat(destfolder+'FileInfo/IonList/'+names[i]+'FL2.fdt')
                        PAR2=readfloat(destfolder+'FileInfo/Time2MassPAR/'+names[i]+'PAR2.fdt')
                        if(PAR2[0] gt 0) then resolution=[resolution,PAR2[8]]
                        if(FL2[0] gt 0) then masslist=[masslist,FL2[*,0]]
                endif
        endfor
        resolution=resolution[1:*]
        
        if(median(resolution lt 2500)) then binwidth=32  else binwidth=8
        binScale=ppm_bin(masslist,binwidth)
        x=binscale[*,0]
        y=binscale[*,2]
        peakdata=ps2(x,y)
        masslist=peakdata.data[*,1]     
        Intlist=PeakTable(masslist,median(resolution))
        peakdat=peakdata.data
       ; filter=where(intlist[*,2] gt 0.007+intlist[*,1])
        filter=where(intlist[*,2] gt 0.007*3000.0/median(resolution)+intlist[*,1])
        masslist=masslist[filter,*]
        intlist=intlist[filter,*]
        peakdat=peakdat[filter,*]
        makefloat, strjoin([DestFolder,'binScale.fdt'],''),binScale
        makefloat, strjoin([DestFolder,'resolution.fdt'],''),resolution
        makecsv, strjoin([DestFolder,'UnifiedMasslist.csv'],''), transpose(Intlist)
        makecsv, strjoin([DestFolder,'UnifiedMasslistNames.csv'],''), transpose(['mass[Da]','StartInt','EndInt','sigma','StartCut [fraction of sigma]','EndCut [fraction of sigma]'])
        makefloat, strjoin([DestFolder,'PeakPar.fdt'],''),peakdat
        makeCsv, DestFolder+'PeakPar.csv',TRANSPOSE(peakdat )
        makecsv, strjoin([DestFolder,'PeakParNames.csv'],''), transpose(peakdata.names)
 endif else begin 
        binscale=readfloat(strjoin([DestFolder,'binScale.fdt'],''))
        resolution=readfloat(strjoin([DestFolder,'resolution.fdt'],''))
        x=binscale[*,0]
        y=binscale[*,2]
        peakdat=readfloat(strjoin([DestFolder,'PeakPar.fdt'],''))
 endelse
 xpeaksDer=peakdat[*,0]
 xpeaks=peakdat[*,1]
 sigma=peakdat[*,2]
 ymax=peakdat[*,3]
 Unified_Mass_List=CREATE_STRUCT('PeakCountsPERppmBINS',y,'PpmBINscale',x,'PeakLoc',xpeaks,'PeakLocDer',xpeaksDer,'PeakWidth',sigma,'PeakHeight',ymax)
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'But_2'), SET_uVALUE= Unified_Mass_List
 DEVICE, DECOMPOSED = 0 
 loadct,38
 !P.MULTI = [0,1,1] 
 Plotsel=max(readfloat(strjoin([DestFolder,'PlotSel.fdt'],'')))
 if(Plotsel eq 1) then begin
        plot,x,y, background=-1,color=0, XTITLE='bin mass scale [Da] (bin size: max of 8 ppm or 1mDa)', YTITLE='# of Files with peak in bin', charsize=2,thick=2
        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_VALUE= string(indgen(1300))
        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_uVALUE= indgen(1300)
        makefloat,DestFolder+'PlotSel.fdt',fltarr(5)
 endif else begin
        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_VALUE= string([1,xpeaks], format='(F8.3)')
        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'List_Masses'), SET_uVALUE= [1,xpeaks]
        x=floor(xpeaks+0.4)
        y=1000*(xpeaks-x)
        filter=where(2*floor(x/2) eq x) ;selects even masses
       ; plot, x,y,psym = 4, thick=5, xrange=[0,360],yrange=[-100,400], color=0, background=-1, XTITLE='integer mass [Da]', YTITLE='deviation from integer mass [mDa]', charsize=2
        plot, x,y,psym = 4, thick=5,  color=0, background=-1, XTITLE='integer mass [Da]', YTITLE='deviation from integer mass [mDa]', charsize=2
        loadct,31
        for i=1,350 do oplot, [i,i]*2, [-500,800], color=203
        for i=-9,35 do oplot, [0,800],[i,i]*50, color=84
        for i=1,150 do oplot, [i,i]*10, [-500,800], color=84
        oplot, x[filter],y[filter],color=28, psym = 4, thick=4
        filter=where(2*floor(x/2) ne x) ;selects odd masses
        oplot, x[filter],y[filter],color=16, psym = 4, thick=4
        oplot, [0,800],1.1161*[0,800] + 6.6339, color=16, thick=2
        oplot, [0,800],1.1122*[0,800] - 43.173, color=16, thick=2
        makefloat,DestFolder+'PlotSel.fdt',fltarr(5)+1
 endelse
 
 if(NewFile eq 1) then begin
        binscale=readfloat(strjoin([DestFolder,'binScale.fdt'],''))
        ; resolution=readfloat(strjoin([DestFolder,'resolution.fdt'],''))
        x=binscale[*,0]
        y=binscale[*,2]
        len=size(intlist,/dimensions) & len=max(len[0])
        IDnamesA=['m/z','sigma [ppm ]', 'sigma [mDa]','#compounds within +/- 2 sigma','dev [mDa]','#C','#13C','#H','#O','#N','#H+','dev [mDa]','#C','#13C','#H','#O','#N','#H+','dev [mDa]','#C','#13C','#H','#O','#N','#H+','dev [mDa]','#C','#13C','#H','#O','#N','#H+','dev [mDa]','#C','#13C','#H','#O','#N','#H+','dev [mDa]','#C','#13C','#H','#O','#N','#H+','dev [mDa]','#C','#13C','#H','#O','#N','#H+','dev [mDa]','#C','#13C','#H','#O','#N','#H+','dev [mDa]','#C','#13C','#H','#O','#N','#H+']
        IDA=strarr(len,max(size(idnamesA,/dimensions)))
        IDnamesB=['m/z','sigma [ppm]', 'sigma [mDa]','#compounds within +/- 2 sigma','dev1 [mDa]','ID1','dev2 [mDa]','ID2','dev3 [mDa]','ID3','dev4 [mDa]','ID4','dev5 [mDa]','ID5','dev6 [mDa]','ID6','dev7 [mDa]','ID7','dev8 [mDa]','ID8','dev9 [mDa]','ID9']
        IDB=strarr(len,max(size(idnamesB,/dimensions)))
        for i=0,len-1 do begin
                mass=masslist[i]
                sigm=sigma[i]
                filter=where(x gt mass-0.15 and x lt mass+0.15)
                ysm=smooth(y,5)
                x1=x[filter]
                y1=y[filter]
                filter=where(abs(x-mass) eq min(abs(x-mass)))
                filter=lindgen(11)-5+max(filter)
                x2=x[filter]
                y2=y[filter]
                y2sm=ysm[filter]
                if(max(y2)le 10 ) then  begin
                        r=gaussfit(x2,y2, nterms=3,coeff) 
                        str='P3'
                endif else begin 
                        r=gaussfit(x2,y2+0.0001, coeff)
                        str='P6'
                endelse
                if(coeff[0] lt 0 or coeff[0] gt max(y2)*3 or  1e6*abs(coeff[2])/mean(x2) lt 5  or  max(y2)le 5 ) then begin
                        r=gaussfit(x2,y2sm, nterms=3,coeff)
                        str='P3, SM5'
                endif    
                matchi=match(mass,lib)
                IDA[i,0]=string(mass,format='(F8.3)')
                IDA[i,1]=string(1e6*coeff[2]/mass,format='(F8.1)')
                IDA[i,2]=string(1000*coeff[2],format='(F8.1)')
                IDB[i,0]=string(mass,format='(F8.3)')
                IDB[i,1]=string(1e6*coeff[2]/mass,format='(F8.1)')
                IDB[i,2]=string(1000*coeff[2],format='(F8.1)')
                rr=0
                for r=0,8 do begin
                        mis=match(mass+matchi.devi[r]/1000,lib)
                        if (abs(matchi.devi[r])/1000 lt 2*coeff[2]) then begin 
                                IDB[i,4+2*rr]= string(matchi.devi[r],format='(F8.1)')      
                                IDB[i,5+2*rr]= mis.formula        
                                IDA[i,4+7*rr]= string(matchi.devi[r],format='(F8.1)')      
                                IDA[i,5+7*rr]= string(mis.entry[1],format='(I4)')        
                                IDA[i,6+7*rr]= string(mis.entry[2],format='(I4)')        
                                IDA[i,7+7*rr]= string(mis.entry[3],format='(I4)')        
                                IDA[i,8+7*rr]= string(mis.entry[4]  +mis.entry[5]+mis.entry[6],format='(I4)')      
                                IDA[i,9+7*rr]= string(mis.entry[7]  +mis.entry[8],format='(I4)')     
                                IDA[i,10+7*rr]=string(mis.entry[9],format='(I4)')      
                                rr=rr+1
                        endif
                endfor
                IDA[i,3]=string(rr,format='(I8)')
                IDB[i,3]=string(rr,format='(I8)')
        endfor
        makecsv, strjoin([DestFolder,'PeakIdentification_formulas.csv'],''), transpose([transpose(IDnamesB),[IDB]])
        makecsv, strjoin([DestFolder,'PeakIdentification_numbers.csv'],''), transpose([transpose(IDnamesA),[IDA]])
 endif
 print,'fertig'
end


 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;
;;;;;;;
;;;;;;;                   PROCPTR routines
;;;;;;;
;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PRO ____________PTRproc
 end


PRO ProcPTR, event


  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Buti1'), GET_uVALUE=path 
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Buti2'), GET_uVALUE=lib 
  Files=Filelst(path)
  
  masses=readcsv(path+'UnifiedMassList.csv')
  masses=masses[*,0]
  engnames=readcsvstr(path+'Export/EngData/'+'Engdatanames.csv')
 if(strpos(path,'w_data') lt -0.5) then path='click the right mouse button to select "w_data" directory'
  ;base = WIDGET_BASE(/Row, XSIZE = 1050, YSIZE = 750)
 
      
      base = WIDGET_BASE(/Row, XSIZE = getpar('PRbase_1x'), YSIZE = getpar('PRbase_1y'), RESOURCE_NAME = 'Merge data')
        base2=widget_base(base,/column,xsize=getpar('PRbase_2x'),ysize=getpar('PRbase_2y'))
              label1=Widget_label(base2,/Align_left, value="Directory:",uname='Directory',uvalue=-9999)
              wText = WIDGET_TEXT(base2, VALUE=path, uname="textfield", /EDITABLE,/ALL_EVENTS, /NO_NEWLINE,/wrap , /CONTEXT_EVENTS, YSIZE = getpar('PRwText1'), uVALUE= lib)
                      contextBase1 = WIDGET_BASE(wText,  /CONTEXT_MENU,  UNAME="contextMenu")
                              cb1 = WIDGET_BUTTON(contextBase1, VALUE = 'browse',  EVENT_PRO = 'getDir')
              FileListLabel=Widget_label(base2,/Align_left, value="Files:",uname='Files',uvalue=CREATE_STRUCT('name1',['']))
              FileList=WIDGET_LIST(base2,event_pro="selFile",ysize=getpar('PRwText6'),UNAME = 'FileList',value=Files.disp, uvalue=Files.path,/multiple)
              PTRlabel=Widget_label(base2,/Align_left, value=' Specify PTR-MS data:')
              base4=widget_base(base2,/row,xsize=getpar('PRbase_4x'),ysize= getpar('PRbase_4y'))
                      base5=widget_base(base4,/column,xsize=getpar('PRbase_5x'),ysize= getpar('PRbase_5y'))
                              PTRlabel=Widget_label(base5,/Align_right,uname='Label1', value='p-drift',ysize= getpar('PRlabel'))
                              PTRlabel=Widget_label(base5,/Align_right, value='U-drift',ysize=getpar('PRlabel'))
                              PTRlabel=Widget_label(base5,/Align_right, value='Udx',ysize=getpar('PRlabel'))
                              PTRlabel=Widget_label(base5,/Align_right, value='T-drift',ysize=getpar('PRlabel'))
                              EngDataListLabel=Widget_label(base5,/Align_left, value="Engineering:", uname='Engineering', uvalue=0)
                              EngDataList=WIDGET_LIST(base5,event_pro="selEng", value=engnames, ysize=getpar('PRengLy'),UNAME = 'EngList',uvalue=create_struct('data', -9999,'names',Engnames))
                      base6=widget_base(base4,/column,xsize=getpar('PRbase_6x'),ysize=getpar('PRbase_6y'))
                            ; PTRdrop1=widget_droplist(base6,uname='PTRdrop1',value=['  ',transpose(engnames)])
                              PTRdrop1=widget_droplist(base6,uname='PTRdrop1',VALUE= ['  ',transpose(engnames)],xsize=getpar('PRdrop'))
                              PTRdrop2=widget_droplist(base6,uname='PTRdrop2',VALUE= ['  ',transpose(engnames)],xsize=getpar('PRdrop'))
                              PTRdrop3=widget_droplist(base6,uname='PTRdrop3',VALUE= ['  ',transpose(engnames)],xsize=getpar('PRdrop'))
                              PTRdrop4=widget_droplist(base6,uname='PTRdrop4',VALUE= ['  ',transpose(engnames)],xsize=getpar('PRdrop'))
                              MassListLabel=Widget_label(base6,/Align_left, value="Masses:", uname="Masses",uvalue=59.048)
                              MassList=WIDGET_LIST(base6,event_pro="selMass", ysize=getpar('PRmassLy'),xsize=getpar('PRmassLx'),UNAME = 'MassList',value=string(masses,format='(F9.3)'),uvalue=masses)
               UnifiedMassListLabel=Widget_label(base2,/Align_left, value="Data export")
              label3=Widget_label(base2,/Align_left, value="Index-file:",uname='Index',uvalue=-9999)
              wText2 = WIDGET_TEXT(base2, VALUE='click  right mouse button to select a index-file', uname="textfield2", /EDITABLE,/ALL_EVENTS, /NO_NEWLINE,/wrap , /CONTEXT_EVENTS, YSIZE = 2,uvalue=-9999)
                      contextBase2 = WIDGET_BASE(wText2,  /CONTEXT_MENU,  UNAME="contextMenu2")
                              cb2 = WIDGET_BUTTON(contextBase2, VALUE = 'browse',  EVENT_PRO = 'SelectIndexFile')
              button4 = WIDGET_BUTTON(base2,event_pro='NewIndex', value='Create New Index File',uname='NewIndex') 
              button3 = WIDGET_BUTTON(base2, event_pro='exprt',value='Export',uname='exprt',uvalue=CREATE_STRUCT('PeakLoc',[-9999])) 
   base10=widget_base(base2,/row,uname='base_10',xsize=getpar('PRbase_10x'),ysize=getpar('PRbase_10y'))
                      Label_9=Widget_label(base10,/Align_left,  value="File number (first-last)")
                      Text_Ind1 = WIDGET_TEXT(base10, uname='ExpStrt', VALUE='0',/EDITABLE,xsize=getpar('PRtextfield'), scr_xsize=getpar('PRtextfield'))
                      Text_Ind2 = WIDGET_TEXT(base10, uname='ExpEnd', VALUE='0',/EDITABLE,xsize=getpar('PRtextfield'), scr_xsize=getpar('PRtextfield'))
      label33=Widget_label(base2,/Align_left, value="  ")
       button22 = WIDGET_BUTTON(base2, event_pro='user',value='User program (IDL only)',uname='user',uvalue=CREATE_STRUCT('user',[-9999],'pathDAT',['nix'],'pathERR',['nix'],'pathNAM',['nix'],'DAT',[-9999],'ERR',[-9999],'NAM',['nix'])) 
   
  
   
  WIDGET_CONTROL, base, /REALIZE
  XMANAGER, 'ProcPTR', base, /NO_BLOCK
  
END


pro dropsel, event
 WIDGET_CONTROL, event.id+1, gET_VALUE= sel
  sel=sel+strtrim(string(WIDGET_INFO(event.id, /droplist_select)-1),2)+','
  WIDGET_CONTROL, event.id+1, sET_VALUE= sel
 
end

pro exprt, event
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), gET_uVALUE=lib
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), gET_VALUE= path
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'FileList'), GET_uVALUE=Files
   ; WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'EngList'), gET_uVALUE= Engnames
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield2'), gET_VALUE= IndexFile
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ExpStrt'), gET_VALUE=i_start
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ExpEnd'), gET_VALUE=i_end
    name=strmid(indexfile,strlen(path)+1,strlen(indexfile)-strlen(path)-5)
    
   
    i_pdrift=WIDGET_INFO(WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop1'), /droplist_select)-1  
    i_udrift=WIDGET_INFO(WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop2'), /droplist_select)-1  
    i_udx=WIDGET_INFO(WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop3'), /droplist_select)-1  
    i_Tdrift=WIDGET_INFO(WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop4'), /droplist_select)-1  
    start=max(float(i_start))
    ende=max(float(i_end))
    i=start
    ;Engnames=reform(Engnames.names)
    ppbdata=readfloat(files[i])
    cpsdata=readfloat(strmid(files[i],0,strpos(files[i],'ppb')-4)+'cps/OCorr/corrcps'+strmid(files[i],strpos(files[i],'ppb')+3,20)+'UL.fdt')
   ; cpsdata=readfloat(strmid(files[i],0,strpos(files[i],'ppb')-4)+'cps/cps'+strmid(files[i],strpos(files[i],'ppb')+3,20)+'UL.fdt')
    engnames=reform(readcsvstr(strmid(files[i[0]],0,strpos(files[i[0]],'ppb')-7)+'EngData/EngDataNames'+strmid(files[i[0]],strpos(files[i[0]],'ppb')+3,20)+'.csv'))
    engdata=readfloat(strmid(files[i],0,strpos(files[i],'ppb')-7)+'EngData/EngData'+ strmid(files[i],strpos(files[i],'ppb')+3,20)+'.fdt')
   
   ;;; GET GPS DATA FOR PAMARCMIP
    if(strpos('E:\Pamarcmip\POLAR 5\w_data/',path) eq 0 AND strpos('E:\Pamarcmip\POLAR 5\w_data\10sec.ind',IndexFile) eq 0 AND i_start eq 0 AND i_end eq 62 ) then begin
          Recur_Pattern = '*GPS*.csv'
          GPSFiles = FILE_SEARCH(Path+'GPS',Recur_Pattern)
          for rsc2=0,max(d(GPSfiles))-1 do  begin 
                  gpstimes=readcsv(GPSFiles[rsc2],/returnstring)
                  gpstime=gpstimes[*,1]
                  hours=float(strmid(gpstime,max(strpos(gpstime,':'))-2,2))
                  minutes=float(strmid(gpstime,max(strpos(gpstime,':',/reverse_search))-2,2))
                  seconds=float(strmid(gpstime,max(strpos(gpstime,':',/reverse_search))+1,2))
                  day=float(strmid(gpstime,max(strpos(gpstime,'T',/reverse_search))-2,2))
                  month=float(strmid(gpstime,max(strpos(gpstime,'T',/reverse_search))-5,2))
                  year=float(strmid(gpstime,max(strpos(gpstime,'T',/reverse_search))-10,4))
                  year[where(year eq 0)]=2009  
                  t09gps = JULDAY(Month, Day, Year, Hours, Minutes, Seconds)-Julday(1,1,2009,0,0,0)
                  gpstime=gpstimes[*,0]
                  hours=float(strmid(gpstime,max(strpos(gpstime,':'))-2,2))
                  minutes=float(strmid(gpstime,max(strpos(gpstime,':',/reverse_search))-2,2))
                  seconds=float(strmid(gpstime,max(strpos(gpstime,':',/reverse_search))+1,2))
                  day=float(strmid(gpstime,max(strpos(gpstime,'T',/reverse_search))-2,2))
                  month=float(strmid(gpstime,max(strpos(gpstime,'T',/reverse_search))-5,2))
                  year=float(strmid(gpstime,max(strpos(gpstime,'T',/reverse_search))-10,4))
                  year[where(year eq 0)]=2009
                  t09loc = JULDAY(Month, Day, Year, Hours, Minutes, Seconds)-Julday(1,1,2009,0,0,0)
                  gpsdt=double(readcsv(GPSFiles[rsc2]))
                  gpsdt[*,0]=t09gps
                  gpsdt[*,1]=t09loc
                  if(rsc2 eq 0) then gpsdata=gpsdt else gpsdata=[gpsdata,gpsdt]
          endfor
          gpsdata=transpose(gpsdata)
          gpsdata=gpsdata[*,where(gpsdata[0,*] gt 0)]
          engnames[indgen(6)+max(d(engnames))-6]=['t09gps','t09loc','longitude','latitude','altitude','speed']
          hlpi=gpsdata[*,where(gpsdata[0,*] gt min(engdata[*,0]) and gpsdata[0,*] lt max(engdata[*,0]) )]
          for rsc=0,5 do engdata[*,rsc+max(d(engnames))-6]=transpose(interpol(hlpi[rsc,*],hlpi[0,*],reform(engdata[*,0])))         
 endif
 
 
 
    masses2=  readcsv(strmid(files[i],0,strpos(files[i],'ppb')-4)+'IonList/MassIDs_'+strmid(files[i],strpos(files[i],'ppb')+3,20)+'UL.csv')
    par=readfloat(strmid(files[i],0,strpos(files[i],'ppb')-14)+'FileInfo/Time2MassPAR/'+strmid(files[i],strpos(files[i],'ppb')+3,20)+'PAR2.fdt')
    mode=par[9]
 
  if ( getpar('ApplyProtocol') eq 1) then begin
   Fha2o=[0,0,0]
   S_val=fltarr(23)          
   Serr_val=fltarr(23)          
   S_val2=fltarr(23)          
   Serr_val2=fltarr(23)          
   
   
        ProtRest=-19999
        ProtRestEng=-19999
        Prot=-19999
        ProtEng=-19999
        NameMarker=getstr('TraceNameMarker')
        MarkerValue=getpar('MarkerValue')
        DurationProtocol=getpar('Duration')
        MarkerTrace=engdata[*,where(strpos(engnames,nameMarker)gt -0.5)] 
        if(max(where(MarkerTrace eq MarkerValue)) gt -0.5) then begin
              if (max(ProtRest) gt -19999) then Prot=cpsdata[*,where(MarkerTrace eq MarkerValue)] else Prot=cpsdata[*,where(MarkerTrace eq MarkerValue)]
              if (max(ProtRestEng) gt -19999) then ProtEng=engdata[where(MarkerTrace eq MarkerValue),*] else ProtEng=engdata[where(MarkerTrace eq MarkerValue),*]
              if( (max(ProtEng[*,0])- min(ProtEng[*,0]))*24*60 gt DurationProtocol) then begin
                      RelTime=(ProtEng[*,0]- min(ProtEng[*,0]))*24*60
                      Prot=Prot[*,where(RelTime lt DurationProtocol)]
                      ProtEng=ProtEng[where(RelTime lt DurationProtocol),*]
        ProtRest=-19999
        ProtRestEng=-19999
                      SS1=ActrisProtocol_old(path,Prot,masses2,ProtEng,engnames)
                      Fha2o=[[Fha2o],[SS1.Fptr]]
                    S_val=[[S_val],[SS1.S_val]]
                    Serr_val=[[Serr_val],[SS1.Serr_val]]
                    S_val2=[[S_val2],[SS1.S_val2]]
                    Serr_val2=[[Serr_val2],[SS1.Serr_val2]]
             
              endif else begin
                      ProtRest=Prot
                      ProtRestEng=ProtEng
              endelse
        endif
   endif
 
 
    ind=index(ppbdata, masses2,engnames,engdata,indexfile)
    S1=averaging(cpsdata,masses2,engdata,engnames,ind)   
    FinalDataNames=S1.names
    carryover=S1.carryover
    FiDaNa=float(FinalDataNames)
    
    FinalData=S1.data  
    FinalDataErr=S1.dataErr  
    engrest=S1.resteng 
    datarest=S1.restdata
    if (max(datarest) gt -19999) then begin
            if(size(datarest,/n_dimensions) eq 1)then restcyc=[-9999,1] else restcyc=size(datarest,/dimensions) 
            restcyc=restcyc[1]
            cyc=size(ppbdata,/dimensions) & cyc=cyc[1]
            datarestppb=ppbdata[*,indgen(restcyc)+cyc-restcyc]
    endif else datarestppb=-19999
    
 ;   m21=FinalData[*,where(abs(FiDaNa-21.021) le 0.002)] & m21=m21[*,0]
  ;  if(getpar('m38') eq 1) then begin
   ;         m38=FinalData[*,where(abs(FiDaNa-38.0326) le 0.002)]
    ;        m38=m38[*,0]
    ;endif else begin
     ;       m38=FinalData[*,where(abs(FiDaNa-39.0327) le 0.002)]
      ;      m38=m38[*,0]
 
   ; endelse
    pdrift=FinalData[*, where(strmatch(FinalDataNames,'p_drift*') eq 1 or strmatch(FinalDataNames,'p-Drift*') eq 1)] 
    mistUD=FinalData[*, where(strmatch(FinalDataNames,'Udrift*') eq 1)]
    mistUD=mistUD[*,0]
    udrift=mistUD+FinalData[*,where(strmatch(FinalDataNames,'Uq*') eq 1 or strmatch(FinalDataNames,'Udx*') eq 1)]
    tdrift=FinalData[*,where(strmatch(FinalDataNames,'Drift_Temperature*') eq 1 or strmatch(FinalDataNames,'T-Drift*') eq 1)]+273.15
    pdrift=pdrift[*,0]
    udrift=udrift[*,0]
    tdrift=tdrift[*,0]
    masses=reform(FiDaNa[where(FiDaNa gt 0)])
    
    
    Prim=getPrimIons(masses,transpose(FinalData[*,where(FiDaNa gt 0)]),mode)
    FinalData[*,where(FiDaNa gt 0)]=transpose(calcppb( transpose(FinalData[*,where(FiDaNa gt 0)]), masses, Prim.A,Prim.B,pdrift,udrift,tdrift,max(FinalData[0])))
    
    
    
    print, string(i)+'  '+files[i]
               
               
      ;if(strpos('D:\Pamarcmip\POLAR 5\w_data/Averaged_ndex_Name_0_31.fdt',pathdat) eq 0) then begin
          
    ;for i=1,max(size(files,/dimensions))-1 do begin
   for i=start+1,ende do begin
          ppb=readfloat(files[i])
          cps=readfloat(strmid(files[i],0,strpos(files[i],'ppb')-4)+'cps/OCorr/corrcps'+strmid(files[i],strpos(files[i],'ppb')+3,20)+'UL.fdt')
    ;      cps=readfloat(strmid(files[i],0,strpos(files[i],'ppb')-4)+'cps/cps'+strmid(files[i],strpos(files[i],'ppb')+3,20)+'UL.fdt')
     eng=readfloat(strmid(files[i],0,strpos(files[i],'ppb')-7)+'EngData/EngData'+strmid(files[i],strpos(files[i],'ppb')+3,20)+'.fdt')
          ;;; GET GPS DATA FOR PAMARCMIP
          if(strpos('E:\Pamarcmip\POLAR 5\w_data/',path) eq 0 AND strpos('E:\Pamarcmip\POLAR 5\w_data\10sec.ind',IndexFile) eq 0 AND i_start eq 0 AND i_end eq 62 ) then begin
             hlpi=gpsdata[*,where(gpsdata[0,*] gt min(eng[*,0]) and gpsdata[0,*] lt max(eng[*,0]) )]
            for rsc=0,5 do eng[*,rsc+max(d(engnames))-6]=transpose(interpol(hlpi[rsc,*],hlpi[0,*],reform(eng[*,0])))
            print, [max(d(hlpi[0,*])),max(d(eng[*,0])),range(eng[*,51])]
            print,'kk'
          endif 
      
      
      
      
      
         Dppb=d(ppb)
         Dcps=d(cps)
         Deng=d(eng)
          if(max(Dppb[0]) ne max(d(masses2)))then begin 
          ppb=-9999
          print, 'wrong dimension ppb'
          endif
            if(max(Dcps[0]) ne max(d(masses2)))then begin 
          cps=-9999
          print, 'wrong dimension cps'
          endif
            if(max(Deng[1]) ne max(d(engnames)))then begin 
          eng=-9999
          print, 'wrong dimension eng'
          endif
      
          
          if (max(cps) gt -9999) then if (max(eng) gt -9999) then begin
                  if (max(datarestppb) gt -19999) then ppbdata=[[datarestppb],[ppb]] else ppbdata=ppb
                  if (max(datarest) gt -19999) then cpsdata=[[datarest],[cps]] else cpsdata=cps
                  if (max(engrest) gt -19999) then  engdata=[engrest,eng] else engdata=eng
                 
       if ( getpar('ApplyProtocol') eq 1) then begin
        NameMarker=getstr('TraceNameMarker')
        MarkerValue=getpar('MarkerValue')
        DurationProtocol=getpar('Duration')
        MarkerTrace=engdata[*,where(strpos(engnames,nameMarker)gt -0.5)] 
        if(max(where(MarkerTrace eq MarkerValue)) gt -0.5) then begin
              if (max(ProtRest) gt -19999 and max(ProtRestEng[*,0]) lt min(ProtEng[*,0]) and max(ProtRestEng[*,0])+10.0/(24.0*3600) gt min(ProtEng[*,0])) then begin
                      Prot=[[ProtRest],[cpsdata[*,where(MarkerTrace eq MarkerValue)] ]]
                      ProtEng=[ProtRestEng,engdata[where(MarkerTrace eq MarkerValue),*]]
                      print,'stop'
              endif else begin 
                      Prot=cpsdata[*,where(MarkerTrace eq MarkerValue)]
                      ProtEng=engdata[where(MarkerTrace eq MarkerValue),*]
              endelse
              if( (max(ProtEng[*,0])- min(ProtEng[*,0]))*24*60 gt DurationProtocol) then begin
                      RelTime=(ProtEng[*,0]- min(ProtEng[*,0]))*24*60
                      Prot=Prot[*,where(RelTime lt DurationProtocol)]
                      ProtEng=ProtEng[where(RelTime lt DurationProtocol),*]
                      ProtRest=-19999
                      ProtRestEng=-19999
                    SS1=ActrisProtocol_old(path,Prot,masses2,ProtEng,engnames)
                    Fha2o=[[Fha2o],[SS1.Fptr]]
                    S_val=[[S_val],[SS1.S_val]]
                    Serr_val=[[Serr_val],[SS1.Serr_val]]
                    S_val2=[[S_val2],[SS1.S_val2]]
                    Serr_val2=[[Serr_val2],[SS1.Serr_val2]]
    
              endif else begin
                      ProtRest=Prot
                      ProtRestEng=ProtEng
              endelse
        endif
        
       
        
   endif
            
                 
                 
                  ind=index(ppbdata, masses2,engnames,engdata,indexfile)
                  S1=averaging(cpsdata,masses2,engdata,engnames,ind,carryover)  
                  engrest=S1.resteng 
                  datarest=S1.restdata 
                  if (max(datarest) gt -19999) then begin
                            if(size(datarest,/n_dimensions) eq 1) then restcyc=[-9999,1] else restcyc=size(datarest,/dimensions) 
                            restcyc=restcyc[1]
                            cyc=size(ppbdata,/dimensions) & cyc=cyc[1]
                            datarestppb=ppbdata[*,indgen(restcyc)+cyc-restcyc]
                  endif else datarestppb=-19999
                  newdat=S1.data  
                  newdatErr=S1.dataErr  
    ;              m21=newdat[*,where(abs(FiDaNa-21.021) le 0.002)] & m21=m21[*,0]
     ;             if(getpar('m38') eq 1) then begin
      ;                    m38=newdat[*,where(abs(FiDaNa-38.0326) le 0.002)]
       ;                   m38=m38[*,0]
        ;          endif else begin
         ;                 m38=newdat[*,where(abs(FiDaNa-39.0327) le 0.002)]
          ;                m38=m38[*,0]
           ;       endelse
   
                  pdrift=newdat[*, where(strpos(FinalDataNames,Engnames[i_pdrift]) gt -1)] 
                  udrift=newdat[*, where(strpos(FinalDataNames,Engnames[i_udrift]) gt -1)]+newdat[*,where(strpos(FinalDataNames,Engnames[i_udx]) gt -1)]    
                  tdrift=newdat[*,where(strpos(FinalDataNames,Engnames[i_Tdrift]) gt -1)]+273.15
                  pdrift=pdrift[*,0]
                  udrift=udrift[*,0]
                  tdrift=tdrift[*,0]
                  masses=reform(FiDaNa[where(FiDaNa gt 0)])
                  Prim=getPrimIons(masses, transpose(newdat[*,where(FiDaNa gt 0)]),mode)
                  newdat[*,where(FiDaNa gt 0)]=transpose(calcppb( transpose(newdat[*,where(FiDaNa gt 0)]), masses, Prim.A,Prim.B,pdrift,udrift,tdrift,max(newdat[0])))
                           
                  FinalData=[FinalData,newdat]
                  FinalDataErr=[FinalDataErr,newdatErr]
                  print, string(i)+'  '+files[i]
          endif else print, 'NO DATA: '+string(i)+'  '+files[i]
    endfor
    
  SubtractBackground=0
  if(  SubtractBackground eq 1) then begin
    SubBgData=dblarr(d(FinalData))
    SubBgDataLOD=dblarr(d(FinalData))
    indM=FinalData[*,where(strpos(FinaldataNames,'indM') gt -0.5)]
    Bind=200
    filt=where(indM eq Bind)
    ;delete first... 
    filt2=filt[where(abs([-10,filt]-[filt,-10]) lt 1.5)]
    ;...and last averaged value for every bg measurement
    filt3=reverse(filt2)
    filt3=(filt3[where(abs([-10,(filt3)]-[(filt3),-10]) lt 1.5)])
    filt3=reverse(filt3)
   Bstrt= FinalData[*,where(strpos(FinaldataNames,'tSTRTav') gt -0.5)]
    Bstrt=Bstrt[filt3]
    Bend= FinalData[*,where(strpos(FinaldataNames,'tENDav') gt -0.5)]
    Bend=Bend[filt3]
    dims=d(FinalData)
    backfor=95.0 ; in minutes look back and forward for bg-measurements
    for i=0,max(dims[0])-1 do begin
      strt= FinalData[i,where(strpos(FinaldataNames,'tSTRTav') gt -0.5)]
      eend= FinalData[i,where(strpos(FinaldataNames,'tENDav') gt -0.5)]
       BGfilt=filt3[where(Bstrt gt max(strt-backfor/(24.9*60.0)) AND Bend lt max(eend+backfor/(24.9*60.0)))]
      BG=FinalData[BGfilt,*]
      SD=stddev(BG,dimension=1,/NAN)
      BG=total(BG,1,/NAN)/max(d(BGfilt))
      SubBgData[i,*]=Finaldata[i,*]-BG
      SubBgDataLOD[i,*]=3.0*SD
    endfor
    
    SubBgData[*,where(FiDaNa eq 0)]=FinalData[*,where(FiDaNa eq 0)]
    SubBgDataLOD[*,where(FiDaNa eq 0)]=FinalData[*,where(FiDaNa eq 0)]

    makefloat, path+'SubBg_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt', SubBgData
    makefloat,path+'SubBgLOD_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt', SubBgDataLOD
    if(getpar('SaveCsv') eq 1) then  MakeCsv,path+'SubBg_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.csv',transpose([transpose(FinalDataNames),string(SubBgData)])
    if(getpar('SaveCsv') eq 1) then  MakeCsv,path+'SubBgLOD_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.csv',transpose([transpose(FinalDataNames),string(SubBgDataLOD)])
  
    
    
  endif  
    makefloat, path+'Averaged_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt', FinalData
    makefloat,path+'AveragedErr_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt', FinalDataErr
    makecsv,path+'AveragedNames_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.csv',transpose(FinalDataNames)
  
        if(getpar('SaveCsv') eq 1) then  MakeCsv,path+'Averaged_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.csv',transpose([transpose(FinalDataNames),string(FinalData)])
       if(getpar('SaveCsv') eq 1) then  MakeCsv,path+'AveragedErr_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.csv',transpose([transpose(FinalDataNames),string(FinalDataErr)])
 
     if ( getpar('ApplyProtocol') eq 1) then begin
       makefloat,path+'Fh2o_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt', Fha2o
   makefloat,path+'S_val_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt', S_val
     
     Fha2o=Fha2o[*,1:*]
     S_val=S_val[*,1:*]
     Serr_val=Serr_val[*,1:*]
     S_val2=S_val2[*,1:*]
     Serr_val2=Serr_val2[*,1:*]
     
      makefloat,path+'Fh2o_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt', Fha2o
   makefloat,path+'S_val_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt', S_val
   makefloat,path+'Serr_val_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt', Serr_val
     makefloat,path+'S_val2_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt', S_val2
   makefloat,path+'Serr_val2_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt', Serr_val2
       if(getpar('SaveCsv') eq 1) then  MakeCsv,path+'Fh2o_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.csv',transpose([transpose(['t09','flow [sccm]','err [sccm]']),transpose(string(Fha2o))])
       if(getpar('SaveCsv') eq 1) then  MakeCsv,path+'S_val_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.csv',transpose([transpose(SS1.S_nam),transpose(string(S_val))])
       if(getpar('SaveCsv') eq 1) then  MakeCsv,path+'Serr_val_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.csv',transpose([transpose(SS1.S_nam),transpose(string(Serr_val))])
     if(getpar('SaveCsv') eq 1) then  MakeCsv,path+'S_val2_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.csv',transpose([transpose(SS1.S_nam),transpose(string(S_val2))])
       if(getpar('SaveCsv') eq 1) then  MakeCsv,path+'Serr_val2_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.csv',transpose([transpose(SS1.S_nam),transpose(string(Serr_val2))])
 
     
     endif  
    print, 'exprt'
end


PRO getDir, event
  COMPILE_OPT hidden
  Path=''
  Path=dialog_pickfile( TITLE='Select directory (ppb data)', /DIRECTORY )
  if (path NE '') then begin
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), SET_VALUE= path
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'FileList'), SET_VALUE= ''
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'EngList'), SET_VALUE= ''
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'MassList'), SET_VALUE= ''
          Files=Filelst(path)
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'FileList'), SET_VALUE= Files.disp
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'FileList'), SET_uVALUE= Files.path
          masses=readcsv(path+'UnifiedMassList.csv')
          masses=masses[*,0]
          engnames=readcsvstr(path+'Export/EngData/'+'Engdatanames.csv')
          
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'EngList'), SET_VALUE= Engnames
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'EngList'), SET_uVALUE= create_struct('data', -9999,'names',Engnames)
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'MassList'), SET_VALUE= string(masses,format='(F9.3)')
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'MassList'), SET_uVALUE= masses
          
      
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop1'), SET_VALUE= ['  ',transpose(engnames)]
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop2'), SET_VALUE= ['  ',transpose(engnames)]
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop3'), SET_VALUE= ['  ',transpose(engnames)]
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop4'), SET_VALUE= ['  ',transpose(engnames)]
                          
  endif
END



pro NewIndex,event
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), gET_VALUE= path
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield2'), gET_VALUE= IndexFile
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'FileList'), GET_uVALUE=Files
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'EngList'), GET_uVALUE=S1
   i=widget_info(WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'FileList'),/List_select)
  
 engnames=readcsvstr(strmid(files[i[0]],0,strpos(files[i[0]],'ppb')-7)+'EngData/EngDataNames'+strmid(files[i[0]],strpos(files[i[0]],'ppb')+3,20)+'.csv')
   
  
  
    CondOps= ['         ','    <    ','    =    ','    >    ','AND  =','OR =','AND NOT =','OR NOT =','subtract  >']

    
      base=widget_base(/column,xsize=getpar('NEbase_1x'),ysize=getpar('NEbase_1y'))
         base0=widget_base(base,/row,xsize=getpar('NEbase_2x'),ysize=getpar('NEbase_2y'))
              labe=Widget_label(base0,/Align_left, value='', xSIZE = getpar('NElab_1x'))
              Text0 = WIDGET_TEXT(base0, VALUE='Index_Name', uname='Text0', /EDITABLE)
              but = WIDGET_BUTTON(base0,event_pro='SetIndVal',value='get current values', uname='but',uvalue=IndexFile) 
              labe=Widget_label(base0,/Align_left, value='               max averaging interval [s]:', xSIZE = getpar('NElab_2x'))
              Text0 = WIDGET_TEXT(base0, VALUE='3600', uname='Textt0', xSIZE = getpar('NEtxt_1x'), /EDITABLE)
   labe=Widget_label(base,/Align_left, value='  INDEX_M (measurements):   ', xSIZE = getpar('NElab_3x')) 
   base0=widget_base(base,/row,xsize=getpar('NEbase_3x'),ysize=getpar('NEbase_3y'))
   labe=Widget_label(base0,/Align_left, value='Select Engineering Data ', xSIZE = getpar('NElab_4x')) 
   labe=Widget_label(base0,/Align_left, value='| Selection ', xSIZE = getpar('NElab_5x')) 
   labe=Widget_label(base0,/Align_left, value=' OPs & COND', xSIZE = getpar('NElab_6x')) 
    labe=Widget_label(base0,/Align_left, value=' Value', xSIZE = getpar('NElab_7x')) 
   labe=Widget_label(base0,/Align_left, value='indM value', xSIZE = getpar('NElab_7x')) 
   labe=Widget_label(base0,/Align_left, value=' default', xSIZE = getpar('NElab_7x')) 
   sch=['0','100','200']
   for i=1,10 do begin
          if (i lt 9.5) then ii=string(i,format='(I1)') else ii=string(i,format='(I2)')
          base1=widget_base(base,/row,xsize=getpar('NEbase_4x'),ysize=getpar('NEbase_4y'))
          Drop1=widget_droplist(base1, event_pro='DropSel',uname='Drop'+ii,value=['  ',transpose(engnames)], xSIZE = getpar('NElab_4x'),uvalue=path)
          Tex1 = WIDGET_TEXT(base1, VALUE='', uname='Tex'+ii, /EDITABLE, YSIZE = getpar('NEtxt_1y'), xSIZE = getpar('NEtxt_2x'))
          Dropp1=widget_droplist(base1,uname='Dropp'+ii,value=CondOps, xSIZE = getpar('NElab_6x'))
          Text1 = WIDGET_TEXT(base1, VALUE='', uname='Text'+ii, /EDITABLE, YSIZE =  getpar('NEtxt_1y'), xSIZE = getpar('NEtxt_1x'))
          label1=Widget_label(base1,/Align_left, value='', xSIZE = getpar('NElab_1x'))
          if(i lt 2.5) then Textt1 = WIDGET_TEXT(base1, VALUE=sch[i], uname='Textt'+ii, YSIZE =  getpar('NEtxt_1y'), xSIZE = getpar('NEtxt_1x'))
          if(i gt 2.5) then Textt1 = WIDGET_TEXT(base1, VALUE='', uname='Textt'+ii, /EDITABLE, YSIZE =  getpar('NEtxt_1y'), xSIZE = getpar('NEtxt_1x'))
          labell1=Widget_label(base1,/Align_left, value='', xSIZE = getpar('NElab_8x'))
          if(i ne 1) then labell1=Widget_label(base1,/Align_left, value='', xSIZE = getpar('NElab_7x'))
          if(i eq 1) then Texttt1 = WIDGET_TEXT(base1, VALUE='300', uname='Texttt'+ii,  YSIZE =  getpar('NEtxt_1y'), xSIZE = getpar('NEtxt_1x')) else Texttt1 = WIDGET_TEXT(base1,/Align_left, value=' ', uname='Texttt'+ii)
   endfor
         lab=Widget_label(base,/Align_left, value='Hardcopy Section: Specify INDEX value onto which VALUES are added pointwize ', xSIZE = getpar('NElab_3x'))
        base0=widget_base(base,/row,xsize=getpar('NEbase_5x'),ysize=getpar('NEbase_5y'))
        labe=Widget_label(base0,/Align_left, value='INDEX ', xSIZE = getpar('NElab_9x')) 
        labe=Widget_label(base0,/Align_left, value='|         VALUES ', xSIZE = getpar('NElab_10x')) 
         base15=widget_base(base,/row,xsize=getpar('NEbase_6x'),ysize=getpar('NEbase_6y'))
              Text15 = WIDGET_TEXT(base15, VALUE='', uname='Dext15',/Wrap, /EDITABLE, YSIZE =  getpar('NEtxt_2y'), xSIZE = getpar('NEtxt_3x'))
              Textt15 = WIDGET_TEXT(base15, VALUE='', uname='Dextt15',/Wrap, /EDITABLE, YSIZE = getpar('NEtxt_2y'), xSIZE = getpar('NElab_7x'))
      
         base16=widget_base(base,/row,xsize=getpar('NEbase_7x'),ysize=getpar('NEbase_7y'))
              Text16 = WIDGET_TEXT(base16, VALUE='', uname='Dext16',/Wrap, /EDITABLE, YSIZE = getpar('NEtxt_2y'), xSIZE = getpar('NEtxt_3x'))
              Textt16 = WIDGET_TEXT(base16, VALUE='', uname='Dextt16',/Wrap, /EDITABLE, YSIZE = getpar('NEtxt_2y'), xSIZE = getpar('NElab_7x'))
         
        base17=widget_base(base,/row,xsize=getpar('NEbase_8x'),ysize=getpar('NEbase_8y'))
              Text17 = WIDGET_TEXT(base17, VALUE='', uname='Dext17',/Wrap, /EDITABLE, YSIZE = getpar('NEtxt_2y'), xSIZE = getpar('NEtxt_3x'))
              Textt17 = WIDGET_TEXT(base17, VALUE='', uname='Dextt17',/Wrap, /EDITABLE, YSIZE = getpar('NEtxt_2y'), xSIZE = getpar('NElab_7x'))
         
        base18=widget_base(base,/row,xsize=getpar('NEbase_9x'),ysize=getpar('NEbase_9y'))
              Text18 = WIDGET_TEXT(base18, VALUE='', uname='Dext18',/Wrap, /EDITABLE, YSIZE = getpar('NEtxt_2y'), xSIZE = getpar('NEtxt_3x'))
              Textt18 = WIDGET_TEXT(base18, VALUE='', uname='Dextt18',/Wrap, /EDITABLE, YSIZE = getpar('NEtxt_2y'), xSIZE = getpar('NElab_7x'))
      labe=Widget_label(base,/Align_left, value='  INDEX_S (sampling):   ', xSIZE = getpar('NElab_3x')) 
   base0=widget_base(base,/row,xsize=getpar('NEbase_10x'),ysize=getpar('NEbase_10y'))
   labe=Widget_label(base0,/Align_left, value='Select Engineering Data ', xSIZE = getpar('NElab_4x')) 
   labe=Widget_label(base0,/Align_left, value='| Selection ', xSIZE = getpar('NElab_5x')) 
   labe=Widget_label(base0,/Align_left, value=' OPs & COND', xSIZE = getpar('NElab_6x')) 
    labe=Widget_label(base0,/Align_left, value=' Value', xSIZE = getpar('NElab_7x')) 
   labe=Widget_label(base0,/Align_left, value='indS value', xSIZE = getpar('NElab_7x')) 
   labe=Widget_label(base0,/Align_left, value='ass indM', xSIZE = getpar('NElab_7x')) 
    for i=11,16 do begin
          if (i lt 9.5) then ii=string(i,format='(I1)') else ii=string(i,format='(I2)')
          base1=widget_base(base,/row,xsize=getpar('NEbase_11x'),ysize=getpar('NEbase_11y'))
          Drop1=widget_droplist(base1, event_pro='DropSel',uname='Drop'+ii,value=['  ',transpose(engnames)], xSIZE = getpar('NElab_4x'),uvalue=path)
          Tex1 = WIDGET_TEXT(base1, VALUE='', uname='Tex'+ii, /EDITABLE, YSIZE =  getpar('NEtxt_1y'), xSIZE = getpar('NEtxt_2x'))
          Dropp1=widget_droplist(base1,uname='Dropp'+ii,value=CondOps, xSIZE = getpar('NElab_6x'))
          Text1 = WIDGET_TEXT(base1, VALUE='', uname='Text'+ii, /EDITABLE, YSIZE =  getpar('NEtxt_1y'), xSIZE = getpar('NEtxt_1x'))
          label1=Widget_label(base1,/Align_left, value='', xSIZE = getpar('NElab_1x'))
           if(i eq 11 or i eq 13 or i eq 15) then Textt1 = WIDGET_label(base1,/Align_left, VALUE='10', uname='Textt'+ii,  xSIZE = getpar('NElab_11x'))
           if(i eq 12 or i eq 14 or i eq 16) then Textt1 = WIDGET_label(base1,/Align_left, VALUE='20', uname='Textt'+ii,  xSIZE = getpar('NElab_11x'))
           label1=Widget_label(base1,/Align_left, value='', xSIZE = getpar('NElab_8x'))
          if(i eq 12 or i eq 14 or i eq 16) then labell1=Widget_label(base1,/Align_left, value='', xSIZE = getpar('NElab_7x'))
          if(i eq 11 or i eq 13 or i eq 15) then Texttt1 = WIDGET_TEXT(base1, VALUE='', uname='Texttt'+ii, /EDITABLE, YSIZE =  getpar('NEtxt_1y'), xSIZE = getpar('NEtxt_1x')) else Texttt1 = WIDGET_TEXT(base1,/Align_left, value='', uname='Texttt'+ii) 
   endfor
      
  

     
         
         button = WIDGET_BUTTON(base,event_pro='SaveIndex', value='Save index File',uname='SaveIndex') 
         
            
  WIDGET_CONTROL, base, /REALIZE
  XMANAGER, 'NewIndex', base, /NO_BLOCK    
   
end

PRO NewIndex_event, event
 
END


pro plt, event

    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'EngList'), gET_uVALUE=Seng
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Files'), gET_uVALUE=Sppb
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Engineering'), get_uVALUE=xi
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Masses'), get_uVALUE= mass
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), gET_uVALUE=lib
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield2'), gET_VALUE=indexfile
    i_pdrift=WIDGET_INFO(WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop1'), /droplist_select)-1  
    i_udrift=WIDGET_INFO(WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop2'), /droplist_select)-1  
    i_udx=WIDGET_INFO(WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop3'), /droplist_select)-1  
    i_Tdrift=WIDGET_INFO(WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop4'), /droplist_select)-1  
     WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label1'), gET_uVALUE=par
      mode=par[9]
    
       
    ppbdata=Sppb.data
    cpsdata=Sppb.cpsdata
    masses2=Sppb.names
    engdata=Seng.data
    engnames=Seng.names
    k=min(where(abs(masses2-mass) lt 0.002))
     if (abs(mass-63.011) lt 0.001) then ppbdata[k,*]=ppbdata[k,*]-(engdata[*,5]-2.8)*0.9
    
    
    ind=index(ppbdata, masses2,engnames,engdata,indexfile)
    indexM=ind.m
    indexS1=ind.s1 
    indexS2=ind.s2 
    indexS3=ind.s3 
    if (ind.T ne -9999) then begin
            S1=averaging(ppbdata,masses2,engdata,engnames,ind)    
            FinalDataNames=S1.names
            FiDaNa=float(FinalDataNames)
            FinalData=S1.data  
            FinalDataRow=FinalData[*,where(abs(FiDaNa-mass) le 0.002)]
            S1=averaging(cpsdata,masses2,engdata,engnames,ind)    
            FinalCpsData=S1.data  
            FinalCpsDataErr=S1.dataErr  
            FinalCpsDataRow=FinalCpsData[*,where(abs(FiDaNa-mass) le 0.002)]
            FinalCpsDataRow2Err=FinalCpsDataErr[*,where(abs(FiDaNa-mass) le 0.002)]
;    m21=FinalCpsData[*,where(abs(FiDaNa-21.021) le 0.002)] & m21=m21[*,0]
 ;   if(getpar('m38') eq 1) then begin
  ;          m38=FinalCpsData[*,where(abs(FiDaNa-38.0326) le 0.002)]
   ;         m38=m38[*,0]
    ;endif else begin
     ;       m38=FinalCpsData[*,where(abs(FiDaNa-39.0327) le 0.002)]
      ;      m38=m38[*,0]
   ; endelse
            pdrift=FinalCpsData[*, where(FinalDataNames eq Engnames[i_pdrift])] 
            udrift=FinalCpsData[*, where(FinalDataNames eq Engnames[i_udrift])]+FinalCpsData[*,where(FinalDataNames eq Engnames[i_udx])]    
            tdrift=FinalCpsData[*,where(FinalDataNames eq Engnames[i_Tdrift])]+273.15
            pdrift=pdrift[*,0]
            udrift=udrift[*,0]
            tdrift=tdrift[*,0]
            Prim=getPrimIons(FiDaNa[where(FiDaNa ne 0)],transpose(FinalCpsData[*,where(FiDaNa ne 0)]),mode)
            FinalDataRow2=calcppb( FinalCpsDataRow, mass, Prim.A,Prim.B,pdrift,udrift,tdrift,max(engdata[0]))
    endif
  
    
    x=-9999
    y=-9999
    if(k gt -0.5) then begin 
          x=engdata[*,0]
          y=ppbdata[k,*]
          y2=y
          ytit='nmol/mol'
    endif else begin
          k=0
          x=engdata[*,0]
          y=ppbdata[k,*]
          y2=y
          ytit='nmol/mol'
          mass=masses2[0]
    
    endelse
    if( event.id eq  WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'EngList')) then  begin
          x=engdata[*,0]
          y=engdata[*,xi]
          y2=ppbdata[k,*]
          ranY=range(y[where(y gt -9999)])
          ranY2=range(y2[where(y2 gt -9999)])
          y2=y2 /( (ranY2[1]-ranY2[0])/(ranY[1]-ranY[0]))
          ranY2=range(y2[where(y2 gt -9999)])
          y2=y2-(ranY2[0]-ranY[0])
         ytit=' '
    endif
    
   
    
    caldat, min(x)+ Julday(1,1,2009,0,0,0), Month,Day,Year, Hour,Minute
    time1=string(Day,format='(I2.2)')+'.'+string(Month,format='(I2.2)')+'.'+string(Year,format='(I4.4)')+', '+string(Hour,format='(I2.2)')+':'+string(Minute,format='(I2.2)')
    caldat, max(x)+ Julday(1,1,2009,0,0,0), Month,Day,Year, Hour,Minute
    time2=string(Day,format='(I2.2)')+'.'+string(Month,format='(I2.2)')+'.'+string(Year,format='(I4.4)')+', '+string(Hour,format='(I2.2)')+':'+string(Minute,format='(I2.2)')
    misstx=max(x)-min(x)   
    xran=[min(x)-misstx*0.05,max(x)+misstx*0.05]
    misst=max(y[ where(y gt -9999) ])-min(y[ where(y gt -9999) ]) ; this is default...
  ; misst=max(quantile(y[ where(y gt -9999) ],0.999))-min(quantile(y[ where(y gt -9999) ],0.001)) 
    yran=[min(y[ where(y gt -9999) ])-misst*0.1,max(y[ where(y gt -9999) ])+misst*0.2] ;this is default...
   ; yran=[min(quantile(y[ where(y gt -9999) ],0.001))-misst*0.1,max(quantile(y[ where(y gt -9999) ],0.999))+misst*0.2]
  
   DEVICE, DECOMPOSED = 0 
   !P.MULTI = [0,1,1] 
   loadct,30
   plot, x[where(y gt -9999)],  y[where(y gt -9999)], /YNOZERO, ytitle=ytit,xrange=xran,yrange=yran,xstyle=1,ystyle=1, color=0, background=-1, thick=1,charsize=1.5,charthick=2
   loadct,31
   oplot, x,  y2,  color=0,thick=1 ;oplot all raw data in red
   oplot, x,  y,  color=12,thick=1 ;oplot all raw data in red
   xyouts,0.15,0.87 , 'm/z = '+strtrim(string(mass,format='(F9.3)'),2), color=16, charthick=3, charsize=1.5,/normal
   xyouts,0.15,0.91 , time1+' to '+time2, color=16, charthick=3, charsize=1.5,/normal
   if (ind.T ne -9999) then begin
      indvalues=multiples(indexM[sort(indexM)]) & indvalues=indvalues[*,0]
      coltab=[1,3,8]
      IS=[[indexS1],[indexS2],[indexS3]]
      for gg=0,2 do begin    
          filt2=where(indvalues ge 100+gg*100 and indvalues lt 150+gg*100)
          if(max(filt2) gt -0.5) then begin
                  indvaluesS1=indvalues[filt2]
                  nS1=max(size(indvaluesS1,/dimensions))
                  colorsS1=70+indgen(nS1)*floor(150/nS1)
                  for n=0,nS1-1 do begin ;oplot indM 100 & indS1
                          loadct,coltab[gg]
                          filt1=where(indexM eq indvaluesS1[n])
                          if(max(filt1) gt -1) then  oplot, x[filt1],  y[filt1], psym=4,symsize=1, color=colorsS1[n],  thick=3
                          sch2=reform(IS[*,gg])
                          if(max(where(sch2 gt 0)) gt -0.5) then oplot, x[where(sch2 gt 0)],min(yran)+misst*gg*0.005+sch2[where(sch2 gt 0)]*misst*0.1/(30),color=170, thick=1, psym=4
                          xyouts,0.6+0.1*gg,0.91-0.025*n , 'ind='+strtrim(string(indvaluesS1[n]),2), color=colorsS1[n], charthick=3, charsize=1.5,/normal
                  endfor
          endif       
       endfor
       loadct,31
       PlotFinalData=1
       if(PlotFinalData eq 1) then begin
          for j=0,max(size(FinalDataRow,/dimensions))-1 do begin ; averaged values from cps
                  oplot, [FinalData[j,0],FinalData[j,1]],[FinalDataRow2[j],FinalDataRow2[j]], thick=8, color=-1 
                  err=abs(FinalDataRow2[j]*FinalCpsDataRow2Err[j])
                  errplot,(FinalData[j,0]+FinalData[j,1])/2 ,FinalDataRow2[j]-err,FinalDataRow2[j]+err, color=-1,  thick=8
          endfor
          loadct,31
          for j=0,max(size(FinalDataRow,/dimensions))-1 do begin ; averaged values from ppb
                  oplot, [FinalData[j,0],FinalData[j,1]],[FinalDataRow[j],FinalDataRow[j]], thick=5, color=187 
          endfor
          xyouts,0.15,0.125,'___',color=187, charthick=4, charsize=1.5,/normal
          xyouts,0.18,0.12,'VMR from ppb files',color=187, charthick=3, charsize=1.5,/normal
          for j=0,max(size(FinalDataRow,/dimensions))-1 do begin ; averaged values from cps
                  oplot, [FinalData[j,0],FinalData[j,1]],[FinalDataRow2[j],FinalDataRow2[j]], thick=5, color=16 
                  err=abs(FinalDataRow2[j]*FinalCpsDataRow2Err[j])
                  errplot,(FinalData[j,0]+FinalData[j,1])/2 ,FinalDataRow2[j]-err,FinalDataRow2[j]+err, color=16,  thick=5
          endfor
          xyouts,0.5,0.125,'___',color=16, charthick=4, charsize=1.5,/normal
          xyouts,0.53,0.12,'VMR calculated from averaged cps values',color=16, charthick=3, charsize=1.5,/normal
          endif
   endif
  
end



PRO ProcPTR_event, event
  IF (TAG_NAMES(event, /STRUCTURE_NAME) EQ 'WIDGET_CONTEXT') THEN BEGIN
   ; contextBase = WIDGET_INFO(event.ID, FIND_BY_UNAME = 'contextMenu')
  ;    contextBase2 = WIDGET_INFO(event.ID, FIND_BY_UNAME = 'contextMenu2')
   ;  WIDGET_DISPLAYCONTEXTMENU, event.ID, event.X, event.Y, contextBase
  
    WIDGET_DISPLAYCONTEXTMENU, event.ID, event.X, event.Y, event.ID+1
 
  ENDIF

END

pro SaveIndex,event

WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text0'), gET_VALUE= name
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Textt0'), gET_VALUE= interval
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Drop1'), gET_uVALUE= path
if(str2vec(interval) eq -9999) then interval='3600'
IndexPar='_Textt0='+strtrim(interval,2)

for i=1,16 do begin
      if (i lt 9.5) then ii=string(i,format='(I1)') else ii=string(i,format='(I2)')
     ; vector=WIDGET_INFO(WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Drop'+ii), /droplist_select)
      WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Tex'+ii), gET_VALUE=vecSel
      condition=WIDGET_INFO(WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Dropp'+ii), /droplist_select)
      WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text'+ii), gET_VALUE=wert
      WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Textt'+ii), gET_VALUE=INDif
      WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Texttt'+ii), gET_VALUE=INDelse
      IndexPar=[IndexPar,'_Tex'+ii+'='+strtrim(vecSel,2),'_Dropp'+ii+'='+strtrim(string(condition,format='(I2)'),2),    $
      '_Text'+ii+'='+strtrim(wert,2),'_Textt'+ii+'='+strtrim(INDif,2),'_Texttt'+ii+'='+strtrim(INDelse,2)]
endfor   

for i=15,18 do begin
      ii=string(i,format='(I2)') 
      WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Dext'+ii), gET_VALUE=IndValue & IndValue=strjoin(strtrim(IndValue,2),/single)
      WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Dextt'+ii), gET_VALUE=Values2add & Values2add=strjoin(strtrim(Values2add,2),/single)
      IndexPar=[   IndexPar,'_Dext'+ii+'='+IndValue,'_Dextt'+ii+'='+Values2add] 
endfor  




makecsv,path+name+'.ind',transpose(IndexPar)
        


       WIDGET_CONTROL, event.TOP, /DESTROY
       
 
    
end
 

PRO SelectIndexFile, event
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), gET_VALUE= path
   
  COMPILE_OPT hidden
  IndexFile=''
  IndexFile=dialog_pickfile( TITLE='Select an index-file (*.ind)',Filter='*.ind', path=path, /MUST_EXIST )
  
  if (IndexFile NE '') then begin
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield2'), SET_VALUE= IndexFile
     
     
      
      S1=ReadIndexFile(IndexFile) 
    
  
       WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield2'), SET_uVALUE= S1
     
  endif
  end


pro selEng, event
    xi=event.index
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Engineering'), set_uVALUE=xi
    plt, event
end


PRO selFile, event
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'FileList'), GET_uVALUE=Files
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'EngList'), GET_uVALUE=S1
   i=widget_info(WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'FileList'),/List_select)
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ExpStrt'), sET_VALUE=string(min(i),format='(I4)')
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ExpEnd'), sET_VALUE=string(max(i),format='(I4)')
  
  
  engnames=readcsvstr(strmid(files[i[0]],0,strpos(files[i[0]],'ppb')-7)+'EngData/EngDataNames'+strmid(files[i[0]],strpos(files[i[0]],'ppb')+3,20)+'.csv')
  par=readfloat(strmid(files[i[0]],0,strpos(files[i[0]],'ppb')-14)+'FileInfo/Time2MassPAR/'+strmid(files[i[0]],strpos(files[i[0]],'ppb')+3,20)+'PAR2.fdt')
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label1'), sET_uVALUE=par
  
 
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'EngList'), sET_VALUE=engnames
 
   dr1=WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop1')
   dr2=WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop2')
   dr3=WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop3')
   dr4=WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'PTRdrop4')
  
  set1=WIDGET_INFO(dr1, /droplist_select) 
  set2=WIDGET_INFO(dr2, /droplist_select) 
  set3=WIDGET_INFO(dr3, /droplist_select) 
  set4=WIDGET_INFO(dr4, /droplist_select) 
  
   WIDGET_CONTROL, dr1, sET_VALUE= ['  ',transpose(engnames)]
   WIDGET_CONTROL, dr2, sET_VALUE= ['  ',transpose(engnames)]
   WIDGET_CONTROL, dr3, sET_VALUE= ['  ',transpose(engnames)]
   WIDGET_CONTROL, dr4, sET_VALUE= ['  ',transpose(engnames)]
  
  WIDGET_CONTROL, dr1, SET_DROPLIST_SELECT=set1
  WIDGET_CONTROL, dr2, SET_DROPLIST_SELECT=set2
  WIDGET_CONTROL, dr3, SET_DROPLIST_SELECT=set3
  WIDGET_CONTROL, dr4, SET_DROPLIST_SELECT=set4
 
  
  
  ;MASSES
  
   ;masses2=readcsv(strmid(files[i[0]],0,strpos(files[i[0]],'ppb'))+'MassIDs_'+strmid(files[i[0]],strpos(files[i[0]],'ppb')+3,20)+'UL.csv')
  masses2=readcsv(strmid(files[i[0]],0,strpos(files[i[0]],'ppb')-4)+'IonList/MassIDs_'+strmid(files[i[0]],strpos(files[i[0]],'ppb')+3,20)+'UL.csv')
   for k=0,max(size(i,/dimensions))-1 do begin
          mist=readcsv(strmid(files[i[k]],0,strpos(files[i[k]],'ppb')-4)+'IonList/MassIDs_'+strmid(files[i[k]],strpos(files[i[k]],'ppb')+3,20)+'UL.csv')
          if(max(size(mist,/dimensions)) lt max(size(masses2,/dimensions))) then masses2=mist
   endfor
  
   ;PPB
   ppb=readfloat(files[i[0]])
   ppb=ppb[indgen(max(size(masses2,/dimensions))),*]
   if (max(size(i,/dimensions)) gt 1) then for k=1,max(size(i,/dimensions))-1 do begin
          mist=readfloat(files[i[k]])
          ppb=[[ppb],[mist[indgen(max(size(masses2,/dimensions))),*]]]
   endfor
  
  
  ;CPS
  ;cpsdata=readfloat(strmid(files[i[0]],0,strpos(files[i[0]],'ppb'))+'cps'+strmid(files[i[0]],strpos(files[i[0]],'ppb')+3,20)+'UL.fdt')
  cpsdata=readfloat(strmid(files[i[0]],0,strpos(files[i[0]],'ppb')-4)+'cps/cps'+strmid(files[i[0]],strpos(files[i[0]],'ppb')+3,20)+'UL.fdt')
  if (max(size(i,/dimensions)) gt 1) then for k=1,max(size(i,/dimensions))-1 do begin
     mist2=readfloat(strmid(files[i[k]],0,strpos(files[i[k]],'ppb')-4)+'cps/cps'+strmid(files[i[k]],strpos(files[i[k]],'ppb')+3,20)+'UL.fdt')
     cpsdata=[[cpsdata],[mist2]]
  endfor
  
  ;ENG
  ;engdata=readfloat(strmid(files[i[0]],0,strpos(files[i[0]],'ppb'))+'EngData'+strmid(files[i[0]],strpos(files[i[0]],'ppb')+3,20)+'.fdt')
  engdata=readfloat(strmid(files[i[0]],0,strpos(files[i[0]],'ppb')-7)+'EngData/EngData'+strmid(files[i[0]],strpos(files[i[0]],'ppb')+3,20)+'.fdt')
  if (max(size(i,/dimensions)) gt 1) then for k=1,max(size(i,/dimensions))-1 do begin
     mist2=readfloat(strmid(files[i[k]],0,strpos(files[i[k]],'ppb')-7)+'EngData/EngData'+strmid(files[i[k]],strpos(files[i[k]],'ppb')+3,20)+'.fdt')
     ddi=d(engdata)
     mist2=mist2[*,indgen(ddi[1])]
     engdata=[engdata,mist2]
  endfor
   
   eng=create_struct('data',engdata,'names',engnames)
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'EngList'), sET_uVALUE=eng
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Files'), sET_uVALUE=create_struct('data',ppb,'cpsdata',cpsdata,'names',masses2)
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Directory'), sET_uVALUE=masses2
   plt, event
END


pro selMass, event
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'MassList'), get_uVALUE= masses 
    i=event.index
    mass=masses[i] 
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Masses'), set_uVALUE= mass
    plt, event
end


pro SetIndVal, event  

 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'but'), gET_uVALUE= IndexFile
  
  S1=ReadIndexFile(IndexFile) 
    
   for i=1,16 do begin
      if (i lt 9.5) then ii=string(i,format='(I1)') else ii=string(i,format='(I2)')
      helpi=S1.VECTORIND &  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Tex'+ii), SET_VALUE=helpi[i-1]
      helpi=S1.CONDIND &  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Dropp'+ii), SET_DROPLIST_SELECT=helpi[i-1]
      helpi=S1.VALUEIND & WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text'+ii), sET_VALUE=helpi[i-1]
      helpi=S1.IFIND & WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Textt'+ii), sET_VALUE=helpi[i-1]
      helpi=S1.ELSEIND &  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Texttt'+ii), sET_VALUE=helpi[i-1]
 
endfor   

for i=15,18 do begin
      ii=string(i,format='(I2)') 
       helpi=S1.INDVALUE & WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Dext'+ii), sET_VALUE=helpi[i-15]
      helpi=S1.VALUES2ADD & WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Dextt'+ii), sET_VALUE=helpi[i-15]
endfor  

WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Textt0'), sET_VALUE=S1.interval 
       
end
 


pro User, event  

  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), gET_VALUE= path
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), gET_uVALUE= lib
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield2'), gET_VALUE= IndexFile
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ExpStrt'), gET_VALUE= Strt
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ExpEnd'), gET_VALUE= Endd
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'user'), gET_uVALUE= S1
  if (max(lib) eq -9999) then  begin 
          lib=masslib(/extended)
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), sET_uVALUE=lib
  endif
  AerA=0
  AerB=1
  start=float(strt)
  ende=float(Endd)
  name=strmid(indexfile,strlen(path)+1,strlen(indexfile)-strlen(path)-5)
  if(strpos(IndexFile, 'click  right mouse button to select a index-file') eq 0) then print, 'Select index file first!'
  pathDAT=path+'Averaged_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt'
  pathERR=path+'AveragedErr_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.fdt'
  pathNAM=path+'AveragedNames_'+name+'_'+strtrim(string(start,Format='(I5)'),2)+'_'+strtrim(string(ende,Format='(I5)'),2)+'.csv'
  
  if(strpos(S1.pathdat,pathdat) eq 0) then begin
          FinalData=S1.DAT
          FinalDataErr=S1.ERR
          FinalDataNames=S1.NAM
  endif else begin
          FinalData=readfloat(pathDAT)
          if(max(FinalData) eq -9999) then print, 'Data export does not exist. Select correct file numbers and index file OR export data'
          FinalDataErr=readfloat(pathERR)
          FinalDataNames=readcsvstr(pathNAM)
          S1=CREATE_STRUCT('user',[-9999],'pathDAT',[pathdat],'pathERR',[pathERR],'pathNAM',[pathNAM],'DAT',FinalData,'ERR',FinalDataErr,'NAM',FinalDataNames)
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'user'), sET_uVALUE= S1
   endelse
  
   if(strpos('E:\1 year measurement in Cabauw 2015-2016\1 year cabauw data_mod\w_data/Averaged_ndex_Name_4395_4510.fdt',pathdat) eq 0) then begin
            FiDaNa=float(FinalDataNames)
            masses=reform(FiDaNa[where(FiDaNa gt 0)])
            base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
            MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
            MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
            MassList=WIDGET_LIST(base,event_pro="userplot5", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
            WIDGET_CONTROL, base, /REALIZE
            XMANAGER, 'user', base, /NO_BLOCK
            print, 'Cab Sept 2016'
  endif
  
    if(strpos('E:\1 year measurement in Cabauw 2015-2016\1 year cabauw data_mod\w_data/Averaged_ndex_Name_4793_4897.fdt',pathdat) eq 0) then begin
            FiDaNa=float(FinalDataNames)
            masses=reform(FiDaNa[where(FiDaNa gt 0)])
            base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
            MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
            MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
            MassList=WIDGET_LIST(base,event_pro="userplot5", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
            WIDGET_CONTROL, base, /REALIZE
            XMANAGER, 'user', base, /NO_BLOCK
            print, 'Cab Sept 2016'
  endif
 
  
  if(strpos('C:/indoorBBL/w_data/Averaged_ndex_Name_99_449.fdt',pathdat) eq 0) then begin
            FiDaNa=float(FinalDataNames)
            masses=reform(FiDaNa[where(FiDaNa gt 0)])
            base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
            MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
            MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
            MassList=WIDGET_LIST(base,event_pro="userplot2", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
            WIDGET_CONTROL, base, /REALIZE
            XMANAGER, 'user', base, /NO_BLOCK
            print, 'Indoor BBG'
  endif
  ;if(strpos('C:/2009_06_30 to 2009_09_01_Sonnblick/w_data/Averaged_ndex_Name_600_650.fdt',pathdat) eq 0) then begin
  if(strpos('C:/2009_06_30 to 2009_09_01_Sonnblick/w_data/Averaged_ndex_Name_12_979.fdt',pathdat) eq 0) then begin
            FiDaNa=float(FinalDataNames)
            masses=reform(FiDaNa[where(FiDaNa gt 0)])
            base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
            MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
            MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
            MassList=WIDGET_LIST(base,event_pro="userplot3", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
            WIDGET_CONTROL, base, /REALIZE
            XMANAGER, 'user', base, /NO_BLOCK
            print, 'Sonnblick 2009'
  endif
  if(strpos('C:/SOAS/w_data/Averaged_ndex_Name_3_738.fdt',pathdat) eq 0) then begin
            FiDaNa=float(FinalDataNames)
            masses=reform(FiDaNa[where(FiDaNa gt 0)])
            base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
            MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
            MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
            MassList=WIDGET_LIST(base,event_pro="userplot", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
            WIDGET_CONTROL, base, /REALIZE
            XMANAGER, 'user', base, /NO_BLOCK
            print, 'SOAS December 2015'
   endif
   
    if(strpos('C:/SOAS/w_data/Averaged_2IND_4_738.fdt',pathdat) eq 0) then begin
            FiDaNa=float(FinalDataNames)
            masses=reform(FiDaNa[where(FiDaNa gt 0)])
            base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
            MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
            MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
           ; MassList=WIDGET_LIST(base,event_pro="userplot4", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
             MassList=WIDGET_LIST(base,event_pro="userplotPTR_conference", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
            WIDGET_CONTROL, base, /REALIZE
            XMANAGER, 'user', base, /NO_BLOCK
            print, 'SOAS December 2015'
   endif
   
   if(strpos('D:\Pamarcmip\POLAR 5\acceptableWnoCorr\w_data/Averaged_ndex_Name_0_24.fdt',pathdat) eq 0) then begin
     FiDaNa=float(FinalDataNames)
     masses=reform(FiDaNa[where(FiDaNa gt 0)])
     base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
     MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
     MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
     ; MassList=WIDGET_LIST(base,event_pro="userplot4", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     MassList=WIDGET_LIST(base,event_pro="userplotPAMARCMIP", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     WIDGET_CONTROL, base, /REALIZE
     XMANAGER, 'user', base, /NO_BLOCK
     print, 'PAMARCMIP June 2018'
   endif
   if(strpos('D:\Pamarcmip\POLAR 5\w_data/Averaged_ndex_Name_0_31.fdt',pathdat) eq 0) then begin
     FiDaNa=float(FinalDataNames)
     masses=reform(FiDaNa[where(FiDaNa gt 0)])
     base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
     MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
     MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
     ; MassList=WIDGET_LIST(base,event_pro="userplot4", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     MassList=WIDGET_LIST(base,event_pro="userplotPAMARCMIPcor", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     WIDGET_CONTROL, base, /REALIZE
     XMANAGER, 'user', base, /NO_BLOCK
     print, 'PAMARCMIP June 2018'
   endif
   if(strpos('D:\Pamarcmip\POLAR 5\w_data/Averaged_ndex_Name_0_55.fdt',pathdat) eq 0) then begin
     FiDaNa=float(FinalDataNames)
     masses=reform(FiDaNa[where(FiDaNa gt 0)])
     base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
     MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
     MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
     ; MassList=WIDGET_LIST(base,event_pro="userplot4", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     MassList=WIDGET_LIST(base,event_pro="userplotPAMARCMIPall", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     WIDGET_CONTROL, base, /REALIZE
     XMANAGER, 'user', base, /NO_BLOCK
     print, 'PAMARCMIP June 2018'
   endif
   if(strpos('E:\Pamarcmip\POLAR 5\w_data/Averaged_0sec_0_55.fdt',pathdat) eq 0) then begin
     FiDaNa=float(FinalDataNames)
     masses=reform(FiDaNa[where(FiDaNa gt 0)])
     base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
     MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
     MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
     ; MassList=WIDGET_LIST(base,event_pro="userplot4", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     MassList=WIDGET_LIST(base,event_pro="userplotPAMARCMIP_10s", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     WIDGET_CONTROL, base, /REALIZE
     XMANAGER, 'user', base, /NO_BLOCK
     print, 'PAMARCMIP June 2018'
   endif

   if(strpos('E:\Pamarcmip\POLAR 5\w_data/Averaged_0sec_0_62.fdt',pathdat) eq 0) then begin
     FiDaNa=float(FinalDataNames)
     masses=reform(FiDaNa[where(FiDaNa gt 0)])
     base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
     MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
     MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
     ; MassList=WIDGET_LIST(base,event_pro="userplot4", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     MassList=WIDGET_LIST(base,event_pro="userplotPAMARCMIP_10s", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     WIDGET_CONTROL, base, /REALIZE
     XMANAGER, 'user', base, /NO_BLOCK
     print, 'PAMARCMIP final data Nov 2019'
   endif

   if(strpos('C:\calibrations\w_data/Averaged_AL_0_158.fdt',pathdat) eq 0) then begin
     FiDaNa=float(FinalDataNames)
     masses=reform(FiDaNa[where(FiDaNa gt 0)])
     base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
     MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
     MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
     ; MassList=WIDGET_LIST(base,event_pro="userplot4", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     MassList=WIDGET_LIST(base,event_pro="userplotBiosphereCAL", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     WIDGET_CONTROL, base, /REALIZE
     XMANAGER, 'user', base, /NO_BLOCK
     print, 'Biosphere Calibrations Uni Freiburg, Oct 2019 to Feb 2020'
   endif


   if(strpos('D:\RUPERT\TOF\w_data/Averaged_MIN_500_550.fdt',pathdat) eq 0) then begin
     FiDaNa=float(FinalDataNames)
     masses=reform(FiDaNa[where(FiDaNa gt 0)])
     base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 850, RESOURCE_NAME = 'user Evaluation')
     MassListLabel=Widget_label(base,/Align_left, value="Bg index", uname='ooo',uvalue=lib)
     Text = WIDGET_TEXT(base, VALUE='200', uname='BGindex',/Wrap, /EDITABLE, YSIZE =  1, xSIZE = 13)
     MassListLabel=Widget_label(base,/Align_left, value="Ch indici", uname='ppp')
     Text = WIDGET_TEXT(base, VALUE='301,302', uname='CHindis',/Wrap, /EDITABLE, YSIZE =  2, xSIZE = 13)
     MassListLabel=Widget_label(base,/Align_left, value="disp range (t09)", uname='qqq')
     Text = WIDGET_TEXT(base, VALUE='3926,4040', uname='DispRange',/Wrap, /EDITABLE, YSIZE =  1, xSIZE = 13)
     MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
     ; MassList=WIDGET_LIST(base,event_pro="userplot4", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     MassList=WIDGET_LIST(base,event_pro="userplotBiosphere", ysize=30,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     WIDGET_CONTROL, base, /REALIZE
     XMANAGER, 'user', base, /NO_BLOCK
     print, 'Biosphere Uni Freiburg, Oct 2019 to Feb 2020'
   endif

   if(strpos('C:\PICAB\PTR8000\w_data/Averaged_ndex_Name_50_125.fdt',pathdat) eq 0) then begin
    ; 1 minute average, nothing else
     FiDaNa=float(FinalDataNames)
     masses=reform(FiDaNa[where(FiDaNa gt 0)])
     base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
     MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
     MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
     ; MassList=WIDGET_LIST(base,event_pro="userplot4", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     MassList=WIDGET_LIST(base,event_pro="userplotPICAB_PTR8000", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     WIDGET_CONTROL, base, /REALIZE
     XMANAGER, 'user', base, /NO_BLOCK
     print, 'PICAB_PTR8000'
   endif
   
 ;  if(strpos('C:\PICAB\PTR1000\w_data/Averaged_ndex_Name_91_372.fdt',pathdat) eq 0) then begin
     if(strpos('C:\PICAB\PTR1000\w_data/Averaged_ndex_Name_91_192.fdt',pathdat) eq 0) then begin
   ; 1 minute average, nothing else
     FiDaNa=float(FinalDataNames)
     masses=reform(FiDaNa[where(FiDaNa gt 0)])
     base = WIDGET_BASE(/column, XSIZE = 150, YSIZE = 650, RESOURCE_NAME = 'user Evaluation')
     MassListLabel=Widget_label(base,/Align_left, value="", uname='ooo',uvalue=lib)
     MassListLabel=Widget_label(base,/Align_left, value="Masses:", uname='mmm',uvalue=S1)
     ; MassList=WIDGET_LIST(base,event_pro="userplot4", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     MassList=WIDGET_LIST(base,event_pro="userplotPICAB_PTR1000", ysize=45,xsize=11,UNAME = 'nnn',value=string(masses,format='(F9.3)'),uvalue=masses)
     WIDGET_CONTROL, base, /REALIZE
     XMANAGER, 'user', base, /NO_BLOCK
     print, 'PICAB_PTR1000'
   endif

   
   if(strpos('PIMMS',pathdat) eq 0) then begin
            FiDaNa=float(FinalDataNames)
            masses=reform(FiDaNa[where(FiDaNa gt 0)])
            indM=FinalData[*,where(strpos(FinalDataNames,'indM') ge 0)]
            indS2=FinalData[*,where(strpos(FinalDataNames,'indS2') ge 0)]
            indS1=FinalData[*,where(strpos(FinalDataNames,'indS1') ge 0)]
            for rr=0,6 do begin
                    if ( AerA eq 1) then filter=where(indM eq 101+rr and indS1 eq 20)
                    if ( AerB eq 1) then filter=where(indM eq 201+rr and indS2 eq 20)
                    data1=FinalData[filter,*]
                    data1m=data1[*,where(FiDaNa gt 0)]
                    ttst=[0,0]
                    for i= 0,max(d(masses))-1 do  ttst=[[ttst],[TM_TEST(data1m[3:11,i],data1m[[0,1],i],/unequal)]]
                    ttst=ttst[*,1:*]
                    filter=where(ttst[1,*] lt 0.05 and ttst[0,*] gt 0)
                    massesSIG=masses[filter]
                    data1m=data1m[*,filter]
                    tSTRTsamp=data1[*,where(strpos(FinalDataNames,'tSTRTsamp') ge 0)]                    
                    tENDsamp=data1[*,where(strpos(FinalDataNames,'tENDsamp') ge 0)]                    
                    tSTRTav=data1[*,where(strpos(FinalDataNames,'tSTRTav') ge 0)]                    
                    tENDav=data1[*,where(strpos(FinalDataNames,'tENDav') ge 0)]                    
                    samptime=(tENDsamp-tSTRTsamp)*24*60
                    meastime= (tENDav-tSTRTav)*24*60
                    AI1=data1[*,where(strpos(FinalDataNames,'AI 1[V]') ge 0)] ; desorption flow 
                    if ( AerB eq 1) then AI4=data1[*,where(strpos(FinalDataNames,'AI 4[V]') ge 0)] ; inlet B
                    if ( AerA eq 1) then AI4=data1[*,where(strpos(FinalDataNames,'AI 5[V]') ge 0)] ; inlet A
                    if ( AerA eq 1) then AI4=AI4-AI4+1.44  ; manual correction for exp 1+2
                    desorptionflow=AI1*50/5 ;ml/min
                    samplingflow=AI4*20/5 ;L/min
                    desV=desorptionflow*meastime/(1000*22.4);mol
                    sampV=samplingflow*samptime/1000;m3
                    ;AI5=data1[*,where(strpos(FinalDataNames,'AI 5[V]') ge 0)] ; inlet A
                    data1NMOLperM3=data1m
                    data1NGperM3=data1m
                    mO=sampV-sampV
                    mC=sampV-sampV
                    mH=sampV-sampV
                    mN=sampV-sampV
                    mUN=sampV-sampV
                    for i= 0,max(d(massesSIG))-1 do begin
                            data1NMOLperM3[*,i]=data1NMOLperM3[*,i]*desV/sampV
                            data1NGperM3[*,i]=data1NMOLperM3[*,i]*(massesSIG[i]-1)
                            jj=match(massesSIG[i],lib)
                            comp=jj.entry
                            if(strpos(jj.formula,'no match') eq 0 and massesSIG[i]lt 100) then mUN=mUN+ data1NGperM3[*,i] else begin
                                    mC=mC+data1NGperM3[*,i]*comp[1]*12/comp[0]+data1NGperM3[*,i]*comp[2]*13/comp[0]
                                    if(comp[1]+comp[2] ge 1) then mH=mH+data1NGperM3[*,i]*comp[3]*1/comp[0]
                                    if(comp[1]+comp[2] ge 1) then  mO=mO+data1NGperM3[*,i]*comp[4]*16/comp[0]
                                    if(comp[1]+comp[2] ge 1) then  mN=mN+data1NGperM3[*,i]*comp[7]*14/comp[0]
                            endelse
                    endfor
                    if(rr eq 0) then tot=transpose(total(data1NGperM3,2)/1000) else tot=[tot,transpose(total(data1NGperM3,2)/1000)]
                    if(rr eq 0) then totUN=transpose(mUN/1000) else totUN=[totUN,transpose(mUN/1000)]
                    if(rr eq 0) then totC=transpose(mC/1000) else totC=[totC,transpose(mC/1000)]
                    if(rr eq 0) then totH=transpose(mH/1000) else totH=[totH,transpose(mH/1000)]
                    if(rr eq 0) then totO=transpose(mO/1000) else totO=[totO,transpose(mO/1000)]
                    if(rr eq 0) then totN=transpose(mN/1000) else totN=[totN,transpose(mN/1000)]
            endfor
            print, [transpose(tSTRTsamp),transpose(total(tot,1))]
            print, 'h'
  endif
end
 
 
 
 
pro Userplot, event  
 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib
   
  ;print, masses[event.index]
 
          FinalData=S1.DAT
          FinalDataErr=S1.ERR
          FinalDataNames=S1.NAM


    indM=FinalData[*,where(strpos(FinalDataNames,'indM') ge 0)]
    indS3=FinalData[*,where(strpos(FinalDataNames,'indS3') ge 0)]
    indS2=FinalData[*,where(strpos(FinalDataNames,'indS2') ge 0)]
    indS1=FinalData[*,where(strpos(FinalDataNames,'indS1') ge 0)]
   
    mass=strtrim(string(masses[event.index],format='(F9.3)'),2)
 
  !P.MULTI = [0,1,4]   
  
    x=FinalData[*,where(strpos(FinalDataNames,'tSTRTsamp') ge 0)]
    y=FinalData[*,where(strpos(FinalDataNames,mass) ge 0)]
  MW=float(mass)
  cal=1
  if( MW eq 271.261 or MW eq 257.246 or MW eq 243.231 or MW eq 229.215 or MW eq 201.179 or MW eq 173.149 or MW eq 159.129 or MW eq 145.117) then cal=1.45
  if( MW eq 69.070) then cal=1.5*3/2; fragment on m41 and rate constant
  if( MW eq 71.049) then cal=1.04*3/2; fragment on m41 and rate constant
 if(MW eq 355.073) then begin
 MW=371.100
 y=y+FinalData[*,where(strpos(FinalDataNames,'356.075') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'357.066') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'371.100') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'372.101') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'373.097') ge 0)]
  mass='D5-c-Siloxane'
  endif
  

 filter=where(x gt 1628 and x lt 1637)
 filter=where((x gt 1628 and x lt 1630.45) or (x gt 1631.4 and x lt 1637.5)  or (x gt 1639.5 and x lt 1644.5) )
filter=where(x gt 1631.75 and x lt 1637.5)
filter=where(x gt 1630 and x lt 1640)

  x=x[filter]
  y=y[filter]
  indM=indM[filter]
  indS1=indS1[filter]
  indS2=indS2[filter]
  indS3=indS3[filter]
 
  
for s=0,3 do begin  
    timeB=-9999
    timeS=-9999
    sigB=-9999
    sigS=-9999
    if (s eq 0) then indS=indS1 else if (s eq 1) then indS=indS2 else indS=indS3
    if (s eq 0) then ind=100 else if (s eq 1) then  ind=200 else  ind=300
    if (s eq 0) then   factor=cal*MW*0.024/(22.4*0.132) else if (s eq 1) then factor=cal*MW*0.024/(22.4*0.216) else factor=cal*0.56/30 ;factor=cal*MW*0.56/(22.4*0.030)
    steps=[4,4,2,3]
    
    for i=1,steps[s] do begin
            filter=where(x gt 0 and indM eq ind+i)
            filter2=where(x gt 0 and indM eq ind+i and indS eq 10)
            filter3=where(x gt 0 and indM eq ind+i and indS eq 20)
            if (max(timeB) eq -9999) then timeB=x[filter2] else hlpB=x[filter2]
            if (max(timeS) eq -9999) then timeS=x[filter3] else hlpS=x[filter3]
            if (max(sigB) eq -9999) then sigB=factor*y[filter2] else begin
                hlpSig=factor*y[filter2]
                for r=0,max(d(timeB))-1 do sigB[r]=sigB[r]+hlpSig[where(hlpB eq timeB[r])]
            endelse
            if (max(sigS) eq -9999) then sigS=factor*y[filter3] else begin
                hlpSig=factor*y[filter3]
                for r=0,max(d(timeS))-1 do sigS[r]=sigS[r]+hlpSig[where(hlpS eq timeS[r])]
            endelse
     endfor
    yran=[min([0,sigB,sigS]),1.5*quantile([sigB,sigS],0.95)]
  if (s eq 0) then xran=range([timeS,timeB])
 span=max(yran[1]-yran[0])
 
   colorS=[0,220,8,128,15,12,7,11]
  colorB=[0,-1,152,217,207,172,251,155]
  Tsteps=['',' 50 C','100 C','150 C','200 C','250 C','300 C','350 C']
  Inlets=['A','B','DB1','DB1']
        loadct,38
              
    plot,timeS,sigS,   xrange=xran,  yrange=yran, charsize=2, charthick=2, color=0,background=-1, ytitle='ng/m3'

     loadct,31
         for i=1,steps[s] do begin
            filter2=where(x gt 0 and indM eq ind+i and indS eq 10)
            filter3=where(x gt 0 and indM eq ind+i and indS eq 20)
       ;     oplot,x[filter2],factor*y[filter2], color=colorB[i], thick=3
            oplot,x[filter3],factor*y[filter3], color=colorS[i], thick=3
     if (s eq 1) then begin 
  ;print, transpose(x[filter3])
 ; print, max(transpose(factor*y[filter3]))
  endif 
            
    endfor
  
         loadct,38
 
   oplot,timeS,sigS, color=0, thick=3
   oplot,timeS,sigS,psym=4, color=0, thick=3
sig=sigS-quantile(sigB,0.02)
lod=sigB-quantile(sigB,0.02)
lod=3*stddev(lod[where(lod lt 0)])
filt=where((sig) gt 0)

if (s eq 5) then begin
print, [s, float(max(d(filt)))/float(max(d(sig))), lod, mean( sig[filt])]
  print, transpose(timeS[filt])
  print, transpose(sig[filt])
  endif 
     loadct,31
    oplot,timeB,sigB, color=171, thick=3
   oplot,[0,10000],[quantile(sigB,0.02),quantile(sigB,0.02)], color=171, thick=3
   oplot,timeB,sigB,psym=4 ,color=171, thick=3

   loadct,31
      for i=1,steps[s] do begin
            filter2=where(x gt 0 and indM eq ind+i and indS eq 10)
            filter3=where(x gt 0 and indM eq ind+i and indS eq 20)
            oplot,x[filter2],factor*y[filter2], color=colorB[i], thick=3
       ;     oplot,x[filter3],factor*y[filter3], color=colorS[i], thick=3

   if (s eq 1) then xyouts,1631.25,max(yran)-span*0.10*i,Tsteps[i] , color=colorS[i], charthick=3, charsize=2
    endfor
  
         if (s eq 0) then xyouts,1631.25,max(yran)-span*0.10,mass+ ' ' , color=0, charthick=3, charsize=2
     xyouts,1637.25,max(yran)-span*0.10,Inlets[s] , color=0, charthick=3, charsize=2
 
  if (s eq 0) then begin 
  aaa= match(float(mass),lib,/narrow)
  cand=aaa.candidates
  dim=d(cand)
  if(size(cand,/n_dimensions) eq 1) then  xyouts,0.12,0.25,aaa.formula,/normal, color=12, charthick=2, charsize=1.2
  if(size(cand,/n_dimensions) gt 1) then  begin
  count=0
  for xxx=0,max(dim[1])-1 do if (abs(float(cand[0,xxx])) lt 20) then begin
   xyouts,0.12,0.25-0.02*count,cand[1,xxx],/normal, color=12, charthick=2, charsize=1.2
   count=count+1
   endif
   endif
    
  endif
  
  
  
  
endfor  
  
 



end



 
pro Userplot2, event  
 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib
   
  print, masses[event.index]
 
          FinalData=S1.DAT
          FinalDataErr=S1.ERR
          FinalDataNames=S1.NAM

    indM=FinalData[*,where(strpos(FinalDataNames,'indM') ge 0)]
  
    mass=strtrim(string(masses[event.index],format='(F9.3)'),2)
 
  !P.MULTI = [0,1,2]   
  
    x=FinalData[*,where(strpos(FinalDataNames,'tSTRTav') ge 0)]
    y=FinalData[*,where(strpos(FinalDataNames,mass) ge 0)]
  
  filter=where(x gt 1631.5 and x lt 11637.2)
  x=x[filter]
  y=y[filter]

        filter2=where(x gt 0 and indM eq 100)
            filter3=where(x gt 0 and indM eq 300)
   

         loadct,38
         
    plot,x,y,   charsize=2,psym=4 ,xrange=[2496,2507],ytitle='nmol/mol', xtitle='2 nov t/m 14 nov, 2015',charthick=2, color=0,background=-1
     loadct,31
      oplot,x[filter2],y[filter2],psym=4, color=12, thick=3
      oplot,x[filter3],y[filter3],psym=4, color=172, thick=3
      filter2=where(x gt 2496 and x lt 2501 and indM eq 100)
    filter3=where(x gt 2496 and x lt 2501 and indM eq 300)
     oplot,x[filter2],y[filter2],psym=4, color=14, thick=3
      oplot,x[filter3],y[filter3],psym=4, color=173, thick=3
      filter2=where(x gt 2503 and x lt 2508 and indM eq 100)
    filter3=where(x gt 2503 and x lt 2508 and indM eq 300)
     oplot,x[filter2],y[filter2],psym=4, color=15, thick=3
      oplot,x[filter3],y[filter3],psym=4, color=174, thick=3
  aaa= match(float(mass),lib,/narrow)
  cand=aaa.candidates
  dim=d(cand)
  if(size(cand,/n_dimensions) eq 1) then  xyouts,0.01,0.55,aaa.formula,/normal, color=12, charthick=2, charsize=1.2
  if(size(cand,/n_dimensions) gt 1) then  begin
  count=0
  for xxx=0,max(dim[1])-1 do if (abs(float(cand[0,xxx])) lt 20) then begin
   xyouts,0.01,0.55-0.02*count,cand[1,xxx],/normal, color=12, charthick=2, charsize=1.2
   count=count+1
   endif
   endif
   xyouts,0.01,0.95, mass,/normal, color=12, charthick=2, charsize=1.2
   
     
  x2=x-floor(x)
    filter2=where(x gt 2496 and x lt 2501 and indM eq 100)
    filter3=where(x gt 2496 and x lt 2501 and indM eq 300)
   
 
  loadct,38
         
    plot,x2[filter2],y[filter2], ytitle='nmol/mol', xtitle='time of day (fraction)' , charsize=2,psym=4 ,xrange=[0,1],charthick=2, color=0,background=-1
     loadct,31
      oplot,x2[filter2],y[filter2],psym=4, color=14, thick=3
     
     oplot,x2[filter3],y[filter3],psym=4, color=173, thick=3
    filter2=where(x gt 2503 and x lt 2508 and indM eq 100)
    filter3=where(x gt 2503 and x lt 2508 and indM eq 300)
      oplot,x2[filter2],y[filter2],psym=4, color=15, thick=3
     
     oplot,x2[filter3],y[filter3],psym=4, color=174, thick=3
   oplot,[8.0,8.0]/24,[-1000,100000], color=12, thick=1
   oplot,[18.0,18.0]/24,[-1000,100000], color=12, thick=1
   


end



 
pro Userplot3, event  
 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib
   
  print, masses[event.index]
 
          FinalData=S1.DAT
          FinalDataErr=S1.ERR
          FinalDataNames=S1.NAM
  !P.MULTI = [0,1,3]   
    indM=FinalData[*,where(strpos(FinalDataNames,'indM') ge 0)]
    indS3=FinalData[*,where(strpos(FinalDataNames,'indS3') ge 0)]
    indS2=FinalData[*,where(strpos(FinalDataNames,'indS2') ge 0)]
    indS1=FinalData[*,where(strpos(FinalDataNames,'indS1') ge 0)]
   n_av=FinalData[*,where(strpos(FinalDataNames,'# avg') ge 0)]
   
    mass=strtrim(string(masses[event.index],format='(F9.3)'),2)
 

  
    x=FinalData[*,where(strpos(FinalDataNames,'tSTRTsamp') ge 0)]
    y=FinalData[*,where(strpos(FinalDataNames,mass) ge 0)]
  MW=float(mass)
  cal=1
 ; if( MW eq 271.261 or MW eq 257.246 or MW eq 243.231 or MW eq 229.215 or MW eq 201.179 or MW eq 173.149 or MW eq 159.129 or MW eq 145.117) then cal=1.45
 ;if(MW eq 355.073) then begin
 ;MW=371.100
 ;y=y+FinalData[*,where(strpos(FinalDataNames,'356.075') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'357.066') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'371.100') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'372.101') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'373.097') ge 0)]
 ; mass='D5-c-Siloxane'
 ; endif
  

 filter=where(x gt 1628 and x lt 1637)
 filter=where(((x gt 190 and x lt 200.5) or (x gt 201.5 and x lt 225) or (x gt 228.5 and x lt 242)) and n_av gt 71 )
;filter=where((x gt 190 and x lt 200.5) or (x gt 201.5 and x lt 225) or (x gt 228.5 and x lt 242))
;filter=where(x gt 1.75 and x lt 1637.5)
; filter=where((x gt 1644 and x lt 1660.45)       )

  x=x[filter]
  y=y[filter]
  indM=indM[filter]
  indS1=indS1[filter]
  indS2=indS2[filter]
  indS3=indS3[filter]
 
  
for s=0,2 do begin  
    timeB=-9999
    timeS=-9999
    sigB=-9999
    sigS=-9999
    if (s eq 0) then indS=indS1 else if (s eq 1) then indS=indS2 else indS=indS3
    if (s eq 0) then ind=100 else if (s eq 1) then  ind=200 else  ind=299
    if (s eq 0) then   factor=cal*MW*0.054/(22.4*0.544) else if (s eq 1) then factor=cal*MW*0.054/(22.4*0.883) else factor=cal;*MW*1000/22.4
   print, factor
    steps=[7,7,1]
    
    for i=1,steps[s] do begin
            filter=where(x gt 0 and indM eq ind+i)
            if(s eq 2) then filter2=where(x gt 0 and indM eq ind+i+10) else filter2=where(x gt 0 and indM eq ind+i and indS eq 10)
            if(s eq 2) then filter3=where(x gt 0 and indM eq ind+i) else filter3=where(x gt 0 and indM eq ind+i and indS eq 20)
            if (max(timeB) eq -9999) then timeB=x[filter2] else hlpB=x[filter2]
            if (max(timeS) eq -9999) then timeS=x[filter3] else hlpS=x[filter3]
            if (max(sigB) eq -9999) then sigB=factor*y[filter2] else begin
                hlpSig=factor*y[filter2]
                for r=0,max(d(timeB))-1 do sigB[r]=sigB[r]+hlpSig[where(hlpB eq timeB[r])]
            endelse
            if (max(sigS) eq -9999) then sigS=factor*y[filter3] else begin
                hlpSig=factor*y[filter3]
                for r=0,max(d(timeS))-1 do sigS[r]=sigS[r]+hlpSig[where(hlpS eq timeS[r])]
            endelse
     endfor
     yran=[min([0,quantile([sigB,sigS],0.05)]),1.5*quantile([sigB,sigS],0.95)]
     if(s eq 2) then yran=[min([0,quantile([sigB,sigS],0.05)]),1.5*quantile([sigB,sigS],0.85)]
     if (s eq 0) then xran=range([timeS,timeB])
    ; xran=[223,224]
     span=max(yran[1]-yran[0])
     colorS=[0,220,8,128,15,12,7,11]
     colorB=[0,-1,152,217,207,172,251,155]
     Tsteps=['',' 50 C','100 C','150 C','200 C','250 C','300 C','350 C']
     Inlets=['A','B','DB1']
     loadct,38
     plot,timeS,sigS,   xrange=xran,  yrange=yran, charsize=2, charthick=2, color=0,background=-1
     loadct,31
     for i=1,steps[s] do begin
            ;filter2=where(x gt 0 and indM eq ind+i and indS eq 10)
            ;filter3=where(x gt 0 and indM eq ind+i and indS eq 20)
            if(s eq 2) then filter2=where(x gt 0 and indM eq ind+i+10) else filter2=where(x gt 0 and indM eq ind+i and indS eq 10)
            if(s eq 2) then filter3=where(x gt 0 and indM eq ind+i) else filter3=where(x gt 0 and indM eq ind+i and indS eq 20)
            ;     oplot,x[filter2],factor*y[filter2], color=colorB[i], thick=3
            oplot,x[filter3],factor*y[filter3], color=colorS[i], thick=3
     endfor
     loadct,38
     oplot,timeS,sigS, color=0, thick=3
     oplot,timeS,sigS,psym=4, color=0, thick=3
     sig=sigS-quantile(sigB,0.02)
     lod=sigB-quantile(sigB,0.02)
     lod=3*stddev(lod[where(lod lt 0)])
     filt=where((sig) gt 0)
     if (s gt 0) then begin
       ;     print, [s, float(max(d(filt)))/float(max(d(sig))), lod, mean( sig[filt])]
        ;    print, transpose(timeS[filt])
       ;     print, transpose(sig[filt])
     endif 
     loadct,31
     if(s eq 2) then oplot,timeB,sigB,psym=4, color=171, thick=3 else oplot,timeB,sigB, color=171, thick=3
     oplot,[0,10000],[quantile(sigB,0.02),quantile(sigB,0.02)], color=171, thick=3
     oplot,timeB,sigB,psym=4 ,color=171, thick=3
     loadct,31
     if(s ne 2) then for i=1,steps[s] do begin
           ; filter2=where(x gt 0 and indM eq ind+i and indS eq 10)
            ;filter3=where(x gt 0 and indM eq ind+i and indS eq 20)
            if(s eq 2) then filter2=where(x gt 0 and indM eq ind+i+10) else filter2=where(x gt 0 and indM eq ind+i and indS eq 10)
            if(s eq 2) then filter3=where(x gt 0 and indM eq ind+i) else filter3=where(x gt 0 and indM eq ind+i and indS eq 20)
            oplot,x[filter2],factor*y[filter2], color=colorB[i], thick=3
            ;     oplot,x[filter3],factor*y[filter3], color=colorS[i], thick=3
            if (s eq 1) then xyouts,0.88,0.63-0.03*i,Tsteps[i] ,/normal, color=colorS[i], charthick=3, charsize=2
    endfor
    if (s eq 0) then xyouts,0.02,0.97,mass+ ' '+ string(cal,format='(F4.2)'),/normal , color=0, charthick=3, charsize=2
   ; xyouts,1637.25,max(yran)-span*0.10,Inlets[s],/normal , color=0, charthick=3, charsize=2
 
  
  
endfor  
  
 



end



 
pro Userplot4, event  
 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib
   
  print, masses[event.index]
 
          FinalData=S1.DAT
          FinalDataErr=S1.ERR
          FinalDataNames=S1.NAM
 ttst=fltarr(24,700)
 minmass=5
 maxmass=699
 minmass=-1+event.index
maxmass=1+event.index
 
for q=minmass,maxmass do begin
 
    indM=FinalData[*,where(strpos(FinalDataNames,'indM') ge 0)]
    indS3=FinalData[*,where(strpos(FinalDataNames,'indS3') ge 0)]
    indS2=FinalData[*,where(strpos(FinalDataNames,'indS2') ge 0)]
    indS1=FinalData[*,where(strpos(FinalDataNames,'indS1') ge 0)]
          
               
                  
    mass2=strtrim(string(masses[event.index],format='(F9.3)'),2)
    mass=strtrim(string(masses[q],format='(F9.3)'),2)

 
    x=FinalData[*,where(strpos(FinalDataNames,'tSTRTsamp') ge 0)]
    y=FinalData[*,where(strpos(FinalDataNames,mass) ge 0)]
  MW=float(mass)
  cal=float(1)
  if( MW eq 271.261 or MW eq 257.246 or MW eq 243.231 or MW eq 229.215 or MW eq 201.179 or MW eq 173.149 or MW eq 159.129 or MW eq 145.117) then cal=1.45
  if( MW eq 69.070) then cal=1.5*3/2; fragment on m41 and rate constant
  if( MW eq 71.049) then cal=1.04*3/2; isotope and rate constant
 if(MW eq 355.073) then begin
          MW=371.100
          y=y+FinalData[*,where(strpos(FinalDataNames,'356.075') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'357.066') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'371.100') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'372.101') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'373.097') ge 0)]
          mass='D5-c-Siloxane'
  endif
  

 filter=where(x gt 1628 and x lt 1637)
 filter=where((x gt 1628 and x lt 1630.45) or (x gt 1631.4 and x lt 1637.5)  or (x gt 1639.5 and x lt 1644.5) )
filter=where(x gt 1631.75 and x lt 1637.5)

stt=1631.75
enn=1635

stt=1635
enn=1640


stt=1628
enn=1644.5

stt=1626
enn= 1657

stt=1649
enn=1655

filter=where(x gt stt and x lt enn)
 filter=where((x gt 1631.75 and x lt 1635) or (x gt 1635 and x lt 1640)  or (x gt 1649 and x lt 1655) )



  x=x[filter]
  y=y[filter]
  indM=indM[filter]
  indS1=indS1[filter]
  indS2=indS2[filter]
  indS3=indS3[filter]
    colorS=[0,192,184,51,59,12,15,11]
     colorB=[0,249,233,215,155,141,159,155]
     Tsteps=['',' 50 C','100 C','150 C','200 C','250 C','300 C','350 C']
     Inlets=['A','B','DB1','DB1','DB1','DB1']
     DenSteps=['nix','DB1','DB1_o2','DB2','DB2_o2','Char','Char_o2']
      steps=[7,7,2,3,2,3,3]
 
 




 !x.oMARGIN=[2,2]
  !Y.MARGIN = [1, 1]

 !P.MULTI = [0,1,4]   

for s=2,5 do begin  
    timeB=-9999
    timeS=-9999
    sigB=-9999
    sigS=-9999
    indS=indS3
    ind=300
    if (s lt 3.5) then factor=cal*0.56/30 else factor=cal*0.14/30
    if (s lt 3.5) then add=[0,0,1,2] else add=[0,1,2,3]        
    for i=1,steps[s] do begin
            filter2=where(x gt 0 and indM eq ind+i+add[i] and indS eq 10)
            if (max(timeB) eq -9999) then timeB=x[filter2] 
            if (max(sigB) eq -9999) then sigB=factor*y[filter2] else sigB=sigB+factor*y[filter2]
            filter3=where(x gt 0 and indM eq ind+i+add[i] and indS eq 20)
            if (max(timeS) eq -9999) then timeS=x[filter3] 
            if (max(sigS) eq -9999) then sigS=factor*y[filter3] else sigS=sigS+factor*y[filter3]
    endfor
    yran=[min([0,sigB,sigS]),1.5*quantile([sigB,sigS],0.95)]
    span=max(yran[1]-yran[0])
  
   if(strpos(mass,mass2) eq 0) then   begin    
     loadct,38
  plot,timeS,sigS,   xrange=xran,  yrange=yran, charsize=2, charthick=2, color=0,background=-1, ytitle='nmol/mol'
     loadct,38
    oplot,timeS,sigS, color=0, thick=3
  oplot,timeS,sigS,psym=4, color=0, thick=3
     loadct,31
    oplot,timeB,sigB, color=171, thick=3
    oplot,[0,10000],[quantile(sigB,0.02),quantile(sigB,0.02)], color=171, thick=3
   oplot,timeB,sigB,psym=4 ,color=171, thick=3
   
   endif
      ttst[0,q]=mass
     ttst[4*s,q]=mean(sigS)-mean(sigB)
     ttst[4*s+1,q]=stddev(sigB)
     ttst[4*s+2,q]=quantile(sigS,0.95)/median(sigS)
     
     FracBGofSIG=0
     for qqq=0, max(d(timeB))-2 do begin
     inddd= min(where(abs(timeS - timeB[qqq])-min( abs(timeS - timeB[qqq])) lt 1.0/(24*3600)))
     FracBGofSIG=[FracBGofSIG,sigB[qqq]/sigS[inddd]]
     endfor
     FracBGofSIG=FracBGofSIG[1:*]
     ttst[4*s+1,q]=mean(sigB)*stddev(FracBGofSIG)
  
     for i=1,steps[s] do begin
             filter2=where(x gt 0 and indM eq ind+i+add[i] and indS eq 10)
            filter3=where(x gt 0 and indM eq ind+i+add[i] and indS eq 20)
     if(strpos(mass,mass2) eq 0) then  begin
             oplot,timeS,factor*y[filter3], color=colorS[i+add[i]], thick=3

          oplot,timeB,factor*y[filter2], color=colorB[i+add[i]], thick=3
          
            if (s ge 2) then xyouts,1631.25,max(yran)-span*0.10*i,DenSteps[i+add[i]] , color=colorS[i+add[i]], charthick=3, charsize=2
           if (s ge 2) then xyouts,1630,max(yran)-span*0.10*i,'     bk' , color=colorb[i+add[i]], charthick=3, charsize=2
  endif
           if(i eq 1) then ttt=factor*y[filter2] else ttt=ttt+factor*y[filter2]
   
     endfor
     ; oplot,timeB,ttt, color=12, thick=8
   
     if (s eq 2) then begin 
            aaa= match(float(mass),lib,/narrow)
            cand=aaa.candidates
            dim=d(cand)
            if(strpos(mass,mass2) eq 0) then   if(size(cand,/n_dimensions) eq 1) then  xyouts,0.12,0.25,aaa.formula,/normal, color=12, charthick=2, charsize=1.2
            if(size(cand,/n_dimensions) gt 1) then  begin
                    count=0
                    for xxx=0,max(dim[1])-1 do if (abs(float(cand[0,xxx])) lt 20) then begin
       if(strpos(mass,mass2) eq 0) then                        xyouts,0.12,0.25-0.02*count,cand[1,xxx],/normal, color=12, charthick=2, charsize=1.2
                            count=count+1
                    endif
            endif
     endif
  
  
  
  
endfor  
endfor
 for q=minmass,maxmass  do begin
 if(ttst[10,q] gt 10) then ttst[3,q]=1 else ttst[3,q]=-1

 if(ttst[8,q]/ ttst[12,q] gt 0.7) then ttst[1,q]=1 else if(ttst[8,q]/ ttst[12,q] gt 0.3) then ttst[1,q]=2 else ttst[1,q]=3
 if(ttst[16,q]/ ttst[20,q] gt 0.7) then ttst[2,q]=1 else if(ttst[16,q]/ ttst[20,q] gt 0.3) then ttst[2,q]=2 else ttst[2,q]=3
  
  if(ttst[1,q] eq 1) then if (ttst[8,q]-2* ttst[9,q] lt 0)  then ttst[1,q]=0
  if(ttst[1,q] eq 2) then if (ttst[8,q]-2* ttst[9,q] lt 0)  then if (ttst[12,q]-2* ttst[13,q] lt 0) then ttst[1,q]=0 
   if(ttst[1,q] eq 2) then if (ttst[8,q]-2* ttst[9,q] lt 0)  then if (ttst[12,q]-2* ttst[13,q] gt 0) then ttst[1,q]=2.2 
   if(ttst[1,q] eq 2) then if (ttst[12,q]-2* ttst[13,q] lt 0)  then if (ttst[8,q]-2* ttst[9,q] gt 0) then ttst[1,q]=2.1 
   if(ttst[1,q] eq 3) then if (ttst[12,q]-2* ttst[13,q] lt 0)  then ttst[1,q]=0
   
  if(ttst[2,q] eq 1) then if (ttst[16,q]-2* ttst[17,q] lt 0)  then ttst[2,q]=0
  if(ttst[2,q] eq 2) then if (ttst[16,q]-2* ttst[17,q] lt 0)  then if (ttst[20,q]-2* ttst[21,q] lt 0) then ttst[2,q]=0 
   if(ttst[2,q] eq 2) then if (ttst[16,q]-2* ttst[17,q] lt 0)  then if (ttst[20,q]-2* ttst[21,q] gt 0) then ttst[2,q]=2.2 
   if(ttst[2,q] eq 2) then if (ttst[20,q]-2* ttst[21,q] lt 0)  then if (ttst[16,q]-2* ttst[17,q] gt 0) then ttst[2,q]=2.1 
   if(ttst[2,q] eq 3) then if (ttst[20,q]-2* ttst[21,q] lt 0)  then ttst[2,q]=0
 
  endfor
 print, transpose(['HEADER','m/z','N2 Den, 1=DB, 2=mixed, 3=Carb','air Den, 1=DB, 2=mixed, 3=Carb','high spikes',    '','','','',     'DB1+2, mean(sigS)-mean(sigB)','DB1+2, mean(sigB)*stddev(FracBGofSIG)','DB1+2, quantile(sigS,0.95)/median(sigS)','', 'DB1+2+Carb,  mean(sigS)-mean(sigB)','DB1+2+Carb,  mean(sigB)*stddev(FracBGofSIG)','DB1+2+Carb,  quantile(sigS,0.95)/median(sigS)','', 'O2 DB1+2,  mean(sigS)-mean(sigB)','O2 DB1+2, mean(sigB)*stddev(FracBGofSIG)','O2 DB1+2, quantile(sigS,0.95)/median(sigS)','', 'O2 DB1+2+Carb, mean(sigS)-mean(sigB)','O2 DB1+2+Carb, mean(sigB)*stddev(FracBGofSIG)','O2 DB1+2+Carb, quantile(sigS,0.95)/median(sigS)',''])
 if(maxmass-minmass gt 3) then makecsv, 'c:/ptrwid/tst4'+string(stt)+'_'+string(enn)+'.csv',ttst
; print, ttst




end



pro userplotPTR_conference, event  
 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib
   
  print, masses[event.index]
 
          FinalData=S1.DAT
          FinalDataErr=S1.ERR
          FinalDataNames=S1.NAM
 ttst=fltarr(24,700)
 minmass=5
 maxmass=699
 minmass=event.index
maxmass=event.index
 
for q=minmass,maxmass do begin
 
    indM=FinalData[*,where(strpos(FinalDataNames,'indM') ge 0)]
    indS3=FinalData[*,where(strpos(FinalDataNames,'indS3') ge 0)]
    indS2=FinalData[*,where(strpos(FinalDataNames,'indS2') ge 0)]
    indS1=FinalData[*,where(strpos(FinalDataNames,'indS1') ge 0)]
          
               
                  
    mass2=strtrim(string(masses[event.index],format='(F9.3)'),2)
    mass=strtrim(string(masses[q],format='(F9.3)'),2)

 
    x=FinalData[*,where(strpos(FinalDataNames,'tSTRTsamp') ge 0)]
    y=FinalData[*,where(strpos(FinalDataNames,mass) ge 0)]
  MW=float(mass)
  cal=float(1)
  if( MW eq 271.261 or MW eq 257.246 or MW eq 243.231 or MW eq 229.215 or MW eq 201.179 or MW eq 173.149 or MW eq 159.129 or MW eq 145.117) then cal=1.45
  if( MW eq 69.070) then cal=1.5*3/2; fragment on m41 and rate constant
  if( MW eq 71.049) then cal=1.04*3/2; isotope and rate constant
 if(MW eq 355.073) then begin
          MW=371.100
          y=y+FinalData[*,where(strpos(FinalDataNames,'356.075') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'357.066') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'371.100') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'372.101') ge 0)]+FinalData[*,where(strpos(FinalDataNames,'373.097') ge 0)]
          mass='D5-c-Siloxane'
  endif
  

 filter=where(x gt 1628 and x lt 1637)
 filter=where((x gt 1628 and x lt 1630.45) or (x gt 1631.4 and x lt 1637.5)  or (x gt 1639.5 and x lt 1644.5) )
filter=where(x gt 1631.75 and x lt 1637.5)

stt=1631.75
enn=1635

stt=1635
enn=1640


stt=1628
enn=1644.5

stt=1626
enn= 1657

stt=1649
enn=1655

filter=where(x gt stt and x lt enn)
 
 
 ;WINDOW, 4, xsize=800,ysize=900
    !x.oMARGIN=[2,2]
      !Y.MARGIN = [2, 1]
      !P.MULTI = [0,4,3]   
    
 
 for b=0,2 do begin
        x=FinalData[*,where(strpos(FinalDataNames,'tSTRTsamp') ge 0)]
        y=FinalData[*,where(strpos(FinalDataNames,mass) ge 0)]
     indM=FinalData[*,where(strpos(FinalDataNames,'indM') ge 0)]
      indS3=FinalData[*,where(strpos(FinalDataNames,'indS3') ge 0)]
      indS2=FinalData[*,where(strpos(FinalDataNames,'indS2') ge 0)]
      indS1=FinalData[*,where(strpos(FinalDataNames,'indS1') ge 0)]
   
 
      if(b eq 0) then filter=where(x gt 1630 and x lt 1635)  
      if(b eq 1) then filter=where(x gt 1635 and x lt 1640)   
      if(b eq 2) then filter=where(x gt 1650 and x lt 1655) 
  
   
      x=x[filter]
      y=y[filter]
      indM=indM[filter]
      indS1=indS1[filter]
      indS2=indS2[filter]
      indS3=indS3[filter]
      colorS=[0,192,184,51,59,12,15,11]
      colorB=[0,249,233,215,155,141,159,155]
      Tsteps=['',' 50 C','100 C','150 C','200 C','250 C','300 C','350 C']
      Inlets=['A','B','DB1','DB1','DB1','DB1']
      DenSteps=['nix','DB1','DB2','Char','Char_o2','','']
     
     
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; eins
          timeB=-9999
              timeS=-9999
              sigB=-9999
              sigS=-9999
              indS=indS3
              ind=300
              factor=cal*0.56/30 
              add=[0,0,1,2]  
            for i=1,2 do begin
                      filter2=where(x gt 0 and indM eq ind+i+add[i] and indS eq 10)
                      if (max(timeB) eq -9999) then timeB=x[filter2] 
                      if (max(sigB) eq -9999) then sigB=factor*y[filter2] else sigB=sigB+factor*y[filter2]
                      filter3=where(x gt 0 and indM eq ind+i+add[i] and indS eq 20)
                      if (max(timeS) eq -9999) then timeS=x[filter3] 
                      if (max(sigS) eq -9999) then sigS=factor*y[filter3] else sigS=sigS+factor*y[filter3]
              endfor
       yran=[min([0,sigB,sigS]),1.5*quantile([sigB,sigS],0.95)]
              span=max(yran[1]-yran[0])
              if(strpos(mass,mass2) eq 0) then   begin    
                      loadct,38
                      plot,timeS,sigS,   yrange=yran, charsize=2, charthick=2, color=0,background=-1, ytitle='nmol/mol'
                      loadct,38
                      oplot,timeS,sigS, color=0, thick=3
                      oplot,timeS,sigS,psym=4, color=0, thick=3
                      loadct,31
                      oplot,timeB,sigB, color=171, thick=3
              ;        oplot,[0,10000],[quantile(sigB,0.02),quantile(sigB,0.02)], color=171, thick=3
                      oplot,timeB,sigB,psym=4 ,color=171, thick=3
              endif
              ttst[0,q]=mass
            ttst[8,q]=mean(sigS)-mean(sigB)
              ttst[10,q]=quantile(sigS,0.95)/median(sigS)
              FracBGofSIG=0
              for qqq=0, max(d(timeB))-2 do begin
                      inddd= min(where(abs(timeS - timeB[qqq])-min( abs(timeS - timeB[qqq])) lt 1.0/(24*3600)))
                      FracBGofSIG=[FracBGofSIG,sigB[qqq]/sigS[inddd]]
              endfor
              FracBGofSIG=FracBGofSIG[1:*]
              ttst[9,q]=mean(sigB)*stddev(FracBGofSIG)
     for i=1,2 do begin
                      filter2=where(x gt 0 and indM eq ind+i+add[i] and indS eq 10)
                      filter3=where(x gt 0 and indM eq ind+i+add[i] and indS eq 20)
                      if(strpos(mass,mass2) eq 0) then  begin
                              oplot,timeS,factor*y[filter3], color=colorS[i+add[i]], thick=3
                              oplot,timeB,factor*y[filter2], color=colorB[i+add[i]], thick=3
                              xyouts,0.07,0.98-0.03*i,DenSteps[i] ,/normal, color=colorS[i+add[i]], charthick=3, charsize=2
                              xyouts,0.11,0.98-0.03*i,'bk',/normal , color=colorb[i+add[i]], charthick=3, charsize=2
                      endif
                      if(i eq 1) then ttt=factor*y[filter2] else ttt=ttt+factor*y[filter2]
              endfor
   
              if(strpos(mass,mass2) eq 0) then    xyouts,0.15,0.95,mass,/normal, color=12, charthick=3, charsize=2
                       
                      
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;zwei
   
              timeB=-9999
              timeS=-9999
              sigB=-9999
              sigS=-9999
              indS=indS3
              ind=300
              factor=cal*0.56/30 
              add=[0,0,1,2] 
              for i=1,3 do begin
                      filter2=where(x gt 0 and indM eq ind+i+add[i] and indS eq 10)
                      if (max(timeB) eq -9999) then timeB=x[filter2] 
                      if (max(sigB) eq -9999) then sigB=factor*y[filter2] else sigB=sigB+factor*y[filter2]
                      filter3=where(x gt 0 and indM eq ind+i+add[i] and indS eq 20)
                      if (max(timeS) eq -9999) then timeS=x[filter3] 
                      if (max(sigS) eq -9999) then sigS=factor*y[filter3] else sigS=sigS+factor*y[filter3]
              endfor
              yran=[min([0,sigB,sigS]),1.5*quantile([sigB,sigS],0.95)]
              span=max(yran[1]-yran[0])
              if(strpos(mass,mass2) eq 0) then   begin    
                      loadct,38
                      plot,timeS,sigS,   xrange=xran,  yrange=yran, charsize=2, charthick=2, color=0,background=-1, ytitle='nmol/mol'
                      loadct,38
                      oplot,timeS,sigS, color=0, thick=3
                      oplot,timeS,sigS,psym=4, color=0, thick=3
                      loadct,31
                      oplot,timeB,sigB, color=171, thick=3
                 ;     oplot,[0,10000],[quantile(sigB,0.02),quantile(sigB,0.02)], color=171, thick=3
                      oplot,timeB,sigB,psym=4 ,color=171, thick=3
              endif
              ttst[0,q]=mass
              ttst[12,q]=mean(sigS)-mean(sigB)
               ttst[14,q]=quantile(sigS,0.95)/median(sigS)
              FracBGofSIG=0
              for qqq=0, max(d(timeB))-2 do begin
                      inddd= min(where(abs(timeS - timeB[qqq])-min( abs(timeS - timeB[qqq])) lt 1.0/(24*3600)))
                      FracBGofSIG=[FracBGofSIG,sigB[qqq]/sigS[inddd]]
              endfor
              FracBGofSIG=FracBGofSIG[1:*]
              ttst[13,q]=mean(sigB)*stddev(FracBGofSIG)
              for i=1,3 do begin
                      filter2=where(x gt 0 and indM eq ind+i+add[i] and indS eq 10)
                      filter3=where(x gt 0 and indM eq ind+i+add[i] and indS eq 20)
                      if(strpos(mass,mass2) eq 0) then  begin
                              oplot,timeS,factor*y[filter3], color=colorS[i+add[i]], thick=3
                              oplot,timeB,factor*y[filter2], color=colorB[i+add[i]], thick=3
                              xyouts,0.32,0.98-0.03*i,DenSteps[i] ,/normal, color=colorS[i+add[i]], charthick=3, charsize=2
                              xyouts,0.36,0.98-0.03*i,'bk',/normal , color=colorb[i+add[i]], charthick=3, charsize=2
                      endif
                      if(i eq 1) then ttt=factor*y[filter2] else ttt=ttt+factor*y[filter2]
              endfor
          
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;drei
   
          timeB=-9999
              timeS=-9999
              sigB=-9999
              sigS=-9999
              indS=indS3
              ind=300
              factor=1000*cal*0.56/30 
              add=[0,0,1,2]  
            for i=1,2 do begin
                      filter2=where(x gt 0 and indM eq ind+i+add[i] and indS eq 10)
                      if (max(timeB) eq -9999) then timeB=x[filter2] 
                      if (max(sigB) eq -9999) then sigB=factor*y[filter2] else sigB=sigB+factor*y[filter2]
                      filter3=where(x gt 0 and indM eq ind+i+add[i] and indS eq 20)
                      if (max(timeS) eq -9999) then timeS=x[filter3] 
                      if (max(sigS) eq -9999) then sigS=factor*y[filter3] else sigS=sigS+factor*y[filter3]
              endfor
       yran=[min([0,sigB,sigS]),1.5*quantile([sigB,sigS],0.95)]
              span=max(yran[1]-yran[0])
              if(strpos(mass,mass2) eq 0) then   begin    
                      loadct,38
                      plot,timeS,sigS,     yrange=yran, charsize=2, charthick=2, color=0,background=-1, ytitle='ppt'
                      xyouts,0.56,0.95-0.33*b,/normal,'Start: '+t09str(min(timeS)), color=40, charthick=2, charsize=1.2
                     xyouts,0.56,0.93-0.33*b,/normal,'End:  '+t09str(max(timeS)), color=40, charthick=2 , charsize=1.2    
               
                    
                      loadct,38
                      oplot,timeS,sigS, color=0, thick=3
                      oplot,timeS,sigS,psym=4, color=0, thick=3
                      loadct,31
                      oplot,timeB,sigB, color=171, thick=3
              ;        oplot,[0,10000],[quantile(sigB,0.02),quantile(sigB,0.02)], color=171, thick=3
                      oplot,timeB,sigB,psym=4 ,color=171, thick=3
                      

              endif
        
   
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;vier
         timeB=-9999
              timeS=-9999
              sigB=-9999
              sigS=-9999
              indS=indS3
              ind=300
              factor=1000*cal*0.56/30 
              add=[0,0,1,2]  
            for i=1,2 do begin
                      filter2=where(x gt 0 and indM eq ind+i+add[i] and indS eq 10)
                      if (max(timeB) eq -9999) then timeB=x[filter2] 
                      if (max(sigB) eq -9999) then sigB=factor*y[filter2] else sigB=sigB+factor*y[filter2]
                      filter3=where(x gt 0 and indM eq ind+i+add[i] and indS eq 20)
                      if (max(timeS) eq -9999) then timeS=x[filter3] 
                      if (max(sigS) eq -9999) then sigS=factor*y[filter3] else sigS=sigS+factor*y[filter3]
              endfor
              
            
            timeSbin=[1.5,4.5,7.5,10.5,13.5,16.5,19.5,22.5]
            sigSbin=fltarr(8)
            hour=(timeS-floor(timeS))*24
            for i=0,7 do   sigSbin[i]=median(sigS[where(hour gt timeSbin[i]-1.5 and hour le timeSbin[i]+1.5)])
            sigSbin=[sigSbin[2:7],sigSbin[0:1]]
             
             
              
            timeBbin=[10, 18, 20, 22, 30]
            sigBbin=fltarr(8)
            hour=(timeB-floor(timeB))*24
           Bnight=median(sigB[where(hour gt 22 or hour le 6)])
           Bday=median(sigB[where(hour gt 10 and hour le 18)])
          sigBbin=[Bday,Bday,1.0/0,Bnight,Bnight]
              
      
              span=max(yran[1]-yran[0])
              if(strpos(mass,mass2) eq 0) then   begin    
                      loadct,38
                      plot,[timeSbin+6,timeBbin],[sigSbin,sigBbin], psym=4, charsize=2, charthick=2, color=0,background=-1, ytitle='ppt'
                      loadct,38
                      oplot,timeSbin+6,sigSbin, color=0, thick=3
                      oplot,timeSbin+6,sigSbin,psym=4, color=0, thick=3
                      loadct,31
                      oplot,timeBbin,sigBbin, color=171, thick=3
              ;        oplot,[0,10000],[quantile(sigB,0.02),quantile(sigB,0.02)], color=171, thick=3
                      oplot,timeBbin,sigBbin,psym=4 ,color=171, thick=3
           
                      xyouts,0.9,0.95,mass,/normal, color=12, charthick=3, charsize=2
           
              endif
        
      
      
      
      
      
      
  endfor




endfor
 for q=minmass,maxmass  do begin
 if(ttst[10,q] gt 10) then ttst[3,q]=1 else ttst[3,q]=-1

 if(ttst[8,q]/ ttst[12,q] gt 0.7) then ttst[1,q]=1 else if(ttst[8,q]/ ttst[12,q] gt 0.3) then ttst[1,q]=2 else ttst[1,q]=3
 if(ttst[16,q]/ ttst[20,q] gt 0.7) then ttst[2,q]=1 else if(ttst[16,q]/ ttst[20,q] gt 0.3) then ttst[2,q]=2 else ttst[2,q]=3
  
  if(ttst[1,q] eq 1) then if (ttst[8,q]-2* ttst[9,q] lt 0)  then ttst[1,q]=0
  if(ttst[1,q] eq 2) then if (ttst[8,q]-2* ttst[9,q] lt 0)  then if (ttst[12,q]-2* ttst[13,q] lt 0) then ttst[1,q]=0 
   if(ttst[1,q] eq 2) then if (ttst[8,q]-2* ttst[9,q] lt 0)  then if (ttst[12,q]-2* ttst[13,q] gt 0) then ttst[1,q]=2.2 
   if(ttst[1,q] eq 2) then if (ttst[12,q]-2* ttst[13,q] lt 0)  then if (ttst[8,q]-2* ttst[9,q] gt 0) then ttst[1,q]=2.1 
   if(ttst[1,q] eq 3) then if (ttst[12,q]-2* ttst[13,q] lt 0)  then ttst[1,q]=0
   
  if(ttst[2,q] eq 1) then if (ttst[16,q]-2* ttst[17,q] lt 0)  then ttst[2,q]=0
  if(ttst[2,q] eq 2) then if (ttst[16,q]-2* ttst[17,q] lt 0)  then if (ttst[20,q]-2* ttst[21,q] lt 0) then ttst[2,q]=0 
   if(ttst[2,q] eq 2) then if (ttst[16,q]-2* ttst[17,q] lt 0)  then if (ttst[20,q]-2* ttst[21,q] gt 0) then ttst[2,q]=2.2 
   if(ttst[2,q] eq 2) then if (ttst[20,q]-2* ttst[21,q] lt 0)  then if (ttst[16,q]-2* ttst[17,q] gt 0) then ttst[2,q]=2.1 
   if(ttst[2,q] eq 3) then if (ttst[20,q]-2* ttst[21,q] lt 0)  then ttst[2,q]=0
 
  endfor
 print, transpose(['HEADER','m/z','N2 Den, 1=DB, 2=mixed, 3=Carb','air Den, 1=DB, 2=mixed, 3=Carb','high spikes',    '','','','',     'DB1+2, mean(sigS)-mean(sigB)','DB1+2, mean(sigB)*stddev(FracBGofSIG)','DB1+2, quantile(sigS,0.95)/median(sigS)','', 'DB1+2+Carb,  mean(sigS)-mean(sigB)','DB1+2+Carb,  mean(sigB)*stddev(FracBGofSIG)','DB1+2+Carb,  quantile(sigS,0.95)/median(sigS)','', 'O2 DB1+2,  mean(sigS)-mean(sigB)','O2 DB1+2, mean(sigB)*stddev(FracBGofSIG)','O2 DB1+2, quantile(sigS,0.95)/median(sigS)','', 'O2 DB1+2+Carb, mean(sigS)-mean(sigB)','O2 DB1+2+Carb, mean(sigB)*stddev(FracBGofSIG)','O2 DB1+2+Carb, quantile(sigS,0.95)/median(sigS)',''])
 if(maxmass-minmass gt 3) then makecsv, 'c:/ptrwid/tst4'+string(stt)+'_'+string(enn)+'.csv',ttst
; print, ttst




end


 
pro Userplot5, event  
 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib
   
  print, masses[event.index]
 
          FinalData=S1.DAT
          FinalDataErr=S1.ERR
          FinalDataNames=S1.NAM

    indM=FinalData[*,where(strpos(FinalDataNames,'indM') ge 0)]
  
  cutdat=1
  mist=indM-[indM[1:*],-9999]
filter=where(mist eq 100 and indM eq 302)+1
 filter2=where(mist eq 102 and indM eq 202)+1
 filter3=where(mist eq -100 and indM eq 100)+1
 filter4=where(mist eq 100 and indM eq 200)+1
mist[filter]=888
 mist[filter2]=777
 mist[filter3]=666
 mist[filter4]=555
  mist[filter+8]=888
 mist[filter2+8]=777
 mist[filter3+8]=666
 mist[filter4+8]=555
  mist[filter+9]=888
 mist[filter2+9]=777
 mist[filter3+9]=666
 mist[filter4+9]=555
 mist[where(indM gt 260)]=300
 cutdat=FinalData[where(mist lt 260),*]
 cutdaterr=FinalDataErr[where(mist lt 260),*]
  cutindM=indM[where(mist lt 260)]
  
 mist2=cutindM-[cutindM[1:*],-9999] 
 filter=where(mist2 eq 102)+1 
  for i=0,6 do cutindm[filter+i]= cutindm[filter+i]+1
 
  avcutdat=cutdat[0,*]
 avcutdaterr=cutdaterr[0,*]
 avindM=0
 counter=0
 
 for i=0,max(d(mist2))-1 do begin
          if(i gt 0 and cutindM[i-1] eq cutindM[i]) then  begin 
                  datset=datset+cutdat[i,*] 
                  errset=errset+cutdaterr[i,*] 
                  indMset=indMset+cutindM[i,*] 
                  counter=counter+1
          endif else begin 
                  if(i gt 0) then  begin
                          avcutdat=[avcutdat, datset/counter]
                          avcutdaterr=[avcutdaterr, errset/counter]
                          avindM=[avindM, indMset/counter]
                          counter=0
                  endif
                  datset=cutdat[i,*] 
                  errset=cutdaterr[i,*] 
                  indMset=cutindM[i,*] 
                  counter=counter+1
          endelse
 endfor
 avcutdat=avcutdat[1:*,*]
 avcutdaterr=avcutdaterr[1:*,*]
 avindM=avindM[1:*]
     filter1=where(avindM eq 100)
    filter2=where(avindM eq 101)
    filter3=where(avindM eq 200)
    filter4=where(avindM eq 202)
    i_time=where(strpos(FinalDataNames,'tSTRTav') ge 0)
 
 In100=avcutdat[filter2,*]
In100bk=avcutdat[filter1,*]
 In200=avcutdat[filter4,*]
 In200bk=avcutdat[filter3,*]
 FiDaNa=float(FinalDataNames)
 
 for i=0,max(d(filter2))-1 do begin
        tim= In100[i,i_time]
        timebk=In100bk[*,i_time]
        bk_ind=where(abs(timebk-max(tim)) eq min(abs(timebk-max(tim))))
        In100[i,where(FiDaNa gt 0)]=In100[i,where(FiDaNa gt 0)]-In100bk[bk_ind[0],where(FiDaNa gt 0)]
 endfor
 
  
 for i=0,max(d(filter4))-1 do begin
        tim= In200[i,i_time]
        timebk=In200bk[*,i_time]
        bk_ind=where(abs(timebk-max(tim)) eq min(abs(timebk-max(tim))))
         In200[i,where(FiDaNa gt 0)]=In200[i,where(FiDaNa gt 0)]-In200bk[bk_ind[0],where(FiDaNa gt 0)]
 endfor
 
 
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
 mass=strtrim(string(masses[event.index],format='(F9.3)'),2)
 mfilter=[where(abs(FiDaNa - 28.018) lt 0.001), where(abs(FiDaNa - 31.017) lt 0.001), where(abs(FiDaNa - 33.033) lt 0.001), where(FiDaNa gt 40 and FiDaNa lt 45.6 ), where(FiDaNa gt 46)]
 
 SIGmfilter=-1
 SIGmfilter2=-1
 for i=0,max(d(mfilter))-1 do begin
        mass=strtrim(string(Fidana[mfilter[i]],format='(F9.3)'),2)
        x2=In100[*,where(strpos(FinalDataNames,'tSTRTav') ge 0)]
        y2=In100[*,where(strpos(FinalDataNames,mass) ge 0)]
        x3=In200[*,where(strpos(FinalDataNames,'tSTRTav') ge 0)]
        y3=In200[*,where(strpos(FinalDataNames,mass) ge 0)]
        
          
  mess='NO'
  mess3='NO'
  if (max(where(x2 lt 2818)) gt -0.5) then begin
        y2a=y2[where(x2 lt 2818)]
        if(max(d(y2a))* 0.8 lt max(d(y2a[where(y2a gt 0)]))) then mess='YES' else mess='NO'
        y3a=y3[where(x3 lt 2818)]
        if(max(d(y3a))* 0.8 lt max(d(y3a[where(y3a gt 0)]))) then mess3='YES' else mess3='NO'
  endif
        y2b=y2[where(x2 gt 2818.5)]
        if(max(d(y2b))* 0.8 lt max(d(y2b[where(y2b gt 0)]))) then messb='YES' else messb='NO'
        y3b=y3[where(x3 gt 2818.5)]
        if(max(d(y3b))* 0.8 lt max(d(y3b[where(y3b gt 0)]))) then mess3b='YES' else mess3b='NO'
        if(strpos(strjoin([mess,mess3,messb,mess3b]),'YES') gt -0.5) then SIGmfilter=[SIGmfilter,Fidana[mfilter[i]]]
        if(strpos(strjoin([mess,mess3,messb,mess3b]),'YES') gt -0.5) then SIGmfilter2=[SIGmfilter2,mfilter[i]]
  endfor
  SIGmfilter=SIGmfilter[1:*]
  SIGmfilter2=SIGmfilter2[1:*]
  print, SIGmfilter
  for i=0,max(d(SIGmfilter))-1 do begin
        mass=strtrim(string(SIGmfilter[i],format='(F9.3)'),2)
        x2=In100[*,where(strpos(FinalDataNames,'tSTRTav') ge 0)]
        y2=In100[*,where(strpos(FinalDataNames,mass) ge 0)]*SIGmfilter[i]*0.168/(240*22.4)  ; ug/m3 based on 30 min sampling @ 8 L/min and 21 min desorption @ 8 mL/min
        x3=In200[*,where(strpos(FinalDataNames,'tSTRTav') ge 0)]
        y3=In200[*,where(strpos(FinalDataNames,mass) ge 0)]*SIGmfilter[i]*0.168/(240*22.4)  ; ug/m3 based on 30 min sampling @ 8 L/min and 21 min desorption @ 8 mL/min
        if(var_exists(y2tot) gt -0.5) then y2tot=y2tot+y2 else y2tot=y2
        if(var_exists(y3tot) gt -0.5) then y3tot=y3tot+y3 else y3tot=y3
        
 
 endfor
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
 mass=strtrim(string(masses[event.index],format='(F9.3)'),2)
 
  
    x=avcutdat[*,where(strpos(FinalDataNames,'tSTRTav') ge 0)]
     y=avcutdat[*,where(strpos(FinalDataNames,mass) ge 0)]
  
  
  
       x2=In100[*,where(strpos(FinalDataNames,'tSTRTav') ge 0)]
    y2=In100[*,where(strpos(FinalDataNames,mass) ge 0)]
      x3=In200[*,where(strpos(FinalDataNames,'tSTRTav') ge 0)]
    y3=In200[*,where(strpos(FinalDataNames,mass) ge 0)]
  
  SIGIn100=In100[*,[0,0,SIGmfilter2]]
  SIGIn100[*,0]=SIGIn100[*,0]-30.0/(24*60)
 for i=2,max(d(SIGmfilter))+1 do SIGIn100[*,i]=SIGIn100[*,i]*SIGmfilter[i-2]*0.168*1000/(240*22.4)  ; ng/m3 based on 30 min sampling @ 8 L/min and 21 min desorption @ 8 mL/min
 
  path=S1.pathnam
  path=strmid(path,0,strpos(path,'AveragedNames_'))
   MakeCsv,path+'SIGIn100.csv',transpose([transpose(['TimeSTART','timeEND',string(SIGmfilter,format='(F9.3)')]),string(SIGIn100)])
  
  mess='NO'
  mess3='NO'
  if (max(where(x2 lt 2818)) gt -0.5) then begin
  y2a=y2[where(x2 lt 2818)]
  if(max(d(y2a))* 0.8 lt max(d(y2a[where(y2a gt 0)]))) then mess='YES' else mess='NO'
 y3a=y3[where(x3 lt 2818)]
  if(max(d(y3a))* 0.8 lt max(d(y3a[where(y3a gt 0)]))) then mess3='YES' else mess3='NO'
  endif
  
  y2b=y2[where(x2 gt 2818.5)]
  if(max(d(y2b))* 0.8 lt max(d(y2b[where(y2b gt 0)]))) then messb='YES' else messb='NO'
 y3b=y3[where(x3 gt 2818.5)]
  if(max(d(y3b))* 0.8 lt max(d(y3b[where(y3b gt 0)]))) then mess3b='YES' else mess3b='NO'
  
  
  
  
  
  
  bk100=In100bk[*,where(strpos(FinalDataNames,mass) ge 0)]
  bk200=In200bk[*,where(strpos(FinalDataNames,mass) ge 0)]
  lim1a=3*(quantile(bk100[where(x2 lt 2818)],0.5)-quantile(bk100[where(x2 lt 2818)],0.25))
  lim1b=3*(quantile(bk100[where(x2 gt 2818)],0.5)-quantile(bk100[where(x2 gt 2818)],0.25))
  lim2a=3*(quantile(bk200[where(x3 lt 2818)],0.5)-quantile(bk200[where(x3 lt 2818)],0.25))
  lim2b=3*(quantile(bk200[where(x3 gt 2818)],0.5)-quantile(bk200[where(x3 gt 2818)],0.25))
  ;lim1b=3*stddev(bk100[where(x2 gt 2818.5)])
 ; lim2a=3*stddev(bk200[where(x3 lt 2818)])
 ; lim2b=3*stddev(bk200[where(x3 gt 2818.5)])
 
 
 
 
   !P.MULTI = [0,1,3]   
     yran=quantile(y,[0.05,0.95])
    loadct,38
    plot,x,y,   charsize=2,psym=4 ,yrange=yran,ytitle='nmol/mol', xtitle='sep, 2016',charthick=2, color=0,background=-1
    loadct,31
   oplot,[0,10000],[0,0],color=0
  
    oplot,x[filter1],y[filter1],psym=4, color=140, thick=3
    oplot,x[filter2],y[filter2],psym=4, color=12, thick=3
    oplot,x[filter3],y[filter3],psym=4, color=251, thick=3
    oplot,x[filter4],y[filter4],psym=4, color=19, thick=3
 
  
   plot,x2,y2,   charsize=2,psym=4,yrange=yran ,ytitle='nmol/mol', xtitle='sep, 2016',charthick=2, color=0,background=-1
  oplot,[0,10000],[0,0],color=0
  oplot,x2,y2,   psym=4, thick=3, color=12
  oplot,x2,y2,   thick=1, color=12
  
  oplot,[0,2818.5],[lim1a,lim1a], color=12
  oplot,[2818.5,10000],[lim1b,lim1b], color=12
 oplot,[0,2818.5],-[lim1a,lim1a], color=12
  oplot,[2818.5,10000],-[lim1b,lim1b], color=12
  
  oplot,x3,y3,   psym=4 ,thick=3, color=19
 oplot,x3,y3,   thick=1, color=19

oplot,[0,2818.5],[lim2a,lim2a], color=19
  oplot,[2818.5,10000],[lim2b,lim2b], color=19
oplot,[0,2818.5],-[lim2a,lim2a], color=19
  oplot,[2818.5,10000],-[lim2b,lim2b], color=19
 
xyouts, 0.2,0.95,mass,/normal, charthick=3, charsize=2, color=0

xyouts, 0.25,0.59,mess,/normal, charthick=2, charsize=2, color=12
xyouts, 0.35,0.59,mess3,/normal, charthick=2, charsize=2, color=19
xyouts, 0.65,0.59,messb,/normal, charthick=2, charsize=2, color=12
xyouts, 0.75,0.59,mess3b,/normal, charthick=2, charsize=2, color=19



  plot,x2,y2tot,   charsize=2,psym=4,yrange=[-1,2] ,ytitle='ug/m3', xtitle='sep, 2016',charthick=2, color=0,background=-1
  oplot,[0,10000],[0,0],color=0
  oplot,x2,y2tot,   psym=4, thick=3, color=12
  oplot,x2,y2tot,   thick=1, color=12
   oplot,x3,y3tot,   psym=4 ,thick=3, color=19
 oplot,x3,y3tot,   thick=1, color=19


end

pro UserplotPAMARCMIP, event

  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib

  print, masses[event.index]
  matchi=match(masses[event.index],lib)
  form=strtrim(matchi.formula,2)

  FinalData=S1.DAT
  FinalDataErr=S1.ERR
  FinalDataNames=S1.NAM

  MassNames=float(FinalDataNames)

  dat=FinalData[*,where(MassNames eq masses[event.index])]
  indM=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'indM')]
  timerow=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'tSTRTav')]
  FractionOfDay=timerow-floor(timerow)
  FractionOfDay2=timerow-3345
  FractionOfDay2[where(FractionOfDay2 gt 32)]= FractionOfDay2[where(FractionOfDay2 gt 32)]-31

  filt=where(indM eq 300)
  signal=dat[filt]
  timeSIG=timerow[filt]
  FractionOfDaySIG=FractionOfDay[filt]
  FractionOfDay2SIG=FractionOfDay2[filt]
  filt=where(indM eq 100)
  zero=dat[filt]
  timeZER=timerow[filt]
  FractionOfDayZER=FractionOfDay[filt]
  FractionOfDay2ZER=FractionOfDay2[filt]

  for i=0,max(d(signal))-1 do begin
    tim=timeSIG[i]
    filtPRE=where(timeZER gt tim-7.5/(24*60) and timeZER lt tim)
    filtPOST=where(timeZER gt tim and timeZER lt tim+7.5/(24*60))
    filt=[filtPRE,filtPOST]
    if (max(filtPRE) lt -0.5) then  filt=where(timeZER gt tim and timeZER lt tim+11.0/(24*60))
    if (max(filtPOST) lt -0.5) then  filt=where(timeZER gt tim-11.0/(24*60) and timeZER lt tim)
    LOD=mean(zero[filt])+3*stddev(zero[filt])

    ;    print,[i, signal[i],LOD,mean(zero[filt]),3*stddev(zero[filt]),filt,zero[filt]]
    if(i eq 0) then if (LOD lt signal[i]) then LODfilt=0 else LODfilt=-1 else if (LOD lt signal[i]) then LODfilt=[LODfilt,0] else LODfilt=[LODfilt,-1]

    if(i eq 0) then LOD2= 3*stddev(zero[filt]) else LOD2=[LOD2,  3*stddev(zero[filt]) ]

    filtPRE=where(timeZER gt tim-3.1/(24*60) and timeZER lt tim)
    filtPOST=where(timeZER gt tim and timeZER lt tim+3.1/(24*60))
    filt=[filtPRE,filtPOST]
    if (max(filtPRE) lt -0.5) then  filt=filtPOST
    if (max(filtPOST) lt -0.5) then  filt=filtPRE
    if(i eq 0) then sig= signal[i]-mean(zero[filt]) else sig=[sig, signal[i]-mean(zero[filt])]




  endfor

  print,100.0*(max(d(LODfilt))+total(LODfilt))/max(d(LODfilt))

  !x.oMARGIN=[2,2]
  !Y.oMARGIN=[3,2]
  !Y.MARGIN = [1, 1]


  !P.MULTI = [0,1,7]


  for j=0,6 do begin
    if (j eq 0) then filt=where(FractionOfDay2SIG gt 25 and FractionOfDay2SIG lt 26)
    if (j eq 1) then filt=where(FractionOfDay2SIG gt 26 and FractionOfDay2SIG lt 26.65)
    if (j eq 2) then filt=where(FractionOfDay2SIG gt 26.65 and FractionOfDay2SIG lt 27)
    if (j eq 3) then filt=where(FractionOfDay2SIG gt 27 and FractionOfDay2SIG lt 28)
    if (j eq 4) then filt=where(FractionOfDay2SIG gt 31 and FractionOfDay2SIG lt 32)
    if (j eq 5) then filt=where(FractionOfDay2SIG gt 2 and FractionOfDay2SIG lt 2.61)
    if (j eq 6) then filt=where(FractionOfDay2SIG gt 4 and FractionOfDay2SIG lt 5)

    x=FractionOfDay2SIG[filt]
    y=sig[filt]*1000.0
    yLOD=lod2[filt]*1000.0
    filt=where(y gt yLOD)
    fLOD=1.0*max(d(filt))/max(d(y))
    print,fLOD
    loadct,38
    if(max(filt) gt -0.5) then yran=[max([min(y),-quantile(y[filt],0.95)]),quantile(y[filt],0.95)] else yran=[-max(y),max(y)]
    if (j ne 3 and j ne 6) then plot,x,y, color=0,background=-1, charsize=3,yrange=yran
    if (j eq 3) then  plot,x,y, color=0,background=-1, charsize=3,yrange=yran, ytitle="estimated pmol/mol", thick =2
    if (j eq 6) then  plot,x,y, color=0,background=-1, charsize=3,yrange=yran, xtitle="time (day in March/April 2018)", thick =2
    oplot,[0,32],[0,0],color=0
    loadct,31
    oplot,x,y, color=3, thick=2
    if(max(filt) gt -0.5) then oplot,x[filt],y[filt], psym=4, color=3, thick=3
    oplot,x,yLOD, color=171, thick=2

  endfor
  xyouts,0.08,0.96,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form, color=0, charthick =3, charsize=2






  print, 'haha'

end



pro UserplotPAMARCMIPcor, event

  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib

  print, masses[event.index]
  matchi=match(masses[event.index],lib)
  form=strtrim(matchi.formula,2)

  FinalData=S1.DAT
  FinalDataErr=S1.ERR
  FinalDataNames=S1.NAM

  MassNames=float(FinalDataNames)

  dat=FinalData[*,where(MassNames eq masses[event.index])]
 pdri=FinalData[*,16]
 Tdri=FinalData[*,35]
  if (abs(masses[event.index]-63.011) lt 0.001) then dat=dat-(pdri-2.8)*0.9
     
  indM=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'indM')]
  timerow=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'tSTRTav')]
  FractionOfDay=timerow-floor(timerow)
  FractionOfDay2=timerow-3345
  FractionOfDay2[where(FractionOfDay2 gt 32)]= FractionOfDay2[where(FractionOfDay2 gt 32)]-31

  filt=where(indM eq 203)
  signal=dat[filt]
  pdriSA=pdri[filt]
  TdriSA=Tdri[filt]

  timeSIG=timerow[filt]
  FractionOfDaySIG=FractionOfDay[filt]
  FractionOfDay2SIG=FractionOfDay2[filt]
  filt=where(indM eq 103)
  zero=dat[filt]
  pdriZE=pdri[filt]

  timeZER=timerow[filt]
  FractionOfDayZER=FractionOfDay[filt]
  FractionOfDay2ZER=FractionOfDay2[filt]

  for i=0,max(d(signal))-1 do begin
    tim=timeSIG[i]
    filtPRE=where(timeZER gt tim-7.5/(24*60) and timeZER lt tim)
    filtPOST=where(timeZER gt tim and timeZER lt tim+7.5/(24*60))
    filt=[filtPRE,filtPOST]
 ;   if(max(d(filt)) gt 3.5) then filt=filt[0:2]
    if (max(filtPRE) lt -0.5) then  filt=where(timeZER gt tim and timeZER lt tim+11.0/(24*60))
    if (max(filtPOST) lt -0.5) then  filt=where(timeZER gt tim-11.0/(24*60) and timeZER lt tim)
    LOD=mean(zero[filt])+3*stddev(zero[filt])

    ;    print,[i, signal[i],LOD,mean(zero[filt]),3*stddev(zero[filt]),filt,zero[filt]]
    if(i eq 0) then if (LOD lt signal[i]) then LODfilt=0 else LODfilt=-1 else if (LOD lt signal[i]) then LODfilt=[LODfilt,0] else LODfilt=[LODfilt,-1]

    if(i eq 0) then LOD2= 3*stddev(zero[filt]) else LOD2=[LOD2,  3*stddev(zero[filt]) ]

    filtPRE=where(timeZER gt tim-3.1/(24*60) and timeZER lt tim)
    filtPOST=where(timeZER gt tim and timeZER lt tim+3.1/(24*60))
    filt=[filtPRE,filtPOST]
    if (max(filtPRE) lt -0.5) then  filt=filtPOST
    if (max(filtPOST) lt -0.5) then  filt=filtPRE
    if(i eq 0) then sig= signal[i]-mean(zero[filt]) else sig=[sig, signal[i]-mean(zero[filt])]




  endfor

  print,100.0*(max(d(LODfilt))+total(LODfilt))/max(d(LODfilt))
  !x.oMARGIN=[2,2]
  !Y.oMARGIN=[3,2]
  !Y.MARGIN = [1, 1]


  !P.MULTI = [0,1,6]


  for j=0,5 do begin
    if (j eq 0) then filt=where(FractionOfDay2SIG gt 25 and FractionOfDay2SIG lt 26)
    if (j eq 1) then filt=where(FractionOfDay2SIG gt 26 and FractionOfDay2SIG lt 27)
     if (j eq 2) then filt=where(FractionOfDay2SIG gt 27 and FractionOfDay2SIG lt 28)
    if (j eq 3) then filt=where(FractionOfDay2SIG gt 31 and FractionOfDay2SIG lt 32)
    if (j eq 4) then filt=where(FractionOfDay2SIG gt 2 and FractionOfDay2SIG lt 3)
    if (j eq 5) then filt=where(FractionOfDay2SIG gt 4 and FractionOfDay2SIG lt 5)

    x=FractionOfDay2SIG[filt]
    y=sig[filt]*1000.0
   ypdri=pdriSA[filt]
   yTdri=TdriSA[filt]
   yLOD=lod2[filt]*1000.0
    filt=where(y gt yLOD)
    fLOD=1.0*max(d(filt))/max(d(y))
   ; print,fLOD
    loadct,38
    yranmax=max([100,min([max(y),3*quantile(y,0.8)])])
    yranmin=max([min([0,min(y)]),-yranmax])
    ypdri=(ypdri-min(ypdri))*(yranmax-yranmin)/max([0.1,ypdri-min(ypdri)])+yranmin
    yTdri=(yTdri-min(yTdri))*(yranmax-yranmin)/max([0.35,yTdri-min(yTdri)])+yranmin
  
    if(max(filt) lt -1.5) then yran=[max([min(y),-quantile(y[filt],0.95)]),quantile(y[filt],0.95)] else yran=[yranmin,yranmax]
    if (j ne 3 and j ne 5) then plot,x,y, color=0,background=-1, charsize=3,ystyle=1,yrange=yran
    if (j eq 3) then  plot,x,y, color=0,background=-1, charsize=3,ystyle=1,yrange=yran, ytitle="estimated pmol/mol", thick =2
    if (j eq 5) then  plot,x,y, color=0,background=-1, charsize=3,ystyle=1,yrange=yran, xtitle="time (day in March/April 2018)", thick =2
    oplot,[0,32],[0,0],color=0
    loadct,31
    oplot,x,y, color=3, thick=2
    if(max(filt) gt -0.5) then oplot,x[filt],y[filt], psym=4, color=3, thick=3
    oplot,x,yLOD, color=171, thick=2
    oplot,x,ypdri, color=12, thick=1
    oplot,x,yTdri, color=192, thick=1

  endfor
  xyouts,0.08,0.96,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form, color=0, charthick =3, charsize=2



  print, 'SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'
  print, 'SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'
  print, 'SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'

  print, transpose(sig)
  print, 'SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'
  print, transpose(LOD2)



  print, 'haha'

end





pro UserplotPAMARCMIPall, event

  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib

  print, masses[event.index]
  matchi=match(masses[event.index],lib)
  form=strtrim(matchi.formula,2)

  FinalData=S1.DAT
  FinalDataErr=S1.ERR
  FinalDataNames=S1.NAM

  MassNames=float(FinalDataNames)

  dat=FinalData[*,where(MassNames eq masses[event.index])]
  pdri=FinalData[*,16]
  Tdri=FinalData[*,35]
  lon=FinalData[*,60]
  lat=FinalData[*,61]
  alt=FinalData[*,62]
  spe=FinalData[*,63]
 
  if (abs(masses[event.index]-63.011) lt 0.001) then dat=dat-(pdri-2.8)*0.9

  indM=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'indM')]
  timerow=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'tSTRTav')]
  FractionOfDay=timerow-floor(timerow)
  FractionOfDay2=timerow-3345
  FractionOfDay2[where(FractionOfDay2 gt 32)]= FractionOfDay2[where(FractionOfDay2 gt 32)]-31

  filt=where(indM eq 203)
  signal=dat[filt]
  pdriSA=pdri[filt]
  TdriSA=Tdri[filt]
lonSA=lon[filt]
latSA=lat[filt]
altSA=alt[filt]
speSA=spe[filt]



  timeSIG=timerow[filt]
  FractionOfDaySIG=FractionOfDay[filt]
  FractionOfDay2SIG=FractionOfDay2[filt]
  filt=where(indM eq 103)
  zero=dat[filt]
  pdriZE=pdri[filt]

  timeZER=timerow[filt]
  FractionOfDayZER=FractionOfDay[filt]
  FractionOfDay2ZER=FractionOfDay2[filt]

  for i=0,max(d(signal))-1 do begin
    tim=timeSIG[i]
    filtPRE=where(timeZER gt tim-7.5/(24*60) and timeZER lt tim)
    filtPOST=where(timeZER gt tim and timeZER lt tim+7.5/(24*60))
    filt=[filtPRE,filtPOST]
    ;   if(max(d(filt)) gt 3.5) then filt=filt[0:2]
    if (max(filtPRE) lt -0.5) then  filt=where(timeZER gt tim and timeZER lt tim+11.0/(24*60))
    if (max(filtPOST) lt -0.5) then  filt=where(timeZER gt tim-11.0/(24*60) and timeZER lt tim)
    LOD=mean(zero[filt])+3*stddev(zero[filt])

    ;    print,[i, signal[i],LOD,mean(zero[filt]),3*stddev(zero[filt]),filt,zero[filt]]
    if(i eq 0) then if (LOD lt signal[i]) then LODfilt=0 else LODfilt=-1 else if (LOD lt signal[i]) then LODfilt=[LODfilt,0] else LODfilt=[LODfilt,-1]

    if(i eq 0) then LOD2= 3*stddev(zero[filt]) else LOD2=[LOD2,  3*stddev(zero[filt]) ]

    filtPRE=where(timeZER gt tim-3.1/(24*60) and timeZER lt tim)
    filtPOST=where(timeZER gt tim and timeZER lt tim+3.1/(24*60))
    filt=[filtPRE,filtPOST]
    if (max(filtPRE) lt -0.5) then  filt=filtPOST
    if (max(filtPOST) lt -0.5) then  filt=filtPRE
    if(i eq 0) then sig= signal[i]-mean(zero[filt]) else sig=[sig, signal[i]-mean(zero[filt])]




  endfor

  print,100.0*(max(d(LODfilt))+total(LODfilt))/max(d(LODfilt))
  !x.oMARGIN=[2,2]
  !Y.oMARGIN=[3,2]
  !Y.MARGIN = [1, 1]


  !P.MULTI = [0,1,9]


  for j=0,8 do begin
    if (j eq 0) then filt=where(FractionOfDay2SIG gt 25 and FractionOfDay2SIG lt 26)
    if (j eq 1) then filt=where(FractionOfDay2SIG gt 26 and FractionOfDay2SIG lt 27)
    if (j eq 2) then filt=where(FractionOfDay2SIG gt 27 and FractionOfDay2SIG lt 28)
    if (j eq 3) then filt=where(FractionOfDay2SIG gt 28 and FractionOfDay2SIG lt 29)
    if (j eq 4) then filt=where(FractionOfDay2SIG gt 30 and FractionOfDay2SIG lt 31)
    if (j eq 5) then filt=where(FractionOfDay2SIG gt 31 and FractionOfDay2SIG lt 32)
    if (j eq 6) then filt=where(FractionOfDay2SIG gt 2 and FractionOfDay2SIG lt 3)
    if (j eq 7) then filt=where(FractionOfDay2SIG gt 3 and FractionOfDay2SIG lt 4)
    if (j eq 8) then filt=where(FractionOfDay2SIG gt 4 and FractionOfDay2SIG lt 5)

    x=FractionOfDay2SIG[filt]
    y=sig[filt]*1000.0
    ypdri=pdriSA[filt]
    yTdri=TdriSA[filt]
    yLOD=lod2[filt]*1000.0
    filt=where(y gt yLOD)
    fLOD=1.0*max(d(filt))/max(d(y))
    ; print,fLOD
    loadct,38
    yranmax=max([100,min([max(y),3*quantile(y,0.8)])])
    yranmin=max([min([0,min(y)]),-yranmax])
    ypdri=(ypdri-min(ypdri))*(yranmax-yranmin)/max([0.1,ypdri-min(ypdri)])+yranmin
    yTdri=(yTdri-min(yTdri))*(yranmax-yranmin)/max([0.35,yTdri-min(yTdri)])+yranmin

    if(max(filt) lt -1.5) then yran=[max([min(y),-quantile(y[filt],0.95)]),quantile(y[filt],0.95)] else yran=[yranmin,yranmax]
    if (j ne 3 and j ne 5) then plot,x,y, color=0,background=-1, charsize=3,ystyle=1,yrange=yran
    if (j eq 3) then  plot,x,y, color=0,background=-1, charsize=3,ystyle=1,yrange=yran, ytitle="estimated pmol/mol", thick =2
    if (j eq 5) then  plot,x,y, color=0,background=-1, charsize=3,ystyle=1,yrange=yran, xtitle="time (day in March/April 2018)", thick =2
    oplot,[0,32],[0,0],color=0
    loadct,31
    oplot,x,y, color=3, thick=2
    if(max(filt) gt -0.5) then oplot,x[filt],y[filt], psym=4, color=3, thick=3
    oplot,x,yLOD, color=171, thick=2
    oplot,x,ypdri, color=12, thick=1
    oplot,x,yTdri, color=192, thick=1

  endfor
  xyouts,0.08,0.96,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form, color=0, charthick =3, charsize=2



  print, 'SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'
  print, 'SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'
  print, 'SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'

  print, transpose(sig)
  print, 'SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'
  print, transpose(LOD2)



  print, 'haha'

end




pro UserplotPAMARCMIP_10s, event

  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib

  print, masses[event.index]
  
  ;if 17.023 is selected do full data export for all compounds with 1% above LOD
  ;if 17.023 is selected do full data export for all compounds with 1% above LOD
  ;if 17.023 is selected do full data export for all compounds with 1% above LOD
  if(event.index eq 0) then begin  ;if 17.023 is selected do full data export for all compounds with 1% above LOD
    matchi=match(masses[event.index],lib)
    form=strtrim(matchi.formula,2)
    FinalData=S1.DAT
    FinalDataErr=S1.ERR
    FinalDataNames=S1.NAM
    MassNames=float(FinalDataNames)
    pdri=FinalData[*,16]
    H2O=FinalData[*,35]
    lon=FinalData[*,60]
    lat=FinalData[*,61]
    alt=FinalData[*,62]
    spe=FinalData[*,63]
    indM=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'indM')]
    timerow=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'tSTRTav')]
    FractionOfDay=timerow-floor(timerow)
    FractionOfDay2=timerow-3345
    FractionOfDay2[where(FractionOfDay2 gt 32)]= FractionOfDay2[where(FractionOfDay2 gt 32)]-31
    filt=where(indM eq 203)
    pdriSA=pdri[filt]
    H2OSA=H2O[filt]
    lonSA=lon[filt]
    latSA=lat[filt]
    altSA=alt[filt]
    speSA=spe[filt]
    timeSIG=timerow[filt]
    FractionOfDaySIG=FractionOfDay[filt]
    FractionOfDay2SIG=FractionOfDay2[filt]
    FinSet=[[timesig],[FractionOfDay2SIG],[lonSA]]
    FinSet=[[FinSet],[latSA]]
    FinSet=[[FinSet],[altSA]]
    FinSet=[[FinSet],[speSA]]
    FinSet=[[FinSet],[pdriSA]]
    FinSet=[[FinSet],[H2OSA]]
    NamSet=['time[t09]','time [DayOfMonth]','longitude','latitude','altitude','speed','p_drift','F_H2O']
    stati=[1,2,3,4,5,6,7,8]
    filt=where(indM eq 103)
    pdriZE=pdri[filt]
    timeZER=timerow[filt]
    FractionOfDayZER=FractionOfDay[filt]
    FractionOfDay2ZER=FractionOfDay2[filt]
    for kk=0,371 do begin
            print, masses[kk]
            for i=0,max(d(timeSIG))-1 do begin
                    dat=FinalData[*,where(MassNames eq masses[kk])]
                    if (abs(masses[kk]-63.011) lt 0.001) then dat=dat-(pdri-2.8)*0.9
                    filt=where(indM eq 203)
                    signal=dat[filt]
                    filt=where(indM eq 103)
                    zero=dat[filt]
                    tim=timeSIG[i]
                    filtPRE=where(timeZER gt tim-7.5/(24*60) and timeZER lt tim)
                    filtPOST=where(timeZER gt tim and timeZER lt tim+7.5/(24*60))
                    filt=[filtPRE,filtPOST]
                    if (max(filtPRE) lt -0.5) then  filt=where(timeZER gt tim and timeZER lt tim+11.0/(24*60))
                    if (max(filtPOST) lt -0.5) then  filt=where(timeZER gt tim-11.0/(24*60) and timeZER lt tim)
                    LOD=mean(zero[filt])+3*stddev(zero[filt])
                    if(i eq 0) then if (LOD lt signal[i]) then LODfilt=0 else LODfilt=-1 else if (LOD lt signal[i]) then LODfilt=[LODfilt,0] else LODfilt=[LODfilt,-1]
                    if(i eq 0) then LOD2= 3*stddev(zero[filt]) else LOD2=[LOD2,  3*stddev(zero[filt]) ]
                    filtPRE=where(timeZER gt tim-3.1/(24*60) and timeZER lt tim)
                    filtPOST=where(timeZER gt tim and timeZER lt tim+3.1/(24*60))
                    filt=[filtPRE,filtPOST]
                    if (max(filtPRE) lt -0.5) then  filt=filtPOST
                    if (max(filtPOST) lt -0.5) then  filt=filtPRE
                    if(i eq 0) then sig= signal[i]-mean(zero[filt]) else sig=[sig, signal[i]-mean(zero[filt])]
            endfor
            filter=where(pdriSA gt 2.7 and  pdriSA lt 2.9 and H2Osa gt 5.0)
            AboveBFplus3sigma=100.0*max(d(where(sig[filter]-LOD2[filter] gt 0)))/max(d(filter))
            BelowBGmin3sigma=100.0*max(d(where(sig[filter]+LOD2[filter] lt 0)))/max(d(filter))
            if(AboveBFplus3sigma gt 1) then begin
                    FinSet=[[FinSet],[sig]]
                    FinSet=[[FinSet],[LOD2]]
                    masssi=strtrim(string(masses[kk],format='(F10.3)'),2)
                    NamSet=[NamSet,'sig'+masssi,'lod'+masssi]
                    stati=[stati,AboveBFplus3sigma,BelowBGmin3sigma]
            endif
            print, [AboveBFplus3sigma,BelowBGmin3sigma]
            print, 'hkhh'
    endfor
    str=[transpose([[string(stati)],[NamSet]]),string(FinSet)]
    MakeCsv,'E:\Pamarcmip\POLAR 5\w_data\Final_all.csv',transpose(str)
endif
  
  
  
  
  
  matchi=match(masses[event.index],lib)
  form=strtrim(matchi.formula,2)

  FinalData=S1.DAT
  FinalDataErr=S1.ERR
  FinalDataNames=S1.NAM

  MassNames=float(FinalDataNames)

  dat=FinalData[*,where(MassNames eq masses[event.index])]
  pdri=FinalData[*,16]
  H2O=FinalData[*,35]
  lon=FinalData[*,60]
  lat=FinalData[*,61]
  alt=FinalData[*,62]
  spe=FinalData[*,63]

  if (abs(masses[event.index]-63.011) lt 0.001) then dat=dat-(pdri-2.8)*0.9

  indM=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'indM')]
  timerow=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'tSTRTav')]
  FractionOfDay=timerow-floor(timerow)
  FractionOfDay2=timerow-3345
  FractionOfDay2[where(FractionOfDay2 gt 32)]= FractionOfDay2[where(FractionOfDay2 gt 32)]-31

  filt=where(indM eq 203)
  signal=dat[filt]
  pdriSA=pdri[filt]
  H2OSA=H2O[filt]
  lonSA=lon[filt]
  latSA=lat[filt]
  altSA=alt[filt]
  speSA=spe[filt]



  timeSIG=timerow[filt]
  FractionOfDaySIG=FractionOfDay[filt]
  FractionOfDay2SIG=FractionOfDay2[filt]
  filt=where(indM eq 103)
  zero=dat[filt]
  pdriZE=pdri[filt]

  timeZER=timerow[filt]
  FractionOfDayZER=FractionOfDay[filt]
  FractionOfDay2ZER=FractionOfDay2[filt]

  for i=0,max(d(signal))-1 do begin
    tim=timeSIG[i]
    filtPRE=where(timeZER gt tim-3.25/(24*60) and timeZER lt tim)
    filtPOST=where(timeZER gt tim and timeZER lt tim+3.25/(24*60))
    filt=[filtPRE,filtPOST]  ; index in timeZER that are within +/- 7.5 min of sample point
     if (max(filtPRE) lt -0.5) then  filt=where(timeZER gt tim and timeZER lt tim+7.5/(24*60))
    if (max(filtPOST) lt -0.5) then  filt=where(timeZER gt tim-7.5/(24*60) and timeZER lt tim)
  
 
  par=linfit(timezer[filt],zero[filt])
 untrend=zero[filt]-par[0]-par[1]*timezer[filt]
 
    if(i eq 0) then LOD2= 3*stddev(untrend) else LOD2=[LOD2,  3*stddev(untrend) ]

   
   
    filtPREs=where(timeZER gt tim-3.25/(24*60) and timeZER lt tim)
    filtPOSTs=where(timeZER gt tim and timeZER lt tim+3.25/(24*60))
    filts=[filtPREs,filtPOSTs]
    ;par=linfit(timezer[filts],zero[filts])

    if (max(filtPREs) lt -0.5) then  filts=filtPOSTs
    if (max(filtPOSTs) lt -0.5) then  filts=filtPREs
  ;  if(i eq 0) then sig= signal[i]-mean(zero[filts]) else sig=[sig, signal[i]-mean(zero[filts])]
    if(i eq 0) then sig= signal[i]-par[0]-par[1]*tim else sig=[sig, signal[i]-par[0]-par[1]*tim]
 ; plot, timezer[filt],zero[filt]
 ;   oplot, timezer[filt],zero[filt],psym=4
 ;   oplot, timezer[filts],zero[filts],psym=4,color=200

;print, [t09str(timeZER[min(filt)]), ' --  ',t09str(timeZER[max(filt)]), ' |  ',t09str(tim)]
;print, [range(filt),max(d(filt))]
;print, [t09str(timeZER[min(filts)]), ' --  ',t09str(timeZER[max(filts)]), ' |  ',t09str(tim)]
;print, [range(filts),max(d(filts))]



;print, 'gag'


  endfor

  !x.oMARGIN=[2,2]
  !Y.oMARGIN=[3,2]
  !Y.MARGIN = [1, 1]


plotselection=-1; April flights
plotselection=0; all flights
plotselection=1; event isoprene peaks April 3, second flight
plotselection=2; event isoprene peaks March 27, 3-chlorobenzene contamination
plotselection=3; event isoprene peaks April 2, D5 plume contamination
plotselection=4; map
plotselection=5; vs altitude
plotselection=0; 
;plotselection=getpar('Selection')

if(plotselection eq -1) then begin
  !P.MULTI = [0,1,3]
  for j=6,8 do begin
    if (j eq 0) then filt=where(FractionOfDay2SIG gt 25.59 and FractionOfDay2SIG lt 26)
    if (j eq 1) then filt=where(FractionOfDay2SIG gt 26.49 and FractionOfDay2SIG lt 26.76)
    if (j eq 2) then filt=where(FractionOfDay2SIG gt 27.53 and FractionOfDay2SIG lt 28)
    if (j eq 3) then filt=where(FractionOfDay2SIG gt 28 and FractionOfDay2SIG lt 29)
    if (j eq 4) then filt=where(FractionOfDay2SIG gt 30.3 and FractionOfDay2SIG lt 31)
    if (j eq 5) then filt=where(FractionOfDay2SIG gt 31.47 and FractionOfDay2SIG lt 32)
    if (j eq 6) then filt=where(FractionOfDay2SIG gt 2 and FractionOfDay2SIG lt 3)
    if (j eq 7) then filt=where(FractionOfDay2SIG gt 3 and FractionOfDay2SIG lt 4)
    if (j eq 8) then filt=where(FractionOfDay2SIG gt 4.32 and FractionOfDay2SIG lt 5)
    x=FractionOfDay2SIG[filt]
    y=sig[filt]*1000.0
    ypdri=pdriSA[filt]
    yH2O=H2OSA[filt]
    yalt=altSA[filt]
    yLOD=lod2[filt]*1000.0
    filt=where(y gt yLOD)
    fLOD=1.0*max(d(filt))/max(d(y))
    ; print,fLOD
    loadct,38
    yranmax=max([100,min([max(y),4*quantile(y,0.8)])])
    yranmin=max([min([0,min(y)]),-yranmax])
    ypdri=(ypdri)*(yranmax-yranmin)/4+yranmin
    yH2O=(yH2O)*(yranmax-yranmin)/6+yranmin
    yalt=yalt*(yranmax-yranmin)/5000.0+yranmin
    if(max(filt) lt -1.5) then yran=[max([min(y),-quantile(y[filt],0.95)]),quantile(y[filt],0.95)] else yran=[yranmin,yranmax]
    if (j ne 4 and j ne 7 and j ne 8 ) then plot,x,y,psym=3, color=0,background=-1, charsize=3,ystyle=1,yrange=yran
    if (j eq 4) then  plot,x,y, psym=3,color=0,background=-1, charsize=3,ystyle=1,yrange=yran,  thick =2
    if (j eq 7) then  plot,x,y, psym=3,color=0,background=-1, charsize=3,ystyle=1,yrange=yran, ytitle="mixing ratio [pmol/mol]",thick =2
    if (j eq 8) then  plot,x,y, psym=3,color=0,background=-1, charsize=3,ystyle=1,yrange=yran, xtitle="time (day in March/April 2018)", thick =2
    oplot,[0,32],[0,0],color=0
    loadct,31
    oplot,x,y, psym=4,symsize=0.3, color=171, thick=3
    oplot,x,yLOD, psym=3, color=0, thick=2
    oplot,x,ypdri,psym=3, color=8, thick=1
    oplot,x,yH2O,psym=3, color=162, thick=1
    oplot,x,yalt,psym=5,symsize=0.2,color=12, thick=2
    if(max(filt) gt -0.5) then oplot,x[filt],y[filt], psym=4,symsize=0.3, color=3, thick=3
    oplot,x,yalt,psym=3,color=12, thick=2

  endfor
  xyouts,0.08,0.96,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form, color=0, charthick =3, charsize=2

  xyouts,0.36,0.96,/normal,'data in blue' , color=3, charthick =2, charsize=1.5
  xyouts,0.46,0.96,/normal,'[grey if below      ]' , color=171, charthick =1, charsize=1.5
  xyouts,0.46,0.96,/normal,'               LOD' , color=0, charthick =1, charsize=1.5
  xyouts,0.63,0.96,/normal,'altitude' , color=12, charthick =2, charsize=1.5
  xyouts,0.73,0.96,/normal,'pressure' , color=8, charthick =1, charsize=1.5
  xyouts,0.83,0.96,/normal,'water flow' , color=162, charthick =1, charsize=1.5


endif


if(plotselection eq 0) then begin
  !P.MULTI = [0,2,5]
   for j=0,8 do begin
    if (j eq 0) then filt=where(FractionOfDay2SIG gt 25.59 and FractionOfDay2SIG lt 26)
    if (j eq 1) then filt=where(FractionOfDay2SIG gt 26.49 and FractionOfDay2SIG lt 26.76)
    if (j eq 2) then filt=where(FractionOfDay2SIG gt 27.53 and FractionOfDay2SIG lt 28)
    if (j eq 3) then filt=where(FractionOfDay2SIG gt 28 and FractionOfDay2SIG lt 29)
    if (j eq 4) then filt=where(FractionOfDay2SIG gt 30.3 and FractionOfDay2SIG lt 31)
    if (j eq 5) then filt=where(FractionOfDay2SIG gt 31.47 and FractionOfDay2SIG lt 32)
    if (j eq 6) then filt=where(FractionOfDay2SIG gt 2 and FractionOfDay2SIG lt 3)
    if (j eq 7) then filt=where(FractionOfDay2SIG gt 3 and FractionOfDay2SIG lt 4)
    if (j eq 8) then filt=where(FractionOfDay2SIG gt 4.32 and FractionOfDay2SIG lt 5)
    x=FractionOfDay2SIG[filt]
    y=sig[filt]*1000.0
    ypdri=pdriSA[filt]
    yH2O=H2OSA[filt]
    yalt=altSA[filt]
    yLOD=lod2[filt]*1000.0
  
    filt=where(y gt yLOD)
    filt=where(y gt yLOD and abs(yH2O-quantile(yH2O,0.8)) lt 0.1 and  abs(ypdri-quantile(ypdri,0.8)) lt 0.1); most strict selection
    fLOD=1.0*max(d(filt))/max(d(y))
    ; print,fLOD
    loadct,38
    yranmax=max([100,min([max(y),3*quantile(y,0.8)])])
    yranmin=max([min([0,min(y)]),-yranmax])
    ypdri=(ypdri)*(yranmax-yranmin)/4+yranmin
    yH2O=(yH2O)*(yranmax-yranmin)/6+yranmin
    yalt=yalt*(yranmax-yranmin)/5000.0+yranmin
    if(max(filt) lt -1.5) then yran=[max([min(y),-quantile(y[filt],0.95)]),quantile(y[filt],0.95)] else yran=[yranmin,yranmax]
    if (j ne 4 and j ne 7 and j ne 8 ) then plot,x,y,psym=3, color=0,background=-1, charsize=3,ystyle=1,yrange=yran
    if (j eq 4) then  plot,x,y, psym=3,color=0,background=-1, charsize=3,ystyle=1,yrange=yran, ytitle="mixing ratio [pmol/mol]", thick =2
    if (j eq 7) then  plot,x,y, psym=3,color=0,background=-1, charsize=3,ystyle=1,yrange=yran, xtitle="time (day in March/April 2018)", thick =2
    if (j eq 8) then  plot,x,y, psym=3,color=0,background=-1, charsize=3,ystyle=1,yrange=yran, xtitle="time (day in March/April 2018)", thick =2
   oplot,[0,32],[0,0],color=0
    loadct,31
    oplot,x,y,psym=3, color=3, thick=2
     oplot,x,yLOD, psym=3, color=171, thick=2
    oplot,x,ypdri,psym=3, color=8, thick=1
    oplot,x,yH2O,psym=3, color=162, thick=1
    oplot,x,yalt,psym=5,symsize=0.2,color=12, thick=2
    if(max(filt) gt -0.5) then oplot,x[filt],y[filt], psym=4,symsize=0.3, color=3, thick=3
    oplot,x,yalt,psym=3,color=12, thick=2

  endfor
  xyouts,0.08,0.96,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form, color=0, charthick =3, charsize=2
  
  xyouts,0.58,0.15,/normal,'data in blue' , color=3, charthick =2, charsize=1.5
  xyouts,0.66,0.15,/normal,'[dot if below LOD]' , color=3, charthick =1, charsize=1.5
  xyouts,0.58,0.125,/normal,'LOD' , color=171, charthick =1, charsize=1.5
  xyouts,0.58,0.10,/normal,'altitude [unscaled]' , color=12, charthick =2, charsize=1.5
  xyouts,0.58,0.075,/normal,'pressure [pdrift, unscaled]' , color=8, charthick =1, charsize=1.5
  xyouts,0.58,0.05,/normal,'water flow [ unscaled]' , color=162, charthick =1, charsize=1.5

  
endif


if(plotselection eq 1) then begin
  !P.MULTI = [0,1,1]
    filt=where(FractionOfDay2SIG gt 3.58 and FractionOfDay2SIG lt 4)
     x=FractionOfDay2SIG[filt]
    y=sig[filt]*1000.0
    ypdri=pdriSA[filt]
    yH2O=H2OSA[filt]
    yalt=altSA[filt]
    rangealt=range(yalt[where(yalt ge 0)])
    rangeH2O=range(yH2O[where(yH2O ge 0)])
    rangePdri=range(ypdri[where(ypdri ge 0)])
  yLOD=lod2[filt]*1000.0
    filt=where(y gt yLOD)
    fLOD=1.0*max(d(filt))/max(d(y))
    ; print,fLOD
    loadct,38
    yranmax=max([100,min([max(y),3*quantile(y,0.9)])])
    yranmin=max([min([0,min(y)]),-yranmax])
    ypdri=(ypdri)*(yranmax-yranmin)/4+yranmin
    yH2O=(yH2O)*(yranmax-yranmin)/6+yranmin
    yalt=yalt*(yranmax-yranmin)/5000.0+yranmin
    if(max(filt) lt -1.5) then yran=[max([min(y),-quantile(y[filt],0.95)]),quantile(y[filt],0.95)] else yran=[yranmin,yranmax]
    plot,x,y, color=0,background=-1, charsize=3,ystyle=1,yrange=yran, xtitle="time (day in March/April 2018)",ytitle="estimated pmol/mol", thick =2
    oplot,[0,32],[0,0],color=0
    loadct,31
    oplot,x,y, color=3, thick=2
    if(max(filt) gt -0.5) then oplot,x[filt],y[filt], psym=4, color=3, thick=3
    oplot,x,yLOD, color=171, thick=2
   ; oplot,x,ypdri, color=12, thick=1
   ; oplot,x,yH2O, color=192, thick=1
    oplot,x,yalt, color=108, thick=2
  xyouts,0.08,0.96,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form+',  Fh20: '+strtrim(string(min(rangeH2O),format='(F6.1)'),2)+'-'+strtrim(string(max(rangeH2O),format='(F6.1)'),2)+',  Pdri: '+strtrim(string(min(rangePdri),format='(F6.1)'),2)+'-'+strtrim(string(max(rangePdri),format='(F6.1)'),2), color=0, charthick =3, charsize=2
  xyouts,0.25,0.8,/normal,'altitude range: '+strtrim(string(min(rangealt),format='(I6)'),2)+'-'+strtrim(string(max(rangealt),format='(I6)'),2)+' m', color=108, charthick =3, charsize=2
  xyouts,0.55,0.8,/normal,'- LOD', color=171, charthick =3, charsize=2
endif


if(plotselection eq 2) then begin
  !P.MULTI = [0,1,1]
  filt=where(FractionOfDay2SIG gt 27.50 and FractionOfDay2SIG lt 28)
  x=FractionOfDay2SIG[filt]
  y=sig[filt]*1000.0
  ypdri=pdriSA[filt]
  yH2O=H2OSA[filt]
  yalt=altSA[filt]
  rangealt=range(yalt[where(yalt ge 0)])
  rangeH2O=range(yH2O[where(yH2O ge 0)])
  rangePdri=range(ypdri[where(ypdri ge 0)])
  yLOD=lod2[filt]*1000.0
  filt=where(y gt yLOD)
  fLOD=1.0*max(d(filt))/max(d(y))
  ; print,fLOD
  loadct,38
  yranmax=max([100,min([max(y),3*quantile(y,0.9)])])
  yranmin=max([min([0,min(y)]),-yranmax])
  ypdri=(ypdri)*(yranmax-yranmin)/4+yranmin
  yH2O=(yH2O)*(yranmax-yranmin)/6+yranmin
  yalt=yalt*(yranmax-yranmin)/5000.0+yranmin
  if(max(filt) lt -1.5) then yran=[max([min(y),-quantile(y[filt],0.95)]),quantile(y[filt],0.95)] else yran=[yranmin,yranmax]
  plot,x,y, color=0,background=-1, charsize=3,ystyle=1,yrange=yran, xtitle="time (day in March/April 2018)",ytitle="estimated pmol/mol", thick =2
  oplot,[0,32],[0,0],color=0
  loadct,31
  oplot,x,y, color=3, thick=2
  if(max(filt) gt -0.5) then oplot,x[filt],y[filt], psym=4, color=3, thick=3
  oplot,x,yLOD, color=171, thick=2
  ; oplot,x,ypdri, color=12, thick=1
  ; oplot,x,yH2O, color=192, thick=1
  oplot,x,yalt, color=108, thick=2
  xyouts,0.08,0.96,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form+',  Fh20: '+strtrim(string(min(rangeH2O),format='(F6.1)'),2)+'-'+strtrim(string(max(rangeH2O),format='(F6.1)'),2)+',  Pdri: '+strtrim(string(min(rangePdri),format='(F6.1)'),2)+'-'+strtrim(string(max(rangePdri),format='(F6.1)'),2), color=0, charthick =3, charsize=2
  xyouts,0.25,0.8,/normal,'altitude range: '+strtrim(string(min(rangealt),format='(I6)'),2)+'-'+strtrim(string(max(rangealt),format='(I6)'),2)+' m', color=108, charthick =3, charsize=2
  xyouts,0.55,0.8,/normal,'- LOD', color=171, charthick =3, charsize=2
endif

if(plotselection eq 3) then begin
  !P.MULTI = [0,1,1]
  filt=where(FractionOfDay2SIG gt 2.465 and FractionOfDay2SIG lt 2.6)
  x=FractionOfDay2SIG[filt]
  y=sig[filt]*1000.0
  ypdri=pdriSA[filt]
  yH2O=H2OSA[filt]
  yalt=altSA[filt]
  rangealt=range(yalt[where(yalt ge 0)])
  rangeH2O=range(yH2O[where(yH2O ge 0)])
  rangePdri=range(ypdri[where(ypdri ge 0)])
  yLOD=lod2[filt]*1000.0
  filt=where(y gt yLOD)
  fLOD=1.0*max(d(filt))/max(d(y))
  ; print,fLOD
  loadct,38
  yranmax=max([100,min([max(y),3*quantile(y,0.9)])])
  yranmin=max([min([0,min(y)]),-yranmax])
  ypdri=(ypdri)*(yranmax-yranmin)/4+yranmin
  yH2O=(yH2O)*(yranmax-yranmin)/6+yranmin
  yalt=yalt*(yranmax-yranmin)/5000.0+yranmin
  if(max(filt) lt -1.5) then yran=[max([min(y),-quantile(y[filt],0.95)]),quantile(y[filt],0.95)] else yran=[yranmin,yranmax]
  plot,x,y, color=0,background=-1, charsize=3,ystyle=1,yrange=yran, xtitle="time (day in March/April 2018)",ytitle="estimated pmol/mol", thick =2
  oplot,[0,32],[0,0],color=0
  loadct,31
  oplot,x,y, color=3, thick=2
  if(max(filt) gt -0.5) then oplot,x[filt],y[filt], psym=4, color=3, thick=3
  oplot,x,yLOD, color=171, thick=2
  ; oplot,x,ypdri, color=12, thick=1
   oplot,x,yH2O, color=192, thick=1
  oplot,x,yalt, color=108, thick=2
  xyouts,0.08,0.96,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form+',  Fh20: '+strtrim(string(min(rangeH2O),format='(F6.1)'),2)+'-'+strtrim(string(max(rangeH2O),format='(F6.1)'),2)+',  Pdri: '+strtrim(string(min(rangePdri),format='(F6.1)'),2)+'-'+strtrim(string(max(rangePdri),format='(F6.1)'),2), color=0, charthick =3, charsize=2
  xyouts,0.25,0.8,/normal,'altitude range: '+strtrim(string(min(rangealt),format='(I6)'),2)+'-'+strtrim(string(max(rangealt),format='(I6)'),2)+' m', color=108, charthick =3, charsize=2
  xyouts,0.55,0.8,/normal,'- LOD', color=171, charthick =3, charsize=2
endif


if(plotselection eq 4) then begin
  !P.MULTI = [0,1,1]
  !P.BACKGROUND=-1
  ;ALL
  MAP_SET, /MERCATOR, 0, 81, 0, CENTRAL_AZIMUTH=90,/ISOTROPIC,color=0, LIMIT= [79,-20, 84.2,18],  LATDEL=1, LONDEL=5, /CONTINENTS
  
  ;HC contamination
  ;MAP_SET, /MERCATOR, 0, 81, 0, CENTRAL_AZIMUTH=90,/ISOTROPIC,color=0, LIMIT= [79.8,-15, 80.2,-10],  LATDEL=1, LONDEL=5, /CONTINENTS
 
 ;around station Nord
 ; MAP_SET, /MERCATOR, 0, 81, 0, CENTRAL_AZIMUTH=90,/ISOTROPIC,color=0, LIMIT= [81,-20, 82.2,-10],  LATDEL=1, LONDEL=5, /CONTINENTS
 
  
 
  z=sig*1000.0
  zLOD=lod2*1000.0
  zgood=z[where(z gt zLOD and pdriSA gt 2.7 and  pdriSA lt 2.9 and H2Osa gt 5.0)]
  maxdisp=min([max([min([5*median(zgood),1000]),100]),quantile(zgood,0.999)])
  filt=where(z gt zLOD and z lt maxdisp and pdriSA gt 2.7 and  pdriSA lt 2.9 and H2Osa gt 5.0)
  filt=where(y gt yLOD and abs(yH2O-quantile(yH2O,0.8)) lt 0.1 and  abs(ypdri-quantile(ypdri,0.8)) lt 0.1); most strict selection

  ratioo=float(max(d(filt)))/float(max(d(where( z lt maxdisp and pdriSA gt 2.7 and  pdriSA lt 2.9 and H2Osa gt 5.0))))
 ; filt=where(z gt zLOD  and pdriSA gt 2.7 and  pdriSA lt 2.9 and H2Osa gt 5.0)
  z=z[filt]
  z2=FractionOfDay2SIG[filt]
  
  y=latSA[filt]
  z=sig[filt]*1000.0
 ypdri=pdriSA[filt]
  yH2O=H2OSA[filt]
  yalt=altSA[filt]
  x=lonSA[filt]
  loadct, 31
  filt2=where(pdriSA gt 2.7 and  pdriSA lt 2.9 and H2Osa gt 5.0)
  oplot, lonSA,latSA,psym=3, color=187
  oplot, lonSA[filt2],latSA[filt2],psym=4, color=187,symsize=0.5
 rangealt=range(yalt[where(yalt ge 0)])
  rangeH2O=range(yH2O[where(yH2O ge 0)])
  rangePdri=range(ypdri[where(ypdri ge 0)])
  xyouts,0.13,0.96,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form+',  Fh20: '+strtrim(string(min(rangeH2O),format='(F6.1)'),2)+'-'+strtrim(string(max(rangeH2O),format='(F6.1)'),2)+',  Pdri: '+strtrim(string(min(rangePdri),format='(F6.1)'),2)+'-'+strtrim(string(max(rangePdri),format='(F6.1)'),2), color=0, charthick =3, charsize=2
  xyouts,0.2,0.08,/normal,'altitude range: '+strtrim(string(min(rangealt),format='(I6)'),2)+'-'+strtrim(string(max(rangealt),format='(I6)'),2)+' m', color=0, charthick =1, charsize=2
  xyouts,0.90,0.77,/normal,'MR [pmol/mol]', color=0, charthick =1, charsize=1
  xyouts,0.69,0.89,/normal,'above LOD: '+strtrim(string(ratioo*100,format='(F7.1)'),2)+'%', color=0, charthick =1, charsize=1.5
  xyouts,0.69,0.86,/normal,'percentiles: ', color=0, charthick =1, charsize=1.5
  xyouts,0.69,0.83,/normal,'0.25: '+strtrim(string(quantile(z,0.25),format='(I7)'),2)+' pmol/mol', color=0, charthick =1, charsize=1.5
  xyouts,0.69,0.80,/normal,'0.50: '+strtrim(string(quantile(z,0.5),format='(I7)'),2)+' pmol/mol', color=0, charthick =1, charsize=1.5
  xyouts,0.69,0.77,/normal,'0.75: '+strtrim(string(quantile(z,0.75),format='(I7)'),2)+' pmol/mol', color=0, charthick =1, charsize=1.5

  coloroplot, x,y,z,z+1-z,0.25,0.9,0.75
  !P.BACKGROUND=0
  
  print, [ratioo*100, max(d(z)),quantile(z,[0.25,0.5,0.75]),mean(z)]
  
  
endif


if(plotselection eq 5) then begin
  !P.MULTI = [0,1,1]
  !P.BACKGROUND=-1

  z=sig*1000.0
  zLOD=lod2*1000.0
  zgood=z[where(z gt zLOD and pdriSA gt 2.7 and  pdriSA lt 2.9 and H2Osa gt 5.0)]
  zgood=z[where(z gt zLOD and pdriSA gt 2.75 and  pdriSA lt 2.9 and H2Osa gt 5.3)]
  
  maxdisp=min([max([min([5*median(zgood),1000]),100]),quantile(zgood,0.999)])
  filt2=where(z gt zLOD and z lt maxdisp and pdriSA gt 2.7 and  pdriSA lt 2.9 and H2Osa gt 5.0)
  filt=where(z gt zLOD and z lt maxdisp)

 ratioo=float(max(d(filt)))/float(max(d(where( z lt maxdisp and pdriSA gt 2.7 and  pdriSA lt 2.9 and H2Osa gt 5.0))))
  ; filt=where(z gt zLOD  and pdriSA gt 2.7 and  pdriSA lt 2.9 and H2Osa gt 5.0)
  z=z[filt]
  z2=FractionOfDay2SIG[filt]

  y=latSA[filt]
  z=sig[filt]*1000.0
  z2=sig[filt2]*1000.0
  ypdri=pdriSA[filt]
  yH2O=H2OSA[filt]
  yalt=altSA[filt]
  yalt2=altSA[filt2]
  x=lonSA[filt]
  loadct, 38
  plot, z,yalt, psym=4, yrange=[0,max(yalt)], color=0, background=-1, xtitle='concentration [pmol/mol]',ytitle='altitude [m]', charsize=2, thick=2
  
   oplot, z2,yalt2, psym=4,color=210, thick=2
  
  
  rangealt=range(yalt[where(yalt ge 0)])
  rangeH2O=range(yH2O[where(yH2O ge 0)])
  rangePdri=range(ypdri[where(ypdri ge 0)])


 xyouts,0.13,0.96,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form+',  Fh20: '+strtrim(string(min(rangeH2O),format='(F6.1)'),2)+'-'+strtrim(string(max(rangeH2O),format='(F6.1)'),2)+',  Pdri: '+strtrim(string(min(rangePdri),format='(F6.1)'),2)+'-'+strtrim(string(max(rangePdri),format='(F6.1)'),2), color=0, charthick =3, charsize=2

  
  filt2=where(pdriSA gt 2.7 and  pdriSA lt 2.9 and H2Osa gt 5.0)
  

endif


  print, 'SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'
  print, 'SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'
  print, 'SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'

  ;print, transpose(sig)
  print, 'SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'
 ; print, transpose(LOD2)



  print, 'haha'

end




pro userplotPICAB_PTR8000, event

  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib

  print, masses[event.index]

  FinalData=S1.DAT
  FinalDataErr=S1.ERR
  FinalDataNames=S1.NAM
  
  
  
  matchi=match(masses[event.index],lib)
  form=strtrim(matchi.formula,2)
 
  MassNames=float(FinalDataNames)
  
  dat=FinalData[*,where(MassNames eq masses[event.index])]
  dat59=FinalData[*,where(abs(MassNames-59.049) lt 0.002)]
  
  indM2=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'indM')]
  indM=dat59
  indM[where(dat59 gt 1.3)]=300
  indM[where(indM ne 300)]=100
  timerow=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'tSTRTav')]
  
  
  filt=where(dat59 gt -10)
  dat=dat[filt]
  dat59=dat59[filt]
  indM2=indM2[filt]
  timerow=timerow[filt]
 

REVind=abs(indgen(max(d(indM)))-max(d(indM)))
timeREV=timerow[REVind]
datREV=dat[REVind]
indMREV=indM[REVind]
av=8
counter=0
for i=0,max(d(indM))-1 do begin
  if (i ge 1) then if ( indMREV[i] ne indMREV[i-1] ) then counter=20 
  if (counter lt av-0.5) then begin
    if (counter eq 0) then timtim=timeREV[i] else timtim=[timtim,timeREV[i]]
    if (counter eq 0) then datdat=datREV[i] else datdat=[datdat, datREV[i]]
    if (counter eq 0) then mm=indMREV[i] else mm=[mm, indMREV[i]]
    counter=counter+1
  endif else begin
    if(i lt av+0.5) then tim5=mean(timtim) else if (counter ne 20) then tim5=[tim5,mean(timtim)]
    if(i lt av+0.5) then dat5=mean(datdat) else if (counter ne 20) then dat5=[dat5,mean(datdat)]
    if(i lt av+0.5) then indM5=mean(mm) else if (counter ne 20) then indM5=[indM5,mean(mm)]
     counter=0
  endelse
endfor

background=dat5[where(indM5 eq 100)]
background=background[where(background ne max(background))]
background=background[where(background ne min(background))]
background=background[where(background ne max(background))]
background=background[where(background ne min(background))]
SD=stddev(background)
background=quantile(background,0.5)

WINDOW, 4, xsize=1250,ysize=800

  !x.oMARGIN=[2,2]
  !Y.oMARGIN=[3,2]
  !Y.MARGIN = [1, 1]


  !P.MULTI = [0,1,3]
  loadct,38
  
filt=where(smooth(indM,3) eq 300)
x=  timerow[filt]
y=  dat[filt]-background



plot, timerow,dat,psym=4, color=0,background=-1, charsize=1.5
oplot, [3187.4,3187.4],[-1111,1111],color=0
oplot, [3189.6,3189.6],[-1111,1111],color=0
oplot, x,y,psym=4, color=90, thick=3
oplot, timerow[where(indM eq 100)],dat[where(indM eq 100)]-background,psym=4, color=-10, thick=3
oplot,[0,10000],[0,0],color=0

plot, tim5,dat5,psym=4, color=0,background=-1, charsize=1.5
oplot, [3187.4,3187.4],[-1111,1111],color=0
oplot, [3189.6,3189.6],[-1111,1111],color=0
oplot, tim5[where(indM5 eq 300)],dat5[where(indM5 eq 300)],psym=4, color=90, thick=3
oplot, tim5[where(indM5 eq 100)],dat5[where(indM5 eq 100)],psym=4, color=-10, thick=3
oplot,[0,10000],[background,background],color=-10

y5=dat5[where(indM5 eq 300)]-max(background)
yGT0=y5[where(y5 gt 0)]
yGTlod=y5[where(y5 gt 3.0*SD)]

calfact=1.0
if( abs(masses[event.index]-59.049) lt 0.002) then calfact=1.03*3.0/(1.05*3.25)
if( abs(masses[event.index]-33.033) lt 0.002) then calfact=1.01*3.0/(0.45*2.2)
if( abs(masses[event.index]-42.034) lt 0.002) then calfact=1.02*3.0/(0.975*3.1)
if( abs(masses[event.index]-45.034) lt 0.002) then calfact=1.02*3.0/(1.05*3.03)
if( abs(masses[event.index]-71.049) lt 0.002) then calfact=1.05*3.0/(0.8*3.54)
if( abs(masses[event.index]-73.064) lt 0.002) then calfact=1.05*3.0/(0.95*3.25)
if( abs(masses[event.index]-79.053) lt 0.002) then calfact=1.07*3.0/(1.1*1.97)
if( abs(masses[event.index]-107.085) lt 0.002) then calfact=1.09*3.0/(0.9*2.31)
if( abs(masses[event.index]-121.100) lt 0.002) then calfact=1.10*3.0/(0.85*2.4)
if( abs(masses[event.index]-137.132) lt 0.002) then calfact=1.12*3.0/(0.7*2.45)

yCAL=y5*calfact

plot, tim5[where(indM5 eq 300)],y5,yrange=range([y5,yCAL]), psym=4, color=0,background=-1, charsize=1.5
oplot, [3187.4,3187.4],[-1111,1111],color=0
oplot, [3189.6,3189.6],[-1111,1111],color=0
oplot,[0,10000],[0,0],color=0
oplot, tim5[where(indM5 eq 300)],dat5[where(indM5 eq 300)]-background,psym=4, color=90, thick=3
if (calfact ne 1.0) then oplot, tim5[where(indM5 eq 300)],yCAL, psym=4, color=20, thick=3

oplot, [0,10000],3.0*[SD,SD], color=-10, thick=3
xyouts,0.08,0.935,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form, color=0, charthick =3, charsize=2
xyouts,0.08,0.30,/normal,'f(>0)='+strtrim(string(float(max(d(yGT0)))/float(max(d(y5))),format='(F4.2)'),2)+', f(>LOD)='+strtrim(string(float(max(d(yGTlod)))/float(max(d(y5))),format='(F4.2)'),2), color=0, charthick =3, charsize=2

cntr=0
first=1
firstCAL=1

for ii=0,max(d(masses))-1 do begin
  
  

  matchi=match(masses[ii],lib)
  form=strtrim(matchi.formula,2)
dat=FinalData[*,where(MassNames eq masses[ii])]
 
   filt=where(dat59 gt -10)
  dat=dat[filt]
   datREV=dat[REVind]
  av=8
  counter=0
  for i=0,max(d(indM))-1 do begin
    if (i ge 1) then if ( indMREV[i] ne indMREV[i-1] ) then counter=20
    if (counter lt av-0.5) then begin
      if (counter eq 0) then timtim=timeREV[i] else timtim=[timtim,timeREV[i]]
      if (counter eq 0) then datdat=datREV[i] else datdat=[datdat, datREV[i]]
      if (counter eq 0) then mm=indMREV[i] else mm=[mm, indMREV[i]]
      counter=counter+1
    endif else begin
      if(i lt av+0.5) then tim5=mean(timtim) else if (counter ne 20) then tim5=[tim5,mean(timtim)]
      if(i lt av+0.5) then dat5=mean(datdat) else if (counter ne 20) then dat5=[dat5,mean(datdat)]
      if(i lt av+0.5) then indM5=mean(mm) else if (counter ne 20) then indM5=[indM5,mean(mm)]
      counter=0
    endelse
  endfor

  background=dat5[where(indM5 eq 100)]
  background=background[where(background ne max(background))]
  background=background[where(background ne min(background))]
  background=background[where(background ne max(background))]
  background=background[where(background ne min(background))]
  SD=stddev(background)
  background=quantile(background,0.5)



  filt=where(smooth(indM,3) eq 300)
  x=  timerow[filt]
  y=  dat[filt]-background



  y5=dat5[where(indM5 eq 300)]-max(background)
  yGT0=y5[where(y5 gt 0)]
  yGTlod=y5[where(y5 gt 3.0*SD)]

  calfact=1.0
  if( abs(masses[ii]-59.049) lt 0.002) then calfact=1.03*3.0/(1.05*3.25)
  if( abs(masses[ii]-33.033) lt 0.002) then calfact=1.01*3.0/(0.45*2.2)
  if( abs(masses[ii]-42.034) lt 0.002) then calfact=1.02*3.0/(0.975*3.1)
  if( abs(masses[ii]-45.034) lt 0.002) then calfact=1.02*3.0/(1.05*3.03)
  if( abs(masses[ii]-71.049) lt 0.002) then calfact=1.05*3.0/(0.8*3.54)
  if( abs(masses[ii]-73.064) lt 0.002) then calfact=1.05*3.0/(0.95*3.25)
  if( abs(masses[ii]-79.053) lt 0.002) then calfact=1.07*3.0/(1.1*1.97)
  if( abs(masses[ii]-107.085) lt 0.002) then calfact=1.09*3.0/(0.9*2.31)
  if( abs(masses[ii]-121.100) lt 0.002) then calfact=1.10*3.0/(0.85*2.4)
  if( abs(masses[ii]-137.132) lt 0.002) then calfact=1.12*3.0/(0.7*2.45)

  yCAL=y5*calfact
fGT0=float(max(d(yGT0)))/float(max(d(y5)))
fGTlod=float(max(d(yGTlod)))/float(max(d(y5)))

if(fGT0 gt 0.75 and fGTlod gt 0.2) then begin
        cntr=cntr+1
        if (first eq 1) then begin
                namesKIN=['time',strtrim(string(masses[ii],format='(F7.3)'),2)]
                finaldataKIN=[[x],[y]]
                first=0
        endif else begin
                namesKIN=[namesKIN,strtrim(string(masses[ii],format='(F7.3)'),2)]
                finaldataKIN=[[finaldataKIN],[y]]
        endelse
        if(calfact ne 1) then begin
                if (firstCAL eq 1) then begin
                        namesCAL=['time',strtrim(string(masses[ii],format='(F7.3)'),2)]
                        finaldataCAL=[[x],[y]]
                        firstCAL=0
                endif else begin
                        namesCAL=[namesCAL,strtrim(string(masses[ii],format='(F7.3)'),2)]
                        finaldataCAL=[[finaldataCAL],[y*max(calfact)]]
                endelse
        endif
        print, string(cntr)+string(mean(y),format='(F9.3)')+',   m='+string(masses[ii],format='(F7.3)')+', f(>0)='+strtrim(string(fGT0,format='(F4.2)'),2)+', f(>LOD)='+strtrim(string(fGTlod,format='(F4.2)'),2)
 endif 
endfor
;TOF8000 is local time, TOF1000 is UTC

hed=strarr(max(d(namesKIN)))
hed[0]='Final Data UU-TOF8000. Calculated VMR in nmol/mol (kinetic method). Constant background subtracted (median of all background measurements i.e. 15 min every 3 hours). Time in UTC (days since 1.1.2009).'
finaldataKIN[*,0]=finaldataKIN[*,0]-2.0/24.0 ;convert to UTC
str=transpose(string(finaldataKIN))
str=[[hed],[namesKIN],[str]]
 path=strmid(s1.pathdat,0,strpos(s1.pathdat,'w_data')+6)+'\TOF8000_UU_FinaldataKIN.csv'
MakeCsv,path,str

hed=strarr(max(d(namesCAL)))
hed[0]='Final Data UU-TOF8000. Calibrated VMR in nmol/mol (NPL standard). Constant background subtracted (median of all background measurements i.e. 15 min every 3 hours). Time in UTC (days since 1.1.2009).'
finaldataCAL[*,0]=finaldataCAL[*,0]-2.0/24.0 ;convert to UTC
str=transpose(string(finaldataCAL))
str=[[hed],[namesCAL],[str]]
path=strmid(s1.pathdat,0,strpos(s1.pathdat,'w_data')+6)+'\TOF8000_UU_FinaldataCAL.csv'
MakeCsv,path,str


print, 'haha'

end




pro userplotPICAB_PTR1000, event

  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib

  print, masses[event.index]

  FinalData=S1.DAT
  FinalDataErr=S1.ERR
  FinalDataNames=S1.NAM



  matchi=match(masses[event.index],lib)
  form=strtrim(matchi.formula,2)

  MassNames=float(FinalDataNames)

  dat=FinalData[*,where(MassNames eq masses[event.index])]
  dat59=FinalData[*,where(abs(MassNames-59.049) lt 0.002)]
  dat70=FinalData[*,where(abs(MassNames-70.072) lt 0.002)]

  indM2=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'indM')]
   timerow=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'tSTRTav')]


  filt=where(abs(dat59) lt 6.5 and dat70 gt -0.5 and dat lt quantile(dat,0.95))
  dat=dat[filt]
  dat59=dat59[filt]
  indM2=indM2[filt]
  timerow=timerow[filt]
  indM=dat59
  indM[where(dat59 gt 0.5)]=300
  indM[where(indM ne 300)]=100


  REVind=abs(indgen(max(d(indM)))-max(d(indM)))
  timeREV=timerow[REVind]
  datREV=dat[REVind]
  indMREV=indM[REVind]
  av=8
  counter=0
  for i=0,max(d(indM))-1 do begin
    if (i ge 1) then if ( indMREV[i] ne indMREV[i-1] ) then counter=20
    if (counter lt av-0.5) then begin
      if (counter eq 0) then timtim=timeREV[i] else timtim=[timtim,timeREV[i]]
      if (counter eq 0) then datdat=datREV[i] else datdat=[datdat, datREV[i]]
      if (counter eq 0) then mm=indMREV[i] else mm=[mm, indMREV[i]]
      counter=counter+1
    endif else begin
      if(i lt av+0.5) then tim5=mean(timtim) else if (counter ne 20) then tim5=[tim5,mean(timtim)]
      if(i lt av+0.5) then dat5=mean(datdat) else if (counter ne 20) then dat5=[dat5,mean(datdat)]
      if(i lt av+0.5) then indM5=mean(mm) else if (counter ne 20) then indM5=[indM5,mean(mm)]
      counter=0
    endelse
  endfor

  background=dat5[where(indM5 eq 100)]
 ; background=background[where(background ne max(background))]
 ; ;background=background[where(background ne min(background))]
 ; background=background[where(background ne max(background))]
  ;background=background[where(background ne min(background))]
  SD=stddev(background)
  background=quantile(background,0.5)

  WINDOW, 3, xsize=650,ysize=800


  !x.oMARGIN=[2,2]
  !Y.oMARGIN=[3,2]
  !Y.MARGIN = [1, 1]


  !P.MULTI = [0,1,3]
  loadct,38

  filt2=where(smooth(indM,3) eq 300)
  x=  timerow[filt2]
  y=  dat[filt2]-background



  plot, timerow,dat,psym=4, color=0,background=-1, charsize=1.5
  oplot, [3187.8,3187.8],[-1111,1111],color=0
 oplot, x,dat[filt2],psym=4, color=90, thick=3
  oplot, timerow[where(indM eq 100)],dat[where(indM eq 100)],psym=4, color=-10, thick=3
  oplot,[0,10000],[0,0],color=0

  plot, tim5,dat5,psym=4, color=0,background=-1, charsize=1.5
  oplot, [3187.8,3187.8],[-1111,1111],color=0
  oplot, tim5[where(indM5 eq 300)],dat5[where(indM5 eq 300)],psym=4, color=90, thick=3
  oplot, tim5[where(indM5 eq 100)],dat5[where(indM5 eq 100)],psym=4, color=-10, thick=3
  oplot,[0,10000],[background,background],color=-10

  y5=dat5[where(indM5 eq 300)]-max(background)
  yGT0=y5[where(y5 gt 0)]
  yGTlod=y5[where(y5 gt 3.0*SD)]

  calfact=1.0
   if( abs(masses[event.index]-33.029) lt 0.002) then calfact=1.01*3.0/(0.4*2.2)
  if( abs(masses[event.index]-42.027) lt 0.002) then calfact=1.02*3.0/(1.0*3.1)
  if( abs(masses[event.index]-45.027) lt 0.002) then calfact=1.02*3.0/(1.1*3.03)
  if( abs(masses[event.index]-59.050) lt 0.002) then calfact=1.03*3.0/(1.05*3.25)
  if( abs(masses[event.index]-71.046) lt 0.002) then calfact=1.05*3.0/(0.85*3.54)
  if( abs(masses[event.index]-73.056) lt 0.002) then calfact=1.05*3.0/(1.1*3.25)
  if( abs(masses[event.index]-79.046) lt 0.002) then calfact=1.07*3.0/(1.0*1.97)
  if( abs(masses[event.index]-107.084) lt 0.002) then calfact=1.09*3.0/(1.0*2.31)
  if( abs(masses[event.index]-121.094) lt 0.002) then calfact=1.10*3.0/(0.9*2.4)
  if( abs(masses[event.index]-137.124) lt 0.002) then calfact=1.12*3.0/(0.9*2.45)

  yCAL=y5*calfact

  plot, tim5[where(indM5 eq 300)],y5,yrange=range([y5,yCAL]), psym=4, color=0,background=-1, charsize=1.5
  oplot, [3187.8,3187.8],[-1111,1111],color=0
  oplot,[0,10000],[0,0],color=0
  oplot, tim5[where(indM5 eq 300)],dat5[where(indM5 eq 300)]-background,psym=4, color=90, thick=3
  if (calfact ne 1.0) then oplot, tim5[where(indM5 eq 300)],yCAL, psym=4, color=20, thick=3

  oplot, [0,10000],3.0*[SD,SD], color=-10, thick=3
  xyouts,0.08,0.935,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form, color=0, charthick =3, charsize=2
  xyouts,0.08,0.30,/normal,'f(>0)='+strtrim(string(float(max(d(yGT0)))/float(max(d(y5))),format='(F4.2)'),2)+', f(>LOD)='+strtrim(string(float(max(d(yGTlod)))/float(max(d(y5))),format='(F4.2)'),2), color=0, charthick =3, charsize=2

  cntr=0
  first=1
  firstCAL=1

  for ii=0,max(d(masses))-1 do begin



    matchi=match(masses[ii],lib)
    form=strtrim(matchi.formula,2)
    dat=FinalData[*,where(MassNames eq masses[ii])]

    dat=dat[filt]
    datREV=dat[REVind]
    av=8
    counter=0
    for i=0,max(d(indM))-1 do begin
      if (i ge 1) then if ( indMREV[i] ne indMREV[i-1] ) then counter=20
      if (counter lt av-0.5) then begin
        if (counter eq 0) then timtim=timeREV[i] else timtim=[timtim,timeREV[i]]
        if (counter eq 0) then datdat=datREV[i] else datdat=[datdat, datREV[i]]
        if (counter eq 0) then mm=indMREV[i] else mm=[mm, indMREV[i]]
        counter=counter+1
      endif else begin
        if(i lt av+0.5) then tim5=mean(timtim) else if (counter ne 20) then tim5=[tim5,mean(timtim)]
        if(i lt av+0.5) then dat5=mean(datdat) else if (counter ne 20) then dat5=[dat5,mean(datdat)]
        if(i lt av+0.5) then indM5=mean(mm) else if (counter ne 20) then indM5=[indM5,mean(mm)]
        counter=0
      endelse
    endfor

    background=dat5[where(indM5 eq 100)]
   ; background=background[where(background ne max(background))]
  ;  background=background[where(background ne min(background))]
  ;  background=background[where(background ne max(background))]
  ;  background=background[where(background ne min(background))]
    SD=stddev(background)
    background=quantile(background,0.5)



    filt2=where(smooth(indM,3) eq 300)
    x=  timerow[filt2]
    y=  dat[filt2]-background



    y5=dat5[where(indM5 eq 300)]-max(background)
    yGT0=y5[where(y5 gt 0)]
    yGTlod=y5[where(y5 gt 3.0*SD)]

    calfact=1.0
   if( abs(masses[ii]-33.029) lt 0.002) then calfact=1.01*3.0/(0.4*2.2)
  if( abs(masses[ii]-42.027) lt 0.002) then calfact=1.02*3.0/(1.0*3.1)
  if( abs(masses[ii]-45.027) lt 0.002) then calfact=1.02*3.0/(1.1*3.03)
  if( abs(masses[ii]-59.050) lt 0.002) then calfact=1.03*3.0/(1.05*3.25)
  if( abs(masses[ii]-71.046) lt 0.002) then calfact=1.05*3.0/(0.85*3.54)
  if( abs(masses[ii]-73.056) lt 0.002) then calfact=1.05*3.0/(1.1*3.25)
  if( abs(masses[ii]-79.046) lt 0.002) then calfact=1.07*3.0/(1.0*1.97)
  if( abs(masses[ii]-107.084) lt 0.002) then calfact=1.09*3.0/(1.0*2.31)
  if( abs(masses[ii]-121.094) lt 0.002) then calfact=1.10*3.0/(0.9*2.4)
  if( abs(masses[ii]-137.124) lt 0.002) then calfact=1.12*3.0/(0.9*2.45)

    yCAL=y5*calfact
    fGT0=float(max(d(yGT0)))/float(max(d(y5)))
    fGTlod=float(max(d(yGTlod)))/float(max(d(y5)))

    if(fGT0 gt 0.75 and fGTlod gt 0.2) then begin
      cntr=cntr+1
      
      if (first eq 1) then begin
        namesKIN=['time',strtrim(string(masses[ii],format='(F7.3)'),2)]
        finaldataKIN=[[x],[y]]
        first=0
      endif else begin
        namesKIN=[namesKIN,strtrim(string(masses[ii],format='(F7.3)'),2)]
        finaldataKIN=[[finaldataKIN],[y]]
      endelse
      if(calfact ne 1.0) then begin
        if (firstCAL eq 1) then begin
          namesCAL=['time',strtrim(string(masses[ii],format='(F7.3)'),2)]
          finaldataCAL=[[x],[y*max(calfact)]]
          firstCAL=0
        endif else begin
          namesCAL=[namesCAL,strtrim(string(masses[ii],format='(F7.3)'),2)]
          finaldataCAL=[[finaldataCAL],[y*max(calfact)]]
        endelse
      endif
   
      
      
      
      print, string(cntr)+string(mean(y),format='(F9.3)')+',   m='+string(masses[ii],format='(F7.3)')+', f(>0)='+strtrim(string(fGT0,format='(F4.2)'),2)+', f(>LOD)='+strtrim(string(fGTlod,format='(F4.2)'),2)
    endif
  endfor

  ;TOF8000 is local time, TOF1000 is UTC

  hed=strarr(max(d(namesKIN)))
  hed[0]='Final Data UU-TOF1000. Calculated VMR in nmol/mol (kinetic method). Constant background subtracted (median of all background measurements i.e. 15 min every 3 hours). Time in UTC (days since 1.1.2009).'
   str=transpose(string(finaldataKIN))
  str=[[hed],[namesKIN],[str]]
  path=strmid(s1.pathdat,0,strpos(s1.pathdat,'w_data')+6)+'\TOF1000_UU_FinaldataKIN.csv'
  MakeCsv,path,str

  hed=strarr(max(d(namesCAL)))
  hed[0]='Final Data UU-TOF1000. Calibrated VMR in nmol/mol (NPL standard). Constant background subtracted (median of all background measurements i.e. 15 min every 3 hours). Time in UTC (days since 1.1.2009).'
   str=transpose(string(finaldataCAL))
  str=[[hed],[namesCAL],[str]]
  path=strmid(s1.pathdat,0,strpos(s1.pathdat,'w_data')+6)+'\TOF1000_UU_FinaldataCAL.csv'
  MakeCsv,path,str



  print, 'haha'

end




pro userplotBiosphereCAL, event

 ; Cylinder CC516654
 ; Methanol 67-56-1 494 ±5%
 ; Ethanol 64-17-5 504 ±5%
 ; Acetonitrile 75-05-8 487 ±5%
 ; Acetone 67-64-1 497 ±5%
 ; Isoprene 78-79-5 509 ±5%
 ; DMS 75-18-3 537 ±5%
 ; Methacrolein 78-85-3 252 ±5%
 ; Methyl Vinyl Ketone 78-94-4 243 ±5%
 ; Benzene 71-43-2 510 ±5%
 ; Toluene 108-88-3 489 ±5%
 ; Furfural 98-01-1 479 ±5%
 ; Hexamethylcyclotrisiloxane (D3) 541-05-9 502 ±5%
 ; Octamethylcyclotetrasiloxane (D4) 556-67-2 502 ±5%
 ; Linalool 78-70-6 466 ±5%
 ; Decamethylcyclopentasiloxane (D5) 541-02-6 518 ±5%
 ; Dodecamethylcyclohexasiloxane (D6) 540-97-6 190 ±5%
 ; -Cedrene 469-61-4 105 ±5%
 
  
 ; CC516855
 ; Methanol 67-56-1 433 ±5%
 ; Acetonitrile 75-05-8 461 ±5%
 ; Propanal 123-38-6 463 ±5%
 ; Benzene 71-43-2 497 ±5%
 ; Hexanal 66-25-1 494 ±5%
 ; Hexamethylcyclotrisiloxane (D3) 541-05-9 509 ±5%
 ; m-Xylene 108-38-3 499 ±5%
 ; Styrene 100-42-5 498 ±5%
 ; -Pinene 80-56-8 126 ±5%
 ; -Pinene 18172-67-3 125 ±5%
 ; Octamethylcyclotetrasiloxane (D4) 556-67-2 499 ±5%
 ; 3-Carene 13466-78-9 143 ±5%
 ; p-Isopropyltoluene 99-87-6 474 ±5%
 ; Limonene 5889-54-8 148 ±5%
 ; Acetophenone 98-86-2 496 ±5%
 ; Decamethylcyclopentasiloxane (D5) 541-02-6 498 ±5%
 ; Dodecamethylcyclohexasiloxane (D6) 540-97-6 189 ±5%





  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib

  print, masses[event.index]

  FinalData=S1.DAT
  FinalDataErr=S1.ERR
  FinalDataNames=S1.NAM
  MassNames=float(FinalDataNames)

  FinalDataCNTS=FinalDataErr
  FinalDataCNTS[*,where(MassNames gt 0.1)]=1/(FinalDataCNTS[*,where(MassNames gt 0.1)]^2)
  
FinalDataCNTS[where(FinalDataCNTS lt 2e-8)]=-9999
  matchi=match(masses[event.index],lib)
  form=strtrim(matchi.formula,2)

 

  ; convert cps to counts
 ; timestep=max(reltime)*60/max(d(reltime))
  ;ProtData=ProtData*timestep

AVtime=(FinalDataCNTS[*,1]-FinalDataCNTS[*,0])*24*3600
  I19=FinalDataCNTS[*,where(abs(MassNames-19.017) eq min(abs(MassNames-19.017)) )]/AVtime
  I21=FinalDataCNTS[*,where(abs(MassNames-21.022) eq min(abs(MassNames-21.022)) )]/AVtime
  I37=FinalDataCNTS[*,where(abs(MassNames-37.028) eq min(abs(MassNames-37.028)) )]/AVtime
  I38=FinalDataCNTS[*,where(abs(MassNames-38.033) eq min(abs(MassNames-38.033)) )]/AVtime
  I39=FinalDataCNTS[*,where(abs(MassNames-39.033) eq min(abs(MassNames-39.033)) )]/AVtime
  I34=FinalDataCNTS[*,where(abs(MassNames-33.994) eq min(abs(MassNames-33.994)) )]/AVtime
  I32=FinalDataCNTS[*,where(abs(MassNames-31.989) eq min(abs(MassNames-31.989)) )]/AVtime
  I32[where(I32 gt 6000)]=I34[where(I32 gt 6000)]*242

  if( max(I19) gt 5000) then I19=I21*487
  I37[where(I37 lt I38 *645)]=I38[where(I37 lt I38 *645)]*645
  ; if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 ) then    I37[where(I37 lt I39 *242)]=I38[where(I37 lt I38 *242)]*242  ; Juelich PTR-TOF


  Prim=reform(I19+I37)


  F37=I37/prim
  F32=I34*242/prim

  Pdrift=FinalDataCNTS[*,where(strpos(FinalDataNames,'p-Drift') gt -0.5)] & Pdrift=Pdrift[*,0]

  H2Oscc=FinalDataCNTS[*,where(strpos(FinalDataNames,'H2O[Act]')  gt -0.5)] & H2Oscc=H2Oscc[*,0]
  Udrift=FinalDataCNTS[*,where(strpos(FinalDataNames,'Udrift') gt -0.5)] & Udrift=Udrift[*,0]
  Udx=FinalDataCNTS[*,where(strpos(FinalDataNames,'Udx[Act]') gt -0.5)] & Udx=Udx[*,0]
  FCinlet=FinalDataCNTS[*,where(strpos(FinalDataNames,'FCinlet') gt -0.5)] & FCinlet=FCinlet[*,0]
  Tdrift=FinalDataCNTS[*,where(strpos(FinalDataNames,'T-Drift') gt -0.5 )] & Tdrift=Tdrift[*,0]
  PC=FinalDataCNTS[*,where(strpos(FinalDataNames,'PC[Act]') gt -0.5)] & PC=PC[*,0]


  METH_33=FinalDataCNTS[*,where(abs(MassNames-33.033) eq min(abs(MassNames-33.033)) )]*1.01/AVtime
  CH3CN_42=FinalDataCNTS[*,where(abs(MassNames-42.034) eq min(abs(MassNames-42.034)) )]*1.02/AVtime
  ETH_47=FinalDataCNTS[*,where(abs(MassNames-47.049) eq min(abs(MassNames-47.049)) )]*1.02/AVtime
  ACE_59=FinalDataCNTS[*,where(abs(MassNames-59.049) eq min(abs(MassNames-59.049)) )]*1.03/AVtime
  DMS_63=FinalDataCNTS[*,where(abs(MassNames-63.026) eq min(abs(MassNames-63.026)) )]*1.07/AVtime
  ISO_69=FinalDataCNTS[*,where(abs(MassNames-69.070) eq min(abs(MassNames-69.070)) )]*1.06/AVtime
  ISO_41=FinalDataCNTS[*,where(abs(MassNames-41.039) eq min(abs(MassNames-41.039)) )]*1.03/AVtime
  MVK_71=FinalDataCNTS[*,where(abs(MassNames-71.049) eq min(abs(MassNames-71.049)) )]*1.05/AVtime
  BEN_79=FinalDataCNTS[*,where(abs(MassNames-79.054) eq min(abs(MassNames-79.054)) )]*1.07/AVtime
  TOL_93=FinalDataCNTS[*,where(abs(MassNames-93.070) eq min(abs(MassNames-93.070)) )]*1.08/AVtime
  FUR_97=FinalDataCNTS[*,where(abs(MassNames-97.028) eq min(abs(MassNames-97.028)) )]*1.06/AVtime
  LIN_155=FinalDataCNTS[*,where(abs(MassNames-155.143) eq min(abs(MassNames-155.143)) )]*1.12/AVtime
  CED_205=FinalDataCNTS[*,where(abs(MassNames-205.195) eq min(abs(MassNames-205.195)) )]*1.18/AVtime
  D3_223=FinalDataCNTS[*,where(abs(MassNames-223.064) eq min(abs(MassNames-223.064)) )]*1.37/AVtime
  D3_207=FinalDataCNTS[*,where(abs(MassNames-207.033) eq min(abs(MassNames-207.033)) )]*1.36/AVtime
  D4_297=FinalDataCNTS[*,where(abs(MassNames-297.083) eq min(abs(MassNames-297.083)) )]*1.52/AVtime
  D4_281=FinalDataCNTS[*,where(abs(MassNames-281.052) eq min(abs(MassNames-281.052)) )]*1.51/AVtime
  D5_355=FinalDataCNTS[*,where(abs(MassNames-355.07) eq min(abs(MassNames-355.07)) )]*1.67/AVtime
  D5_371=FinalDataCNTS[*,where(abs(MassNames-371.102) eq min(abs(MassNames-371.102)) )]*1.69/AVtime

  Pin_137=FinalDataCNTS[*,where(abs(MassNames-137.132) eq min(abs(MassNames-137.132)) )]*1.12/AVtime
  Pin_81=FinalDataCNTS[*,where(abs(MassNames-81.07) eq min(abs(MassNames-81.07)) )]*1.07/AVtime
  C10TOL_135=FinalDataCNTS[*,where(abs(MassNames-135.117) eq min(abs(MassNames-135.117)) )]*1.12/AVtime
  XYL_107=FinalDataCNTS[*,where(abs(MassNames-107.086) eq min(abs(MassNames-107.086)) )]*1.09/AVtime
 HEXAL_101=FinalDataCNTS[*,where(abs(MassNames-101.096) eq min(abs(MassNames-101.096)) )]*1.07/AVtime
 HEXAL_83=FinalDataCNTS[*,where(abs(MassNames-83.086) eq min(abs(MassNames-83.086)) )]*1.07/AVtime
 STY_105=FinalDataCNTS[*,where(abs(MassNames-105.070) eq min(abs(MassNames-105.070)) )]*1.09/AVtime
 PHE_121=FinalDataCNTS[*,where(abs(MassNames-121.065) eq min(abs(MassNames-121.065)) )]*1.08/AVtime
  BEN_78=FinalDataCNTS[*,where(abs(MassNames-78.047) eq min(abs(MassNames-78.047)) )]*1.07/AVtime
  if( min(abs(MassNames-78.047)) gt 1) then  BEN_78= BEN_78/1000
  
  ppb_19=FinalData[*,where(abs(MassNames-21.022) eq min(abs(MassNames-21.022)) )]*487
  ppbMETH_33=FinalData[*,where(abs(MassNames-33.033) eq min(abs(MassNames-33.033)) )]*1.01
 ppbCH3CN_42=FinalData[*,where(abs(MassNames-42.034) eq min(abs(MassNames-42.034)) )]*1.02
  ppbETH_47=FinalData[*,where(abs(MassNames-47.049) eq min(abs(MassNames-47.049)) )]*1.02
  ppbACE_59=FinalData[*,where(abs(MassNames-59.049) eq min(abs(MassNames-59.049)) )]*1.03
  ppbDMS_63=FinalData[*,where(abs(MassNames-63.026) eq min(abs(MassNames-63.026)) )]*1.07
  ppbISO_69=FinalData[*,where(abs(MassNames-69.070) eq min(abs(MassNames-69.070)) )]*1.06
  ppbISO_41=FinalData[*,where(abs(MassNames-41.039) eq min(abs(MassNames-41.039)) )]*1.03
  ppbMVK_71=FinalData[*,where(abs(MassNames-71.049) eq min(abs(MassNames-71.049)) )]*1.05
  d_d=9.6
  Edrift=(Udrift+Udx)/d_d
  t_react=(d_d*pdrift*273.15)/(Edrift*(Tdrift+273.15)*2.7*1013.25)

  SensiSTD=1.0E-9*1.0E6*(t_react*pdrift/(Tdrift+273.15))*(2.7E19*273.15*3e-9/1013.25)
  AA=1.0e6/sensiSTD
  ppbBEN_79=FinalData[*,where(abs(MassNames-79.054) eq min(abs(MassNames-79.054)) )]*1.07
 ppbBEN_79=ppbBEN_79*AA/(ppb_19+0.25*AA-0.25*ppb_19)
  ppbTOL_93=FinalData[*,where(abs(MassNames-93.070) eq min(abs(MassNames-93.070)) )]*1.08
  ppbTOL_93=ppbTOL_93*AA/(ppb_19+0.4*AA-0.4*ppb_19)



  ppbFUR_97=FinalData[*,where(abs(MassNames-97.028) eq min(abs(MassNames-97.028)) )]*1.06
  ppbHEXAL_101=FinalData[*,where(abs(MassNames-101.096) eq min(abs(MassNames-101.096)) )]*1.07
  ppbHEXAL_83=FinalData[*,where(abs(MassNames-83.086) eq min(abs(MassNames-83.086)) )]*1.07
  ppbSTY_105=FinalData[*,where(abs(MassNames-105.070) eq min(abs(MassNames-105.070)) )]*1.09
  ppbXYL_107=FinalData[*,where(abs(MassNames-107.086) eq min(abs(MassNames-107.086)) )]*1.09
  ppbXYL_107=ppbXYL_107*AA/(ppb_19+0.4*AA-0.4*ppb_19)

  ppbPHE_121=FinalData[*,where(abs(MassNames-121.065) eq min(abs(MassNames-121.065)) )]*1.08
  ppbC10TOL_135=FinalData[*,where(abs(MassNames-135.117) eq min(abs(MassNames-135.117)) )]*1.12
  
  ppbPin_137=FinalData[*,where(abs(MassNames-137.132) eq min(abs(MassNames-137.132)) )]*1.12
  ppbPin_81=FinalData[*,where(abs(MassNames-81.07) eq min(abs(MassNames-81.07)) )]*1.07
  ppbLIN_155=FinalData[*,where(abs(MassNames-155.143) eq min(abs(MassNames-155.143)) )]*1.12
  ppbCED_205=FinalData[*,where(abs(MassNames-205.195) eq min(abs(MassNames-205.195)) )]*1.18
  ppbCED_95=FinalData[*,where(abs(MassNames-95.086) eq min(abs(MassNames-95.086)) )]*1.08
 ppbD3_223=FinalData[*,where(abs(MassNames-223.064) eq min(abs(MassNames-223.064)) )]*1.37
  ppbD3_207=FinalData[*,where(abs(MassNames-207.033) eq min(abs(MassNames-207.033)) )]*1.36
  ppbD4_297=FinalData[*,where(abs(MassNames-297.083) eq min(abs(MassNames-297.083)) )]*1.52
  ppbD4_281=FinalData[*,where(abs(MassNames-281.052) eq min(abs(MassNames-281.052)) )]*1.51
  ppbD5_355=FinalData[*,where(abs(MassNames-355.07) eq min(abs(MassNames-355.07)) )]*1.67
  ppbD5_371=FinalData[*,where(abs(MassNames-371.102) eq min(abs(MassNames-371.102)) )]*1.69

 
  
  
  
  nami=['I19','I37','METH_33','CH3CN_42','ETH_47',         'ACE_59','DMS_63','ISO_69','ISO_41','MVK_71',$
    'BEN_79','BEN_78','TOL_93','FUR_97','HEXAL_101' ,'STY_105','XYL_107','PHE_121','C10TOL_135',$
    'Pin_137','Pin_81','LIN_155','D3_223','D3_207',    'D4_297','D4_281','D5_371','D5_355','CED_205']
mTOz=[19,37,33,42,47,     59,63,69,41,71,$
      79,78,93,97,101,    105,107,121,135,$
      137,81,155,223,207, 297,281,371,355,205]

  CC516654=[0, 0, 494, 487, 504,      497, 537, 509, 0, 495, $
            510, 0, 489, 479, 0,      0, 0, 0, 0, 0,$
            0, 0, 466, 502, 0,        502, 0, 518, 0, 105]

  RKK_1=[0, 0, 1.69, 3.1, 3,     3.25, 3, 1.85, 0, 2.72,$
         1.97, 0, 3, 3, 0,       0, 0, 0, 0, 0,$
         0, 0, 3, 2.16, 0,       2.99, 0, 3.39, 0,2.1]
  
  CC516855=[0, 0, 433, 461, 0,      463, 0, 0, 0, 0, $
            497, 0, 0, 0, 494,      0, 498, 499, 496, 474,$
            542, 0, 0, 509, 0,      499, 0, 541, 0,0]
  
  RKK_2=[0, 0, 1.69, 3.1, 0,     3, 0, 0, 0,0,$
         1.97, 0, 0, 0, 3,       0, 3, 2.31, 3, 3,$
         2.04, 0, 0, 2.16, 0,    2.99, 0, 3.39, 0,0]
         
  RKK_0=[0, 0, 1.69, 3.1, 3,     3.25, 3, 1.85, 0, 2.72,$
         1.97, 0, 3, 3, 3,       0, 3, 2.31, 3, 3,$
         2.04, 0, 3, 2.16, 0,    2.99, 0, 3.39, 0,3]


    
   
   

       compARR=[[METH_33],[CH3CN_42],[ETH_47],[ACE_59],[DMS_63],[ISO_69],[ISO_41],[MVK_71],$
         [BEN_79],[TOL_93],[FUR_97],[HEXAL_101],[STY_105],[XYL_107],[PHE_121],[C10TOL_135],$
         [Pin_137],[Pin_81],[LIN_155],[D3_223],[D3_207],[D4_297],[D4_281],[D5_371],[D5_355],[CED_205]]
   
       nampis=['methanol','acetonitrile','ethanol','acetone/propanal','DMS',$
               'isoprene','isopreneF','MVK+MACR','benzene','toluene','furfural',$
               'hexanal','styrene','xylene','PHE_121','C10TOL_135',$
               'monoterpenes','monoterpenesF','linanool_155','D3','D3F','D4','D4F','D5','D5F','CED_205']
               
       mTOz=[33,42,47,59,63,$
             69, 41,71, 79,93,97,$
             101,105,107,121,135,$
             137,81,155,223,207, 297,281,371,355,205]
         
       CC516654=[ 494, 487, 504, 497, 537, $
                  509, 0, 495, 510,  489, 479,$
                  0,  0, 0, 0, 0,$
                  0,0,  466, 502,0,  502,0,  518,0,105]

       RKK_1=[ 1.69, 3.1, 3, 3.25, 2.0,$
               1.62, 0, 2.72, 1.97,  2.1, 3,$
                0,  0, 0, 0, 0,$
                0,0,  3, 1.5,0,  2.99, 0, 4,0,2.1]

       CC516855=[ 433, 461, 0,  463, 0,$
                  0,0, 0, 497, 0, 0, $
                  494, 498, 499, 496, 474,$
                  542,0, 0 , 509,0, 499, 0, 541,0,0]

       RKK_2=[ 1.69, 3.1, 0, 1.77, 0,$
               0,0,0, 1.97,  0, 0, $
               1.7, 2.1, 2.1*0.85, 2.8, 2.0,$
               2.04*0.75,0,  0, 1.5,0, 2.99,0, 4,0,0]

       RKK_0=[ 1.69, 3.1, 3, 3.25, 3, $
               1.85,0, 2.72, 1.97, 3, 3,$
                3,  3, 2.31, 3, 3,$
                2.04,0,  3, 2.16,0, 2.99,0,  3.39,0,2.1]
     timerow=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'tSTRTav')]
 
 
 
     compARRppb=[[ppbMETH_33],[ppbCH3CN_42],[ppbETH_47],[ppbACE_59],[ppbDMS_63],[ppbISO_69],[ppbISO_41],[ppbMVK_71],$
       [ppbBEN_79],[ppbTOL_93],[ppbFUR_97],[ppbHEXAL_101],[ppbSTY_105],[ppbXYL_107],[ppbPHE_121],[ppbC10TOL_135],$
       [ppbPin_137],[ppbPin_81],[ppbLIN_155],[ppbD3_223],[ppbD3_207],[ppbD4_297],[ppbD4_281],[ppbD5_371],[ppbD5_355],[ppbCED_205]]
  
for rsch=0,max(d(rkk_1))-1 do begin
  filter=where(timerow gt 3970 AND timerow lt 4000)
  if(rsch gt 16 AND rkk_2[rsch] eq 0) then rk=rkk_2[rsch-1] else rk=rkk_2[rsch]
  compARRppb[filter,rsch]=compARRppb[filter,rsch]*3.0/rk
  ;compARRppb[filter,rsch]=compARRppb[filter,rsch]*rk/3.0
  filter=where(timerow lt 3970 OR timerow gt 4000)
  if(rsch gt 16 AND rkk_1[rsch] eq 0) then rk=rkk_1[rsch-1] else rk=rkk_1[rsch]
  compARRppb[filter,rsch]=compARRppb[filter,rsch]*3.0/rk
 ; compARRppb[filter,rsch]=compARRppb[filter,rsch]*rk/3.0
 endfor
            
              d_d=9.6
              Edrift=(Udrift+Udx)/d_d
              t_react=(d_d*pdrift*273.15)/(Edrift*(Tdrift+273.15)*2.7*1013.25)
              SensiSTD=1.0E-9*1.0E6*(t_react*pdrift/(Tdrift+273.15))*(2.7E19*273.15*3e-9/1013.25)
              
              sens_1=fltarr(max(d(rkk_1)),max(d(pdrift)))
              for i=0,max(d(rkk_1))-1 do sens_1[i,*]=1.0E-9*1.0E6*(t_react*pdrift/(Tdrift+273.15))*(2.7E19*273.15*RKK_1[i]*1e-9/1013.25)
              sens_2=fltarr(max(d(rkk_1)),max(d(pdrift)))
              for i=0,max(d(rkk_1))-1 do sens_2[i,*]=1.0E-9*1.0E6*(t_react*pdrift/(Tdrift+273.15))*(2.7E19*273.15*RKK_2[i]*1e-9/1013.25)
              sensi=sens_1
              sensi[*,where(timerow gt 3970 AND timerow lt 4000)]=sens_2[*,where(timerow gt 3970 AND timerow lt 4000)]



          
              indM=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'indM')]
              test=([indM,0]+[0,indM])/2
              indM[where(indM ne test)]=0
              timerow=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'tSTRTav')]
              cols=[0,90,120,140,150,160]
              dilution=[40.0,30.0,20.0,10.0,0]/1000
              filtR=where(indM eq 101 OR indM eq 102 OR indM eq 103 OR indM eq 104 OR indM eq 105)
            
            
            
    transPER=fltarr(13,12)

for periods=0,11 do begin

if (periods eq 0) then selli=[3925,4040] ; all
if (periods eq 1) then selli=[3925,3938] 
if (periods eq 2) then selli=[3938,3943] 
if (periods eq 3) then selli=[3943,3949] 
if (periods eq 4) then selli=[3949,3951]
if (periods eq 5) then selli=[3952,3955]
if (periods eq 6) then selli=[3955,3960]
if (periods eq 7) then selli=[3970,4000]
if (periods eq 8) then selli=[4002,4012]
if (periods eq 9) then selli=[4012,4025]
if (periods eq 10) then selli=[4026,4027]
if (periods eq 11) then selli=[4034,4035]

zeit=3926

         mist=[1,3,7,8,9, 13,16,17,19,20,21,22]
 step=3
         filt=where(indM eq 100+step AND timerow gt min(selli) AND timerow lt max(selli))
m19=I19[filt]
m37=I37[filt]
  masses=mTOz[mist]
  counts=compARR[*,mist]
  counts=counts[filt,*]
  sensitivity=sensi[mist,*]
  sensitivity=sensitivity[*,filt]
  
  ppb_exp=fltarr(max(d(timerow[filt])),max(d(mist)))
  for rsch=0,max(d(mist))-1 do ppb_exp[*,rsch]=CC516654[mist[rsch]]*dilution[step-1]
  for rsch=0,max(d(mist))-1 do ppb_exp[where(timerow[filt] gt 3970 AND timerow[filt] lt 4000),rsch]=CC516855[mist[rsch]]*dilution[step-1]

  i=3
  
  
  
  
 ; print,fitTR(m19[i], m37[i], masses, ppb_exp, sensitivity[*,i], Counts[i,*],/figure)
 

 
 transARR=fltarr(max(d(filt)),12)
 for i=0,max(d(filt))-1 do begin
 sig19=m19[i]
 sig37=m37[i]
 MtoQvalues=masses
 expPPBs=ppb_exp[i,*]
 Sensitivities=sensitivity[*,i]
 Cnts=Counts[i,*]
 BGcounts=Cnts-Cnts
 Transen=fltarr(9)
 xx=fltarr(9)
 for k=0,8 do begin
      mist=[0,1,2,3,4,5,6,8,10]
      kk=mist[k]
      if(kk eq 0) then begin 
          F1=-(23.0/20)*sig37/sig19 + (Cnts[kk]*1e6/(sensitivities[kk]*expPPBs[kk]))/(sig19)
          A_best=F1/(23.0/20)
      endif else begin
          F1=(Cnts[kk]*1e6/(sensitivities[kk]*expPPBs[kk]))/(sig19+sig37/A_best)
          if(kk eq 3) then F1=(Cnts[kk]*1e6/(sensitivities[kk]*expPPBs[kk]))/(sig19+0.25*sig37/A_best)
          if(kk eq 4) then F1=(Cnts[kk]*1e6/(sensitivities[kk]*expPPBs[kk]))/(sig19+0.4*sig37/A_best)
          if(kk eq 5) then F1=(Cnts[kk]*1e6/(sensitivities[kk]*expPPBs[kk]))/(sig19+0.4*sig37/A_best)
          if(kk eq 6) then F1=((Cnts[kk]+Cnts[kk+1]*0.5/0.87)*1e6/(sensitivities[kk]*expPPBs[kk]))/(sig19+sig37/A_best);*0.5/0.87 hindsight transmission correction (readings from Figure: tr137=0.5, tr81=0.87)
          if(kk ge 8) then F1=((Cnts[kk]+Cnts[kk+1])*1e6/(sensitivities[kk]*expPPBs[kk]))/(sig19+sig37/A_best)
    endelse
  transen[k]=F1
    xx[k]=MtoQvalues[kk]
 endfor
 xx=[5,19,37,xx]
 transen=[sig37/(A_best*sig19), 1,A_best, transen]
 transen=transen/transen[4]
 
 
transARR[i,*]=transen


endfor


if (periods eq 0) then begin
  WINDOW, 6, xsize=1650,ysize=950
!x.oMARGIN=[2,2]
!Y.oMARGIN=[3,2]
!Y.MARGIN = [1, 2]
!P.MULTI = [0,1,2]
endif

if (periods eq 1) then begin
  WINDOW, 5, xsize=1650,ysize=950
  !x.oMARGIN=[2,2]
  !Y.oMARGIN=[3,2]
  !Y.MARGIN = [1, 3]
  !P.MULTI = [0,4,3]
endif
loadct,38

if(periods eq 0) then begin
  plot, timerow[filt],transARR[*,1],color=0, background=-1,yrange=[0,1.4],psym=4, charsize=1.5, xtitle='time (t09)',ytitle='retrieved transmission'
  for rsch=0,11 do oplot, timerow[filt],transARR[*,rsch],psym=4,color=-15*rsch, thick=3
;  for rsch=0,11 do oplot, timerow[filt],transARR[*,rsch],color=-15*rsch, thick=2
 
  for rsch=-1,1 do oplot,[0,10000],[1.2,1.2]+0.1*rsch,color=0
  rsch2=['-1%','median','+1%']
  for rsch=-1,1 do xyouts,4028,1.21+0.1*rsch, rsch2[rsch+1], color=0, charsize=1, charthick=1

  oplot, timerow[filt],(Pdrift[filt]/median(Pdrift[filt])-1)*10+1.2,psym=2,color=0,thick=2
  oplot, timerow[filt],(H2Oscc[filt]/median(H2Oscc[filt])-1)*10+1.2,psym=2,color=15,thick=2
  oplot, timerow[filt],(PC[filt]/median(PC[filt])-1)*10+1.2,psym=2,color=30,thick=2
  oplot, timerow[filt],(Tdrift[filt]/median(Tdrift[filt])-1)*10+1.2,psym=2,color=45,thick=2
  oplot, timerow[filt],(FCinlet[filt]/median(FCinlet[filt])-1)*10+1.2,psym=2,color=60,thick=2
  oplot, timerow[filt],(Udx[filt]/median(Udx[filt])-1)*10+1.2,psym=2,color=75,thick=2
  oplot, timerow[filt],(Udrift[filt]/median(Udrift[filt])-1)*10+1.2,psym=2,color=90,thick=2
  xyouts,3955,1.65, 'Overall instrument stability', color=0, charsize=3, charthick=3
  xyouts,3945,1.35, 'Instr. par.:  Pdrift', color=0, charsize=1.5, charthick=2
  xyouts,3963,1.35, 'H2Oscc', color=15, charsize=1.5, charthick=2
  xyouts,3971,1.35, 'PC', color=30, charsize=1.5, charthick=2
  xyouts,3975,1.35, 'Tdrift', color=45, charsize=1.5, charthick=2
  xyouts,3982,1.35, 'FCinlet', color=60, charsize=1.5, charthick=2
  xyouts,3990,1.35, 'Udx', color=75, charsize=1.5, charthick=2
  xyouts,3995,1.35, 'Udrift', color=90, charsize=1.5, charthick=2
endif


days=[3925.1,3925.1,3938.2,3943.1,3949.1,3952.1,3955.1,3970.1,4002.1,4012.1,4026.1,4034.1]
plot,indgen(380)+18, corrtr(indgen(380)+18,days[periods]),yrange=[0,1.2], thick=3 ,color=0, background=-1, charsize=1.5, xtitle='m/Q [Th]',ytitle='(retrieved)transmission'
 if(periods eq 0) then for i=0,10 do begin 
  oplot, indgen(380)+18,corrtr(indgen(380)+18,days[i+1]), color=15*i, thick=3
  xyouts, 330,1.1, 'starttime (t09):', color=0, charthick=3, charsize=1.5
  xyouts, 330,1.1-0.075*(i+1), strtrim(string(round(days[i+1])),2), color=15*i, charthick=3, charsize=1.5
endfor

yy=[0.35,0.65,0.3,0.35,0.7,0.45,0.4,0.35,0.25,0.6,0.5,0.4]
stri=['19/37','H3O+','H3OH2O+','acetinitrile','acetone','MVK+MACR','benzene','toluene','xylene','monoterpenes','D3','D4']
offset=[3,0,0,3,0,0,0,0,0,0,0,0]
for rsch=0,11 do begin
  oplot, intarr(134)+xx[rsch],transARR[*,rsch],psym=4,color=-15*rsch, thick=3
  print, mean(transARR[*,rsch]) 
  
   if(periods eq 0) then xyouts,xx[rsch]+offset[rsch],yy[rsch],stri[rsch],color=-15*rsch, charthick=2,charsize=1.2, orientation=90
  transPER[periods,rsch]=mean(transARR[*,rsch],/nan)
   if(periods gt 0.5) then xyouts, 200,1,'t09='+strtrim(string(round(days[periods])),2),charsize=1.5,charthick=1.5,color=0
endfor
;haha=[19,37,42,59,71,79,93,107,137,223,297]
;hoho=transPER[periods,1:*]
;hihi=where(hoho gt 0)
;if(periods gt 0.5) then oplot,indgen(300), interpol(hoho[hihi],haha[hihi],indgen(300),/Spline), color=200


print, 'gaga'
endfor   ; periods





 ;     for jj=0,numMtoQ-1 do begin
  ;     factor1=tr(MtoQvalues[jj],bestEX,mLOW,wLOW,mHiGH,wHiGH)/tr(19,bestEX,mLOW,wLOW,mHiGH,wHiGH)
   ;   factor2=tr(MtoQvalues[jj],bestEX,mLOW,wLOW,mHIGH,wHIGH)/tr(37,bestEX,mLOW,wLOW,mHIGH,wHIGH)
    ; NC[jj]=(Cnts[jj]-BGcounts[jj])*1e6/(factor1*sig19+factor2*sig37)
;  endfor
 ;     for jj=0,numMtoQ-1 do begin
  ;     MeasSens[jj]=NC[jj]/expPPBs[jj]
   ;   if (abs(MtoQvalues[jj]-69) lt 0.5) then MeasSens[jj]=MeasSens[jj]+NC[where(abs(MtoQvalues-41) lt 0.5)]/expPPBs[jj]
    ; if (abs(MtoQvalues[jj]-137) lt 0.5) then MeasSens[jj]=MeasSens[jj]+NC[where(abs(MtoQvalues-81) lt 0.5)]/expPPBs[jj]
;    if (abs(MtoQvalues[jj]-223) lt 0.5) then MeasSens[jj]=MeasSens[jj]+NC[where(abs(MtoQvalues-207) lt 0.5)]/expPPBs[jj]
 ;  if (abs(MtoQvalues[jj]-297) lt 0.5) then MeasSens[jj]=MeasSens[jj]+NC[where(abs(MtoQvalues-281) lt 0.5)]/expPPBs[jj]
  ;if (abs(MtoQvalues[jj]-371) lt 0.5) then MeasSens[jj]=MeasSens[jj]+NC[where(abs(MtoQvalues-355) lt 0.5)]/expPPBs[jj]
   ;     Set1[jj]= MeasSens[jj]/Sensitivities[jj]
    ; endfor

 
    days=[3925.1,3925.1,3938.2,3943.1,3949.1,3952.1,3955.1,3970.1,4002.1,4012.1,4026.1,4034.1]

 
  WINDOW, 7, xsize=1650,ysize=950
  !x.oMARGIN=[2,2]
  !Y.oMARGIN=[3,2]
  !Y.MARGIN = [1, 1]
  !P.MULTI = [0,3,3]
  loadct,38
  for qqq=0,8 do begin
          mist=[1,3,7,8,9,13,16,19,21]
          qq=mist[qqq]
           yy=CompArrPPB[*,qq]
          if(qq eq 16)then yy=yy+CompArrPPB[*,qq+1]
          if(qq eq 19)then yy=yy+CompArrPPB[*,qq+1]
          if(qq eq 21)then yy=yy+CompArrPPB[*,qq+1]
          if(qq eq 23)then yy=yy+CompArrPPB[*,qq+1]
          yran=max([CC516654[qq]*max(dilution),CC516855[qq]*max(dilution)])*1.3
          counter=0
          while (yran gt 10) do begin
                  yran=yran/10
                  counter=counter+1
          endwhile
          yran=round(yran+0.5)*10^counter
          plot, range(timerow[filtR]),[0,0],psym=4, yrange=[0,yran],color=0, thick=3,background=-1, charsize=1.5
          xyouts, 3922, max(yran)*0.9,nampis[qq],color=0, charsize=1.5, charthick=2
         print,' '
      ;   print,' '
   print, nampis[qq]
          for q=1,5 do begin
                  filt=where(indM eq 100+q)
                  ppb_exp=(timerow[filt]/timerow[filt])*CC516654[qq]*dilution[q-1]
                  ppb_exp[where(timerow[filt] gt 3970 AND timerow[filt] lt 4000)]=CC516855[qq]*dilution[q-1]
                  oplot, timerow[filt],yy[filt],psym=4, color=cols[q], thick=3
                  oplot, timerow[filt],ppb_exp,psym=1, color=0, thick=2
                  oplot, timerow[filt],ppb_exp,psym=1, color=cols[q], thick=1
    if(q lt 4.5) then begin
        xmist=ppb_exp/yy[filt]
        xmist=xmist[where(xmist gt 0.1)]
        xmist=xmist[where(xmist lt 5.0*median(xmist))]
     print,[max(d(xmist))/2,mean(ppb_exp),median(xmist),stddev(xmist)]
  ;   print,stddev(xmist)
   endif
          endfor
  endfor


  WINDOW, 8, xsize=1650,ysize=950
  !x.oMARGIN=[2,2]
  !Y.oMARGIN=[3,2]
  !Y.MARGIN = [1, 1]
  !P.MULTI = [0,4,3]
  loadct,38
  for qqq=0,11 do begin
 
      mist=[0,2,4,5,10,11,12,14,15,18,25,23]
   qq=mist[qqq]
   yy=CompArrPPB[*,qq]
   if(qq eq 5)then yy=yy+ppbISO_41*3.0/1.8
   if(qq eq 11)then yy=yy+ppbHEXAL_83*3.0/1.7
   if(qq eq 15)then yy=yy+ppbTOL_93*3.0/2.0
   if(qq eq 25)then yy=yy+ppbCED_95*3.0/2.1
 if(qq eq 23)then yy=yy+CompArrPPB[*,qq+1]

   
   
   
    yran=max([CC516654[qq]*max(dilution),CC516855[qq]*max(dilution)])*1.3
    counter=0
    while (yran gt 10) do begin
      yran=yran/10
      counter=counter+1
    endwhile
    yran=round(yran+0.5)*10^counter
    plot, range(timerow[filtR]),[0,0],psym=4, yrange=[0,yran],color=0, thick=3,background=-1, charsize=1.5
    xyouts, 3922, max(yran)*0.9,nampis[qq],color=0, charsize=1.5, charthick=2
    print,' '
    ;print,' '
   print, nampis[qq]

    for q=1,5 do begin
      filt=where(indM eq 100+q)
      ppb_exp=(timerow[filt]/timerow[filt])*CC516654[qq]*dilution[q-1]
      ppb_exp[where(timerow[filt] gt 3970 AND timerow[filt] lt 4000)]=CC516855[qq]*dilution[q-1]
      oplot, timerow[filt],yy[filt],psym=4, color=cols[q], thick=3
      oplot, timerow[filt],ppb_exp,psym=1, color=0, thick=2
      oplot, timerow[filt],ppb_exp,psym=1, color=cols[q], thick=1
      
      if(q lt 4.5) then begin
        xmist=ppb_exp/yy[filt]
        xmist=xmist[where(xmist gt 0.1)]
        xmist=xmist[where(xmist lt 5.0*median(xmist))]
     print,[max(d(xmist))/2,mean(ppb_exp),median(xmist),stddev(xmist)]
    ; print,stddev(xmist)
     endif
    endfor
  endfor




       haha=['19','37','33','42','47','59','63','69','41','71','79','78','93','97','101','83','105','107',$
         '121','135','137','81','155','205','223','207','297','281','371','355']


     
  
  WINDOW, 10, xsize=1650,ysize=950
  !x.oMARGIN=[2,2]
  !Y.oMARGIN=[3,2]
  !Y.MARGIN = [1, 1]
  !P.MULTI = [0,5,6]
  loadct,38

  indM=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'indM')]
  test=([indM,0]+[0,indM])/2
  indM[where(indM ne test)]=0
  timerow=  FinalData[*,where(strtrim(FinalDataNames,2) eq 'tSTRTav')]
  cols=[0,90,120,140,150,160]
  filtR=where(indM eq 101 OR indM eq 102 OR indM eq 103 OR indM eq 104 OR indM eq 105)




  for qq=0,29 do begin
  if(qq eq 0) then y=I19 
  if(qq eq 1) then y=I37
  if(qq eq 2) then y=METH_33
  if(qq eq 3) then y=CH3CN_42
  if(qq eq 4) then y=ETH_47
  if(qq eq 5) then y=ACE_59
  if(qq eq 6) then y=DMS_63
  if(qq eq 7) then y=ISO_69
  if(qq eq 8) then y=ISO_41
  if(qq eq 9) then y=MVK_71
  if(qq eq 10) then y=BEN_79
  if(qq eq 11) then y=BEN_78
  if(qq eq 12) then y=TOL_93
  if(qq eq 13) then y=FUR_97
  if(qq eq 14) then y=HEXAL_101
  if(qq eq 15) then y=HEXAL_83
  if(qq eq 16) then y=STY_105
if(qq eq 17) then y=XYL_107
if(qq eq 18) then y=PHE_121
if(qq eq 19) then y=C10TOL_135

  if(qq eq 20) then y=Pin_137
  if(qq eq 21) then y=Pin_81
  if(qq eq 22) then y=LIN_155
  if(qq eq 23) then y=CED_205
 if(qq eq 24) then y=D3_223
 if(qq eq 25) then y=D3_207
  if(qq eq 26) then y=D4_297
  if(qq eq 27) then y=D4_281
  if(qq eq 28) then y=D5_371
  if(qq eq 29) then y=D5_355

yran=[0,quantile(y[filtR],0.99)]
  filt2=where(indM eq 101)
  plot, timerow[filt2],y[filt2],psym=4, yrange=yran,color=0, thick=3,background=-1, charsize=1.5
  oplot,[0,10000],[0,0],color=0
  for q=1,5 do oplot, timerow[where(indM eq 100+q)],y[where(indM eq 100+q)],psym=4, color=cols[q], thick=3
  xyouts, 3922, max(yran)*0.95,haha[qq],color=0, charthick=3

  endfor

  ;correlation to correct delay


 ; TotSIG=    METH_33 +    CH3CN_42 +    Acetal_45 +     Ace_59 +    MBO_87 +     MBO_69 +      MBO_41 +    MVK_71 +    MEK_73 +    Ben_79 +$
  ;  Xyl_107 +    TMB_121 +     Pin_137 +       Pin_81 +   benzF3_133 + benzCl3_181 +  D3_223 +    D3_207 +    D4_297 +    D4_281 +$
   ; D5_371 +     D5_355


  D5_358iso=FinalDataCNTS[*,where(abs(MassNames-358.073) eq min(abs(MassNames-358.073)) )]/0.0358
  D5_374iso=FinalDataCNTS[*,where(abs(MassNames-374.105) eq min(abs(MassNames-374.105)) )]/0.0370
  D4_299iso=FinalDataCNTS[*,where(abs(MassNames-299.086) eq min(abs(MassNames-299.086)) )]/0.1178
  D4_283iso=FinalDataCNTS[*,where(abs(MassNames-283.055) eq min(abs(MassNames-283.055)) )]/0.1170
  D3_225iso=FinalDataCNTS[*,where(abs(MassNames-225.067) eq min(abs(MassNames-225.067)) )]/0.0923
  D3_209iso=FinalDataCNTS[*,where(abs(MassNames-209.036) eq min(abs(MassNames-209.036)) )]/0.0916
  benzCl3_182iso=FinalDataCNTS[*,where(abs(MassNames-181.941) eq min(abs(MassNames-181.941)) )]/0.0267
  benzF3_134iso=FinalDataCNTS[*,where(abs(MassNames-134.029) eq min(abs(MassNames-134.029)) )]/0.0612
  Pin_138iso=FinalDataCNTS[*,where(abs(MassNames-138.135) eq min(abs(MassNames-138.135)) )]/0.0987
  Pin_82iso=FinalDataCNTS[*,where(abs(MassNames-82.073) eq min(abs(MassNames-82.073)) )]/0.0617
  TMB_122iso=FinalDataCNTS[*,where(abs(MassNames-122.104) eq min(abs(MassNames-122.104)) )]/0.0896
  XYL_108iso=FinalDataCNTS[*,where(abs(MassNames-108.089) eq min(abs(MassNames-108.089)) )]/0.0804
  BEN_80iso=FinalDataCNTS[*,where(abs(MassNames-80.057) eq min(abs(MassNames-80.057)) )]/0.0615
  MEK_74iso=FinalDataCNTS[*,where(abs(MassNames-74.068) eq min(abs(MassNames-74.068)) )]/0.0426
  MVK_72iso=FinalDataCNTS[*,where(abs(MassNames-72.052) eq min(abs(MassNames-72.052)) )]/0.0424
  MBO_88iso=FinalDataCNTS[*,where(abs(MassNames-88.083) eq min(abs(MassNames-88.083)) )]/0.0526
  MBO_70iso=FinalDataCNTS[*,where(abs(MassNames-70.073) eq min(abs(MassNames-70.073)) )]/0.0522
  MBO_42iso=FinalDataCNTS[*,where(abs(MassNames-42.042) eq min(abs(MassNames-42.042)) )]/0.0320
  ACE_60iso=FinalDataCNTS[*,where(abs(MassNames-60.052) eq min(abs(MassNames-60.052)) )]/0.0325
  ACETAL_46iso=FinalDataCNTS[*,where(abs(MassNames-46.036) eq min(abs(MassNames-46.036)) )]/0.0220
  CH3CN_43iso=FinalDataCNTS[*,where(abs(MassNames-43.037) eq min(abs(MassNames-43.037)) )]/0.0251
  METH_34iso=FinalDataCNTS[*,where(abs(MassNames-34.036) eq min(abs(MassNames-34.036)) )]/0.0116

  MBO_42iso=MBO_42iso*0.000001
  METH_34iso=METH_34iso*0.00001
 ; TotSIGiso=    METH_34iso +    CH3CN_43iso +    Acetal_46iso +     Ace_60iso +    MBO_88iso +     MBO_70iso +      MBO_42iso +    MVK_72iso +    MEK_74iso +    Ben_80iso +$
  ;  Xyl_108iso +    TMB_122iso +     Pin_138iso +       Pin_82iso +   benzF3_134iso + benzCl3_182iso +  D3_225iso +    D3_209iso +    D4_299iso +    D4_283iso +$
   ; D5_374iso +     D5_358iso





 ; CompARR=[METH_33, CH3CN_42, ACETAL_45, ACE_59, MBO_87 ,$
  ;  MBO_69 , MBO_41,MVK_71 ,MEK_73 ,BEN_79 ,$
   ; XYL_107, TMB_121, Pin_137,Pin_81 ,benzF3_133 ,$
    ;benzCl3_181, D3_223, D3_207, D4_297,D4_281 ,$
;    D5_371 ,D5_355, TotSIG, transpose((FCinlet-FCinlet)+Flow), transpose(reltime),$
 ;   TotSIGiso,transpose(prim) ,transpose(Tdrift),I19,I37,$
  ;  I39,METH_34iso,CH3CN_43iso,Acetal_46iso,Ace_60iso, MBO_88iso,MBO_70iso, MBO_42iso,MVK_72iso,MEK_74iso ,$
   ; Ben_80iso, Xyl_108iso,TMB_122iso,Pin_138iso,Pin_82iso,benzF3_134iso ,benzCl3_182iso, D3_225iso,D3_209iso, D4_299iso, D4_283iso,$
    ;D5_374iso, D5_358iso ,transpose(Udx),transpose(pdrift),transpose(Udrift),BEN_78,I32,TMB_120,XYL_106]





  dat=FinalData[*,where(MassNames eq masses[event.index])]
  datCPS=FinalDataCNTS[*,where(MassNames eq masses[event.index])]/AVtime
 datErr=FinalDataErr[*,where(MassNames eq masses[event.index])]
  datCNTS=FinalDataCNTS[*,where(MassNames eq masses[event.index])]
dat59=FinalData[*,where(abs(MassNames-59.049) lt 0.002)]
  dat70=FinalData[*,where(abs(MassNames-70.072) lt 0.002)]


  WINDOW, 3, xsize=1250,ysize=800


  !x.oMARGIN=[2,2]
  !Y.oMARGIN=[3,2]
  !Y.MARGIN = [1, 1]


  !P.MULTI = [0,1,4]
  loadct,38

  filt2=where(indM eq 101)
  x=  timerow[filt2]
  y=  dat[filt2]



   plot, x,y,psym=4, color=0, thick=3,background=-1, charsize=1.5
 ; oplot, timerow[where(indM eq 100)],dat[where(indM eq 100)],psym=4, color=-10, thick=3
  oplot,[0,10000],[0,0],color=0
  
  
  cols=[0,90,120,140,150,160]
  for q=1,5 do begin
    filt2=where(indM eq 100+q)
    x=  timerow[filt2]
    y=  dat[filt2]
    oplot, x,y,psym=4, color=cols[q], thick=3
  endfor
 
 
  y=datCPS
  cols=[0,90,120,140,150,160]
  filtR=where(indM eq 101 OR indM eq 102 OR indM eq 103 OR indM eq 104 OR indM eq 105)
  yran=[0,quantile(y[filtR],0.99)]
  filt2=where(indM eq 101)
   plot, timerow[filt2],y[filt2],psym=4, yrange=yran,color=0, thick=3,background=-1, charsize=1.5
  oplot,[0,10000],[0,0],color=0
  for q=1,5 do oplot, timerow[where(indM eq 100+q)],y[where(indM eq 100+q)],psym=4, color=cols[q], thick=3
  


 
 
 
 
  filt2=where(indM eq 101)
  x=  timerow[filt2]
  y=  F37[filt2]
  plot, x,y,psym=4, color=0, thick=3,background=-1, charsize=1.5
  oplot,[0,10000],[0.1,0.1],color=0
  cols=[0,90,120,140,150,160]
 for q=1,5 do begin
   filt2=where(indM eq 100+q)
   x=  timerow[filt2]
   y=  F37[filt2]
  oplot, x,y,psym=4, color=cols[q], thick=3
  endfor
   for q=1,5 do begin
    filt2=where(indM eq 100+q)
    x=  timerow[filt2]
    y=  F32[filt2]
    oplot, x,y,psym=4, color=cols[q], thick=3
  endfor


  filt2=where(indM eq 101)
  x=  timerow[filt2]
  y=  pdrift[filt2]*100
  plot, x,y,psym=4, color=0, thick=3,background=-1, charsize=1.5
  oplot,[0,10000],[0.1,0.1],color=0
  cols=[0,90,120,140,150,160]
  for q=1,5 do begin
    filt2=where(indM eq 100+q)
    x=  timerow[filt2]
    y=  pdrift[filt2]*100
    oplot, x,y,psym=4, color=cols[q], thick=3
  endfor
  for q=1,5 do begin
    filt2=where(indM eq 100+q)
    x=  timerow[filt2]
    y=  PC[filt2]
    oplot, x,y,psym=4, color=cols[q], thick=3
  endfor
  for q=1,5 do begin
    filt2=where(indM eq 100+q)
    x=  timerow[filt2]
    y=  H2Oscc[filt2]*10
    oplot, x,y,psym=4, color=cols[q], thick=3
  endfor



  filt=where(abs(dat59) lt 6.5 and dat70 gt -0.5 and dat lt quantile(dat,0.95))
  dat=dat[filt]
  dat59=dat59[filt]
  indM2=indM2[filt]
  timerow=timerow[filt]
  indM=dat59
  indM[where(dat59 gt 0.5)]=300
  indM[where(indM ne 300)]=100


  REVind=abs(indgen(max(d(indM)))-max(d(indM)))
  timeREV=timerow[REVind]
  datREV=dat[REVind]
  indMREV=indM[REVind]
  av=8
  counter=0
  for i=0,max(d(indM))-1 do begin
    if (i ge 1) then if ( indMREV[i] ne indMREV[i-1] ) then counter=20
    if (counter lt av-0.5) then begin
      if (counter eq 0) then timtim=timeREV[i] else timtim=[timtim,timeREV[i]]
      if (counter eq 0) then datdat=datREV[i] else datdat=[datdat, datREV[i]]
      if (counter eq 0) then mm=indMREV[i] else mm=[mm, indMREV[i]]
      counter=counter+1
    endif else begin
      if(i lt av+0.5) then tim5=mean(timtim) else if (counter ne 20) then tim5=[tim5,mean(timtim)]
      if(i lt av+0.5) then dat5=mean(datdat) else if (counter ne 20) then dat5=[dat5,mean(datdat)]
      if(i lt av+0.5) then indM5=mean(mm) else if (counter ne 20) then indM5=[indM5,mean(mm)]
      counter=0
    endelse
  endfor

  background=dat5[where(indM5 eq 100)]
  ; background=background[where(background ne max(background))]
  ; ;background=background[where(background ne min(background))]
  ; background=background[where(background ne max(background))]
  ;background=background[where(background ne min(background))]
  SD=stddev(background)
  background=quantile(background,0.5)

  WINDOW, 3, xsize=650,ysize=800


  !x.oMARGIN=[2,2]
  !Y.oMARGIN=[3,2]
  !Y.MARGIN = [1, 1]


  !P.MULTI = [0,1,4]
  loadct,38

  filt2=where(smooth(indM,3) eq 300)
  x=  timerow[filt2]
  y=  dat[filt2]-background



  plot, timerow,dat,psym=4, color=0,background=-1, charsize=1.5
  oplot, [3187.8,3187.8],[-1111,1111],color=0
  oplot, x,dat[filt2],psym=4, color=90, thick=3
  oplot, timerow[where(indM eq 100)],dat[where(indM eq 100)],psym=4, color=-10, thick=3
  oplot,[0,10000],[0,0],color=0

  plot, tim5,dat5,psym=4, color=0,background=-1, charsize=1.5
  oplot, [3187.8,3187.8],[-1111,1111],color=0
  oplot, tim5[where(indM5 eq 300)],dat5[where(indM5 eq 300)],psym=4, color=90, thick=3
  oplot, tim5[where(indM5 eq 100)],dat5[where(indM5 eq 100)],psym=4, color=-10, thick=3
  oplot,[0,10000],[background,background],color=-10

  y5=dat5[where(indM5 eq 300)]-max(background)
  yGT0=y5[where(y5 gt 0)]
  yGTlod=y5[where(y5 gt 3.0*SD)]

  calfact=1.0
  if( abs(masses[event.index]-33.029) lt 0.002) then calfact=1.01*3.0/(0.4*2.2)
  if( abs(masses[event.index]-42.027) lt 0.002) then calfact=1.02*3.0/(1.0*3.1)
  if( abs(masses[event.index]-45.027) lt 0.002) then calfact=1.02*3.0/(1.1*3.03)
  if( abs(masses[event.index]-59.050) lt 0.002) then calfact=1.03*3.0/(1.05*3.25)
  if( abs(masses[event.index]-71.046) lt 0.002) then calfact=1.05*3.0/(0.85*3.54)
  if( abs(masses[event.index]-73.056) lt 0.002) then calfact=1.05*3.0/(1.1*3.25)
  if( abs(masses[event.index]-79.046) lt 0.002) then calfact=1.07*3.0/(1.0*1.97)
  if( abs(masses[event.index]-107.084) lt 0.002) then calfact=1.09*3.0/(1.0*2.31)
  if( abs(masses[event.index]-121.094) lt 0.002) then calfact=1.10*3.0/(0.9*2.4)
  if( abs(masses[event.index]-137.124) lt 0.002) then calfact=1.12*3.0/(0.9*2.45)

  yCAL=y5*calfact

  plot, tim5[where(indM5 eq 300)],y5,yrange=range([y5,yCAL]), psym=4, color=0,background=-1, charsize=1.5
  oplot, [3187.8,3187.8],[-1111,1111],color=0
  oplot,[0,10000],[0,0],color=0
  oplot, tim5[where(indM5 eq 300)],dat5[where(indM5 eq 300)]-background,psym=4, color=90, thick=3
  if (calfact ne 1.0) then oplot, tim5[where(indM5 eq 300)],yCAL, psym=4, color=20, thick=3

  oplot, [0,10000],3.0*[SD,SD], color=-10, thick=3
  xyouts,0.08,0.935,/normal,'m/z='+strtrim(string(masses[event.index]),2)+', '+form, color=0, charthick =3, charsize=2
  xyouts,0.08,0.30,/normal,'f(>0)='+strtrim(string(float(max(d(yGT0)))/float(max(d(y5))),format='(F4.2)'),2)+', f(>LOD)='+strtrim(string(float(max(d(yGTlod)))/float(max(d(y5))),format='(F4.2)'),2), color=0, charthick =3, charsize=2

  cntr=0
  first=1
  firstCAL=1

  for ii=0,max(d(masses))-1 do begin



    matchi=match(masses[ii],lib)
    form=strtrim(matchi.formula,2)
    dat=FinalData[*,where(MassNames eq masses[ii])]

    dat=dat[filt]
    datREV=dat[REVind]
    av=8
    counter=0
    for i=0,max(d(indM))-1 do begin
      if (i ge 1) then if ( indMREV[i] ne indMREV[i-1] ) then counter=20
      if (counter lt av-0.5) then begin
        if (counter eq 0) then timtim=timeREV[i] else timtim=[timtim,timeREV[i]]
        if (counter eq 0) then datdat=datREV[i] else datdat=[datdat, datREV[i]]
        if (counter eq 0) then mm=indMREV[i] else mm=[mm, indMREV[i]]
        counter=counter+1
      endif else begin
        if(i lt av+0.5) then tim5=mean(timtim) else if (counter ne 20) then tim5=[tim5,mean(timtim)]
        if(i lt av+0.5) then dat5=mean(datdat) else if (counter ne 20) then dat5=[dat5,mean(datdat)]
        if(i lt av+0.5) then indM5=mean(mm) else if (counter ne 20) then indM5=[indM5,mean(mm)]
        counter=0
      endelse
    endfor

    background=dat5[where(indM5 eq 100)]
    ; background=background[where(background ne max(background))]
    ;  background=background[where(background ne min(background))]
    ;  background=background[where(background ne max(background))]
    ;  background=background[where(background ne min(background))]
    SD=stddev(background)
    background=quantile(background,0.5)



    filt2=where(smooth(indM,3) eq 300)
    x=  timerow[filt2]
    y=  dat[filt2]-background



    y5=dat5[where(indM5 eq 300)]-max(background)
    yGT0=y5[where(y5 gt 0)]
    yGTlod=y5[where(y5 gt 3.0*SD)]

    calfact=1.0
    if( abs(masses[ii]-33.029) lt 0.002) then calfact=1.01*3.0/(0.4*2.2)
    if( abs(masses[ii]-42.027) lt 0.002) then calfact=1.02*3.0/(1.0*3.1)
    if( abs(masses[ii]-45.027) lt 0.002) then calfact=1.02*3.0/(1.1*3.03)
    if( abs(masses[ii]-59.050) lt 0.002) then calfact=1.03*3.0/(1.05*3.25)
    if( abs(masses[ii]-71.046) lt 0.002) then calfact=1.05*3.0/(0.85*3.54)
    if( abs(masses[ii]-73.056) lt 0.002) then calfact=1.05*3.0/(1.1*3.25)
    if( abs(masses[ii]-79.046) lt 0.002) then calfact=1.07*3.0/(1.0*1.97)
    if( abs(masses[ii]-107.084) lt 0.002) then calfact=1.09*3.0/(1.0*2.31)
    if( abs(masses[ii]-121.094) lt 0.002) then calfact=1.10*3.0/(0.9*2.4)
    if( abs(masses[ii]-137.124) lt 0.002) then calfact=1.12*3.0/(0.9*2.45)

    yCAL=y5*calfact
    fGT0=float(max(d(yGT0)))/float(max(d(y5)))
    fGTlod=float(max(d(yGTlod)))/float(max(d(y5)))

    if(fGT0 gt 0.75 and fGTlod gt 0.2) then begin
      cntr=cntr+1

      if (first eq 1) then begin
        namesKIN=['time',strtrim(string(masses[ii],format='(F7.3)'),2)]
        finaldataKIN=[[x],[y]]
        first=0
      endif else begin
        namesKIN=[namesKIN,strtrim(string(masses[ii],format='(F7.3)'),2)]
        finaldataKIN=[[finaldataKIN],[y]]
      endelse
      if(calfact ne 1.0) then begin
        if (firstCAL eq 1) then begin
          namesCAL=['time',strtrim(string(masses[ii],format='(F7.3)'),2)]
          finaldataCAL=[[x],[y*max(calfact)]]
          firstCAL=0
        endif else begin
          namesCAL=[namesCAL,strtrim(string(masses[ii],format='(F7.3)'),2)]
          finaldataCAL=[[finaldataCAL],[y*max(calfact)]]
        endelse
      endif




      print, string(cntr)+string(mean(y),format='(F9.3)')+',   m='+string(masses[ii],format='(F7.3)')+', f(>0)='+strtrim(string(fGT0,format='(F4.2)'),2)+', f(>LOD)='+strtrim(string(fGTlod,format='(F4.2)'),2)
    endif
  endfor

  ;TOF8000 is local time, TOF1000 is UTC

  hed=strarr(max(d(namesKIN)))
  hed[0]='Final Data UU-TOF1000. Calculated VMR in nmol/mol (kinetic method). Constant background subtracted (median of all background measurements i.e. 15 min every 3 hours). Time in UTC (days since 1.1.2009).'
  str=transpose(string(finaldataKIN))
  str=[[hed],[namesKIN],[str]]
  path=strmid(s1.pathdat,0,strpos(s1.pathdat,'w_data')+6)+'\TOF1000_UU_FinaldataKIN.csv'
  MakeCsv,path,str

  hed=strarr(max(d(namesCAL)))
  hed[0]='Final Data UU-TOF1000. Calibrated VMR in nmol/mol (NPL standard). Constant background subtracted (median of all background measurements i.e. 15 min every 3 hours). Time in UTC (days since 1.1.2009).'
  str=transpose(string(finaldataCAL))
  str=[[hed],[namesCAL],[str]]
  path=strmid(s1.pathdat,0,strpos(s1.pathdat,'w_data')+6)+'\TOF1000_UU_FinaldataCAL.csv'
  MakeCsv,path,str



  print, 'haha'

end





pro userplotBiosphere, event

  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'mmm'), gET_uVALUE= S1
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'nnn'), gET_uVALUE= masses
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ooo'), gET_uVALUE= lib
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'BGindex'), gET_VALUE= BGindex
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'CHindis'), gET_VALUE= CHindis
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'DispRange'), gET_VALUE= DispRange

BGindex=long(BGindex)
CHindis=long(strsplit(CHindis,',',/extract))
DispRange=float(strsplit(DispRange,',',/extract))
mass=masses[event.index]
  print, masses[event.index]
print, DispRange
print, CHindis
print, BGindex
  FinalData=S1.DAT
  FinalDataErr=S1.ERR
  FinalDataNames=S1.NAM
  MassNames=float(FinalDataNames)
imass=where(MassNames eq mass)
 
  SubBgData=dblarr(d(FinalData))
  SubBgDataLOD=dblarr(d(FinalData))
  indM=FinalData[*,where(strpos(FinaldataNames,'indM') gt -0.5)]
  Bind=200
  filt=where(indM eq Bind)
  ;delete first...
  filt2=filt[where(abs([-10,filt]-[filt,-10]) lt 1.5)]
  ;...and last averaged value for every bg measurement
  filt3=reverse(filt2)
  filt3=(filt3[where(abs([-10,(filt3)]-[(filt3),-10]) lt 1.5)])
  filt3=reverse(filt3)
  Bstrt= FinalData[*,where(strpos(FinaldataNames,'tSTRTav') gt -0.5)]
  Bstrt=Bstrt[filt3]
  Bend= FinalData[*,where(strpos(FinaldataNames,'tENDav') gt -0.5)]
  Bend=Bend[filt3]
  dims=d(FinalData)
  backfor=95.0 ; in minutes look back and forward for bg-measurements
  for i=0,max(dims[0])-1 do begin
    strt= FinalData[i,where(strpos(FinaldataNames,'tSTRTav') gt -0.5)]
    eend= FinalData[i,where(strpos(FinaldataNames,'tENDav') gt -0.5)]
    BGfilt=filt3[where(Bstrt gt max(strt-backfor/(24.9*60.0)) AND Bend lt max(eend+backfor/(24.9*60.0)))]
    BG=FinalData[BGfilt,*]
    SD=stddev(BG,dimension=1,/NAN)
    BG=total(BG,1,/NAN)/max(d(BGfilt))
    SubBgData[i,*]=Finaldata[i,*]-BG
    SubBgDataLOD[i,*]=3.0*SD
  endfor
  
  
  DEVICE, DECOMPOSED = 0
  !P.MULTI = [0,1,1]
  loadct,30
  x=(FinalData[*,0]+FinalData[*,1])/2
  y=FinalData[*,imass]
  y2=SubBgDataLOD[*,imass]
  filt=where(FinalData[*,1] gt min(DispRange) and FinalData[*,0] lt max(DispRange))
  y=y[filt]
  y2=y2[filt]
  x=x[filt]
  plot, x[where(y gt -9999)],  y[where(y gt -9999)], /YNOZERO, ytitle=ytit,xrange=xran,yrange=yran,xstyle=1,ystyle=1, color=0, background=-1, thick=1,charsize=1.5,charthick=2
  loadct,31
  oplot, x,  y2,  color=0,thick=1 ;oplot all raw data in red
  oplot, x,  y,  color=12,thick=1 ;oplot all raw data in red

 
 
 
  FinalDataCNTS=FinalDataErr
  FinalDataCNTS[*,where(MassNames gt 0.1)]=1/(FinalDataCNTS[*,where(MassNames gt 0.1)]^2)

  FinalDataCNTS[where(FinalDataCNTS lt 2e-8)]=-9999
  matchi=match(masses[event.index],lib)
  form=strtrim(matchi.formula,2)


end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;
;;;;;;;
;;;;;;;                   Basic data processing
;;;;;;;
;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


PRO ____________identification
 end



PRO IdentPTR, event
compile_opt idl2
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Buti1'), GET_uVALUE=path 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Buti2'), GET_uVALUE=lib 
  if (max(lib) eq -9999) then  begin 
          lib=masslib(/extended)
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Buti2'), sET_uVALUE=lib
  endif
 
    log=['']
        
  
  
  
 if(strpos(path,'w_data') lt -0.5) then path='click the right mouse button to select "w_data" directory'
   
   
 
   base = WIDGET_BASE(/column, XSIZE = getpar('IDbase_1x'), YSIZE = getpar('IDbase_1y'), RESOURCE_NAME = 'Merge data')
          label1=Widget_label(base,/Align_left, value="Directory:",uname='Directory',uvalue=-9999)
          wText = WIDGET_TEXT(base, VALUE=path, uname="textfield", /EDITABLE,/ALL_EVENTS, /NO_NEWLINE,/wrap , /CONTEXT_EVENTS, YSIZE = getpar('IDtxt_1y'), uVALUE=lib)
                  contextBase1 = WIDGET_BASE(wText,  /CONTEXT_MENU,  UNAME="contextMenu")
                          cb1 = WIDGET_BUTTON(contextBase1, VALUE = 'browse',  EVENT_PRO = 'getDir2')
          wText2 = WIDGET_TEXT(base, VALUE='click  right mouse button to select a data-file', uname="textfield2", /EDITABLE,/ALL_EVENTS, /NO_NEWLINE,/wrap , /CONTEXT_EVENTS, YSIZE = 2,uvalue=-9999)
                  contextBase2 = WIDGET_BASE(wText2,  /CONTEXT_MENU,  UNAME="contextMenu2")
                           cb2 = WIDGET_BUTTON(contextBase2, VALUE = 'browse',  EVENT_PRO = 'SelectDataFile')
          wText3 = WIDGET_TEXT(base, VALUE='Specify index vamues to be considered (Default is ALL Values)', uname="textfield3", /EDITABLE,/ALL_EVENTS, /NO_NEWLINE,/wrap ,  YSIZE = 1,uvalue=-9999)
          Buti3 = WIDGET_BUTTON(base,event_pro='Identification', value='Attribute Formulas',uname='Buti3') 
          FileListLabel=Widget_label(base,/Align_left, value="Report:",uname='Files',uvalue=CREATE_STRUCT('name1',['']))
          Text_log = WIDGET_TEXT(base, uname="Text_log", VALUE=[log],/ALL_EVENTS, /wrap ,/scroll, YSIZE = getpar('IDtxt_2y'))
   
   WIDGET_CONTROL, base, /REALIZE
   XMANAGER, 'IdentPTR', base, /NO_BLOCK
 
END



PRO getDir2, event
  COMPILE_OPT hidden
  Path=''
  Path=dialog_pickfile( TITLE='Select directory (ppb data)', /DIRECTORY )
  if (path NE '') then begin
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), SET_VALUE= path
          masses=readcsv(path+'UnifiedMassList.csv')
          masses=masses[*,0]
          engnames=readcsvstr(path+'Export/EngData/'+'Engdatanames.csv')
          
          
      
                              
  endif
END

pro Identification, event
;data, masslist ,sigm, lib


 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), GET_uVALUE=lib 
 
 
 
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), GET_VALUE=path 
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield2'), GET_VALUE=datafile 
 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield3'), GET_VALUE=indMvalues
 
 indmvalues=str2vec(indmvalues)
 names=reform(readcsvstr(path+'AveragedNames_'+ strmid(datafile,strlen(path)+strlen('Averaged_'),strlen(datafile)-strlen(path)-strlen('Averaged_')-3)+'csv'))
 data=readfloat(datafile)
 iM=where(strpos(names,'indM') gt -0.5)
 if(max(iM gt -0.5)) then begin
        indM=data[*,iM]
        filter=-1
        for bbb=0,max(d(indmvalues))-1 do begin 
                ffiill=where(indM eq indmvalues[bbb])
                if(max(ffiill) gt -0.5) then filter=[filter,ffiill]
        endfor
        if(max(filter) gt -1) then data=data[filter,*]
  endif
  masses=float(names)
  data=data[*,where(masses gt 0)]
  names=names[where(masses gt 0)]
  masslist=masses[where(masses gt 0)]
  sigma=readcsv(path+'PeakPar.csv')
  sigma=sigma[*,2]
  sigm=sigma*1e6/masslist ;in ppm
  masslist=float(masslist)
  dims=size(data,/dimensions)
  if(max(size(masslist,/dimensions))ne dims[0]) then data=transpose(data)
  dims=size(data,/dimensions)
  if(max(size(masslist,/dimensions))ne dims[0]) then print, 'MISMATCH MASSLIST and COLUMNS OF DATA (dim[0])'
  len=max(size(masslist,/dimensions))
  report=strarr(8)
  for i=0,len-1 do begin ;loop over masses
  ;for i=119,229 do begin ;loop over masses
        filter=where(data[i,*] gt quantile(data[i,*],0.6) and data[i,*] lt quantile(data[i,*],1)) ; select 40% of data with largest signal
        numbcand=1
        dat1=data[i,filter]
        candidates=match(masslist[i],lib) & candidates=candidates.candidates
        if (max(size(candidates,/n_dimensions)) eq 0) then numbcand=0
        if (max(size(candidates,/n_dimensions)) eq 1) then numbcand=1
        if (max(size(candidates,/n_dimensions)) eq 2) then begin
                  numbcand=d(candidates)
                  numbcand=max(numbcand[1])
        endif
        if(numbcand ge 1) then for j=0,numbcand-1 do begin ; loop over candidates
                labl=' '            
                massCand=masslist[i]+float(candidates[0,j])*0.001 ;mass of the candidate
                libCand=lib[*,where(abs(lib[0,*]-massCand) eq min(abs(lib[0,*]-massCand)))] ; library vector of candidate
                libCand=libCand[1:*]
                dist=isodist(libCand)
                Dmasses=dist.masses; isotope masses
                Ddist=dist.dist; isotope abundances
                ;normalize so that value of current ion (masslist[i]) is 1
                mult=max(1/Ddist[where(abs(Dmasses-masslist[i]) eq min(abs(Dmasses-masslist[i])))])
                Ddist=mult*Ddist  
                len2=max(size(Dmasses,/dimensions))
                for k=0,len2-1 do begin ; loop over isotopes
                        gdnss=-1
                        gdstr='-1'
                        cor=-1
                        len3=0
                        if(abs(Ddist[k]-1) gt 0.00005) then begin ;check isotop distributin in accordance with peak attribution
                                lim1=max([2,150E-3*masslist[i]]); in mDa the larger of 2 and 150ppm
                                ind2=where(abs(masslist-Dmasses[k]) le lim1*0.001) ; the isotope mass...
  if (masslist[i] eq 1137.128) then begin
  print, ''
  endif                             
                               
                               
                                if(max(ind2) lt -0.5) then if(Ddist[k] gt 3) then labl=labl+'No12Cpeak ' else if(Ddist[k] lt 0.4) then  labl=labl+'No13Cpeak ' 
                                if(max(ind2) gt -0.5) then begin 
                                        len3=max(size(ind2,/dimensions))
                                        for m=0,len3-1 do begin
                                                dat2=data[ind2[m],filter]/Ddist[k]
                                                ;dat1 40% largest data of current ion (masslist[i])
                                                ;dat2 40% largest data of isotope peak. NORMALIZED! i.e. that to-be-expected signal on current ion
                                                gdnss2=median(dat2/dat1)
                                                if (gdnss2 lt 0.1) then labl=labl+'<10%' ; less than 10% due to isotope. 
                                                if (gdnss2 ge 0.1 and gdnss2 le 1) then labl=labl+string(100*(gdnss2),format='(I2)')+'%% '; percentage due to istope
                                                if (gdnss2 gt 1) then  labl=labl+'>100%'
                                        endfor
                                endif
                        endif 
;print, '          '+string(len3,format='(i2)')+',  '+string(j,format='(i2)')+',  '+string(k,format='(i2)')+',  '+string(masslist[i],format='(F8.3)')+',  '+ candidates[1,j]+',  '+string(dmasses[k],format='(F8.3)')+',  '+string(ddist[k],format='(F8.3)')+',  '+string(gdnss,format='(F8.3)')+',  '+string(cor,format='(F8.3)')+' | '+gdstr;+',  '+ info
                endfor; loop over isotopes
              ;  datstat=[mean(data[i,*]),quantile(data[i,*],[0.15,0.3,0.5,0.7,0.85])]
                datstat=[mean(data[i,*]),median(data[i,*])]
                labl2='x'
                comm=''
                if(max(strpos(labl,'No12Cpeak')) gt -0.5)then begin
                        comm='DISMISS: no parent peak'
                        labl2='              '
                endif 
                if (strpos(labl2,'x') gt -0.5) then if (max(strpos(labl,'<10%')) gt -0.5) then begin
                        comm='DISMISS: <10%'
                        labl2='  <10%'
                endif
                if (strpos(labl2,'x') gt -0.5) then if (strpos(labl,'%%') gt -0.5) then labl2='     '+strmid(labl,strpos(labl,'%%')-2,2)+'%'
                if (strpos(labl2,'x') gt -0.5) then if (strpos(labl,'>100%') gt -0.5) then labl2='>100%'
                if (strpos(labl2,'x') gt -0.5) then if (strpos(labl,'No13Cpeak') gt -0.5) then begin
                        comm='no isotope peak'
                        labl2='              '
                endif
                if (strpos(labl2,'x') gt -0.5) then comm='No C or N'
                if (strpos(labl2,'x') gt -0.5) then labl2='              '
               formula=candidates[1,j]
                for v=0,16-max(strlen(candidates[1,j])) do formula='   '+formula
         ;      print, string(masslist[i],format='(F8.3)')+'| '+string(sigm[i],format='(I4)')+'| '+string(1e6*float(candidates[0,j])*0.001/masslist[i],format='(I4)')+'| '+labl2+'| '+strjoin(string(datstat,format='(F9.3)'),'|')+'|'+ candidates[1,j]+'| '+comm  ; +strjoin(string(datstat,format='(F9.3)'),'|')    
                report=[[report],[string(masslist[i],format='(F8.3)'),string(sigm[i],format='(I4)'),string(1e6*float(candidates[0,j])*0.001/masslist[i],format='(I4)'),labl2,formula,string(datstat,format='(F9.3)'),comm]]   
                ;print, string(masslist[i],format='(F8.3)')+' '+labl2+' '+labl   
        endfor ; loop over candidates
             
  endfor; loop over masses
report=report[*,1:*]
makecsv,path+'report.csv',transpose([transpose(['m/z ','sigm ',' diff','%max ','formula','mean','median ','comment' ]),transpose(report)])



 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), sET_VALUE=['sigm:     precission of detected m/z (in ppm)','diff:     difference between m/z and MW of formula (in ppm) ','%max:     maximum fraction of signal attributable to formula','mean:     mean of m/z values in dataset','median:     median of  m/z values in dataset','','m/z        sigm  diff   %max       mean      median     formula    comment',strjoin(report,' | ')]

;axe=axe+1
S1=create_struct('report',report)
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_log'), sET_uVALUE=S1

end



PRO IdentPTR_event, event
  IF (TAG_NAMES(event, /STRUCTURE_NAME) EQ 'WIDGET_CONTEXT') THEN BEGIN
   
    WIDGET_DISPLAYCONTEXTMENU, event.ID, event.X, event.Y, event.ID+1
 
  ENDIF

end


PRO SelectDataFile, event
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield'), gET_VALUE= path
   
  COMPILE_OPT hidden
  DataFile=''
  DataFile=dialog_pickfile( TITLE='Select an index-file (*.ind)',Filter='*Averaged_*', path=path, /MUST_EXIST )
  
  if (DataFile NE '') then begin
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'textfield2'), SET_VALUE= DataFile
  endif
  end


PRO ____________Filter_samples
 end





PRO FiltPTR, event

 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Buti1'), GET_uVALUE=path 
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Buti2'), GET_uVALUE=lib 
  
  
  
  
  
  
  
  
  
  uvalFiles=-9999
  valFiles="??? Files in Directory"
  valIons="??? ions in masslist"
 if(strpos(path,'w_data') lt -0.5) then path='click the right mouse button to select "w_data" directory' else begin
 
  Path2=path+'filter/'
   print, "fileinfo"
  mmist=file_info(path2)
  
  if (mmist.directory eq 0) then begin 
          FILE_MKDIR, path2
          FILE_MKDIR, path2+'info'
          FILE_MKDIR, path2+'temp'
 endif
 
 
           Files=Filelst(path)
           
           makecsv, path2+'info/StartTimes.csv',transpose(Files.startTimes)
           uvalFiles=files.path
           valFiles=string(max(size(files.path,/dimensions)),format='(I4)')+' Files in Directory'
         ;  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Files'), SET_uVALUE= files.path
         ;  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Files'), SET_VALUE= string(max(size(files.path,/dimensions)),format='(I4)')+' Files in Directory'
           masslist=readcsv(strjoin([path,'unifiedmasslist.csv']))
           masslist=masslist[*,0]
            n_masses=max(size(masslist,/dimensions))
         ;   masslist=[21.0206,38.0337,masslist[0:n_masses-2]]
       ;    n_masses=max(size(masslist,/dimensions))
       valIons=string(n_masses,format='(I4)')+' ions in masslist'
        ;   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Masses'), SET_VALUE= string(n_masses,format='(I4)')+' ions in masslist'
       
 
  
 
 endelse
   



 base = WIDGET_BASE(/column, XSIZE = getpar('FIbase_1x'), YSIZE = getpar('FIbase_1y'))
   Text_DataDir = WIDGET_TEXT(base, uname="Text_DataDir", VALUE=path, /EDITABLE,/ALL_EVENTS, /NO_NEWLINE,/wrap , /CONTEXT_EVENTS, YSIZE =  getpar('FItxt_1y'),uvalue=-9999)
       base_3= WIDGET_BASE(Text_DataDir,  /CONTEXT_MENU,  UNAME="base_3")
           But_1 = WIDGET_BUTTON(base_3, uname='But_1', VALUE = 'browse',  EVENT_PRO = 'getDataDirFilt')
   Text_Files = WIDGET_TEXT(base, uname="Text_Files", VALUE=valFiles, /ALL_EVENTS, /NO_NEWLINE, YSIZE = getpar('FItxt_2y'),uvalue=uvalFiles)
  Text_Masses = WIDGET_TEXT(base, uname="Text_Masses", VALUE=valIons, /ALL_EVENTS, /NO_NEWLINE, YSIZE = getpar('FItxt_2y'),uvalue=-9999)
 
   base2 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_2x'), YSIZE = getpar('FIbase_2y'))
       Lab11 = WIDGET_label(base2,/Align_left, uname="Lab11", VALUE="File ID:  ")
       But_2 = WIDGET_BUTTON(base2, uname='But_2', VALUE = 'previous',  EVENT_PRO = 'pl1')
       Text_2 = WIDGET_TEXT(base2, uname="Text_2", VALUE='-1',  /EDITABLE,/ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       But_3 = WIDGET_BUTTON(base2, uname='But_3', VALUE = '  next  ',  EVENT_PRO = 'pl1')
   base13 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_2x'), YSIZE = getpar('FIbase_2y'))
       Lab13 = WIDGET_label(base13,/Align_left, uname="Lab13", VALUE= "m/z ID: ")
       But_12 = WIDGET_BUTTON(base13, uname='But_12', VALUE = 'previous',  EVENT_PRO = 'pl1')
       Text_12 = WIDGET_TEXT(base13, uname="Text_12", VALUE='-1',  /EDITABLE,/ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       But_13 = WIDGET_BUTTON(base13, uname='But_13', VALUE = '  next  ',  EVENT_PRO = 'pl1')
   base17 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       Lab14 = WIDGET_label(base17,/Align_left, uname="Lab14", VALUE= "m/z IDs: ")
       ID2 = WIDGET_TEXT(base17, uname="ID2", VALUE='-1',  /EDITABLE,/ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_2x'),uvalue=-9999)
       ID3 = WIDGET_TEXT(base17, uname="ID3", VALUE='-1',  /EDITABLE,/ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_2x'),uvalue=-9999)
       ID4 = WIDGET_TEXT(base17, uname="ID4", VALUE='-1',  /EDITABLE,/ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_2x'),uvalue=-9999)
       ID5 = WIDGET_TEXT(base17, uname="ID5", VALUE='-1',  /EDITABLE,/ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_2x'),uvalue=-9999)
   
   But_4 = WIDGET_BUTTON(base, uname='But_4' ,value='update', event_pro='pl1')
   Text_SelFile = WIDGET_TEXT(base, uname="Text_SelFile", VALUE="selected File", /ALL_EVENTS,/wrap, /NO_NEWLINE, YSIZE = getpar('FItxt_1y'),uvalue=-9999)
   Lab2 = WIDGET_label(base,/Align_left, uname="Lab2", VALUE=" Specify Temp Steps: ")
   Lab3 = WIDGET_label(base,/Align_left, uname="Lab3", VALUE=" Default                                        Current ")
   base16 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       Dbk0 = WIDGET_TEXT(base16, uname="Doff", VALUE='12', /ALL_EVENTS, /EDITABLE,  YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       Tbk0 = WIDGET_TEXT(base16, uname="Toff", VALUE='offset', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       Vbk0 = WIDGET_TEXT(base16, uname="Voff", VALUE='0', /ALL_EVENTS,/EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
  ; base3 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
   ;    Dbk0 = WIDGET_TEXT(base3, uname="Dbk0", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
    ;   Tbk0 = WIDGET_TEXT(base3, uname="Tbk0", VALUE='START background', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
     ;  Vbk0 = WIDGET_TEXT(base3, uname="Vbk0", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
   base4 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       Dbk1 = WIDGET_TEXT(base4, uname="Dbk1", VALUE='12', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       Tbk1 = WIDGET_TEXT(base4, uname="Tbk1", VALUE='CYC bkgr ', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       Vbk1 = WIDGET_TEXT(base4, uname="Vbk1", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
   base5 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       D100 = WIDGET_TEXT(base5, uname="D100", VALUE='36', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       T100 = WIDGET_TEXT(base5, uname="T100", VALUE='CYC 100 C Step', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       V100 = WIDGET_TEXT(base5, uname="V100", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
   base6 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       D150 = WIDGET_TEXT(base6, uname="D150", VALUE='36', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       T150 = WIDGET_TEXT(base6, uname="T150", VALUE='CYC 150 C Step', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       V150 = WIDGET_TEXT(base6, uname="V150", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
   base7 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       D200 = WIDGET_TEXT(base7, uname="D200", VALUE='36', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       T200 = WIDGET_TEXT(base7, uname="T200", VALUE='CYC 200 C Step', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       V200 = WIDGET_TEXT(base7, uname="V200", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_5x'),uvalue=-9999)
   base8 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       D250 = WIDGET_TEXT(base8, uname="D250", VALUE='36', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       T250 = WIDGET_TEXT(base8, uname="T250", VALUE='CYC 250 C Step', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       V250 = WIDGET_TEXT(base8, uname="V250", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
   base9 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       D300 = WIDGET_TEXT(base9, uname="D300", VALUE='36', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       T300 = WIDGET_TEXT(base9, uname="T300", VALUE='CYC 300 C Step', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       V300 = WIDGET_TEXT(base9, uname="V300", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
   base10 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       D350 = WIDGET_TEXT(base10, uname="D350", VALUE='32', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       T350 = WIDGET_TEXT(base10, uname="T350", VALUE='CYC 350 C Step', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       V350 = WIDGET_TEXT(base10, uname="V350", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
   base11 = WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       Dspl = WIDGET_TEXT(base11, uname="Dspl", VALUE='-9999', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       Tspl = WIDGET_TEXT(base11, uname="Tspl", VALUE='SPLIT  FILE', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       Vspl = WIDGET_TEXT(base11, uname="Vspl", VALUE='-9999', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
   base12= WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       Dmer = WIDGET_TEXT(base12, uname="Dmer", VALUE='-9999', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       Tmer = WIDGET_TEXT(base12, uname="Tmer", VALUE='MERGE  FILE', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       Vmer = WIDGET_TEXT(base12, uname="Vmer", VALUE='-9999', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
  
   Lab5 = WIDGET_label(base,/Align_left, uname="Lab5", VALUE="Filter Information ")
   base13= WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       dID = WIDGET_TEXT(base13, uname="dID", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       Lab6 = WIDGET_TEXT(base13, uname="Lab6", VALUE='Filter ID: ', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       ID = WIDGET_TEXT(base13, uname="vID", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
   base14= WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       dREP = WIDGET_TEXT(base14, uname="dREP", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       Lab8 = WIDGET_TEXT(base14, uname="Lab8", VALUE='Replica ID: ', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       Rep = WIDGET_TEXT(base14, uname="vREP", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
    base15= WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       dFl= WIDGET_TEXT(base15, uname="dFl", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       Lab7 = WIDGET_TEXT(base15, uname="Lab7", VALUE='Desorption Flow [ml/min]: ', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = 16,uvalue=-9999)
       Fl = WIDGET_TEXT(base15, uname="vFl", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
    base18= WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       dAFr= WIDGET_TEXT(base18, uname="dAFr", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       Lab9 = WIDGET_TEXT(base18, uname="Lab9", VALUE='Aliquot [fract total Filt]  ', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       AFr = WIDGET_TEXT(base18, uname="vAFr", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
   base19= WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       dSV= WIDGET_TEXT(base19, uname="dSV", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       Lab10 = WIDGET_TEXT(base19, uname="Lab10", VALUE='Samp Vol [m3]', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       SV = WIDGET_TEXT(base19, uname="vSV", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
   base20= WIDGET_BASE(base,/row, XSIZE = getpar('FIbase_3x'), YSIZE = getpar('FIbase_3y'))
       dTR= WIDGET_TEXT(base20, uname="dTR", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_1x'),uvalue=-9999)
       Lab11 = WIDGET_TEXT(base20, uname="Lab11", VALUE='Treatment', /ALL_EVENTS, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_3x'),uvalue=-9999)
       TR = WIDGET_TEXT(base20, uname="vTR", VALUE='0', /ALL_EVENTS, /EDITABLE, YSIZE = getpar('FItxt_2y'),xSIZE = getpar('FItxt_4x'),uvalue=-9999)
 
 
   button = WIDGET_BUTTON(base, event_pro='readFILT', uname='init',value='average data', uvalue=1)
   button = WIDGET_BUTTON(base, event_pro='playground', uname='init',value='custom evaluation', uvalue=1)
 WIDGET_CONTROL, base, /REALIZE
 XMANAGER, 'FiltPTR', base, /NO_BLOCK
end







 PRO FiltPTR_event, event
  IF (TAG_NAMES(event, /STRUCTURE_NAME) EQ 'WIDGET_CONTEXT') THEN BEGIN
    contextBase = WIDGET_INFO(event.ID, FIND_BY_UNAME = 'base_3')
    WIDGET_DISPLAYCONTEXTMENU, event.ID, event.X, event.Y, contextBase
  ENDIF
END

 
PRO getDataDirFilt, event
  COMPILE_OPT hidden
  Path=''
  ; Prompt for path to catalog files 
 if( event.id eq WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'But_1')) then Path=dialog_pickfile( TITLE='Select directory BBB', /DIRECTORY ) else WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), gET_VALUE= path
  
  Path2=path+'filter/'
   print, "fileinfo"
  mmist=file_info(path2)
  if (mmist.directory eq 0) then begin 
          FILE_MKDIR, path2
          FILE_MKDIR, path2+'info'
          FILE_MKDIR, path2+'temp'
 endif
  if (path NE '') then begin
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), SET_VALUE= path
           Files=Filelst(path)
           
           makecsv, path2+'info/StartTimes.csv',transpose(Files.startTimes)
           WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Files'), SET_uVALUE= files.path
           WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Files'), SET_VALUE= string(max(size(files.path,/dimensions)),format='(I4)')+' Files in Directory'
           masslist=readcsv(strjoin([path,'unifiedmasslist.csv']))
           masslist=masslist[*,0]
            n_masses=max(size(masslist,/dimensions))
            WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Masses'), SET_VALUE= string(n_masses,format='(I4)')+' ions in masslist'
       
 
   
  endif
END
 


pro pl1,event
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_2'), get_VALUE=ind
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_12'), get_VALUE=m_ind
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ID2'), get_VALUE=ID2
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ID3'), get_VALUE=ID3
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ID4'), get_VALUE=ID4
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'ID5'), get_VALUE=ID5
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Files'), get_uVALUE=files
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), gET_VALUE= path

    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'T100'), get_uVALUE=av_VMR ;nmol/mol
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'T250'), get_uVALUE=int_VMR ; s nmol/mol (multiply int_VMR by the oven Flow, in mol/s, to get the amount of substance in nmol)
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'T150'), get_uVALUE=av_sig ;cps
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'T200'), get_uVALUE=tot_cnts ;counts (sqrt of tot_cnts is the standard error)
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'T300'), get_uVALUE=av_eng ;engineering data
 
 
 masslist=readcsv(strjoin([path,'unifiedmasslist.csv']))
masslist=masslist[*,0]
  n_masses=max(size(masslist,/dimensions))
  ;  masslist=[21.0206,38.0337,masslist[0:n_masses-2]]       
n_files=max(size(files,/dimensions))
n_masses=max(size(masslist,/dimensions))
ind=float(ind)
m_ind=float(m_ind)

if( event.id eq WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'But_2')) then if(abs(ind) lt n_files-1) then ind=ind-1
if( event.id eq WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'But_3')) then if(abs(ind) lt n_files-1) then ind=ind+1
if( event.id eq WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'But_12')) then if(m_ind gt -1) then m_ind=m_ind-1
if( event.id eq WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'But_13')) then if(m_ind lt n_masses-1) then m_ind=m_ind+1
if( event.id eq WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'But_4')) then update=1 else update=0

WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_2'), set_VALUE=string(ind,format='(I3)')
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_12'), set_VALUE=string(m_ind,format='(I3)')
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_SelFile'), set_VALUE=files[abs(ind)]


;********************************************************
;******  save parameters  split or merge files **********
;********************************************************

    name=strmid(files[abs(ind)],strlen(path),strlen(files[abs(ind)])-strlen(path))
    name2=strmid(name,strpos(name,'ppb')+3,strpos(name,'fdt')-strpos(name,'ppb')-3)
    parfile=path+'filter/info/par'+name2+'csv'
    helpi=file_info(parfile)
    if ( update eq 0) then begin
          if ( helpi.exists eq 1 and ind ge 0) then begin
                par=readcsv(parfile)
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Voff'), sET_VALUE= string(par[0],format='(I4)')
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vbk1'), sET_VALUE= string(par[1],format='(I4)')
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V100'), sET_VALUE= string(par[2],format='(I4)')
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V150'), sET_VALUE= string(par[3],format='(I4)')
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V200'), sET_VALUE= string(par[4],format='(I4)')
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V250'), sET_VALUE= string(par[5],format='(I4)')
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V300'), sET_VALUE= string(par[6],format='(I4)')
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V350'), sET_VALUE= string(par[7],format='(I4)')
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vspl'), sET_VALUE= string(par[8],format='(I6)')
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vmer'), sET_VALUE= string(par[9],format='(I6)')
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vID'),  sET_VALUE= string(par[10],format='(I4)')
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vREP'), sET_VALUE= string(par[11],format='(I4)')
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vFl'),  sET_VALUE= string(par[12])
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vAFr'), sET_VALUE= string(par[13])
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vSV'),  sET_VALUE= string(par[14])
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vTR'),  sET_VALUE= string(par[15])
                  
                
           endif else begin
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Doff'), gET_VALUE= p0
               ; WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Dbk0'), gET_VALUE= p0
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Dbk1'), gET_VALUE= p1
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'D100'), gET_VALUE= p2
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'D150'), gET_VALUE= p3
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'D200'), gET_VALUE= p4
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'D250'), gET_VALUE= p5
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'D300'), gET_VALUE= p6
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'D350'), gET_VALUE= p7
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Dspl'), gET_VALUE= p8
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Dmer'), gET_VALUE= p9
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'dID'), gET_VALUE= p10
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'dREP'), gET_VALUE= p11
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'dFl'), gET_VALUE=  p12
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'dAFr'), gET_VALUE= p13
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'dSV'), gET_VALUE= p14
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'dTR'), gET_VALUE= p15
            ;    p0=strtrim(string(float(p0)+float(poff),format="(I4)"),2)
          ;      p1=strtrim(string(float(p1)+float(poff),format="(I4)"),2)
           ;     p2=strtrim(string(float(p2)+float(poff),format="(I4)"),2)
            ;    p3=strtrim(string(float(p3)+float(poff),format="(I4)"),2)
             ;   p4=strtrim(string(float(p4)+float(poff),format="(I4)"),2)
              ;  p5=strtrim(string(float(p5)+float(poff),format="(I4)"),2)
               ; p6=strtrim(string(float(p6)+float(poff),format="(I4)"),2)
                ;p7=strtrim(string(float(p7)+float(poff),format="(I4)"),2)
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Voff'), sET_VALUE= p0
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vbk1'), sET_VALUE= p1
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V100'), sET_VALUE= p2
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V150'), sET_VALUE= p3
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V200'), sET_VALUE= p4
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V250'), sET_VALUE= p5
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V300'), sET_VALUE= p6
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V350'), sET_VALUE= p7
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vspl'), sET_VALUE= p8
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vmer'), sET_VALUE= p9
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vID'), sET_VALUE= p10
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vREP'), sET_VALUE= p11
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vFl'), sET_VALUE=  p12
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vAFr'), sET_VALUE= p13
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vSV'), seT_VALUE= p14
                WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vTR'), sET_VALUE= p15
              endelse
    endif
 ;   if ( update eq 1) then begin
       ;   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Voff'), gET_VALUE= poff
        ;  if (abs(poff) gt 0) then begin
           ;     WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vbk0'), gET_VALUE= p0
        ;        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vbk1'), gET_VALUE= p1
         ;       WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V100'), gET_VALUE= p2
         ;       WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V150'), gET_VALUE= p3
         ;       WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V200'), gET_VALUE= p4
         ;       WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V250'), gET_VALUE= p5
         ;       WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V300'), gET_VALUE= p6
         ;      WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V350'), gET_VALUE= p7
            ;    p0=strtrim(string(float(p0)+float(poff),format="(I4)"),2)
            ;    p1=strtrim(string(float(p1)+float(poff),format="(I4)"),2)
            ;;    p2=strtrim(string(float(p2)+float(poff),format="(I4)"),2)
            ;    p3=strtrim(string(float(p3)+float(poff),format="(I4)"),2)
           ;     p4=strtrim(string(float(p4)+float(poff),format="(I4)"),2)
            ;    p5=strtrim(string(float(p5)+float(poff),format="(I4)"),2)
            ;    p6=strtrim(string(float(p6)+float(poff),format="(I4)"),2)
             ;   p7=strtrim(string(float(p7)+float(poff),format="(I4)"),2)
             ;   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vbk0'), sET_VALUE= p0
           ;     WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vbk1'), sET_VALUE= p1
            ;    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V100'), sET_VALUE= p2
            ;    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V150'), sET_VALUE= p3
            ;    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V200'), sET_VALUE= p4
            ;    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V250'), sET_VALUE= p5
            ;    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V300'), sET_VALUE= p6
            ;    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V350'), sET_VALUE= p7
        ;  endif
      ;    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Voff'), sET_VALUE= '0'
  ;  endif
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Voff'), gET_VALUE= p0
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vbk1'), gET_VALUE= p1
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V100'), gET_VALUE= p2
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V150'), gET_VALUE= p3
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V200'), gET_VALUE= p4
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V250'), gET_VALUE= p5
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V300'), gET_VALUE= p6
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'V350'), gET_VALUE= p7
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vspl'), gET_VALUE= p8
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vmer'), gET_VALUE= p9
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vID'), gET_VALUE= p10
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vREP'), gET_VALUE= p11
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vFl'), gET_VALUE=  p12
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vAFr'), gET_VALUE= p13
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vSV'), gET_VALUE= p14
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'vTR'), gET_VALUE= p15
       ;          par=float([p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15])
    if (p8 gt 3) then split=1 else split=0  
    if (p9 eq 0 and p8 lt 0) then merge=1 else if (p9 gt 3 and p8 lt 0) then merge=1 else merge=0  
    if (split eq 1) then begin
    
 
    
          ppb=readfloat(files[abs(ind)])
          dims=size(ppb,/dimensions)
          if( p8 lt dims[1]-5) then begin
                 cpsfile=strmid(files[abs(ind)],0,strpos(files[abs(ind)],'ppb')-4)+'cps/OCorr/corrcps'+strmid(files[abs(ind)],strpos(files[abs(ind)],'ppb')+3,20)+'UL.fdt'
                 cps=readfloat(cpsfile)
                engfile=strmid(files[abs(ind)],0,strpos(files[abs(ind)],'ppb')-7)+'EngData/EngData'+ strmid(files[abs(ind)],strpos(files[abs(ind)],'ppb')+3,20)+'.fdt'
                eng=readfloat(engfile)
                
                
                
                file2=files[abs(ind)]
                cpsfile2=cpsfile
                engfile2=engfile
                caldat, eng[0,0]+Julday(1,1,2009,0,0,0),Month1 , Day1 , Year1 , Hour1 , Minute1 , Second1
                caldat, eng[p8,0]+Julday(1,1,2009,0,0,0),Month2 , Day2 , Year2 , Hour2 , Minute2 , Second2
                pos=strtrim(string(Year1,format='(I4)'),2)+'.' 
                Year=strtrim(string(Year2,format='(I4)'),2)+'.' 
                Month=strtrim(string(Month2,format='(I4)'),2)+'.' & if(Month2 lt 10) then Month='0'+Month
                Day=strtrim(string(Day2,format='(I4)'),2)+'-' & if(Day2 lt 10) then Day='0'+Day
                Hour=strtrim(string(Hour2,format='(I4)'),2)+'h' & if(Hour2 lt 10) then Hour='0'+Hour
                Minute=strtrim(string(Minute2,format='(I4)'),2)+'m' & if(Minute2 lt 10) then Minute='0'+Minute
                Second=strtrim(string(Second2,format='(I4)'),2)+'s' & if(Second2 lt 10) then Second='0'+Second
                Newtime=Year+Month+Day+Hour+Minute+Second
                
                
                strput, file2,Newtime,strpos(file2,pos)
                strput, cpsfile2,Newtime,strpos(cpsfile2,pos)
                strput, engfile2,Newtime,strpos(engfile2,pos)
                ppb1=ppb[*,0:p8-1]
                ppb2=ppb[*,p8:*]
                cps1=cps[*,0:p8-1]
                cps2=cps[*,p8:*]
                eng1=eng[0:p8-1,*]
                eng2=eng[p8:*,*]
                makefloat, files[abs(ind)], ppb1
                makefloat, file2, ppb2
                makefloat, cpsfile, cps1
                makefloat, cpsfile2, cps2
                makefloat, engfile, eng1
                makefloat, engfile2, eng2
                getDataDirFilt, event
          endif
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vspl'), sET_VALUE=string(-9999,format='(I6)')
          p8=-9999
          print, 'split'         
    endif
    if (merge eq 1) then begin
          ppb=readfloat(files[abs(ind)])
          dims=size(ppb,/dimensions)
          if( p9 lt dims[1]-1) then begin
                ppb_next=readfloat(files[abs(ind)+1])
                 cpsfile=strmid(files[abs(ind)],0,strpos(files[abs(ind)],'ppb')-4)+'cps/OCorr/corrcps'+strmid(files[abs(ind)],strpos(files[abs(ind)],'ppb')+3,20)+'UL.fdt'
                 cps=readfloat(cpsfile)
                engfile=strmid(files[abs(ind)],0,strpos(files[abs(ind)],'ppb')-7)+'EngData/EngData'+ strmid(files[abs(ind)],strpos(files[abs(ind)],'ppb')+3,20)+'.fdt'
                eng=readfloat(engfile)
                
                cpsfile_next=strmid(files[abs(ind)+1],0,strpos(files[abs(ind)+1],'ppb')-4)+'cps/OCorr/corrcps'+strmid(files[abs(ind)+1],strpos(files[abs(ind)+1],'ppb')+3,20)+'UL.fdt'
                 cps_next=readfloat(cpsfile_next)
                engfile_next=strmid(files[abs(ind)+1],0,strpos(files[abs(ind)+1],'ppb')-7)+'EngData/EngData'+ strmid(files[abs(ind)+1],strpos(files[abs(ind)+1],'ppb')+3,20)+'.fdt'
                eng_next=readfloat(engfile_next)
                 
                
                   
                
                file2=files[abs(ind)]
                cpsfile2=cpsfile
                engfile2=engfile
                If (p9 ne 0) then begin
                        caldat, eng[0,0]+Julday(1,1,2009,0,0,0),Month1 , Day1 , Year1 , Hour1 , Minute1 , Second1
                        caldat, eng[p9,0]+Julday(1,1,2009,0,0,0),Month2 , Day2 , Year2 , Hour2 , Minute2 , Second2
                        pos=strtrim(string(Year1,format='(I4)'),2)+'.' 
                        Year=strtrim(string(Year2,format='(I4)'),2)+'.' 
                        Month=strtrim(string(Month2,format='(I4)'),2)+'.' & if(Month2 lt 10) then Month='0'+Month
                        Day=strtrim(string(Day2,format='(I4)'),2)+'-' & if(Day2 lt 10) then Day='0'+Day
                        Hour=strtrim(string(Hour2,format='(I4)'),2)+'h' & if(Hour2 lt 10) then Hour='0'+Hour
                        Minute=strtrim(string(Minute2,format='(I4)'),2)+'m' & if(Minute2 lt 10) then Minute='0'+Minute
                        Second=strtrim(string(Second2,format='(I4)'),2)+'s' & if(Second2 lt 10) then Second='0'+Second
                        Newtime=Year+Month+Day+Hour+Minute+Second
                        strput, file2,Newtime,strpos(file2,pos)
                        strput, cpsfile2,Newtime,strpos(cpsfile2,pos)
                        strput, engfile2,Newtime,strpos(engfile2,pos)
                endif
                ppb_next=[[ppb[*,p9:*]],[ppb_next]]
                ppb=ppb[*,0:p9-1]
                cps_next=[[cps[*,p9:*]],[cps_next]]
                cps=cps[*,0:p9-1]
                eng_next=[eng[p9:*,*],eng_next]
                eng=eng[0:p9-1,*]
                makefloat, files[abs(ind)], ppb
                makefloat, file2, ppb_next
                File_delete, files[abs(ind)+1]
                makefloat, cpsfile, cps
                makefloat, cpsfile2, cps_next
                File_delete, cpsfile_next
                makefloat, engfile, eng
                makefloat, engfile2, eng_next
                File_delete, engfile_next
                getDataDirFilt, event
          endif
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Vmer'), sET_VALUE=string(-9999,format='(I6)')
          p9=-9999
          print, 'merge'         
    endif
    name=strmid(files[abs(ind)],strlen(path),strlen(files[abs(ind)])-strlen(path))
    name2=strmid(name,strpos(name,'ppb')+3,strpos(name,'fdt')-strpos(name,'ppb')-3)
    parfile=path+'filter/info/par'+name2+'csv'
    makecsv, parfile,  transpose([p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15])

;****************
;****************
;****************



ppb=readfloat(files[abs(ind)])
 
if (M_ind eq -1) then yy=total(ppb[where(masslist gt 50),*],1) else yy=ppb[m_ind,*]
if(max(where(yy lt -9900)) gt 0) then yy[where(yy lt -9900)]=0
if (M_ind eq -1) then ytit='total VMR for m/z > 50 Da' else ytit='m/z '+strtrim(string(masslist[m_ind],format='(F8.3)'),2)+' [nmol/mol]'
  DEVICE, DECOMPOSED = 0 
  !P.MULTI = [0,1,1] 
  loadct,38
  plot, yy, /YNOZERO, XTITLE='Cycles', YTITLE=ytit , color=0, background=-1, charsize=2,thick=3
  loadct,31


if(ID2 gt -1) then oplot, ppb[ID2,*]*max(yy)/max(ppb[ID2,*]), thick=2, color=248
if(ID3 gt -1) then oplot, ppb[ID3,*]*max(yy)/max(ppb[ID3,*]), thick=2, color=249
if(ID4 gt -1) then oplot, ppb[ID4,*]*max(yy)/max(ppb[ID4,*]), thick=2, color=250
if(ID5 gt -1) then oplot, ppb[ID5,*]*max(yy)/max(ppb[ID5,*]), thick=2, color=251
  oplot, yy, thick=3, color=16
 p0=float(p0)
 p1=float(p1)
 p2=float(p2)
 p3=float(p3)
 p4=float(p4)
 p5=float(p5)
 p6=float(p6)
 p7=float(p7)
 
par=[p0,p0+p1,p0+p1+p2,p0+p1+p2+p3,p0+p1+p2+p3+p4,p0+p1+p2+p3+p4+p5,p0+p1+p2+p3+p4+p5+p6,p0+p1+p2+p3+p4+p5+p6+p7] 
bk1=quantile(yy[par[0]+indgen(par[1]-par[0])],0.04)
bk2=quantile(yy[par[0]+indgen(par[7]-par[0])],0.04)
if (bk2 lt bk1 and bk2 gt 0) then begin
lamda=36
N0=(bk1-bk2)*exp(max(p0)/lamda)
bk_fit=findgen(1000)/lamda
bk_fit=exp(-bk_fit)*N0+bk2
endif else bk_fit=fltarr(1000)
if (bk2 ge bk1 and bk2 gt 0) then bk_fit=fltarr(1000)+bk2

kleur=[2,96,128,3,10,12,140]

for k=0,6 do begin
oplot, [par[0+k],par[0+k]],[0,99999],color=kleur[k],thick=3
oplot, [par[1+k],par[1+k]],[0,99999],color=kleur[k],thick=3
sel=par[0+k]+lindgen(par[1+k]-par[0+k])
my=mean(yy[sel])
oplot, [par[0+k],par[1+k]], [my,my],color=0,thick=5
n=max(size(sel,/dimensions))
my=total(yy[sel])/n
oplot, [par[0+k],par[1+k]], [my,my],color=10,thick=5

if (tot_cnts[0] gt -1 and m_ind ge 0) then bg=bk_fit[par[0+k]+lindgen(par[1+k]-par[0+k])]
if (tot_cnts[0] gt -1 and m_ind ge 0) then oplot, [par[0+k],par[1+k]], [bg+av_VMR[abs(ind),m_ind,k],bg+av_VMR[abs(ind),m_ind,k]],color=kleur[k],thick=3
if (tot_cnts[0] gt -1 and m_ind ge 0) then oplot, [par[0+k],par[1+k]], [av_VMR[abs(ind),m_ind,k],av_VMR[abs(ind),m_ind,k]],color=kleur[k],thick=3
if (tot_cnts[0] gt -1 and m_ind ge 0) then err=av_VMR[abs(ind),m_ind,k]*sqrt(tot_cnts[abs(ind),m_ind,k])/tot_cnts[abs(ind),m_ind,k]
if (tot_cnts[0] gt -1 and m_ind ge 0) then oplot, [(par[0+k]+par[1+k])/2,(par[0+k]+par[1+k])/2], [bg+av_VMR[abs(ind),m_ind,k]-err,bg+av_VMR[abs(ind),m_ind,k]+err ],color=kleur[k],thick=3
endfor

oplot, lindgen(1000),bk_fit, color=12, thick=3

xyouts,par[0]+(par[1]-par[0])/4,max(yy),'bk', color=2, charsize=2, charthick=2
xyouts,par[1]+(par[2]-par[1])/4,max(yy),'100 C', color=96, charsize=2, charthick=2
xyouts,par[2]+(par[3]-par[2])/4,max(yy),'150 C', color=128, charsize=2, charthick=2
xyouts,par[3]+(par[4]-par[3])/4,max(yy),'200 C', color=3, charsize=2, charthick=2
xyouts,par[4]+(par[5]-par[4])/4,max(yy),'250 C', color=10, charsize=2, charthick=2
xyouts,par[5]+(par[6]-par[5])/4,max(yy),'300 C', color=12, charsize=2, charthick=2
xyouts,par[6]+(par[7]-par[6])/4,max(yy),'350 C', color=140, charsize=2, charthick=2




end


pro readFILT,event
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Files'), get_uVALUE=files
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), gET_VALUE= path
      
      
      
       masslist=files[max(d(files))-1]
    helpi1=strmid(masslist,0,strpos(masslist,'ppb20')-4)
    helpi2=strmid(masslist,strpos(masslist,'ppb20')+3,strpos(masslist,'UL.fdt')-strpos(masslist,'ppb20')-3)
    masslist=helpi1+'IonList/MassIDs_'+helpi2+'UL.csv'  
    masslist=readcsv(masslist)
    
    
 ;    masslist=readcsv(strjoin([path,'unifiedmasslist.csv']))
  ;   masslist=masslist[*,0]
   ;   n_masses=max(size(masslist,/dimensions))
    ;masslist=[21.0206,38.0337,masslist[0:n_masses-2]]
     EngNames=readcsvstr(strjoin([path,'Export/EngData/','EngDataNames'+helpi2+'.csv']))
     n_files=max(size(files,/dimensions))
     n_masses=max(size(masslist,/dimensions))
     n_eng=max(size(EngNames,/dimensions))
  
    
    av_VMR=fltarr(n_files,n_masses,7)   ;nmol/mol
    int_VMR=fltarr(n_files,n_masses,7)    ; s nmol/mol (multiply int_VMR by the oven Flow, in mol/s, to get the amount of substance in nmol)
    av_sig=fltarr(n_files,n_masses,7)   ;cps
    tot_cnts=fltarr(n_files,n_masses,7)   ;counts (sqrt of tot_cnts is the standard error)
    av_eng=fltarr(n_files,n_eng,7)   ;engineering data
  
    filterInfo= fltarr(n_files,6)
    
    for ind=0 ,n_files-1 do begin
    
    ppb=readfloat(files[ind])
    cpsfile=files[ind]
     helpi1=strmid(cpsfile,0,strpos(cpsfile,'ppb20')-4)
    helpi2=strmid(cpsfile,strpos(cpsfile,'ppb20')+3,strpos(cpsfile,'UL.fdt')-strpos(cpsfile,'ppb20')-3)
    cpsfile=helpi1+'CPS/cps'+helpi2+'UL.fdt'  
    cps=readfloat(cpsfile)
    
    engfile=files[ind]
    helpi1=strmid(engfile,0,strpos(engfile,'ppb20')-7)
    helpi2=strmid(engfile,strpos(engfile,'ppb20')+3,strpos(engfile,'UL.fdt')-strpos(engfile,'ppb20')-3)
    engfile=helpi1+'engdata/engdata'+helpi2+'.fdt'  
    eng=readfloat(engfile)
    
   ;;;
   ;;; Nov 2018  recalculate ppb using mean primary ions of file
   ;;; this reduced overestimation if primary ion signal collapses, which happens in most cases if NH4+ and NO2+ is too high
   ;;; during such episodes this strategy calculates too low values ...
   ;;; 
   prim=getPrimIons(masslist,cps,0)
   m19=fltarr(max(d(prim.A)))+median(prim.A)
   m37=fltarr(max(d(prim.B)))+median(prim.B)
   pdrift=eng[*,5]
   tdrift=eng[*,6]+273.15
   udrift=eng[*,10]+eng[*,11]
   ppb=calcppb(cps, masslist, m19, m37, pdrift, udrift,tdrift)
   ; calculates volume mixing ratio

   ;print, 100.0*(ppb[100,*]-ppbnew[100,*])/ppb[100,*]
   
   
   ;;;
   
    parfile=files[ind]
    helpi1=strmid(parfile,0,strpos(parfile,'ppb20')-14)
    helpi2=strmid(parfile,strpos(parfile,'ppb20')+3,strpos(parfile,'UL.fdt')-strpos(parfile,'ppb20')-3)
    parfile=helpi1+'filter/info/par'+helpi2+'UL.csv'  
    par=readcsv(parfile)
    par[7]=par[0]+par[1]+par[2]+par[3]+par[4]+par[5]+par[6]+par[7]
    par[6]=par[0]+par[1]+par[2]+par[3]+par[4]+par[5]+par[6]
    par[5]=par[0]+par[1]+par[2]+par[3]+par[4]+par[5]
    par[4]=par[0]+par[1]+par[2]+par[3]+par[4]
    par[3]=par[0]+par[1]+par[2]+par[3]
    par[2]=par[0]+par[1]+par[2]
    par[1]=par[0]+par[1]
    
  
    n_cycles=size(ppb,/dimensions) & n_cycles=max(n_cycles[1])
    time_cycle=24.0*3600.*(max(eng[*,0])-min(eng[*,0]))/(n_cycles-2)
   
    for ss=0,n_masses-2 do begin
        bk1=quantile(ppb[ss,par[0]+indgen(par[1]-par[0])],0.04)
        bk2=quantile(ppb[ss,par[0]+indgen(par[7]-par[0])],0.04)
        if (bk2 lt bk1 and bk2 gt 0) then begin
        lamda=180.0/time_cycle
        N0=(bk1-bk2)*exp(par[0]/lamda)
        bk_fit=exp(findgen(n_cycles)/lamda*(-1))*N0+bk2
        endif else bk_fit=fltarr(n_cycles)
        if (bk2 ge bk1 and bk2 gt 0) then bk_fit=fltarr(n_cycles)+bk2
   ;     if(bk2 gt 0 and bk2 ge bk1) then begin
    ;    print, [mean( ppb[ss,par[0]+indgen(par[7]-par[0])]), max(bk_fit),min(bk_fit), bk2]
     ;   print, 'haha'
      ;  endif
        ppb[ss,par[0]+indgen(par[7]-par[0])]=ppb[ss,par[0]+indgen(par[7]-par[0])]-bk_fit[par[0]+indgen(par[7]-par[0])]
       ; print,[masslist[ss], mean( ppb[ss,par[0]+indgen(par[7]-par[0])]), mean(bk_fit)]

  
    endfor
   
   
    for k=0,6 do begin
            sel=indgen(par[1+k]-par[0+k])+par[0+k] 
            n=float(max(size(sel,/dimensions)) )
            
            av_VMR[ind,*,k]=total(ppb[*,sel],2)/n 
   ;         print, [k,total(ppb[434,sel],2)/n,total(ppb[434,sel],2)/n- mean(ppb[434,sel]),n]
            int_VMR[ind,*,k]=av_VMR[ind,*,k]*n*time_cycle
            av_sig[ind,*,k]=total(cps[*,sel],2)/n
            tot_cnts[ind,*,k]=av_sig[ind,*,k]*n*time_cycle
            hheellpp=[total(eng[sel,*],1)/n ,fltarr(n_eng)]
            av_eng[ind,*,k]=hheellpp[0:n_eng-1]
    endfor        
       
     ; columns are: Filter ID, Replica, Desorption Flow, Aliquot Fraction, Sampled air volume, Treatment  
    for ooo=0,5 do filterInfo[ind,0+ooo]=par[10+ooo]

    print, strtrim(string(ind+1),2)+' of '+strtrim(string(n_files),2)+ ' '+files[ind]
    endfor                    
    ; allocate and save files
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'T100'), set_uVALUE=av_VMR ;nmol/mol
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'T250'), set_uVALUE=int_VMR ; s nmol/mol (multiply int_VMR by the oven Flow, in mol/s, to get the amount of substance in nmol)
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'T150'), set_uVALUE=av_sig ;cps
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'T200'), set_uVALUE=tot_cnts ;counts (sqrt of tot_cnts is the standard error)
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'T300'), set_uVALUE=av_eng ;engineering data
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'T350'), set_uVALUE=FilterInfo ;FilterInfo
    makefloat, path+'/filter/av_VMR.ftd',av_VMR
    makefloat, path+'/filter/int_VMR.ftd',int_VMR
    makefloat, path+'/filter/av_sig.ftd',av_sig
    makefloat, path+'/filter/tot_cnts.ftd',tot_cnts
    makefloat, path+'/filter/av_eng.ftd',av_eng
         
    makecsv, path+'/filter/av_VMR_bk.csv',av_VMR[*,*,0]
    makecsv, path+'/filter/int_VMR_bk.csv',int_VMR[*,*,0]
    makecsv, path+'/filter/av_sig_bk.csv',av_sig[*,*,0]
    makecsv, path+'/filter/tot_cnts_bk.csv',tot_cnts[*,*,0]
    makecsv, path+'/filter/av_eng_bk.csv',av_eng[*,*,0]
  
    makecsv, path+'/filter/av_VMR_100.csv',av_VMR[*,*,1]
    makecsv, path+'/filter/int_VMR_100.csv',int_VMR[*,*,1]
    makecsv, path+'/filter/av_sig_100.csv',av_sig[*,*,1]
    makecsv, path+'/filter/tot_cnts_100.csv',tot_cnts[*,*,1]
    makecsv, path+'/filter/av_eng_100.csv',av_eng[*,*,1]
    
    makecsv, path+'/filter/av_VMR_150.csv',av_VMR[*,*,2]
    makecsv, path+'/filter/int_VMR_150.csv',int_VMR[*,*,2]
    makecsv, path+'/filter/av_sig_150.csv',av_sig[*,*,2]
    makecsv, path+'/filter/tot_cnts_150.csv',tot_cnts[*,*,2]
    makecsv, path+'/filter/av_eng_150.csv',av_eng[*,*,2]
     
     makecsv, path+'/filter/av_VMR_200.csv',av_VMR[*,*,3]
    makecsv, path+'/filter/int_VMR_200.csv',int_VMR[*,*,3]
    makecsv, path+'/filter/av_sig_200.csv',av_sig[*,*,3]
    makecsv, path+'/filter/tot_cnts_200.csv',tot_cnts[*,*,3]
    makecsv, path+'/filter/av_eng_200.csv',av_eng[*,*,3]
    makecsv, path+'/filter/av_VMR_250.csv',av_VMR[*,*,4]
    makecsv, path+'/filter/int_VMR_250.csv',int_VMR[*,*,4]
    makecsv, path+'/filter/av_sig_250.csv',av_sig[*,*,4]
    makecsv, path+'/filter/tot_cnts_250.csv',tot_cnts[*,*,4]
    makecsv, path+'/filter/av_eng_250.csv',av_eng[*,*,4]
   
    makecsv, path+'/filter/av_VMR_300.csv',av_VMR[*,*,5]
    makecsv, path+'/filter/int_VMR_300.csv',int_VMR[*,*,5]
    makecsv, path+'/filter/av_sig_300.csv',av_sig[*,*,5]
    makecsv, path+'/filter/tot_cnts_300.csv',tot_cnts[*,*,5]
    makecsv, path+'/filter/av_eng_300.csv',av_eng[*,*,5]
    makecsv, path+'/filter/av_VMR_350.csv',av_VMR[*,*,6]
    makecsv, path+'/filter/int_VMR_350.csv',int_VMR[*,*,6]
    makecsv, path+'/filter/av_sig_350.csv',av_sig[*,*,6]
    makecsv, path+'/filter/tot_cnts_350.csv',tot_cnts[*,*,6]
    makecsv, path+'/filter/av_eng_350.csv',av_eng[*,*,6]
   
   
    makecsv, path+'/filter/masslist.csv',transpose(masslist)
    makecsv, path+'/filter/filterInfo.csv',filterInfo
     
    
         
                        
print, 'haha'                        
end




pro playground,event
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_Files'), get_uVALUE=files
  WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DataDir'), gET_VALUE= path

filterInfo=readcsv(path+'filter/filterInfo.csv')
masslist=readcsv(path+'filter/masslist.csv')
av_VMR=readfloat(path+'filter/av_VMR.ftd') ;nmol/mol
int_VMR=readfloat(path+'filter/int_VMR.ftd'); s nmol/mol (multiply int_VMR by the oven Flow, in mol/s, to get the amount of substance in nmol)
av_sig=readfloat(path+'filter/av_sig.ftd') ;cps
tot_cnts=readfloat(path+'filter/tot_cnts.ftd');counts (sqrt of tot_cnts is the standard error)
av_eng=readfloat(path+'filter/av_eng.ftd') ;engineering data

SamplingDuration=[1.89, 7, 4.11, 1.97, 1.93, 4.93, 8.2, 3.98, 6.1, 7.02, 9.13, 3.94, 2.95, 3.14, 5.79, 3.17, 4.1, 6.18, 2.94, 2.91, 3.76, 3.2, 6.26]
SamplingStart=[787.59375, 833.5173611, 847.5173611, 851.6354167, 866.5486111, 881.5625, 886.4895833, 917.5625, 931.4791667, 951.46875, 958.4895833, 991.5, 1000.458333, 1020.59375, 1023.708333, 1047.479167, 1050.645833, 1065.385417, 1075.690972, 1114.753472, 1124.826389, 1138.503472, 1155.524306]
FilterID=[12, 21, 23, 24, 30, 36, 38, 46, 49, 57, 59, 65, 69, 77, 78, 84, 85, 89, 91, 99, 102, 106, 109]
SampVOL=[1360.8, 5040, 2959.2, 1418.4, 1389.6, 3549.6, 5904, 2865.6, 4392, 5054.4, 6573.6, 2836.8, 2124, 2260.8, 4168.8, 2282.4, 2952, 4449.6, 2116.8, 2095.2, 2707.2, 2304, 4507.2]
meas=d(filterinfo)
meas=max(meas[1])
conc=fltarr(d(int_VMR))
for i=0,meas-1 do conc[i,*,*]=int_VMR[i,*,*]*(filterInfo[2,i]*0.001/(22.4*60))/(filterInfo[3,i]*filterInfo[4,i])

;calculate filter loading in nmol/cm2
load=fltarr(d(int_VMR))
LODarr=fltarr(d(int_VMR))
for i=0,meas-1 do load[i,*,*]=int_VMR[i,*,*]*(filterInfo[2,i]*0.001/(22.4*60))/(filterInfo[3,i]*3.14*14*14)

loadPERfilt=fltarr(23,max(d(masslist)),7)
loadPERfiltSERR=fltarr(23,max(d(masslist)),7)

for k=0,max(d(masslist))-1 do begin
      massindex=k   
      for j=0,6 do begin
            subfilt=where(filterInfo[0,*] eq 72)
            x=[1180,750]
            y=median(load[subfilt,massindex,j])
            LOD=3*stddev(load[subfilt,massindex,j])
            
            yerr=[[LOD],[LOD]]
            y=[y,y]
            yerr=[yerr,yerr]
            for i=0,22 do begin
                  subfilt=where(filterInfo[0,*] eq FilterID[i])
                  x=[x,SamplingStart[i]]
                  y=[y, median(load[subfilt,massindex,j])]
                  hlp=load[subfilt,massindex,j]
                  yerr=[yerr,transpose([median(hlp)-min(hlp), max(hlp)-median(hlp)])]
            endfor
            if (j eq 0) then xx=x else xx=[[xx],[x]]
            if (j eq 0) then yy=y else yy=[[yy],[y]]
            yerr=transpose(yerr)
            if (j eq 0) then yyerr=fltarr([d(yerr),7])
            yyerr[*,*,j]=yerr 
      
      
      endfor
      
      set2=fltarr(3,23,6)
    LOD=reform(yyerr[0,0,*])
       for j=1,6 do begin
        LODarr[where(load[*,k,j] gt LOD[j]),k,j]=1 
          mediumm=yy[2:*,j]-max(yy[0,j])
         loww=mediumm-yyerr[0,2:*,j]
         highh=mediumm+yyerr[1,2:*,j]
         filt=where(mediumm lt LOD[j])
         set=transpose([[loww],[mediumm],[highh]])
         hlp=set
         hlp[where(set lt LOD[j])]=0
         hlp2=set-set
         hlp2=hlp2-9999
         hlp2[*,where(median(hlp,dimension=1) ne 0)]= set[*,where(median(hlp,dimension=1) ne 0)]
         set2[*,*,j-1]=hlp2 
         stderr=stddev(set,dimension=1)/sqrt(3)
         meann=mean(set,dimension=1)
         meann[filt]=-9999
         stderr[filt]=-9999
         loadPERfilt[*,k,j]=meann
         loadPERfiltSERR[*,k,j]=stderr
      endfor
      
    set2=(total(set2,3))
    stderr=stddev(set2,dimension=1)/sqrt(3)
    meann=mean(set2,dimension=1)
    ;meann[where(meann eq 0)]=-9999
    stderr[where(meann eq 0)]=-9999
    loadPERfilt[*,k,0]=meann
    loadPERfiltSERR[*,k,0]=stderr
    toti=fltarr(23)
    totiERR=fltarr(23)
   for j=1,6 do begin
      hlp=loadPERfilt[*,k,j]
      fflltt=where(hlp gt -9998.0)
     if(max(fflltt) gt -0.5) then toti[fflltt]= toti[fflltt]+ hlp[fflltt]
     hlp=loadPERfiltSERR[*,k,j]
     if(max(fflltt) gt -0.5) then totiERR[fflltt]= totiERR[fflltt]+ hlp[fflltt]*hlp[fflltt]
    
    endfor
    totiERR=sqrt(totiERR)
    loadPERfilt[*,k,0]=toti
    loadPERfiltSERR[*,k,0]=totiERR

      
      cols=['AQUAMARINE','black','MAGENTA','RED','PURPLE','YELLOW GREEN','DARK GREEN','BLUE','DARK GREEN','YELLOW GREEN','LIME','LIME','RED','CHOCOLATE']
      symb=['<','D','tu','s','tl','d','p','h','S','o','D','s']
      if (k eq 62) then begin
      plot1=errorplot(xx[2:*,1],yy[2:*,1]-max(yy[0,1]),yyerr[*,2:*,1],  dimensions=[1200,700], yrange=range(yy),ERRORBAR_linestyle=' ', XTICKFONT_SIZE=12,YTICKFONT_SIZE=12,FONT_SIZE=12, XTITLE="t09", YTITLE="nmol/cm2", TITLE="Filter loading, m/Q: "+strtrim(string(masslist[massindex],format='(F10.3)'),2))
      for j=1,6 do plot1=errorplot(xx[2:*,j],yy[2:*,j]-max(yy[0,j]),yyerr[*,2:*,j], yrange=range(yy),ERRORBAR_THICK=3,ERRORBAR_linestyle=' ', XTICKFONT_SIZE=12,YTICKFONT_SIZE=12,FONT_SIZE=12,SYMBOL=symb[j],thick=3, sym_thick=3,sym_size=2,COLOR=cols[j], ERRORBAR_COLOR=cols[j] ,/overplot)
      for j=1,6 do plot1=plot(xx[[0,1],j],[LOD[j],LOD[j]], yrange=range(yy), XTICKFONT_SIZE=12,YTICKFONT_SIZE=12,FONT_SIZE=12,SYMBOL=symb[j], sym_thick=1,thick=3,COLOR=cols[j], ERRORBAR_COLOR=cols[j] ,/overplot)
      endif
      print, 'haha'


endfor






 concPERfilt=loadPERfilt ;will be ng/m3
 concPERfiltSERR=loadPERfiltSERR  ;will be ng/m3

for i=0,22 do begin  ;nmol/m3
  factor=(3.14*14*14)/SampVOL[i]
  set=concPERfilt[i,*,*]*factor
  set[where(loadPERfilt[i,*,*] lt -9998.0)]=-9999
 concPERfilt[i,*,*]=set
 set=concPERfiltSERR[i,*,*]*factor
  set[where(loadPERfilt[i,*,*] lt -9998.0)]=-9999
 concPERfiltSERR[i,*,*]=set
endfor

for i=0,max(d(masslist))-1 do begin  ;ng/m3
  factor=masslist[i]
  set=concPERfilt[*,i,*]*factor
  set[where(loadPERfilt[*,i,*] lt -9998.0)]=-9999
  concPERfilt[*,i,*]=set
  set=concPERfiltSERR[*,i,*]*factor
  set[where(loadPERfilt[*,i,*] lt -9998.0)]=-9999
  concPERfiltSERR[*,i,*]=set
endfor


massindex=where(abs(masslist-651.127) lt 0.003)

cols=['black','black','MAGENTA','RED','PURPLE','YELLOW GREEN','DARK GREEN','BLUE','DARK GREEN','YELLOW GREEN','LIME','LIME','RED','CHOCOLATE']
symb=['D','<','D','tu','s','tl','d','p','h','S','o','D','s']
plot1=errorplot(SamplingStart,concPERfilt[*,massindex,1],concPERfiltSERR[*,massindex,1],  dimensions=[1200,700], yrange=[0,max(concPERfilt[*,massindex,*]+concPERfiltSERR[*,massindex,*])],ERRORBAR_linestyle=' ', XTICKFONT_SIZE=12,YTICKFONT_SIZE=12,FONT_SIZE=12, XTITLE="t09", YTITLE="ng/m3", TITLE="Concentration, m/Q: "+strtrim(string(masslist[massindex],format='(F10.3)'),2))
for j=0,6 do plot1=errorplot(SamplingStart,concPERfilt[*,massindex,j],concPERfiltSERR[*,massindex,j], ERRORBAR_THICK=3, XTICKFONT_SIZE=12,YTICKFONT_SIZE=12,FONT_SIZE=12,SYMBOL=symb[j],thick=3, sym_thick=3,sym_size=2,COLOR=cols[j], ERRORBAR_COLOR=cols[j] ,/overplot)

plot1=errorplot(SamplingStart,loadPERfilt[*,massindex,1],loadPERfiltSERR[*,massindex,1],  dimensions=[1200,700], yrange=[0,max(loadPERfilt[*,massindex,*]+loadPERfiltSERR[*,massindex,*])],ERRORBAR_linestyle=' ', XTICKFONT_SIZE=12,YTICKFONT_SIZE=12,FONT_SIZE=12, XTITLE="t09", YTITLE="nmol/cm2", TITLE="Filter loading, m/Q: "+strtrim(string(masslist[massindex],format='(F10.3)'),2))
for j=0,6 do plot1=errorplot(SamplingStart,loadPERfilt[*,massindex,j],loadPERfiltSERR[*,massindex,j], ERRORBAR_THICK=3, XTICKFONT_SIZE=12,YTICKFONT_SIZE=12,FONT_SIZE=12,SYMBOL=symb[j],thick=3, sym_thick=3,sym_size=2,COLOR=cols[j], ERRORBAR_COLOR=cols[j] ,/overplot)

filterORG=[32,34,38,41,52+lindgen(10),63,where(masslist gt 47.0)]

masslistORG=masslist[filterORG]


concPERfiltORG=concPERfilt[*,filterORG,0]
OA_PTR=total(concPERfiltORG,2)/1000 ;in ug/m3
;concPERfiltORG[where(concPERfiltORG eq 0)]=-9999
makecsv, path+'filter/OA_PTR.csv',concPERfiltORG

concPERfiltSERRORG=concPERfiltSERR[*,filterORG,0]
concPERfiltSERRORG=concPERfiltSERRORG*concPERfiltSERRORG
OA_PTRerr=sqrt(total(concPERfiltSERRORG,2))/1000 ;in ug/m3
concPERfiltSERRORG[where(concPERfiltSERRORG eq 0)]=-9999


plot1=errorplot(SamplingStart,OA_PTR,OA_PTRerr,dimensions=[1200,700], XTITLE="t09", YTITLE="microgram per cubic meter", TITLE="Total Concentration (PTR_OA)", ERRORBAR_THICK=3, XTICKFONT_SIZE=12,YTICKFONT_SIZE=12,FONT_SIZE=12,SYMBOL=symb[j],thick=3, sym_thick=3,sym_size=2,COLOR=cols[j], ERRORBAR_COLOR=cols[j] )



  print, 'haha'
end


PRO ____________key_routines
 end



function averaging,data, masslist, engdata, engnames, ind, carryover


  


  indexM=ind.m
  IS=[[ind.s1],[ind.s2],[ind.s3]]
  ISM=[ind.s1M,ind.s2M,ind.s3M]
  FinalDataNames=['tSTRTav','tENDav','tSTRTsamp','tENDsamp','indM','I37/prim', 'I32/prim', 'I30/I32', 'prim_i/med(prim)', 'indS1','indS2','indS3','k-counter','k','# avg',reform(engnames),string(masslist,format='(F9.3)')]
  FinalData=dblarr(1,max(size(FinalDataNames,/dimensions)))
  FinalDataErr=dblarr(1,max(size(FinalDataNames,/dimensions)))

  SAMPstart=fltarr(3)
  SAMPend=fltarr(3)
  SAMPvalue=fltarr(3)
  LastSvalue=fltarr(3)

  if (var_exists(carryover) gt -0.5) then begin
    SAMPstart=Carryover[0:2]
    SAMPend=Carryover[3:5]
    SAMPvalue=Carryover[6:8]
    LastSvalue=Carryover[9:11]
  endif

  timeSTARTsamp=SAMPstart[0]
  timeENDsamp=SAMPend[0]

  counter=0
  lleng=max(size(indexM,/dimensions))
  fil= max(where(abs(indexM[0:lleng-2]-indexM[1:lleng-1]) gt 50)) ;gives indices before change of indexM:  indexM[indices]-indexM[indices+1] >50
  if(fil eq -1)then fil=lleng
  time=double(engdata[*,0])
  
  ; Q/A parameters:
  ; Fracction:   'I37/prim', 'I32/prim', 'I30/I32', 'prim_i/med(prim)',
  I21=data[where(abs(masslist-21.022) eq min(abs(masslist-21.022)) ),*]
  I37=data[where(abs(masslist-37.028) eq min(abs(masslist-37.028)) ),*]
  I38=data[where(abs(masslist-38.033) eq min(abs(masslist-38.033)) ),*]
  I19=I21*487.0/max(corrtr(21,min(time)))
  I37[where(I37 lt I38 *645)]=I38[where(I37 lt I38 *645)]*645
  I37=I37/max(corrtr(37,min(time)))
  Prim=reform(I19+I37)
  if(min(prim) lt 1e-7) then Prim=prim+min(Prim)+1e-7
  I34=data[where(abs(masslist-33.994) eq min(abs(masslist-33.994)) ),*]
  I32=data[where(abs(masslist-31.989) eq min(abs(masslist-31.989)) ),*]
  I32[where(I32 gt 6000)]=I34[where(I32 gt 6000)]*242
  I32=I32/max(corrtr(32,min(time)))
  I30=data[where(abs(masslist-29.997) eq min(abs(masslist-29.997)) ),*]/max(corrtr(30,min(time)))
  
  F37=I37/prim
  F32=I32/prim
  F30=I30/I32
  prStab=prim/median(prim)
 ;END Q/A parameter  
  
  
  avTime=double(ind.T)/(double(24)*double(3600)); in days
  tstart=time[0]
  tend=time[lleng-1]
  step=(tend-tstart)/lleng
  stepSEC=step*(double(24)*double(3600))


  Send10=fltarr(1000,3)
  Send20=fltarr(1000,3)
  Sstrt=fltarr(1000,3)

  for k=0,min([fil+2,lleng-2]) do begin ; for every cycle
    if (indexM[k] eq indexM[k+1] and ((time[k]-tstart)lt avTime)) then counter=counter+1 else begin
      if(counter ge 1) then begin
        timeSTARTav=time[k-counter]
        timeENDav=time[k]
        indM=total(indexM[k-counter:k])/(counter+1)
        QApar=[[total(F37[k-counter:k]),total(F32[k-counter:k]),total(F30[k-counter:k])]/(counter+1),min(prStab[k-counter:k])]
  
        indS=fltarr(3)
        for gg=0,2 do begin
          indxS=reform(IS[*,gg])
          if( total(indxS[k-counter:k])/(counter+1) ne LastSvalue[gg]) then begin
            filti=where(indxS[k-counter:k]-[indxS[k-counter+1:k],indxS[k]] lt 0)
            if(indxS[k-counter] gt  LastSvalue[gg])then SAMPstart[gg]=time[k-counter] else if(max(filti) gt -0.5) then SAMPstart[gg]=time[max(filti+1)]
            filti=where(indxS[k-counter:k]-[indxS[k-counter+1:k],indxS[k]] gt 0)
            if(indxS[k-counter] lt  LastSvalue[gg])then begin
              SAMPend[gg]=time[k-counter]
              SAMPvalue[gg]=LastSvalue[gg]
            endif else if(max(filti) gt -0.5) then begin
              SAMPend[gg]=time[max(filti)]
              SAMPvalue[gg]=max(abs(indxS[k-counter:k]))
            endif
            LastSvalue[gg]=indxS[k]
          endif


          if(indM-ISM[gg] ge 0 and indM-ISM[gg] lt 50 ) then begin
            timeSTARTsamp=SAMPstart[gg]
            timeENDsamp=SAMPend[gg]
            indS[gg]=SAMPvalue[gg]
          endif
        endfor
        subset=[timeSTARTav,timeENDav,timeSTARTsamp,timeENDsamp,indM,QApar,indS,k-counter,k,counter+1,(total(engdata[k-counter:k,*],1))/(counter+1)]
        FinalData=[FinalData,transpose([subset,total(data[*,k-counter:k],2)/(counter+1)])]
        FinalDataErr=[FinalDataErr,transpose([subset,sqrt(stepSEC*total(data[*,k-counter:k],2))/(stepSEC*total(data[*,k-counter:k],2))])]

        last=k
      endif
      counter=0
      tstart=time[k]
    endelse
  endfor
  carryover=[SAMPstart,SAMPend,SAMPvalue,LastSvalue]
  if(var_exists(last) eq -1) then last=-1
  restind=last+1+indgen(lleng-last-1)
  restdata=data[*,restind]
  resteng=engdata[restind,*]
  mmss= d(finaldata)
  if (mmss[0] gt 1) then begin
    finaldata=finaldata[1:*,*]
    finaldataErr=finaldataErr[1:*,*]
  endif
  return, create_struct('names', finaldatanames, 'data', finaldata,'dataErr', finaldataErr,'restdata',restdata,'resteng',resteng,'carryover',carryover)


end


function averaging_old,data, masslist, engdata, engnames, ind, carryover

 indexM=ind.m
 IS=[[ind.s1],[ind.s2],[ind.s3]]
 ISM=[ind.s1M,ind.s2M,ind.s3M]  
 FinalDataNames=['tSTRTav','tENDav','tSTRTsamp','tENDsamp','indM','indS1','indS2','indS3','k-counter','k','# avg',reform(engnames),string(masslist,format='(F9.3)')]
 FinalData=dblarr(1,max(size(FinalDataNames,/dimensions)))    
 FinalDataErr=dblarr(1,max(size(FinalDataNames,/dimensions)))    

 SAMPstart=fltarr(3)
 SAMPend=fltarr(3)
 SAMPvalue=fltarr(3)
 LastSvalue=fltarr(3)
 
 if (var_exists(carryover) gt -0.5) then begin
        SAMPstart=Carryover[0:2]
        SAMPend=Carryover[3:5]
        SAMPvalue=Carryover[6:8] 
        LastSvalue=Carryover[9:11]
 endif 

 timeSTARTsamp=SAMPstart[0]
 timeENDsamp=SAMPend[0]
  
 counter=0
 lleng=max(size(indexM,/dimensions))
 fil= max(where(abs(indexM[0:lleng-2]-indexM[1:lleng-1]) gt 50)) ;gives indices before change of indexM:  indexM[indices]-indexM[indices+1] >50
 if(fil eq -1)then fil=lleng
 time=double(engdata[*,0]) 
 avTime=double(ind.T)/(double(24)*double(3600)); in days   
 tstart=time[0]
 tend=time[lleng-1]
 step=(tend-tstart)/lleng
 stepSEC=step*(double(24)*double(3600))

  
  Send10=fltarr(1000,3)
  Send20=fltarr(1000,3)
  Sstrt=fltarr(1000,3)

  for k=0,min([fil+2,lleng-2]) do begin ; for every cycle
       if (indexM[k] eq indexM[k+1] and ((time[k]-tstart)lt avTime)) then counter=counter+1 else begin
              if(counter ge 1) then begin
                      timeSTARTav=time[k-counter]
                      timeENDav=time[k]
                      indM=total(indexM[k-counter:k])/(counter+1)
                      indS=fltarr(3)
                      for gg=0,2 do begin
                              indxS=reform(IS[*,gg])
                              if( total(indxS[k-counter:k])/(counter+1) ne LastSvalue[gg]) then begin
                                      filti=where(indxS[k-counter:k]-[indxS[k-counter+1:k],indxS[k]] lt 0)
                                      if(indxS[k-counter] gt  LastSvalue[gg])then SAMPstart[gg]=time[k-counter] else if(max(filti) gt -0.5) then SAMPstart[gg]=time[max(filti+1)]
                                      filti=where(indxS[k-counter:k]-[indxS[k-counter+1:k],indxS[k]] gt 0)
                                      if(indxS[k-counter] lt  LastSvalue[gg])then begin 
                                              SAMPend[gg]=time[k-counter] 
                                              SAMPvalue[gg]=LastSvalue[gg]
                                      endif else if(max(filti) gt -0.5) then begin
                                              SAMPend[gg]=time[max(filti)]
                                              SAMPvalue[gg]=max(abs(indxS[k-counter:k]))
                                      endif
                                      LastSvalue[gg]=indxS[k]
                              endif
                     

                              if(indM-ISM[gg] ge 0 and indM-ISM[gg] lt 50 ) then begin
                                      timeSTARTsamp=SAMPstart[gg]
                                      timeENDsamp=SAMPend[gg]
                                      indS[gg]=SAMPvalue[gg]
                              endif
                      endfor
                      subset=[timeSTARTav,timeENDav,timeSTARTsamp,timeENDsamp,indM,indS,k-counter,k,counter+1,(total(engdata[k-counter:k,*],1))/(counter+1)]
                      FinalData=[FinalData,transpose([subset,total(data[*,k-counter:k],2)/(counter+1)])]
                      FinalDataErr=[FinalDataErr,transpose([subset,sqrt(stepSEC*total(data[*,k-counter:k],2))/(stepSEC*total(data[*,k-counter:k],2))])]
                      
                      last=k
              endif
              counter=0
              tstart=time[k]
      endelse
 endfor
 carryover=[SAMPstart,SAMPend,SAMPvalue,LastSvalue]
 if(var_exists(last) eq -1) then last=-1 
 restind=last+1+indgen(lleng-last-1)
 restdata=data[*,restind]
 resteng=engdata[restind,*]
 mmss= d(finaldata)
 if (mmss[0] gt 1) then begin
        finaldata=finaldata[1:*,*]
        finaldataErr=finaldataErr[1:*,*]
 endif
 return, create_struct('names', finaldatanames, 'data', finaldata,'dataErr', finaldataErr,'restdata',restdata,'resteng',resteng,'carryover',carryover)
 
 
end




function Cal3pt, peaklist,a,t0,ex,sampint,lib, mode,instrument

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; 3-point re calibration
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;
   
 
      Flib=-1
      if( mode eq 0) then begin
              Flib=where(2*floor(floor(lib+0.4)/2) ne floor(lib+0.4) or lib lt 50);selects odd masses
              if(max(Flib) gt 0) then lib=lib[Flib] 
      endif else begin
              Flib=where(2*floor(floor(lib+0.4)/2) eq floor(lib+0.4) or lib lt 50);selects odd masses
              if(max(Flib) gt 0) then lib=lib[Flib] 
      endelse

      
   
   
    massesFINE=m2t(peaklist[*,7], a,t0,ex,SampInt,/time)
 a3=a
 t03=t0
 ex3=ex
 
   M1a=max(getpar('M1a'))
   M2a= max(getpar('M2a'))
   M3a= max(getpar('M3a'))
  if(max(getpar('ForceThroughMaSet')) eq 1) then M1b=M1a else  M1b=max( getpar('M1b'))
  if(max(getpar('ForceThroughMaSet')) eq 1) then M2b=M2a else  M2b=max(getpar('M2b'))
  if(max(getpar('ForceThroughMaSet')) eq 1) then M3b=M3a else  M3b= max(getpar('M3b'))
  Mset=[M1a,M2a,M3a]   
  tolli=max(getpar('tol_ppm'))
 
 ions=[getpar('ION1'),getpar('ION2'),getpar('ION3')]
 devs=[getpar('DEV1'),getpar('DEV2'),getpar('DEV3')]
 

   scores=0
   
   Mcal=fltarr(3,8)
   Mcal[0,*]=[M1a,M1a,M1a,M1a,M1b,M1b,M1b,M1b]
   Mcal[1,*]=[M2a,M2a,M2b,M2b,M2a,M2a,M2b,M2b]
   Mcal[2,*]=[M3a,M3b,M3a,M3b,M3a,M3b,M3a,M3b]
   
   
   for r=0,7 do begin
   M1=Mcal[0,r]
  M2=Mcal[1,r]
  M3=Mcal[2,r]
   
    I1=where(abs(massesFINE-M1) lt tolli*M1*1e-6) & I1=(I1[0])
    I2=where(abs(massesFINE-M2) lt tolli*M2*1e-6) & I2=(I2[0])
    I3=where(abs(massesFINE-M3) lt tolli*3*M3*1e-6) & I3=(I3[0])
   
   If( I1 gt -0.5 and I2 gt -0.5 and I3 gt -0.5) then begin
          T1=double(peaklist[I1,7])*SampInt/1e-10
          T2=double(peaklist[I2,7])*SampInt/1e-10
          T3=double(peaklist[I3,7])*SampInt/1e-10
          i=-9000
          ex4=double(0.5+float(i)/30000000)
          Const=double((T3-T1)/(T2-T1))
          diff=abs(((M3^ex4-M1^ex4) /(M2^ex4-M1^ex4))-Const)
          for i=-8999,9000 do begin
                  exi=double(0.5+double(i)/30000000)
                  diffi=abs(((M3^exi-M1^exi) /(M2^exi-M1^exi))-Const)
                  ; print, [exi, diffi]
                  if(diffi lt diff) then begin
                          diff=diffi
                          ex4=double(exi)
                  endif
          endfor
          a4=double((T2-T1)/(M2^ex4-M1^ex4))
          t04=double(T1-a4*M1^ex4)
  
  
  
  
        if(ex4 gt max(getpar('exMin'))and ex4 lt max(getpar('exMax')))then tst=testSCALE(m2t(peaklist[*,7],a4,t04,ex4, SampInt,/time), lib,instrument ,ions,devs ) else tst=create_struct('scorppm',-1)
     
     print, [M1,M2,M3,tst.scorppm]
     
     if(tst.scorppm gt scores) then begin
     scores=tst.scorppm
     ex3=ex4
     t03=t04
     a3=a4
     Mset=[M1,M2,M3]
     
     endif
         
    endif
    endfor
   
   if(max(getpar('ForceThroughMaSet')) eq 1) then begin
    ex3=ex4
    t03=t04
    a3=a4
    endif else begin
    
    
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; variation of 3-point calibration
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
     varset_ppm=[20,9,3]
     if(strpos(instrument,'TOF1000') eq 0) then varset_ppm=varset_ppm*5     
     if (var_exists(mset) gt -0.5) then for s=0,2 do begin
             var_ppm=varset_ppm[s]
             M1=Mset[0]
             d1=M1*var_ppm*1e-6
             M1var=[M1-1.5*d1,M1-0.5*d1,M1+0.5*d1,M1+1.5*d1]
             M1var=[M1var,M1var,M1var,M1var,     M1var,M1var,M1var,M1var,     M1var,M1var,M1var,M1var,     M1var,M1var,M1var,M1var]
            
             M2=Mset[1]
             d2=M2*var_ppm*1e-6
             M2var=[M2-1.5*d2,M2-1.5*d2,M2-1.5*d2,M2-1.5*d2,     M2-0.5*d2,M2-0.5*d2,M2-0.5*d2,M2-0.5*d2,   M2+0.5*d2,M2+0.5*d2,M2+0.5*d2,M2+0.5*d2,   M2+1.5*d2,M2+1.5*d2,M2+1.5*d2,M2+1.5*d2]
             M2var=[M2var,M2var,M2var,M2var]
           
             M3=Mset[2]
             d3=M3*var_ppm*1e-6
             M3var=fltarr(16)+M3
             M3var=[M3var-1.5*d3,M3var-0.5*d3,M3var+0.5*d3,M3var+1.5*d3]
           
              
             for r=0,63 do begin
                  M1=M1var[r]
                  M2=M2var[r]
                  M3=M3var[r]
                  I1=where(abs(massesFINE-M1) lt tolli*M1*1e-6) & I1=(I1[0])
                  I2=where(abs(massesFINE-M2) lt tolli*M2*1e-6) & I2=(I2[0])
                  I3=where(abs(massesFINE-M3) lt tolli*M3*1e-6) & I3=(I3[0])
                  If( I1 gt -0.5 and I2 gt -0.5 and I3 gt -0.5) then begin
                          T1=double(peaklist[I1,7])*SampInt/1e-10
                          T2=double(peaklist[I2,7])*SampInt/1e-10
                          T3=double(peaklist[I3,7])*SampInt/1e-10
                          i=-9000
                          ex4=double(0.5+float(i)/30000000)
                          Const=double((T3-T1)/(T2-T1))
                          diff=abs(((M3^ex4-M1^ex4) /(M2^ex4-M1^ex4))-Const)
                          for i=-8999,9000 do begin
                                  exi=double(0.5+double(i)/30000000)
                                  diffi=abs(((M3^exi-M1^exi) /(M2^exi-M1^exi))-Const)
                                  if(diffi lt diff) then begin
                                          diff=diffi
                                          ex4=double(exi)
                                  endif
                          endfor
                          a4=double((T2-T1)/(M2^ex4-M1^ex4))
                          t04=double(T1-a4*M1^ex4)
                          if( min(abs(m2t(peaklist[*,7],a4,t04,ex4, SampInt,/time)-21.0221)) lt 0.002) then begin ; allow maximum deviations of 2 mDa
                          if(ex4 gt max(getpar('exMin'))and ex4 lt max(getpar('exMax')))then begin
                           tst=testSCALE(m2t(peaklist[*,7],a4,t04,ex4, SampInt,/time), lib, instrument ,ions,devs)
                          print, [0,0,M1,M2,M3,tst.scorppm]
                          if(tst.scorppm gt scores) then begin
                                  scores=tst.scorppm
                                  ex3=ex4
                                  t03=t04
                                  a3=a4
                                  Mset=[M1,M2,M3]
                          endif
                          endif
                          endif
                  endif
             endfor
     endfor
endelse    
    return, create_struct('a',a3,'t0',t03,'ex',ex3,'Mset',Mset)
end




function calcppb, cpsdata, masslist, Prim1data, Prim2data, pdrift, udrift,tdrift,zeit
; calculates volume mixing ratio  
if(max(var_exists(zeit)) lt -0.5) then zeit=0

ppbdata=cpsdata
Prim1=reform(Prim1data) 
Prim2=reform(Prim2data)
pdrift=reform(pdrift)
udrift=reform(udrift)
tdrift=reform(tdrift)


k19=max(getpar('k19')) ;units e-9
k37=max(getpar('k37')) ;units e-9

transe=corrtr(findgen(2000),zeit)



nDim=SIZE(cpsdata, /n_DIMENSIONS)
AnzMass=max(size([masslist],/dimensions))

if (nDim eq 1 and AnzMass eq 1) then  begin
        ppbdata=reform(ppbdata)
        ppbdata=transpose([[ppbdata],[ppbdata]])
endif 

if (nDim eq 1 and AnzMass gt 1) then cyc=1 else if (max(SIZE(ppbdata, /n_DIMENSIONS)) eq 1) then cyc=1 else begin
        Dim=SIZE(ppbdata, /DIMENSIONS)
        Cyc=Dim[1]
endelse

d=max(getpar('reactionlength'))  ;reactionlength in cm
 mu0=max(getpar('reduced_mobility')) ;reduced mobility of H3O+ in N2

 
mu=mu0*(1013.25/pdrift)*(tdrift/273.15) ;[=] cm2/Vs
trxn=d/(((mu * udrift)/d))  ; reaction time in s  
Nmolec=24.63*298*pdrift/(1013.25 *tdrift)


for i=0,AnzMass-1 do begin
        aa=ppbdata[i,*]/transe[floor(masslist[i])]
        bb=Prim1*k19/transe[21]+ Prim2*k37/transe[37]
        cc=trxn*Nmolec
        ppbdata[i,*]=aa/(bb*cc)
endfor

if(nDim eq 1) then ppbdata=ppbdata[0,*]

Return, ppbdata
end

function calcppbold, cpsdata, masslist, Prim1data, Prim2data, pdrift, udrift,tdrift
; calculates volume mixing ratio  

ppbdata=cpsdata
Prim1=reform(Prim1data) 
Prim2=reform(Prim2data)
pdrift=reform(pdrift)
udrift=reform(udrift)
tdrift=reform(tdrift)


k19=max(getpar('k19')) ;units e-9
k37=max(getpar('k37')) ;units e-9





nDim=SIZE(cpsdata, /n_DIMENSIONS)
AnzMass=max(size([masslist],/dimensions))

if (nDim eq 1 and AnzMass eq 1) then  begin
        ppbdata=reform(ppbdata)
        ppbdata=transpose([[ppbdata],[ppbdata]])
endif 

if (nDim eq 1 and AnzMass gt 1) then cyc=1 else if (max(SIZE(ppbdata, /n_DIMENSIONS)) eq 1) then cyc=1 else begin
        Dim=SIZE(ppbdata, /DIMENSIONS)
        Cyc=Dim[1]
endelse

d=max(getpar('reactionlength'))  ;reactionlength in cm
 mu0=max(getpar('reduced_mobility')) ;reduced mobility of H3O+ in N2

 
mu=mu0*(1013.25/pdrift)*(tdrift/273.15) ;[=] cm2/Vs
trxn=d/(((mu * udrift)/d))  ; reaction time in s  
Nmolec=24.63*298*pdrift/(1013.25 *tdrift)


for i=0,AnzMass-1 do begin
ppbdata[i,*]=((ppbdata[i,*]/corrtr(masslist[i]))/(Prim1*k19/corrtr(21)+ Prim2*k37/corrtr(38)))/(trxn*Nmolec)  
endfor

if(nDim eq 1) then ppbdata=ppbdata[0,*]


Return, ppbdata
end


function CalCrude, peaklist,sampint,lib,instrument
;;;;;;;;;;;;;;;;;;;;;;;;;;
   ; Crude/Rough Mass scale calibration  
   ;;;;;;;;;;;;;;;;;;;;;;;;;;  
    a=-9999
    t0=-9999
    meanDev=1000
    nnn=max(getpar('PeaksToConsider'))
     dims=size(peaklist,/dimensions)  
    Top16=peaklist[sort(peaklist[*,6]),*] 
    Top16all=Top16[dims[0]-nnn:dims[0]-1,*]
    Top16=Top16all[*,7]
    tol_crude_low=0.02
    tol_crude_high=0.1
 ;   tol_crude_low=0.2
  ;  tol_crude_high=0.5
  if (strmatch(instrument,'TOF1000') gt 0.5) then  tol_crude_low=0.1
   if (strmatch(instrument,'TOF1000') gt 0.5) then  tol_crude_high=0.3
   crudePairs=[[19.018, 37.028], [29.997, 45.992], [19.018, 29.997], [31.989, 45.992], [19.018, 31.989],[37.028, 59.049]]
    calPairs=  [[21.022, 59.049], [30.994, 47.997], [21.022, 30.994], [33.994, 47.997], [21.022, 33.994],[39.033, 60.052]]
    ; NO  29.997   30.994
    ; NO2  45.992  47.9966
    ; O2  31.989 33.9935

         print, 'MassLow, timeLow, MassHigh, timeHigh, mean deviation, a, t0, adopted'
  ii=0                         
   for i=0,nnn-1 do begin
          timeLow=max(float(Top16[i]))
          for j=0,nnn-1 do begin
                  timeHigh=max(float(Top16[j]))
               
                  if (timeHigh gt timeLow) then for k=0,max(d(crudePairs))-1 do begin
                          massLow=crudePairs[0,k]
                          massHigh=crudePairs[1,k]
                          massLowCal=calPairs[0,k]
                          massHighCal=calPairs[1,k]
                 
                          tt0 = (sqrt(massLow)*timeHigh*(SampInt/1e-10)-sqrt(massHigh)*timeLow*(SampInt/1e-10))/(sqrt(massLow)-sqrt(massHigh))
                          aa = (timeLow*(SampInt/1e-10)-tt0)/sqrt(massLow)
                          masses=m2t(peaklist[*,7],aa,tt0,0.5,SampInt,/time)
                         ; if (k eq 0) then print, [i,j,timelow,timehigh,massLowCal,min(abs(masses-massLowCal)),massHighCal,min(abs(masses-massHighCal)) ]
                        
                          if (min(abs(masses-massLowCal)) lt tol_crude_low and min(abs(masses-massHighCal)) lt tol_crude_high) then begin 
                                 ja=0
                                 limLow=min(abs(masses-massLowCal))
                                 limHigh=min(abs(masses-massHighCal))
                                 i1=sort(abs(masses-massLowCal)) 
                                 timeLowCal=peaklist[i1[0],7]
                                 i2=sort(abs(masses-massHighCal)) 
                                 timeHighCal=peaklist[i2[0],7]
                                 tt0 = max((sqrt(massLowCal)*timeHighCal*(SampInt/1e-10)-sqrt(massHighCal)*timeLowCal*(SampInt/1e-10))/(sqrt(massLowCal)-sqrt(massHighCal)))
                                 aa = max((timeLowCal*(SampInt/1e-10)-tt0)/sqrt(massLowCal))
                                 masses=m2t(peaklist[*,7],aa,tt0,0.5,SampInt,/time)
                                 test=abs(testscale3(masses,lib, instrument))
                                 print,test,massLowCal,  massHighCal, aa,tt0
      ;                           print,''
         if (test lt meanDev) then begin
                             ;    if (test lt meanDev and tt0 gt getpar('t0Min') and tt0 lt getpar('t0Max')and aa gt getpar('aMin') and aa lt getpar('aMax')) then begin
                                        
                                        meanDev=test
                                        a=aa
                                        t0=tt0
                                        ja=2
                                ;      print, [ii,min(abs(masses-massLowCal)),min(abs(masses-massHighCal)) ,massLowCal, timeLow, massHighCal, timeHigh,test,limLow,limHigh, aa,tt0, ja]
                      
                                 endif
                                ii=ii+1
                            endif
                  
                  
                  endfor
          
          endfor
   
   
   endfor
   
   
        print, '____________________________'   
            print, 'mean deviation, a, t0'
            print, [meanDev,a,t0]
            print, '____________________________'              
   
   

return, create_struct('a',a,'t0',t0,'ex',0.5,'Top16',Top16all)
end


function CalFine, peaktimes,lib, a,t0, SampInt, mode,instrument
  analytics=0
rat120=-9999
  ex=0.5
  ;print, 'CalFine results:    scores',max(sco), '  a:',a,'   t0:',t0

  ions=[getpar('ION1'),getpar('ION2'),getpar('ION3')]
  devs=[getpar('DEV1'),getpar('DEV2'),getpar('DEV3')]


  ;for r=0,4 do begin
  for r=0,3 do begin
    ;for r=0,2 do begin
    a_raw=a
    t0_raw=t0
    ex_raw=ex
    for q=-3,3 do begin
      ;mag=[1,3,9,27,80]
      mag=[1,3.5,12,43]
      ;mag=[1,7,49]
      ex1=ex_raw+0.00001*q/mag[r]
      grid=29
      stepa=50.002/(grid*mag[r])
      stept0=500.01/(grid*mag[r])
      if(grid eq 2*floor(grid/2)) then grid=grid+1
      sco=findgen(grid,grid)/1e8
      sco120=findgen(grid,grid)/1e8
      
      for k=-floor(grid/2),floor(grid/2) do if(ex1 gt max(getpar('exMin'))and ex1 lt max(getpar('exMax')))then begin
        
        aa=a_raw+stepa*k
        
        if(analytics  gt 0.5) then print, '      k=',k+floor(grid/2), '     a=', aa,'    t0=',t0-floor(grid/2)*stept0,t0+floor(grid/2)*stept0
        for l=-floor(grid/2),floor(grid/2) do begin
          t00=t0_raw+stept0*l
          tst=testSCALE2(m2t(peaktimes,aa,t00,ex1,SampInt,/time), lib,instrument ,ions,devs)
          sco[k+floor(grid/2),l+floor(grid/2)]=tst.scor
          sco120[k+floor(grid/2),l+floor(grid/2)]=tst.scor120
        endfor
        if(analytics  gt 0.5) then  PRINT, FORMAT='(I,I,I,I,I,I,I,I,I,I,I,I,I,I)',floor(sco[k+floor(grid/2),*])
      endif
      scomist=sco
      maxi=where(scomist eq max(scomist))
      maxi=maxi[0]
      MAXX120=sco120[where(sco120 eq max(sco120))]
      MAXX120=MAXX120[0]
      while(sco120[maxi] lt 0.9*MAXX120) do begin
        scomist[maxi]=0
        maxi=where(scomist eq max(scomist))
        maxi=maxi[0]
      endwhile
      l=floor(maxi/grid)
      k=maxi-grid*l
      a1=max(a_raw+stepa*(k-floor(grid/2)))
      t01=max(t0_raw+stept0*(l-floor(grid/2)))
      old=testSCALE2(m2t(peaktimes,a,t0,ex,SampInt,/time),lib,instrument ,ions,devs)
      new=testSCALE2(m2t(peaktimes,a1,t01,ex1,SampInt,/time), lib,instrument ,ions,devs)
      ;  print,q, a, t0, ex, old.scor
      print, q, a1, t01, ex1, new.scor
      if(new.scor gt old.scor and new.scor120 gt old.scor120*0.9) then begin
     ; if(new.scor+new.scor120 gt old.scor+old.scor120) then begin
        a=a1
        t0=t01
        ex=ex1
        rat120=new.rat120
      endif

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

      if(analytics  gt 0.5) then  begin
        sco[floor(grid/2),floor(grid/2)]=0
        print, 'max',sco[maxi],'k',k,'l',l
        scoS=BYTSCL(sco)
        mist=fltarr(grid*12,grid)
        for i=0,grid-1 do for j=0,11 do mist[i*12+j,*]=scoS[i,*]
        immageARR=fltarr(grid*12,grid*12)
        for i=0,grid-1 do for j=0,11 do immageARR[*,i*12+j]=mist[*,i]
        length=max(size(immageARR,/dimensions))
        legendARR=fltarr(length,50)
        for iii=0,49 do legendARR[*,iii]=max(immageARR)*findgen(length)/length
        immageARR=[immageARR,transpose(legendARR)]
        bottom=fltarr(length+50,50)
        immageARR=[[bottom],[immageARR]]
        for k=-floor(grid/2),floor(grid/2) do begin
          aa=a_raw+stepa*k
          t00=t0_raw+stept0*k
          i=k+floor(grid/2)
          sieb=rotate(drucksieb(string(aa, FORMAT='(F8.2)'),1),1)
          dimsieb=size(sieb,/dimensions)
          dat=immageARR[12*i+2:12*i+2+dimsieb[0]-1,5:5+dimsieb[1]-1]
          dat[where(sieb eq -9999)]=max(immageARR)
          immageARR[12*i+2:12*i+2+dimsieb[0]-1,5:5+dimsieb[1]-1]=dat
          sieb=drucksieb(string(t00, FORMAT='(F7.2)'),1)
          dimsieb=size(sieb,/dimensions)
          dat=immageARR[length-50:length-50+dimsieb[0]-1,52+12*i:52+12*i+dimsieb[1]-1]
          dat[where(sieb eq -9999)]=max(immageARR)
          immageARR[length-50:length-50+dimsieb[0]-1,52+12*i:52+12*i+dimsieb[1]-1]=dat
        endfor
        sieb=drucksieb(string(a1, FORMAT='(F8.2)'),1)
        dimsieb=size(sieb,/dimensions)
        dat=immageARR[5:5+dimsieb[0]-1,76:76+dimsieb[1]-1]
        dat[where(sieb eq -9999)]=max(immageARR)
        immageARR[5:5+dimsieb[0]-1,76:76+dimsieb[1]-1]=dat
        sieb=drucksieb(string(t01, FORMAT='(F7.2)'),1)
        dimsieb=size(sieb,/dimensions)
        dat=immageARR[5:5+dimsieb[0]-1,64:64+dimsieb[1]-1]
        dat[where(sieb eq -9999)]=max(immageARR)
        immageARR[5:5+dimsieb[0]-1,64:64+dimsieb[1]-1]=dat
        sieb=drucksieb(string(ex1, FORMAT='(F8.6)'),1)
        dimsieb=size(sieb,/dimensions)
        dat=immageARR[5:5+dimsieb[0]-1,52:52+dimsieb[1]-1]
        dat[where(sieb eq -9999)]=max(immageARR)
        immageARR[5:5+dimsieb[0]-1,52:52+dimsieb[1]-1]=dat
        sieb=drucksieb(string(max(sco), FORMAT='(F7.3)'),1)
        dimsieb=size(sieb,/dimensions)
        dat=immageARR[5:5+dimsieb[0]-1,94:94+dimsieb[1]-1]
        dat[where(sieb eq -9999)]=max(immageARR)
        immageARR[5:5+dimsieb[0]-1,94:94+dimsieb[1]-1]=dat
        DEVICE, DECOMPOSED = 0
        window,26+q-5*r, xsize = length+50, ysize=length+50
        loadct,20
        tvscl, immageARR
        window,0
      endif
    endfor
  endfor



  s1=create_struct('a',a,'t0',t0,'ex',ex,'rat120',rat120)
  return, s1
end





function CorrPoissDead, TofData,extractions, sampint
dim=size(TofData,/dimensions)
bins=dim[0]
cyc=dim[1]
nedt=floor(getpar('NonExtendingDeadTime')*10*1e-10/sampint)  ;i.e 15 ns, non-extending dead time
edt=floor(getpar('ExtendingDeadTime')*10*1e-10/sampint) ;i.e 1.3, extending dead time
for rr=1,cyc-1 do begin ;loop over cycles
        TofDataCor=TofData[*,rr]
        indx=where(1000*1e-10*TofData[*,rr]/(extractions*sampint) gt 1) ; bei 0.2ns jedes 500ste mal ein count; bei 0.1ns jedes 1000ste mal
        n=max(size(indx,/dimensions))
        for ss=0,n-1 do begin
                Si=TofData[indx[ss],rr]
                r=extractions
                Sj=total(TofData[indx[ss]-nedt+lindgen(nedt-edt),rr])/r
                nj=total(TofDataCor[indx[ss]-edt+lindgen(edt)])/r
                ni=-r*alog(1-(exp(nj)*Si/(r*1-Sj)))
       
       
               
                
                TofDataCor[indx[ss]]=ni
         endfor
        TofData[*,rr]=TofDataCor
 endfor
;print, systime(1)-mistt
return, TofData
end


function corrtr, mass, zeit
  ;the mass transmission of the TOF from m0-m1500...
  mass=float(mass)


    pari=gettr(getInstID(),zeit)
    if(max(d(pari)) eq 5) then begin
      ex=pari[0]
      mLOW=pari[1]
      wLOW=pari[2]
      mHigh=pari[3]
      wHigh=pari[4]
      tran=tr(mass,ex,mLOW,wLOW,mHIGH,wHIGH,/norm)
    endif
    if(max(d(pari)) eq 13) then begin
      tranL=-1
      tranH=-1
      low=where(mass le pari[7])
      if(max(low) gt -0.5) then tranL=pari[6]+pari[5]*mass[low]+pari[4]*mass[low]^2+pari[3]*mass[low]^3+pari[2]*mass[low]^4+pari[1]*mass[low]^5+pari[0]*mass[low]^6
      high=where(mass gt pari[7])
      if(max(high) gt -0.5) then tranH=pari[12]+pari[11]*mass[high]+pari[10]*mass[high]^2+pari[9]*mass[high]^3+pari[8]*mass[high]^4
      tran=[tranL,tranH]
      tran=tran[where(tran ne -1)]
    endif
  

  return,tran
end

function corrtr_untilDEC2020, mass, zeit
;the mass transmission of the TOF from m0-m1500...
mass=float(mass)
if(strpos(getstr('UniqueCampaignName'),'default') gt -0.5) then begin
tran=max(getpar('P0'))+max(getpar('P1'))*mass+max(getpar('P2'))*mass^2+max(getpar('P3'))*mass^3+max(getpar('P4'))*mass^4+max(getpar('P5'))*mass^5+max(getpar('P6'))*mass^6
endif else begin
  
 pari=gettr(getstr('UniqueCampaignName'),zeit) 
 if(max(d(pari)) eq 5) then begin
 ex=pari[0]
 mLOW=pari[1]
 wLOW=pari[2]
 mHigh=pari[3]
 wHigh=pari[4]
 tran=tr(mass,ex,mLOW,wLOW,mHIGH,wHIGH,/norm)
 endif
 if(max(d(pari)) eq 13) then begin
  tranL=-1
  tranH=-1
 low=where(mass le pari[7])
  if(max(low) gt -0.5) then tranL=pari[6]+pari[5]*mass[low]+pari[4]*mass[low]^2+pari[3]*mass[low]^3+pari[2]*mass[low]^4+pari[1]*mass[low]^5+pari[0]*mass[low]^6
  high=where(mass gt pari[7])
  if(max(high) gt -0.5) then tranH=pari[12]+pari[11]*mass[high]+pari[10]*mass[high]^2+pari[9]*mass[high]^3+pari[8]*mass[high]^4
 tran=[tranL,tranH]
 tran=tran[where(tran ne -1)]
 endif
endelse  

return,tran
end

function corrtr_new, mass
  ;the mass transmission of the TOF from m0-m1500...
  mass=float(mass)
; tr=tr(mass,0.73,19.5,7.5,253,30,/norm) ;VSL standard
 ; tr=tr(mass,0.6,17,3.5,599.5,299,/norm) ;Orleans campaign May 2019
  tr=tr(mass,0.6,0,0,599.5,299,/norm) ;Sonnblick campaign Aug 2019
   return,tr
end

function tr, mass,ex,  MASSlow,WIDTHlow,MASShigh,WIDTHhigh,norm=norm
;the mass transmission of the TOF from m0-m1500...
mass=float(mass)
MASSlow=float(MASSlow)
WIDTHlow=float(WIDTHlow)
MASShigh=float(MASShigh)
WIDTHhigh=float(WIDTHhigh)
if (WIDTHlow lt 0) then offset=1 else offset=0
tr=      mass^ex *(offset+1.0/(1.0+exp(-(mass-MASSlow)/WIDTHlow)))  *  (1.0/(1.0+exp((mass-MASShigh)/WIDTHhigh)))
if (keyword_set(norm)) then tr=tr/(59^ex *(offset+1.0/(1.0+exp(-(59-MASSlow)/WIDTHlow)))   *  (1.0/(1.0+exp((59-MASShigh)/WIDTHhigh))))

return,tr
end


function DetectPeaks, SumSpectrum, a,t0,ex,SampInt,instrument,clean=clean
  compile_opt idl2
  if (keyword_set(clean)) then cln=1 else cln=0
  
  
  smoo=SmoothSumSpec(SumSpectrum, a,t0,ex,SampInt,instrument)
  data2=smoo.data
  derivData=smoo.derivData
  data3=deriv(derivData)
  Npts=smoo.Npts
  
  
  x=lindgen(max(Npts)-1)
  start=max([floor(m2t(getpar('Min_Mass'),a,t0,ex,SampInt)),1000])
  ende= max(Npts)-1
  peaklist=fltarr(20000,9)
  PeakCount=0
  i=1L+start+200
  RunNum=0
  while (i LT ende-1000) do begin
          munit=floor(i-m2t(m2t(i,a,t0,ex,SampInt,/time)-1,a,t0,ex,SampInt,/mass)) ;TOF bins per mass unit
          step=max([1,floor(munit/15)])
          per1=derivData[max([0,(i-munit)]):i]
          f1=SumSpectrum[max([0,(i-munit)]):i]
          per2=derivData[i:min([ende,(i+munit)])]
          f2=SumSpectrum[i:min([ende,(i+munit)])]
          if(max(where(f1 ne 0)) gt -0.5) then threshA=median(abs(per1[where(f1 ne 0)])) else threshA=0
          if(max(where(f2 ne 0)) gt -0.5) then threshB=median(abs(per2[where(f2 ne 0)])) else threshB=0
          thresh=min([threshA,threshB])*6
       ;   thresh=min([median(abs(derivData[(i-munit):i])),median(abs(derivData[i:(i+munit)]))])*6; 6 times the median slope (of smoothed spectrum) in the neighborhood
          i=i+step
          condi=0
          if(max(derivData[i:i+step-1]) GT thresh)then condi=1 
          if(condi GT 0.5) then begin
                  RunNum=RunNum+1
                  di=0
                  while (derivData[i+di] LT thresh) do begin
                          IF (di eq step) THEN BREAK 
                          di=di+1 
                  endwhile
                  i=i+di
                  ipeakstart=i ;peak emerges above noise (thresh or thresh2)
                  islopemax=i      ; position of steepest slope (max of deriv)
                  ipeakmax=0L     ; peak maximum (deriv from pos to neg)
                  threshneg=0
                  islopemin=0
                  ipeakend=0
                  j=0
                  while(ipeakend eq 0) do begin
                          j=j+1
                          if(ipeakmax EQ 0) then if(derivData[i+j] GT derivData[islopemax]) then islopemax=i+j
                          if(ipeakmax EQ 0) then if(derivData[i+j] LT 0) then ipeakmax=i+j-1
                          if(ipeakmax GT 1) then if(islopemin EQ 0) then if(derivData[i+j] LT 0) then  islopemin=i+j
                          if(islopemin GT 1) then  if(derivData[i+j] LT derivData[islopemin]) then  islopemin=i+j
                          if(islopemin GT 1) then if(derivData[i+j] GT 0) then ipeakend=i+j
                  endwhile 
                  peakbroadness=m2t(ipeakmax,a,t0,ex,SampInt,/time)/(m2t(ipeakend,a,t0,ex,SampInt,/time)-m2t(ipeakstart,a,t0,ex,SampInt,/time))
                  slopemax=derivData[islopemax]
                  slopemin=derivData[islopemin]
                  countsmax=Data2[ipeakmax]
                  der2=Data3[ipeakmax]
                  
                  countsmin=min(Data2[ipeakstart:ipeakend])
                  if (cln eq 1) then begin               
                          ddd=Data2[max([0,(ipeakmax-floor(munit/2))]):(ipeakmax+floor(munit/2))]
                          eee=Data3[max([0,(ipeakmax-floor(munit/2))]):(ipeakmax+floor(munit/2))]
                          thresh3=min(eee)/5
                          thresh3=min(eee)/7
     if(max(where(ddd gt 0)) gt -0.5) then thresh2=median(ddd[where(ddd gt 0)]) else thresh2=0
                       
                         ; thresh2=median(ddd)
                          SD1=stddev(ddd[where(ddd lt thresh2)])
                          good=0
                          if(peakbroadness gt 20) then if(peakbroadness lt 10000) then  good=1
                          if( good eq 1) then if(countsmax lt thresh2+8*SD1) then good=0
                        
                        
                         if( good eq 1) then if(der2 gt thresh3) then good=0
                         
                         print, [peakcount, good, m2t(ipeakmax,a,t0,ex,SampInt,/time)] 
                          if(good eq 1) then begin
                                  peaklist[peakcount,0]=m2t(ipeakmax,a,t0,ex,SampInt,/time) 
                                  peaklist[peakcount,1]=ipeakstart
                                  peaklist[peakcount,2]=ipeakend
                                  peaklist[peakcount,3]=peakbroadness
                                  peaklist[peakcount,4]=slopemax
                                  peaklist[peakcount,5]=slopemin
                                  peaklist[peakcount,6]=countsmax
                                  peaklist[peakcount,7]=ipeakmax ;timebin
                                  peaklist[peakcount,8]=countsmin
                                  PeakCount=PeakCount+1
                                  i=ipeakend-step+1
                          endif else if(ipeakmax gt 1) then i=ipeakmax-step+1
                  
                        ; print,[ good,m2t(ipeakmax,a,t0,ex,SampInt,/time), Thresh2, SD1,Thresh2+8* SD1,countsmax,20, peakbroadness,10000 ]
                        
                      ;   print, 'mass  |  TOF-bin  |   Bin-signal   | Good?   |  Broadness   | (countsmax-thresh2)/SD1'
                     ;    print, [m2t(i,a,t0,ex,SampInt,/time),ipeakmax,countsmax, good,peakbroadness, (countsmax-thresh2)/SD1]
                  endif else begin
                          peaklist[peakcount,0]=m2t(ipeakmax,a,t0,ex,SampInt,/time) 
                          peaklist[peakcount,1]=ipeakstart
                          peaklist[peakcount,2]=ipeakend
                          peaklist[peakcount,3]=peakbroadness
                          peaklist[peakcount,4]=slopemax
                          peaklist[peakcount,5]=slopemin
                          peaklist[peakcount,6]=countsmax
                          peaklist[peakcount,7]=ipeakmax ;timebin
                          peaklist[peakcount,8]=countsmin
                          PeakCount=PeakCount+1
                          i=ipeakend-step+1
                  endelse
          endif
  endwhile
  peaklist=peaklist[0:PeakCount-1,*]
  return,peaklist
end


function index, ppbdata,masses2, engnms, entdt, indexfile

   IndexPAR=ReadIndexFile(IndexFile) 
 

  engnms=strtrim(engnms,2)
  INDM=long(entdt[*,0]-entdt[*,0]) 
  INDS1=long(entdt[*,0]-entdt[*,0]) 
  INDS2=long(entdt[*,0]-entdt[*,0]) 
  INDS3=long(entdt[*,0]-entdt[*,0]) 
  INDS1M=0
  INDS2M=0
  INDS3M=0
  

  Dind=IndexPAR.VECTORIND
  if (max(str2vec(Dind[0])) eq -9999) then begin
        ;  time=entdt[*,where(engnms eq 'JulianDate')]
         ; step=(max(time)-min(time))/10
         ; for i=10,1,-1 do INDM[where(time le min(time)+step*i)]=100*i
          INDM=INDM+300
          if(strpos(strjoin(tag_names(indexpar),/single),'INTERVAL') gt -0.5) then MaxAvTime=STR2VEC(IndexPAR.INTERVAL)else MaxAvTime=-9999
  endif else begin
          OPCO=IndexPAR.CONDIND
          VAL=IndexPAR.VALUEIND
          IVAL=IndexPAR.IFIND
          IDEF=IndexPAR.ELSEIND
          MaxAvTime=STR2VEC(IndexPAR.INTERVAL)
          ; construct INDM  
          for  i=0,9 do begin
                  if(max(str2vec(OPCO[i])) gt 0.5 and max(str2vec(OPCO[i])) lt 5.5) then begin
                          indi=str2vec(Dind[i])
                          n=max(size(indi,/dimensions))
                          if (max(indi[0])*10000-floor(max(indi[0]))*10000 gt 0) then begin
                                  data=ppbdata[where(abs(masses2-max(indi[0])) lt 0.001),*] 
                                  if(n gt 1) then for j=1,n-1 do data=data+ppbdata[where(abs(masses2-max(indi[j])) lt 0.001),*] 
                          endif else begin
                                  data=entdt[*,indi[0]]
                                  if(n gt 1) then for j=1,n-1 do data=data+entdt[*,indi[j]]
                          endelse
                          
                          if(max(indi) eq 0 and n eq 1) then begin
                                sttrt=getpar('StartExperiment')
                                perr=getpar('PeriodExperiment')
                                data=(data-sttrt)*24*60
                                if(min(data) gt perr) then data=data-floor(min(data)/perr)*perr
                                for ww=0,ceil(max(data)/perr) do data[where(data gt perr)]=data[where(data gt perr)]-perr
                          endif
                        
                         ; ppbdata,masses2,
                          if (str2vec(idef[i]) ne -9999) then indM[*]=str2vec(idef[i])
                          if(max(str2vec(OPCO[i])) eq 1 ) then filter=where(data lt max(str2vec(VAL[i])))
                          if(max(str2vec(OPCO[i])) eq 2 ) then filter=where(data eq max(str2vec(VAL[i])))
                          if(max(str2vec(OPCO[i])) eq 3 ) then filter=where(data gt max(str2vec(VAL[i])))
                          if(max(str2vec(OPCO[i])) eq 4 ) then filter=where(data eq n*max(str2vec(VAL[i])))
                          if(max(str2vec(OPCO[i])) eq 5 ) then filter=where(data ge max(str2vec(VAL[i])))
     nn=max(size(filter,/dimensions))
     tol=9
     if(nn gt tol and max(indi[0])*10000-floor(max(indi[0]))*10000 gt 0) then begin
            if(filter[0+tol] gt filter[0]+tol+1) then filter[0]=-1 
            for zz=0,nn-1 do begin
                    if(filter[min([zz+tol,nn-1])] gt filter[zz]+tol+1) then if  ( filter[max([0,zz-tol])] lt filter[zz]-tol-1) then filter[zz]=-1                 
            endfor
            if  ( filter[nn-1-tol] lt filter[nn-1]-tol-1) then filter[nn-1]=-1
            filter=filter[where(filter gt -0.5)]  
           filter=[filter,filter[where(([0,filter]-[filter,0])+1 eq -1)]-1,filter[where(([0,filter]-[filter,0])+1 eq -2)]-1,filter[where(([0,filter]-[filter,0])+1 eq -2)]-2]
     endif                  
                          if(max(filter) gt -0.5) then indM[filter]=str2vec(IVAL[i])
                   endif
                   if(max(str2vec(OPCO[i])) gt 5.5 and max(str2vec(OPCO[i])) lt 8.5) then begin
                          indi=str2vec(Dind[i])
                          data=entdt[*,indi[0]]
                          n=max(size(indi,/dimensions))
                          if(n gt 2) then  for j=1,n-2 do  data=data+entdt[*,indi[j]]
                          if(max(str2vec(OPCO[i])) lt 7.5 ) then if(n ge 2) then data=data+abs(entdt[*,indi[n-1]]-1)
                          if(max(str2vec(OPCO[i])) eq 8 ) then if(n ge 2) then data=data-entdt[*,indi[n-1]]
                          if (str2vec(idef[i]) ne -9999) then indM[*]=str2vec(idef[i])
                          if(max(str2vec(OPCO[i])) eq 6 ) then filter=where(data eq n*max(str2vec(VAL[i])))
                          if(max(str2vec(OPCO[i])) eq 7 ) then filter=where(data ge max(str2vec(VAL[i])))
                          if(max(str2vec(OPCO[i])) eq 8 ) then filter=where(data gt max(str2vec(VAL[i])))
                          if(max(filter) gt -0.5) then indM[filter]=str2vec(IVAL[i])
                   endif
           endfor 
           ;hardcopy to INDM  
           ;print, indm 
           INDVALUE=IndexPAR.INDVALUE
           VALUES2ADD=IndexPAR.VALUES2ADD
           length=max(size(indM,/dimensions))
           for i=0,3 do begin
                  INDVAL2=max(str2vec(INDVALUE[i]))
                  if(INDVAL2 ne -9999) then begin
                          VALUES2ADD2=str2vec(VALUES2ADD[i])
                          if(max(VALUES2ADD2[0]) eq -1) then begin
                                  VALUES2ADD2=VALUES2ADD2[1:*]
                                  for xxx=0,6 do VALUES2ADD2=[VALUES2ADD2,VALUES2ADD2]
                          endif
                          if( max(d(VALUES2ADD2)) eq 1) then begin
                           add=entdt[*,indi[0]]
                           indM[where(indM eq INDVAL2)]=indM[where(indM eq INDVAL2)]+add[where(indM eq INDVAL2)]
                           filli=where(abs([0,indM]-[indM,0]) gt 0)
                           filli2=where(abs(indM[filli]-INDVAL2) lt 50)
                           if(max(filli2) gt -0.5) then filli=filli[where(abs(indM[filli]-INDVAL2) lt 50)]
                           if(max(filli2) gt -0.5) then indM[filli]=INDVAL2
                          endif else begin
                          indstart=where(indM[1:length-1] eq INDVAL2 and indM[0:length-2]-indM[1:length-1] ne 0)
                          if(max(indstart) gt -0.5 or indM[0] eq INDVAL2) then begin
                                  if (max(indstart) eq -1) then indstart=fltarr(1)+1 else indstart=indstart+1
                                  indend=where(indM eq INDVAL2  and indM[0:length-2]-indM[1:length-1] ne 0) 
                                  if(max(indend) gt -1) then if(indstart[0] gt indend[0]) then indstart=[0,indstart]
                                  if(max(indend) gt -1) then if(indstart[max(size(indstart,/dimensions))-1] gt indend[max(size(indend,/dimensions))-1]) then indend=[indend,length-1]
                                  if(max(indend) eq -1) then  if(max(indstart) gt -1) then indend=length-1
                                  add=[VALUES2ADD2,intarr(900)]
                                  indM[indstart[0]+lindgen(1+indend[0]-indstart[0])]=indM[indstart[0]+lindgen(1+indend[0]-indstart[0])]+add[lindgen(1+indend[0]-indstart[0])]
                                  for r=1,max(size(indstart,/dimensions))-1 do indM[indstart[r]+lindgen(1+indend[r]-indstart[r])]=indM[indstart[r]+lindgen(1+indend[r]-indstart[r])]+add[lindgen(1+indend[r]-indstart[r])]
                          endif
                          endelse
                  endif           
          endfor  
          ; construct INDS  
      for  i=10,15 do begin
          if(max(str2vec(OPCO[i])) gt 0.5 and max(str2vec(OPCO[i])) lt 5.5) then begin
                  indi=str2vec(Dind[i])
                  data=entdt[*,indi[0]]
                  n=max(size(indi,/dimensions))
                  if(n gt 1) then for j=1,n-1 do data=data+entdt[*,indi[j]]
                  case i of
                          10:if (str2vec(idef[i]) ne -9999) then indS1M=str2vec(idef[i])
                          11:haha=1
                          12:if (str2vec(idef[i]) ne -9999) then indS2M=str2vec(idef[i])
                          13:
                          14:if (str2vec(idef[i]) ne -9999) then indS3M=str2vec(idef[i])
                          15:
                  endcase
                  if(max(str2vec(OPCO[i])) eq 1 ) then filter=where(data lt max(str2vec(VAL[i])))
                  if(max(str2vec(OPCO[i])) eq 2 ) then filter=where(data eq max(str2vec(VAL[i])))
                  if(max(str2vec(OPCO[i])) eq 3 ) then filter=where(data gt max(str2vec(VAL[i])))
                  if(max(str2vec(OPCO[i])) eq 4 ) then filter=where(data eq n*max(str2vec(VAL[i])))
                  if(max(str2vec(OPCO[i])) eq 5 ) then filter=where(data ge max(str2vec(VAL[i])))
                  case i of
                          10:if(max(filter) gt -0.5) then indS1[filter]=str2vec(IVAL[i])
                          11:if(max(filter) gt -0.5) then indS1[filter]=str2vec(IVAL[i])
                          12:if(max(filter) gt -0.5) then indS2[filter]=str2vec(IVAL[i])
                          13:if(max(filter) gt -0.5) then indS2[filter]=str2vec(IVAL[i])
                          14:if(max(filter) gt -0.5) then indS3[filter]=str2vec(IVAL[i])
                          15:if(max(filter) gt -0.5) then indS3[filter]=str2vec(IVAL[i])
                  endcase
          endif
          if(max(str2vec(OPCO[i])) gt 5.5 and max(str2vec(OPCO[i])) lt 8.5) then begin
                  indi=str2vec(Dind[i])
                  data=entdt[*,indi[0]]
                  n=max(size(indi,/dimensions))
                  if(n gt 2) then  for j=1,n-2 do  data=data+entdt[*,indi[j]]
                  if(max(str2vec(OPCO[i])) lt 7.5 ) then if(n ge 2) then data=data+abs(entdt[*,indi[n-1]]-1)
                  if(max(str2vec(OPCO[i])) eq 8 ) then if(n ge 2) then data=data-entdt[*,indi[n-1]]
                  case i of
                          10:if (str2vec(idef[i]) ne -9999) then indS1M=str2vec(idef[i])
                          11:
                          12:if (str2vec(idef[i]) ne -9999) then indS2M=str2vec(idef[i])
                          13:
                          14:if (str2vec(idef[i]) ne -9999) then indS3M=str2vec(idef[i])
                          15:
                  endcase
                  if(max(str2vec(OPCO[i])) eq 6 ) then filter=where(data eq n*max(str2vec(VAL[i])))
                  if(max(str2vec(OPCO[i])) eq 7 ) then filter=where(data ge max(str2vec(VAL[i])))
                  if(max(str2vec(OPCO[i])) eq 8 ) then filter=where(data gt max(str2vec(VAL[i])))
                  case i of
                          10:if(max(filter) gt -0.5) then indS1[filter]=str2vec(IVAL[i])
                          11:if(max(filter) gt -0.5) then indS1[filter]=str2vec(IVAL[i])
                          12:if(max(filter) gt -0.5) then indS2[filter]=str2vec(IVAL[i])
                          13:if(max(filter) gt -0.5) then indS2[filter]=str2vec(IVAL[i])
                          14:if(max(filter) gt -0.5) then indS3[filter]=str2vec(IVAL[i])
                          15:if(max(filter) gt -0.5) then indS3[filter]=str2vec(IVAL[i])
                  endcase
          endif
      endfor   
  endelse   
  s1=CREATE_STRUCT('m',indm,'s1',indS1,'s2',indS2,'s3',indS3,'s1M',indS1M,'s2M',indS2M,'s3M',indS3M,'T',MaxAvTime)

return, S1
end


 function DeDrift , data,a,t0, SampInt,rest,maxis,t1start,t2start,m1,m2, n_junks,cur_junk

developing=0

   smoothy=9
   smoothyhalf=round(float(smoothy-1)/2)
if (max(rest) ne -9999) then data=[[rest],[data]]


dims=d(data)
summi=total(data,2)
split=[0,round(m2t([40,100,250],a,t0,0.5, SampInt)),dims[0]]
 
maxarr=fltarr(dims[1],100)
maxarrval=fltarr(dims[1],100)
array=fltarr(13,100)
for spl=0,3 do begin
        indx=lindgen(split[spl+1]-split[spl])+split[spl]
        if(max(where(indx eq round(t1start) or indx eq round(t2start))) gt -0.5 or t1start eq -9999) then begin
        dat2=data[indx,*]
        dat3=data[indx,smoothyhalf]
      for j=0,9 do begin ;track the timebin-shift of the 200 largest peaks
               
                maxbin=where(dat3 eq max(dat3)) &  maxbin=maxbin[0];timebin with highest signal in cycle "smoothyhalf"
                dat3[lindgen(100)+max(maxbin[0]-50)]=0 ; set +/- 50 timbins around highest signal to zero 0
        
        if (t1start ne -9999) then begin
          while( min([abs(maxbin+split[spl]-t1start),abs(maxbin+split[spl]-t2start)]) gt 25) do begin
            maxbin=where(dat3 eq max(dat3)) &  maxbin=maxbin[0];timebin with highest signal in cycle "smoothyhalf"
            dat3[lindgen(100)+max(maxbin[0]-50)]=0 ; set +/- 50 timbins around highest signal to zero 0
         endwhile
        j=9
        endif
        
        
                if(min([abs(maxbin+split[spl]-t1start),abs(maxbin+split[spl]-t2start)]) lt 25 or t1start eq -9999) then begin
                  cyc_dat=dat2[*,0]
                  segment=cyc_dat[lindgen(100)+max(maxbin[0]-50)]
                  dat2[lindgen(100)+max(maxbin[0]-50),0]=0 ; set +/- 50 timbins around highest signal to zero 0

                
                
                maxval=max(cyc_dat[maxbin]) ;value of highest signal in cycle 0
                ttest=tm_test(segment[[47,48,49,51,52,53]],segment[[0,1,2,97,98,99]])
                r=gaussfit(indgen(100)-50,segment,coeff, chisq=fff, yerror=ggg,sigma=hhh,nterms=4)
                xival=fff/maxval
                yerrval=ggg/maxval
                A1val=hhh[1]/coeff[1]
                A2val=hhh[2]/coeff[2]
                pval=ttest[1]
                ppval=ttest[0]
                maxbin=maxbin+split[spl]
                if(developing eq 1) then !P.MULTI = [0,1,3]
                if(developing eq 1) then plot, segment
                for i=1,dims[1]-1 do   begin ;loop over cycles: track the maximum of the same peak over all cycles
                        cyc_dat=dat2[*,i]
                        segment=cyc_dat[lindgen(100)+max(maxbin[i-1]-split[spl]-50)] 
                        if(developing eq 1) then oplot, segment, color=i-255
                        addi=where(segment eq max(segment))
                        addi=addi[where(abs(addi-50) eq min(abs(addi-50)))] ; if more than 1 max in segment, select the one closest to 50
                        if(max(segment) le 0) then addi=50
                        maxi=maxbin[i-1]-split[spl]-50+addi[0]
                        dat2[lindgen(100)+max(maxi[0]-50),i]=0
                        vali=max(cyc_dat[maxi[0]])
                        ttest=tm_test(segment[[47,48,49,51,52,53]],segment[[0,1,2,97,98,99]])
                        pval=[pval,ttest[1]]
                        ppval=[ppval,ttest[0]]
                         r=gaussfit(indgen(100)-50,segment,coeff, chisq=fff, yerror=ggg,sigma=hhh,nterms=4)
                        xival=[xival,fff/vali]
                        yerrval=[yerrval,ggg/vali]
                        A1val=[A1val,hhh[1]/coeff[1]]
                        A2val=[A2val,hhh[2]/coeff[2]]
                        maxbin=[maxbin,maxi+split[spl]]
                        maxval=[maxval,vali]
                endfor
               
                 if(developing eq 1) then plot, maxbin,yrange=range(maxbin)
                 if(developing eq 1) then plot, maxval,yrange=range(maxval)
                array[*,j+spl*10]= [j+spl*10, d(maxbin),mean(maxbin),1000.0*stddev(maxbin)/mean(maxbin),mean(maxval), max(a1val),max(a2val),100*max(pval),min(ppval),100.0*quantile(yerrval,[0.9]),quantile(xival,[0.8,0.9]),median(maxval)]
                maxarr[*,j+spl*10]=maxbin
                maxarrval[*,j+spl*10]=maxval
                endif
        endfor
        endif
endfor

array=array[*,0:39]
array[where(array eq 0)]=9999
 if(developing eq 1) then print, array

;select good peaks 1: remove peaks that drift into negative
filt=where(array[7,*] lt 5 and array[11,*] lt 10)
if (cur_junk ne 1) then begin
  filt=where(array[7,*] lt 9998)
  if(array[7,filt[0]] gt 5) then print, 'LOW PEAK may be lost, p_value: '+strtrim(string(array[7,filt[0]],format='(I4)'),2)+' %'
  if(array[7,filt[1]] gt 5) then print, 'High PEAK may be lost, p_value: '+strtrim(string(array[7,filt[1]],format='(I4)'),2)+' %'
  if(array[11,filt[0]] gt 10) then print, 'LOW PEAK SHAPE warning, value: '+strtrim(string(array[11,filt[0]],format='(I4)'),2)+' %'
  if(array[11,filt[1]] gt 10) then print, 'HIGH PEAK SHAPE warning, value: '+strtrim(string(array[11,filt[1]],format='(I4)'),2)+' %'
endif


array=array[*,filt]
maxarr=maxarr[*,filt]
maxarrval=maxarrval[*,filt]

if(developing eq 1) then begin
x=(maxarr[*,0]-median(maxarr[*,0]))*100+median(maxarr[*,0])
plot1=plot( x, indgen(900),dimensions=[1600,500],xrange=[0,50000])
plot1=plot( smooth(x,9), indgen(900),color='red',thick=3,/overplot)
for j=1,max(d(filt))-1 do  begin
  x=(maxarr[*,j]-median(maxarr[*,j]))*100+median(maxarr[*,j])
  plot1=plot(x,indgen(900),/overplot)
  plot1=plot( smooth(x,9), indgen(900),color='red',thick=3,/overplot)
endfor
endif






meanTbin=mean(maxarr,dimension=1)

T1vec=maxarr[*,where(meanTbin eq min(meanTbin))]
T2vec=maxarr[*,where(meanTbin eq max(meanTbin))]

x=(T1vec-median(T1vec))*100+median(T1vec)
plot1=plot(x,indgen(900),/overplot)
plot1=plot( smooth(x,9), indgen(900),color='blue',thick=3,/overplot)

x=(T2vec-median(T2vec))*100+median(T2vec)
plot1=plot(x,indgen(900),/overplot)
plot1=plot( smooth(x,9), indgen(900),color='green',thick=3,/overplot)






i=max(d(t1vec))-smoothyhalf-1
rest=data[*,indgen(smoothy)+i-smoothyhalf]
t1start=t1vec[i]
t2start=t2vec[i]

 if(developing eq 1) then !P.MULTI = [0,2,1]
 if(developing eq 1) then plot, t1vec,indgen(max(d(t2vec)))
 if(developing eq 1) then oplot, smooth(t1vec,smoothy),indgen(max(d(t2vec))),color=200,thick=3
 if(developing eq 1) then plot, t2vec,indgen(max(d(t2vec)))
 if(developing eq 1) then oplot, smooth(t2vec,smoothy),indgen(max(d(t2vec))),color=200,thick=3

t1vecR=t1vec
t2vecR=t2vec
t1vec=smooth(t1vec,smoothy,/edge_mirror)
t2vec=smooth(t2vec,smoothy,/edge_mirror)


if (cur_junk eq 1) then begin
 m1=m2t(t1vec[0],a,t0,0.5, SampInt,/time)
m2=m2t(t2vec[0],a,t0,0.5, SampInt,/time)
ai=(t2vec[0]*Sampint/1e-10-t1vec[0]*Sampint/1e-10)/(sqrt(m2)-sqrt(m1))
t0i=t1vec[0]*Sampint/1e-10 - sqrt(m1)*ai
 if(developing eq 1) then print,[m1,m2,ai,t0i]

m1=m2t(t1vec[0],ai,t0i,0.5, SampInt,/time)
m2=m2t(t2vec[0],ai,t0i,0.5, SampInt,/time)
a=(t2vec[0]*Sampint/1e-10-t1vec[0]*Sampint/1e-10)/(sqrt(m2)-sqrt(m1))
t0=t1vec[0]*Sampint/1e-10 - sqrt(m1)*ai
 if(developing eq 1) then print,[m1,m2,ai,t0i]
maxis=m2t(lindgen(dims[0]),a,t0,0.5, SampInt,/time)
endif









 if(developing eq 1) then !P.MULTI = [0,1,3]
 if(developing eq 1) then for i=smoothyhalf,max(d(t1vec))-1-smoothyhalf do  if (i eq 0) then plot,data[25000:30000,i] else oplot,data[25000:30000,i], color=-200
;t2vec[1]=t2vec[0]

;n_junks,cur_junk

if (cur_junk eq 1) then ssttrrtt=0 else ssttrrtt=smoothyhalf
if (cur_junk eq n_junks) then eenndd=max(d(t1vec))-1 else eenndd=max(d(t1vec))-2-smoothyhalf


for i=ssttrrtt,eenndd do begin
  ai=(t2vec[i]*Sampint/1e-10-t1vec[i]*Sampint/1e-10)/(sqrt(m2)-sqrt(m1))
  t0i=t1vec[i]*Sampint/1e-10 - sqrt(m1)*ai
   if (i eq ssttrrtt) then avec=ai else avec=[avec,ai]
   if (i eq ssttrrtt) then t0vec=t0i else t0vec=[t0vec,t0i]
  maxisi=m2t(lindgen(dims[0]),ai,t0i,0.5, SampInt,/time)
  sumspecCORRi=interpol(data[*,i],maxisi,maxis)
  data[*,i]=sumspecCORRi
  if(developing eq 1) then  if (i eq smoothyhalf) then plot,sumspecCORRi[25000:30000] else oplot,sumspecCORRi[25000:30000], color=200
 if (i eq ssttrrtt) then sumspecCORR=sumspecCORRi else sumspecCORR=sumspecCORR+sumspecCORRi

 if(developing eq 1) then print, range(sumspecCORRi)
endfor

if (cur_junk eq 1 ) then length=max(d(t1vec))-smoothyhalf-1 else if (cur_junk eq n_junks ) then length=max(d(t1vec))-smoothyhalf else length=max(d(t1vec))-smoothy
if (cur_junk eq 1) then ssttrrtt=0 else ssttrrtt=4

data=data[*,indgen(length)+ssttrrtt]


 s1=CREATE_STRUCT('sumspec',sumspecCORR,'data',data,'maxis',maxis,'avec',avec,'t0vec',t0vec,'rest',rest,'t1vec',t1vecR,'t2vec',t2vecR,'t1start',t1start,'t2start',t2start,'m1',m1,'m2',m2)
return, S1
end


function integrate, TofData, baseline,TimeRow,MassList,DeltaList,tolerance,a,t0,ex,aVector,t0Vector,exVector,name,jpeg, SampInt,extractions,poiscor,SingleIonSignal
; cycle to cycle calculation of the count signal within the specified bounderies

; if jpeg is set to 1 images of raw data are saves including mass scale and integration boundaries. This is 
; important for checking the cor rectness and quality of routines, however it costs computation time and disk space.

;jpeg=0
if (max(where(DeltaList lt 0)) gt -0.5) then DeltaList[where(DeltaList lt 0)]=0.001
 if(getpar('CorrectionON') eq 1 and poiscor eq 0) then TofData=CorrPoissDead(TofData, extractions,sampint)
Q=SIZE(MassList, /DIMENSIONS)
mist=SIZE(TofData, /DIMENSIONS)
cps=FLTarr(Q,mist[1])
Dim=SIZE(cps, /DIMENSIONS)

;detect changes of the a, to, and ex parameters
parVec=aVector+100*t0Vector*100*exVector ;these factors sould avoid that e.g. differences in a and t0 cancel each other

ind=where([parVec[0],parVec[0:max(Dim[1]-2)]] -[parVec[0],parVec[1:max(Dim[1]-1)]] ne 0)
if(max(ind)gt 0) then ind=[0,ind] else ind=[0]
cnt=max(size(ind,/dimensions))
if (cnt gt 1) then npts=[ind[1:cnt-1]-ind[0:cnt-2],max(dim[1])-ind[cnt-1]] else npts=max(dim[1])-ind[cnt-1]
print,[(ind),(npts)]
for j=0,cnt-1 do begin ;loop over cycles in junks where the parVec does not change
;MassScale=((Timerow-t0Vector[j])/aVector[j])^(1/exVector[j])     ; time[i]

MassScale=m2t(Timerow, aVector[j],t0Vector[j],exVector[j],SampInt,/time)     ; time[i]

FOR i=0,Dim[0]-1 Do Begin ;loop over masses
                M=where(MassScale LT MassList[i]+DeltaList[i]/2)  
                N=where(MassScale GT MassList[i]-DeltaList[i]/2)
                if(min(N) lt 0) then N[where(N lt 0)]=0
                if(max(M) gt mist[0]-1) then M[where(M gt mist[0]-1)]=mist[0]-1
                if(min(N) gt max(M)) then N[where(N gt max(M))] = max(M)
             
                ii=indgen(npts[j])+ ind[j]   
                  
                Dat=TofData[min(N):max(M),ii]
                if(min(dat) lt 0) then Dat[where(dat lt 0)]=0
               ; cps[i,ii]=total(Dat,1)   
               if(max(baseline) eq-9999) then cps[i,ii]=total(Dat,1) else cps[i,ii]=total(Dat,1) - total(baseline[min(N):max(M)])*extractions   
               
           
             
                TofData[min(N),ii]=-9998 ;mark start of integration
                TofData[max(M),ii]=-9999 ;mark end of integration
      
          endfor
          
     
endfor
    print, ''      
    
    
 
;FOR i=0,Dim[0]-1 Do Begin ;loop over masses
;        Start =floor( t0 + a * (MassList[i]  - DeltaList[i]/2 - tolerance)^ex)  
;        Width = ceil((t0 + a * (MassList[i]  + DeltaList[i]/2 + tolerance)^ex)- Start)
;        Start2=where(Timerow EQ Start) ;TofData usually starts not at 0 but ~m19, so start 2 is the correct index value
;        Start=Start2[0]
;        Ende=Start+ Width  ;begin and end of the peak
;        Data =TofData[Start:Ende,*]
;        Time=Timerow[Start:Ende]
;        for j=0,Dim[1]-1 do begin ;loop over cycles
;                MassScale=((Time-t0Vector[j])/aVector[j])^(1/exVector[j])     ; time[i]
;                M=where(MassScale LT MassList[i]+DeltaList[i]/2)  
;                N=where(MassScale GT MassList[i]-DeltaList[i]/2)      
;                Dat=Data[min(N):max(M),j]
;                Dat=Dat[where(dat gt -1)]
;                cps[i,j]=total(Dat)
;                TofData[Start+min(N),j]=-9998 ;mark start of integration
;                TofData[Start+max(M),j]=-9999 ;mark end of integration
;       endfor
;endfor
    
;jpeg=0
if (jpeg eq 1) then begin
IF (N_ELEMENTS(name) ne 0 and max(d(MassList)) ge 2) then begin 
      maxpix=20000
      maxpix=long(maxpix)
      Start =floor( t0 + a * (MassList[2]  - DeltaList[2]/2 - tolerance)^ex)  
      Start2=where(Timerow EQ Start) ;TofData usually starts not at 0 but ~m19, so start 2 is the correct index value
      StartI=Start2[0]
      Ende =ceil((t0 + a * (MassList[Dim[0]-1 ]  + DeltaList[Dim[0]-1 ]/2 +tolerance)^ex))
      Ende2=where(Timerow EQ Ende) ;TofData usually starts not at 0 but ~m19, so start 2 is the correct index value
      EndeI=Ende2[0]
      for k=0,floor((EndeI-StartI)/(maxpix)) do begin
              StartI2=StartI+k*(maxpix)
              EndeI2=min([StartI-1+(k+1)*(maxpix),EndeI])
              ;TofData2=TofData[StartI2:EndeI2,*]
              ;Time=Timerow[StartI2:EndeI2]
              MassScale=m2t(Timerow,mean(aVector[0:20]),mean(t0Vector[0:20]),mean(exVector[0:20]),SampInt)
              length=max(size(MassScale[StartI2:EndeI2],/dimensions))
              for i=long(StartI2+1),StartI2+length-101 do begin
                      if(floor(2*MassScale[i]) gt floor(2*MassScale[i-1])) then begin
                              if(floor(MassScale[i]) eq floor(MassScale[i-1])) then begin
                                      sieb=drucksieb(string(floor(MassScale[i])+0.5,  FORMAT='(F5.1)'),2)
                                      dimsieb=size(sieb,/dimensions)
                                      dat=TofData[i:i+dimsieb[0]-1,22:22+dimsieb[1]-1]
                                      dat[where(sieb eq -9999)]=-9998
                                      TofData[i:i+dimsieb[0]-1,22:22+dimsieb[1]-1]=dat  
                                       TofData[i,0:20]=-9998
                              endif
                      endif
             endfor
            filter=where(TofData EQ -9998)
            if(max(filter) gt -1) then TofData[filter]=max(TofData)
            filter=where(TofData EQ -9999)
            if(max(filter) gt -1) then TofData[filter]=max(TofData)*0.1
              loadct,20, rgb_table=colortable
              dim= size(TofData[StartI2:EndeI2,*],/dimensions)
              write_jpeg, strjoin([name,string(k),'.jpeg'],''),reform(colortable[bytscl(alog10(temporary(TofData[StartI2:EndeI2,*])+0.1)),*],dim[0],dim[1],3), true=3
            
            saveImage, strjoin([name,string(k),'.jpeg'],''),alog10(TofData[StartI2:EndeI2,*]+0.1),20   
      endfor
      
endif
endif

Return, cps/(SingleIonSignal*1e-9/SampInt)
end




function masslib , extended=extended, sulfate=sulfate, cal=cal

if (keyword_set(extended)) then ooo=16 else ooo=5
if (keyword_set(extended)) then nnn=2 else nnn=0
if (keyword_set(extended)) then Clll=0 else Clll=0
if (keyword_set(sulfate)) then sss=1 else sss=0
if (keyword_set(cal)) then begin 
        SRI=1
        ooo=5
        nnn=0
        Clll=0
        sss=0
endif else SRI=0
; create a library of protonated ion masses
C12=12
C13=13.003355
H1=1.007825
O16=15.994915
O17=16.999131
O18=17.99916
N14=14.003074
N15=15.000108
H_pos=1.007276467
e_neg=-0.000548533
Cl35=34.968852
Cl37=36.965903
F=18.998403
S32O4=31.97207+4*O16
S34O4=33.967866+4*O16
Si28= 27.976927
Si29=28.976495
Si30=29.97377
I=126.904473




;primary/inorganic ions
;m21
n=[0,0,2,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0]
lib=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
;m39
n=[0,0,4,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;O2+
n=[0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;16O18O+
n=[0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;NO+
n=[0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;15NO+
n=[0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;N2H+
n=[0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;NH4+
n=[0,0,3,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;NH3NH4+
n=[0,0,6,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;HNO3H+
n=[0,0,1,3,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

;NO2+
n=[0,0,0,2,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

;15NO2+
n=[0,0,0,2,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]


;NO18O+
n=[0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

;CCl3+
n=[1,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[1,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[0,1,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[0,1,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[1,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

;Iodobenzene
n=[6,0,5,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

n=[5,1,5,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]


;Di-Iodobenzene
n=[6,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

n=[5,1,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

n=[6,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

n=[5,1,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

;3F-benzene
n=[6,0,3,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

n=[5,1,3,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]


;3Cl-benzene
n=[6,0,3,0,0,0,0,0,1,0,3,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[6,0,3,0,0,0,0,0,1,0,2,1,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[5,1,3,0,0,0,0,0,1,0,3,0,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[5,1,3,0,0,0,0,0,1,0,2,1,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[6,0,3,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]



for ss=0,3 do begin
;D 3,4,5,6
n=[6+ss*2,0,18+ss*6,3+ss,0,0,0,0,1,0,0,0,0,0,0,3+ss,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[6+ss*2,0,18+ss*6,3+ss,0,0,0,0,1,0,0,0,0,0,0,2+ss,1,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[6+ss*2,0,18+ss*6,3+ss,0,0,0,0,1,0,0,0,0,0,0,2+ss,0,1,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;D fragment -CH4
n=[5+ss*2,0,14+ss*6,3+ss,0,0,0,0,1,0,0,0,0,0,0,3+ss,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[5+ss*2,0,14+ss*6,3+ss,0,0,0,0,1,0,0,0,0,0,0,2+ss,1,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[5+ss*2,0,14+ss*6,3+ss,0,0,0,0,1,0,0,0,0,0,0,2+ss,0,1,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;L 3,4,5,6
n=[8+ss*2,0,24+ss*6,2+ss,0,0,0,0,1,0,0,0,0,0,0,3+ss,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[8+ss*2,0,24+ss*6,2+ss,0,0,0,0,1,0,0,0,0,0,0,2+ss,1,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[8+ss*2,0,24+ss*6,2+ss,0,0,0,0,1,0,0,0,0,0,0,2+ss,0,1,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;L fragment -CH4
n=[7+ss*2,0,20+ss*6,2+ss,0,0,0,0,1,0,0,0,0,0,0,3+ss,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[7+ss*2,0,20+ss*6,2+ss,0,0,0,0,1,0,0,0,0,0,0,2+ss,1,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[7+ss*2,0,20+ss*6,2+ss,0,0,0,0,1,0,0,0,0,0,0,2+ss,0,1,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]



endfor




;all other CHNOCl
for c=1,40 do for h=c-9,c+1 do for o=0,ooo do for nn=0,nnn do for Cll=0,Clll do for ss=0,sss do if (h gt -0.5) then if(nn ge 1 or h gt 0.5) then begin
        n=[c,0,2*h+nn,o,0,0,nn,0,1,0,Cll,0,0,ss,0,0,0,0,0]
        entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
        lib=[[lib],[entry]]
        if (keyword_set(cal)) then begin ; carge transfer (SRI-mode)
                n=[c,0,2*h+nn,o,0,0,nn,0,0,1,Cll,0,0,ss,0,0,0,0,0]
                entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
                lib=[[lib],[entry]]
        endif
        if (keyword_set(extended)) then begin ;13C isotope..
                n=[c-1,1,2*h+nn,o,0,0,nn,0,1,0,Cll,0,0,ss,0,0,0,0,0]
                entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+Si28*n[15]+Si29*n[16]+Si30*n[17]+I*n[18]+H_pos*n[8]+e_neg*n[9],n]
                lib=[[lib],[entry]]     
        endif   
endif


lib=lib[*,sort(lib[0,*])]
print, size(lib,/dimensions)

return, lib
end



function masslib_old , extended=extended, sulfate=sulfate, cal=cal

if (keyword_set(extended)) then ooo=16 else ooo=5
if (keyword_set(extended)) then nnn=2 else nnn=0
if (keyword_set(extended)) then Clll=0 else Clll=0
if (keyword_set(sulfate)) then sss=1 else sss=0
if (keyword_set(cal)) then begin 
        SRI=1
        ooo=5
        nnn=0
        Clll=0
        sss=0
endif else SRI=0
; create a library of protonated ion masses
C12=12
C13=13.003355
H1=1.007825
O16=15.994915
O17=16.999131
O18=17.99916
N14=14.003074
N15=15.000108
H_pos=1.007276467
e_neg=-0.000548533
Cl35=34.968852
Cl37=36.965903
F=18.998403
S32O4=31.97207+4*O16
S34O4=33.967866+4*O16


;primary/inorganic ions
;m21
n=[0,0,2,0,0,1,0,0,1,0,0,0,0,0,0]
lib=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
;m39
n=[0,0,4,1,0,1,0,0,1,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;O2+
n=[0,0,0,2,0,0,0,0,0,1,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;16O18O+
n=[0,0,0,1,0,1,0,0,0,1,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;NO+
n=[0,0,0,1,0,0,1,0,0,1,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;N2H+
n=[0,0,0,0,0,0,2,0,1,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;NH4+
n=[0,0,3,0,0,0,1,0,1,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;NH3NH4+
n=[0,0,6,0,0,0,2,0,1,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
;HNO3H+
n=[0,0,1,3,0,0,1,0,1,0,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

;NO2+
n=[0,0,0,2,0,0,1,0,0,1,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

;15NO2+
n=[0,0,0,2,0,0,0,1,0,1,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]


;NO18O+
n=[0,0,0,1,0,1,1,0,0,1,0,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

;CCl3+
n=[1,0,0,0,0,0,0,0,0,1,3,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[1,0,0,0,0,0,0,0,0,1,2,1,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[0,1,0,0,0,0,0,0,0,1,3,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[0,1,0,0,0,0,0,0,0,1,2,1,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[1,0,0,0,0,0,0,0,0,1,1,2,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]

;C20H15ClO4
n=[20,0,15,4,0,0,0,0,1,0,1,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[19,1,15,4,0,0,0,0,1,0,1,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[20,0,15,4,0,0,0,0,1,0,0,1,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[19,1,15,4,0,0,0,0,1,0,0,1,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]


;C6H5ClO3
n=[6,0,5,3,0,0,0,0,1,0,1,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[5,1,5,3,0,0,0,0,1,0,1,0,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[6,0,5,3,0,0,0,0,1,0,0,1,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]
n=[5,1,5,3,0,0,0,0,1,0,0,1,0,0,0]
entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
lib=[[lib],[entry]]



;all other CHNOCl
for c=1,40 do for h=c-9,c+1 do for o=0,ooo do for nn=0,nnn do for Cll=0,Clll do for ss=0,sss do if (h gt -0.5) then if(nn ge 1 or h gt 0.5) then begin
        n=[c,0,2*h+nn,o,0,0,nn,0,1,0,Cll,0,0,ss,0]
        entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
        lib=[[lib],[entry]]
        if (keyword_set(cal)) then begin ; carge transfer (SRI-mode)
                n=[c,0,2*h+nn,o,0,0,nn,0,0,1,Cll,0,0,ss,0]
                entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
                lib=[[lib],[entry]]
        endif
        if (keyword_set(extended)) then begin ;13C isotope..
                n=[c-1,1,2*h+nn,o,0,0,nn,0,1,0,Cll,0,0,ss,0]
                entry=[C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9],n]
                lib=[[lib],[entry]]     
        endif   
endif


lib=lib[*,sort(lib[0,*])]
print, size(lib,/dimensions)

return, lib
end


function resimodel, xmin,xmax,sumspec,baseline,resolution,resolution2nd,peakshape, a, t0, ex ,sampint,instrument

    smoo=SmoothSumSpec(sumspec, a,t0,ex,sampint,instrument)
    data=smoo.data
    x=lindgen(max(d(sumspec))-1)
    xmin2=xmin-(xmax-xmin)/2
    xmax2=xmax+(xmax-xmin)/2
    baseline2=baseline[xmin2:xmax2]
    data2=data[xmin2:xmax2]
    mscale2=m2t(x[xmin2:xmax2],a,t0,ex,SampInt,/time)
  ;LOD5=5*2*stddev(data2[where(data2 lt quantile(data2,0.25))])
 helft=long(xmax2/2-xmin2/2)
 dataFIRSThalf=data2[0:helft-1]
 dataSECONDhalf=data2[helft:*]
   LOD5_1=3*2*stddev(dataFIRSThalf[where(dataFIRSThalf lt quantile(dataFIRSThalf,0.25))])
   LOD5_2=3*2*stddev(dataSECONDhalf[where(dataSECONDhalf lt quantile(dataSECONDhalf,0.25))])
LOD5=max([LOD5_1,LOD5_2])
    baseline=baseline[xmin:xmax]
    data=data[xmin:xmax]
    mscale=m2t(x[xmin:xmax],a,t0,ex,SampInt,/time)
   
  
    length=d(data)
            modelCRUDE=[0,0,0]
            resi=data-baseline
            resi=data
            clean=0
            for i=1,12 do begin
                      PEAK=total([[resi],[0,resi[0:length-2]],[resi[1:length-1],0],[0,0,resi[0:length-3]],[resi[2:length-1],0,0]],2)/5; PEAKS[i] = max of ysm[i-2:i+2] for all elements
                      PEAK=where(PEAK eq max(PEAK))
                      PEAK=PEAK[0]
                      masss=mscale[PEAK]
                      FWHM=masss/resolution
                      SIGM=FWHM/(2*SQRT(2*ALOG(2)))
                      dm=max([0.002,sigm/2])
                      sh1=peakshape
                      sh1[*,0]=(sh1[*,0]*FWHM+masss)
                      sp1=interpol(sh1[*,1],sh1[*,0],mscale,/nan)
                     ; ERRplus=interpol(sh1[*,2],sh1[*,0],mscale,/nan)
                   ;   ERRmin=interpol(sh1[*,3],sh1[*,0],mscale,/nan)
                      ;+/- 0.25 sigma contains 20% of area 
                      indS=floor(ceil(m2t(masss+sigm*0.025,a,t0,ex,SampInt,/mass)-m2t(masss,a,t0,ex,SampInt,/mass))/2)
                      indPts=2*indS+1
                      indd=indgen(indPts)+(PEAK-indS)
                      factor=total(data[indd]-mean(baseline))/total(sp1[indd])
                      factor=total(resi[indd])/total(sp1[indd])
           PercentImprovement=100.0*total(sp1*factor)/total(data)
                      modelCRUDE=[[modelCRUDE],[masss,factor,resolution]]
                      if(i eq 1) then modelCRUDE=modelCRUDE[*,1:*]
                      if (i eq 1) then  oldquality=9999 else oldquality=S1.quality
                      S1=optimizer(data2 , baseline2,mscale2, modelCRUDE, resolution, resolution2nd, peakshape)
                      if(i eq 1) then modelli=S1.model
                      factors=S1.model
                      masses=factors[0,*]
                      masses=masses[sort(masses)]
                      mindiff=min(abs([masses,0]-[0,masses]))
                      factors=factors[1,*]
                       if (min(factors) lt LOD5 or i eq 12) then clean=1 else  modelli=S1.model
                    
                    
                      if (clean eq 1) then begin
                              hlppp=reform(sort(modelli[0,*]))
                              ff=size(hlppp,/n_elements)
                              modelli2= modelli[*,hlppp] ;m/z sorted
                              modelli=modelli2[*,0]
                              if(ff gt 1.5) then for qq=1,ff-1 do begin  
                                ; if differece < dm -->  add peak height (factor) to current m/z  ELSE
                                ; if differece > 2* dm --> add next mass  ELSE
                                ; if low factor is at least 20% of high factor  --> add next mass  ELSE --> choose m/z with higher factor AND add factors
                         LastIndex=where(modelli[0,*] eq max(modelli[0,*]))
                         if (modelli2[0,qq]-max(modelli[0,*]) lt dm )then $
                                  modelli[1,LastIndex]=modelli[1,LastIndex]+modelli2[1,qq] $
                                  else if (modelli2[0,qq]-max(modelli[0,*]) gt 2*dm )then modelli=[[modelli],[modelli2[*,qq]]] else $
                                        if(max([modelli[1,LastIndex],modelli2[1,qq]])/min([modelli[1,LastIndex],modelli2[1,qq]]) lt 5)then modelli=[[modelli],[modelli2[*,qq]]] else begin
                                               if(modelli[1,LastIndex] lt modelli2[1,qq]) then modelli[0,LastIndex]=modelli2[0,qq]
                                               modelli[1,LastIndex]=modelli[1,LastIndex]+modelli2[1,qq]
                                               endelse

       
                                ; add next mass if differece > dm, if not add peak height (factor) to current m/z
                             ;     if (modelli2[0,qq]-max(modelli[0,*]) gt dm )then  modelli=[[modelli],[modelli2[*,qq]]] else modelli[1,where(modelli[0,*] eq max(modelli[0,*]))]=modelli[1,where(modelli[0,*] eq max(modelli[0,*]))]+modelli2[1,qq]
                                endfor
                    S1=optimizer(data2 , baseline2,mscale2, modelli, resolution, resolution2nd, peakshape)
                    modelli=S1.model
                      ; modelli=modelli2 
                       ;include=[include,i-1]
                       i=100 
                       endif 
                 
                 
                      print, string(LOD5,format='(F7.1)')+string(1000*dm,format='(F7.1)')+'    residue: '+string(S1.quality,format='(F7.2)')+' permil,    improvement:', string(100-100*S1.quality/oldquality,format='(F7.2)')+'%'
                      hlppp=reform(sort(modelli[0,*]))
                      print, modelli[*,hlppp]
                      print, '  END   '
                      reconstruction=reconstruct(modelli,baseline,mscale, resolution, peakshape)
                      resi=data-reconstruction[*,0]
                      modelCRUDE=modelli[*,*]
            endfor
          
           


    
    priori=reconstruct(modelli,baseline,mscale, resolution, peakshape)
    posteriori=reconstruct(modelli,baseline,mscale, resolution, peakshape)
    modelpeaks=create_struct('mass',masss,'bin',m2t(masss,a,t0,ex,SampInt,/mass),'binscale',x[xmin:xmax],'mscale',mscale,'posteriori',posteriori,'residual',data-posteriori,'priori',priori, 'model',modelli,'LOD5',LOD5, 'dm', dm)
    
   
    return, modelpeaks
end

function reconstruct, model,baseline,mscale, resolution, peakshape
reconstruction=baseline
reconstruction2=baseline
reconstruction3=baseline
n=d(model)
if(size(n,/n_elements) gt 1) then n=max(n[1]) else n=1
for i=0,n-1 do begin
        masss=model[0,i]
        factor=model[1,i]
        resolution3=model[2,i]
        sh1=peakshape
        sh1[*,0]=(sh1[*,0]*masss/resolution3+masss)
        sp1=interpol(sh1[*,1],sh1[*,0],mscale,/nan)
        sp2=interpol(sh1[*,2],sh1[*,0],mscale,/nan)
        sp3=interpol(sh1[*,3],sh1[*,0],mscale,/nan)
 reconstruction=reconstruction+sp1*factor
 reconstruction2=reconstruction2+sp2*factor
 reconstruction3=reconstruction3+sp3*factor
endfor
return, [[reconstruction],[reconstruction2],[reconstruction3]]
end

function optimizer,  data2 , baseline2,mscale2, model, resolution,resolution2nd, peakshape
  qualityold=0
  qualityold2=-1
  resmult=0.99
   for iteration=0,500 do begin
          reconstruction=reconstruct(model,baseline2,mscale2, resolution, peakshape)
          reconstruction=reconstruction[*,0]
          quality=1000.0*total(abs(data2-reconstruction))/total(abs(data2))
          qualityold=[quality,qualityold]
      
          if (iteration gt 9) then qualityold=qualityold[0:9]
          modelQ=ResidueQuality( data2,baseline2, reconstruction,  model,mscale2, resolution)
          offset=modelQ[5,*]
          asym=modelQ[4,*]-modelQ[6,*]
          ioff=where(abs(offset) eq max(abs(offset)))
          ioff=ioff[0]
          iasy=where(abs(asym) eq max(abs(asym)))
          iasy=iasy[0]
          model[1,ioff]=model[1,ioff]+offset[ioff]/2
          if(model[1,ioff] lt 0) then model[1,ioff]=0
          model[0,iasy]=model[0,iasy]-model[0,iasy]*asym[iasy]/(resolution*(max([8000,8000*abs(asym[iasy])/50])))
          if (iteration gt 9) then if (abs(quality-mean(qualityold)) lt 0.005  OR abs(mean(qualityold2)- mean(qualityold)) lt 0.005) then begin
                  dims=d(modelQ)
                  if (size(modelQ,/n_dimensions) eq 1) then nPEAKS=1 else nPEAKS=dims[1]
                  for sss=0,nPEAKS-1 do begin
                          
                          
                          if(modelQ[4,sss] lt modelQ[5,sss] AND modelQ[6,sss] lt modelQ[5,sss]) then begin
                      resolution2=resolution
                      for iteration2=0,299 do begin
                        resolution2=resolution2/resmult
                        model[2,sss]=resolution2
                        reconstruction=reconstruct(model,baseline2,mscale2, resolution2, peakshape)
                        reconstruction=reconstruction[*,0]

                        quality=1000.0*total(abs(data2-reconstruction))/total(abs(data2))
                        qualityold=[quality,qualityold]
                        qualityold=qualityold[0:9]
                        modelQ=ResidueQuality( data2,baseline2, reconstruction,  model,mscale2, resolution2)
                        print,  [resolution2, modelQ[*,sss]]
                        if((modelQ[4,sss] gt modelQ[5,sss] AND  modelQ[6,sss] gt modelQ[5,sss]) OR resolution2 gt resolution*1.15) then begin
                          iteration2=600
                          if(resolution2 gt resolution*1.15) then model[2,sss]=resolution else model[2,sss]=resolution2

                        endif
                      endfor

                    endif else    if(modelQ[4,sss] gt modelQ[5,sss] AND modelQ[6,sss] gt modelQ[5,sss]) then begin
                                  resolution2=resolution
                                  for iteration2=0,299 do begin
                                          resolution2=resolution2*resmult
                                          model[2,sss]=resolution2
                                          reconstruction=reconstruct(model,baseline2,mscale2, resolution2, peakshape)
                                          reconstruction=reconstruction[*,0]

                                          quality=1000.0*total(abs(data2-reconstruction))/total(abs(data2))
                                          qualityold=[quality,qualityold]
                                          qualityold=qualityold[0:9]
                                          modelQ=ResidueQuality( data2,baseline2, reconstruction,  model,mscale2, resolution2)
                                          print,  [resolution2, modelQ[*,sss]]
                                          if(modelQ[4,sss] lt modelQ[5,sss] OR modelQ[6,sss] lt modelQ[5,sss]) then begin
                                            iteration2=600
                                            if(resolution2 lt resolution2nd+(resolution-resolution2nd)*0.3) then model[2,sss]=resolution2 else model[2,sss]=resolution
                                            
                                          endif
                                   endfor
                          endif
                          
                        
                  endfor
                  iteration=600
          endif
            
           print, [iteration, quality, mean(qualityold2), mean(qualityold)]
           qualityold2=qualityold

     ;      print, ""
  endfor
  
  
 
;  loadct,38
 ;  plot, data2, color=200, background=-1
  ;  oplot, reconstruction, color=0
   ;      print, quality
    ;     print,  modelQ
     ;    print,model
  return, create_struct('model',model,'quality',quality)
end

function ResidueQuality, data,baseline, reconstruction,  model,mscale, resolution


n=d(model)
if(size(n,/n_elements) gt 1) then n=max(n[1]) else n=1

modelQ=fltarr(7,n)  ; mass, factor, Max(data_center),Mean(data_center), Qleft, Qcenter, Qright
modelQ[[0,1,2],*]=model

for i=0,n-1 do begin
        masss=modelQ[0,i]
        factor=modelQ[1,i]
        resolution3=modelQ[2,i]
        FWHM=masss/resolution3
        i1=max(where(mscale lt masss-FWHM/2))
        i2=max(where(mscale lt masss-FWHM/6))
        i3=max(where(mscale lt masss+FWHM/6))
        i4=max(where(mscale lt masss+FWHM/2))
        modelQ[2,i]=max(data[i2:i3-1]-baseline[i2:i3-1])
        modelQ[3,i]=mean(data[i2:i3-1]-baseline[i2:i3-1])
        modelQ[4,i]=(total(data[i1:i2-1])-total(reconstruction[i1:i2-1]))/(i2-i1)
        modelQ[5,i]=(total(data[i2:i3-1])-total(reconstruction[i2:i3-1]))/(i3-i2)
        modelQ[6,i]=(total(data[i3:i4-1])-total(reconstruction[i3:i4-1]))/(i4-i3)
     
        
        
   
endfor

     
      

return, modelQ
end


function model_rest, xmin,xmax,sumspec,baseline,resolution,peakshape, a, t0, ex ,sampint,instrument

   
   
    factor2=factor
    for l=0,50 do begin
            sensi=fltarr(length2,3)
            step=0.00001
            modpeaks=dblarr(max(d(mscale)),length2,3)
            Pcenter= mscale[PEAKS] + offset     
            FWHM=Pcenter/(resolution*1.0)
            SIGM=FWHM/(2*SQRT(2*ALOG(2)))
            if(max(factor2) eq 0) then  factor2=factor
            jot=where(factor2 eq max(factor2))
            factor2[jot]=0
         
    ;calculate sensitivity intensity (factor)
      
    ;optimise most sensitive mass shift (offset)
    
      ;optimise most sensitive intensity (factor)
      
      ;???? optimise resolution/peak shape?
    
            fertig=0
            counter=0
            while fertig eq 0 do begin
                    Pcenter= mscale[PEAKS] + offset     
                    FWHM=Pcenter/(resolution*1.0)
                    for i=0,max(length2)-1 do begin
                          sh1=peakshape
                          sh1[*,0]=(sh1[*,0]*FWHM[i]+Pcenter[i])
                          modpeaks[*,i,1]=interpol(sh1[*,1],sh1[*,0],mscale,/nan)*factor[i]
                    endfor
                    if(max(length2) gt 1.5) then  model=total(modpeaks,2)+base else model=reform(modpeaks+base)
                    residual=data-model[*,1]
                    if(l eq 0 and counter eq 0) then priori=residual
                    if( counter gt 0.5) then qualit_prev=qualit else  offset[jot]=offset[jot] +step
                    qualit=mean(abs(residual))/median(abs(residual))
                    if( counter gt 0.5) then if(qualit lt qualit_prev) then offset[jot]=offset[jot] +step else if(counter lt 1.5) then begin
                    step=-step
                    offset[jot]=offset[jot] +step
                                        endif else  fertig=1
                  ;  if( counter gt 0.5) then print, [pcenter(jot), counter, step, offset[jot], fertig, qualit, qualit_prev] else print, [jot, counter, step, offset[jot], fertig, qualit]
                    counter=counter+1
            endwhile
            print, [Pcenter[jot],offset*1000]
    
    
            fertig=0
            counter=0
            fstep=1.0001
            while fertig eq 0 do begin
                    Pcenter= mscale[PEAKS] + offset     
                    FWHM=Pcenter/(resolution*1.0)
                    for i=0,max(length2)-1 do begin
                          sh1=peakshape
                          sh1[*,0]=(sh1[*,0]*FWHM[i]+Pcenter[i])
                          modpeaks[*,i,1]=interpol(sh1[*,1],sh1[*,0],mscale,/nan)*factor[i]
                    endfor
    
                  ;  if(max(length2) gt 1.5) then  model=total(modpeaks,2)+base else model=reform(modpeaks+base)
                    if(max(length2) gt 1.5) then  model=total(modpeaks,2) else model=reform(modpeaks)
                  
                    residual=data-model[*,1]
    
                    if( counter gt 0.5) then qualit_prev=qualit else  factor[jot]=factor[jot]*fstep
                    qualit=mean(abs(residual))/median(abs(residual))
                    if( counter gt 0.5) then if(qualit lt qualit_prev) then factor[jot]=factor[jot]*fstep else if(counter lt 1.5) then begin
                    fstep=1.0/fstep
                   factor[jot]=factor[jot]*fstep
                                        endif else  fertig=1
                  ;  if( counter gt 0.5) then print, [pcenter(jot), counter, step, offset[jot], fertig, qualit, qualit_prev] else print, [jot, counter, step, offset[jot], fertig, qualit]
                    counter=counter+1
            endwhile
            print, [Pcenter[jot],factor]
    
    
    
    endfor
    modelpeaks=create_struct('mass',Pcenter,'bin',m2t(Pcenter,a,t0,ex,SampInt,/mass),'binscale',binscale,'mscale',mscale,'model', model[*,1],'residual',residual,'priori',priori )
    return, modelpeaks
end

function overlap, masslist, data, name, path

mistt=systime(1)
lenPeaks=max(size(masslist,/dimensions))
dims=size(data,/dimensions)
if(max(dims[0]) ne lenPeaks) then begin 
      data=transpose(data)
      lenCyc=max(dims[0])
endif else lenCyc=max(dims[1])
if (max(size(name,/dimensions)) le 1) then name=strarr(lenCyc)+name
nam='xxx'
DataCorr=fltarr(lenPeaks,lenCyc)
    
for j=0,lenCyc-1 do begin ;loop over averaged cycles 
;for j=148,149 do begin
        if(name[j] ne nam) then begin
                nam=name[j]
                reso=readfloat(path+'FileInfo/Time2MassPAR/'+nam+'Par2.fdt')
                reso=reso[8]
                PeakData=peaktable(masslist,reso)
                FWHM=PeakData[*,3]*2*SQRT(2*ALOG(2))
                Peakshape=readfloat(path+'FileInfo/PeakShape/'+nam+'PeakShape.fdt')
                x7=Peakshape[*,0]
                dataX3=Peakshape[*,1]
                bb1=(PeakData[*,1]-PeakData[*,0])/FWHM 
                bb2=(PeakData[*,2]-PeakData[*,0])/FWHM 
                bb1_=([PeakData[*,1],0]-[0,PeakData[*,0]])/[FWHM ,1]
                bb2_=(PeakData[*,2]-[PeakData[1:*,0],10000])/FWHM 
                b1=bb1
                b2=bb2
                b1_=bb1_
                b2_=bb2_
                for i=0,max(size(b1,/dimensions))-1 do begin 
                        b1[i]=total(dataX3[where(x7 lt bb1[i] )])/total(dataX3)       
                        b2[i]=total(dataX3[where(x7 gt bb2[i] )])/total(dataX3) 
                        filter=where(x7 gt bb1_[i] )      
                        if(max(filter) gt -0.5) then b1_[i]=total(dataX3[filter])/total(dataX3) else b1_[i]=0      
                        filter=where(x7 lt bb2_[i] )      
                        if(max(filter) gt -0.5) then b2_[i]=total(dataX3[filter])/total(dataX3) else b2_[i]=0         
                endfor
                dim=max(size(b1,/dimensions))
                A=fltarr(dim,dim)
                for i=0,dim[0]-1 do begin
                        if(i gt 0.5) then A[i,i-1]=b2_[i-1]
                        A[i,i]=1-b1[i]-b2[i]
                        if(i lt dim-1.5) then A[i,i+1]=b1_[i+1]
                endfor
                print,"Matrix A built, dims:", size(A,/dimensions),"elapsed time:",  systime(1)-mistt
                C=A
                LUDC, C, INDEX   ;3.9s pro cycle
        endif
        B=Data[*,j]
        B2=fltarr(dim)
        B2[where(B gt -9999)]=B[where(B gt -9999)]
        S=LUSOL(C, INDEX, B2)  
        filter=where(S lt 0)    
        DataCorr[*,j]=S 
        if(float(j)/200 eq floor(float(j)/200)) then print, 'CyCle: ',j, ' time =  ', systime(1)-mistt
endfor


if(max(dims[0]) ne lenPeaks) then DataCorr=transpose( DataCorr)


return, DataCorr
end




function PS1,event,SumSpectrum, SampInt,duration, cycles, extractions,destfold,name,instrument
  
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE='Peaks & time2mass:'
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), gET_VALUE=info
    
    
  
    x=lindgen(max(size(SumSpectrum,/dimensions) )-1)
    name=reform(name)
    lib=masslib(/cal) &  lib=lib[0,*]
  ; print, d(lib)
  
   ions=[getpar('ION1'),getpar('ION2'),getpar('ION3')]
 devs=[getpar('DEV1'),getpar('DEV2'),getpar('DEV3')]
  
  
    if(strpos(instrument,'TOF1000') eq 0) then begin
            a=getpar('default_a_1000')
            t0=getpar('default_t0_1000')
    endif
    if(strpos(instrument,'TOF8000') eq 0) then begin
            a=getpar('default_a_8000')
            t0=getpar('default_t0_8000')
    endif
    if(strpos(instrument,'VOCUS') eq 0) then begin
      a=getpar('default_a_8000')
      t0=getpar('default_t0_8000')
    endif
    print, [0,0,0,a,t0]
    peaklist=DetectPeaks(SumSpectrum,a , t0, 0.5,SampInt,instrument)
    


    par=CalCrude(peaklist,SampInt,lib,instrument)

    
   if (getpar('useCRUDEdefault') eq 0) then begin
     a=par.a
    t0=par.t0
    endif else begin
      
      a=getpar('CRUDEa')
      t0=(getpar('CRUDEt0'))
   endelse
    
    
    ex=0.5
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE=[info,'CalCrude:','a='+string(a),'t0='+string(t0),'ex=0.5']
   ; print, d(lib)
 
    Top16=par.Top16
if (a ne -9999) then begin  ; if calCrude failed (a=-9999), do non of the remaining stuff... 
    peaklist=DetectPeaks(SumSpectrum, a, t0, ex,SampInt,instrument,/clean)
    ex=0.5
    a_raw=a
    t0_raw=t0
    ex_raw=0.5
    
    
    
    reso=mean(peaklist[*,3]);default resolution  
    masses=m2t(peaklist[*,7],a_raw,t0_raw,0.5,SampInt,/time)
    mm_1=[21.022, 39.0327,30.994, 33.9935, 47.9966]
    mm_2=[487, 242, 269, 242, 242]
    Psig=0
    for r=0,4 do begin
            rr2=floor(m2t([mm_1[r]-max([0.005, mm_1[r]/reso]),mm_1[r]+max([0.005, mm_1[r]/reso])],a,t0,ex,SampInt))
            if(min(rr2) gt 0) then sig2=(corrtr(79)/corrtr(mm_1[r]))*mm_2[r]*total(SumSpectrum[rr2[0]:rr2[1]])/duration else sig2=0
            pp=floor((rr2[1]-rr2[0])/2)
            if(floor(1+(rr2[1]-rr2[0])/2) eq pp) then qq=pp-1 else qq=pp
            bk2=0
            if(min(rr2) gt pp and sig2 gt 0) then bk2=(corrtr(79)/corrtr(mm_1[r]))*mm_2[r]*total([SumSpectrum[-1-qq+rr2[0]:rr2[0]-1],SumSpectrum[1+rr2[1]:rr2[1]+1+pp]])/duration else sig2=0
            Psig=[Psig,sig2-bk2]
    endfor
    Psig=Psig[1:*]
   ;if(where(Psig eq max(Psig)) lt 1.5 ) then mode='H3O+' else if(where(Psig eq max(Psig)) eq 3 ) then mode='O2+' else mode='NO+' 
   if(where(Psig eq max(Psig)) lt 1.5 ) then mode=0 else if(where(Psig eq max(Psig)) eq 3 ) then mode=9 else mode=5 ; 0=H3O+, 9=O2+, 5=NO+
    
    
      Flib=-1
      if( mode eq 0) then begin
              Flib=where(2*floor(floor(lib+0.4)/2) ne floor(lib+0.4) or lib lt 50);selects odd masses
              if(max(Flib) gt 0) then lib2=lib[Flib] 
      endif else lib2=lib
      
     
      
    
  ;    print, d(lib)
 
    fineCal=CalFine(peaklist[*,7], lib2, a,t0, SampInt,mode,instrument)
    a_fine=max(fineCal.a)
    t0_fine=max(fineCal.t0)
    ex_fine=max(fineCal.ex)
    rat120=fineCal.rat120
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), gET_VALUE=info
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE=[info,'','CalFine:','a='+string(a_fine),'t0='+string(t0_fine),'ex='+string(ex_fine)]
   
    ;   print, d(lib)
   
    cal3=Cal3pt(peaklist,a_fine,t0_fine,ex_fine,sampint,lib2,mode,instrument)
    a3=max(cal3.a)
    t03=max(cal3.t0)
    ex3=max(cal3.ex)
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), gET_VALUE=info
    WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE=[info,'','Cal3pt:','a='+string(a3),'t0='+string(t03),'ex='+string(ex3)]
   
    tst=testSCALE(m2t(peaklist[*,7],a_raw,t0_raw,0.5, SampInt,/time), lib2,instrument ,ions,devs)
    scorRaw=(tst.scorppm)
    tst=testSCALE(m2t(peaklist[*,7],a_fine,t0_fine,ex_fine, SampInt,/time), lib2,instrument ,ions,devs)
    scorParVar=(tst.scorppm)
    tst=testSCALE(m2t(peaklist[*,7],a3,t03,ex3, SampInt,/time), lib2,instrument ,ions,devs)
    scor3=(tst.scorppm)
    if(scorRaw gt scorParVar and scorRaw gt scor3) then begin
            a=a_raw
            t0=t0_raw
            ex=ex_raw
    endif
     if(scor3 gt scorParVar and scor3 gt scorRaw) then begin
            a=a3
            t0=t03
            ex=ex3
    endif
      
    if(scorParVar ge scor3 and scorParVar ge scorRaw) then begin
            a=a_fine
            t0=t0_fine
            ex=ex_fine
    endif
    
     if(max(getpar('ForceThroughMaSet')) eq 1) then begin
    a=a3
    t0=t03
    ex=ex3
    endif
  
 ;;;;;;;;;;;;;;;;;;
 ;;;;;; Baseline signal
 ;;;;;;;;;;;;;;;;;;
if (getpar('PeakAnalysis') eq 1) then begin    
    
    
   times=peaklist[*,7]
   masses=m2t(times,a,t0,ex,SampInt,/time)
   extr=float(cycles)*float(extractions)
   SumSpectrumSM=smooth(SumSpectrum,5*floor(0.55+1e-10/sampint),/nan)
   endmass=m2t(max(size(SumSpectrum,/dimensions)), a,t0,ex,SampInt)

;;; calculate baseline  signal

pts=max(size(SumSpectrum,/dimensions))
baseline=fltarr(pts)
oldt=0
n_SEG=floor(600*1e-10/SampInt)
for iii=0,floor(pts/n_SEG)-1 do begin
    newt=long(iii+1)*n_SEG
    SEG=SumSpectrum[indgen(newt-oldt)+oldt]
    for iv=0,6 do begin
            nn=max(size(SEG,/dimensions))
             i_max=where(SEG eq max(SEG)) & i_max=i_max[0]
             ; delete 60 pts around i_max (maximum signal), totally 7 times i.e. 70% of the segment is deleted
            if(i_max le n_SEG/20) then SEG=SEG[n_SEG/10:*] else if(i_max ge nn-n_SEG/20) then SEG=SEG[lindgen(nn-n_SEG/10)] else SEG=SEG[[indgen(i_max-n_SEG/20),i_max+n_SEG/20+indgen(nn-i_max-n_SEG/20)]]
    endfor
  ;  baseline[oldt:newt-1]=mean(SEG[where(SEG le max([quantile(SEG,0.5),2]))])
    baseline[oldt:newt-1]=mean(SEG)
    oldt=newt
endfor
baseline[where(baseline eq 0)]=min(baseline[where(baseline gt 0)])
baselineSM=CONVOL(baseline, SAVGOL(floor(1.5*n_SEG),floor(1.5*n_SEG), 0,1 ), /EDGE_TRUNCATE)

WINDOW, 4, xsize=1150,ysize=700
 !P.MULTI = [0,1,4] 
 !x.oMARGIN=[8,8]
  !Y.MARGIN = [3, 1]
 DEVICE, DECOMPOSED = 0 
 loadct,5
 xLim=floor([2e4,14e4,22e4,28e4]*1e-10/(SampInt))
 if(max(xLim) gt 0.9*pts) then xLim=floor(0.9*pts*xLim/max(xLim))
 xLim=[xLim,pts-1]
 yLim=[1,13,13,13]
 for kkk=0,3 do begin
        if(kkk eq 3) then  !Y.MARGIN = [4, 0] else  if(kkk eq 2) then  !Y.MARGIN = [3, 1] else  !Y.MARGIN = [2, 1]
        xxx=findgen(xLim[kkk+1]-xLim[kkk])+xLim[kkk]
        yyy=SumSpectrum[xLim[kkk]:xLim[kkk+1]]/extr
        yyy2=baseline[xLim[kkk]:xLim[kkk+1]]/extr
        if(kkk lt 0.5) then  plot,xxx,yyy,xstyle=1,ystyle=1,yrange=[min(baseline/extr),5*max(yyy2)],color=0,ylog=1,background=-1,charsize=3;, charthick=2
        if(kkk eq 1) then  plot,xxx[where(yyy gt 0)],yyy[where(yyy gt 0)],xstyle=1,ystyle=1,yrange=[0,5*max(yyy2)],color=0,background=-1,charsize=3;, charthick=2
        if(kkk eq 2) then  plot,xxx[where(yyy gt 0)],yyy[where(yyy gt 0)],ytitle='                        counts per TOF-bin per extraction ('+string(extr/duration,format='(I5)')+' extractions per second)',xstyle=1,ystyle=1,yrange=[0,10*max(yyy2)],color=0,background=-1,charsize=3;, charthick=2
        if(kkk eq 3) then  plot,xxx[where(yyy gt 0)],yyy[where(yyy gt 0)],xtitle='TOF-bin number ('+strtrim(string(sampint),2)+' second bins)',xstyle=1,ystyle=1,yrange=[0,10*max(yyy2)],color=0,background=-1,charsize=3;, charthick=2
        oplot,xxx,yyy2,color=50, thick=4
        oplot, xxx,baselineSM[xLim[kkk]:xLim[kkk+1]]/extr,color=115, thick=3
 endfor
  !Y.MARGIN = [4, 2]
 for kk=0,max(size(name,/dimensions))-1 do  write_jpeg, destfold+'FileInfo/Baseline/' +'Baseline_'+name[kk]+'.jpg',tvrd(0,true=1), true=1
 WDELETE, 4
 !x.oMARGIN=[2,2]
   
         
 ;;;;;;;;;;;;;;;;;;
 ;;;;;; peak shape
 ;;;;;;;;;;;;;;;;;;
 
 resoD=mean(peaklist[*,3]);default resolution
 reso=resoD  
 mul=40
 PtsPerFWHM=100
 minsig=getpar('MinSig') ;Default=800
 m59=fltarr(mul*PtsPerFWHM+1)
 m21=fltarr(mul*PtsPerFWHM+1)
 savgolFilter = SAVGOL(15,15, 0,4 )
 maxi=0
 for iii=0,max(size(masses,/dimensions))-1 do begin
  print,SumSpectrumSM[times[iii]]
  if(SumSpectrumSM[times[iii]] gt minsig) then  maxi=[maxi,SumSpectrumSM[times[iii]]]
  
 endfor
 maxi=maxi[1:*]
 maxsig=max(maxi)
 if (max(size(maxi[where(maxi lt maxsig/100 or maxi lt max(minsig)*10)],/dimensions)) ge 2) then begin
    
 
 for kk=0,1 do begin
        xPeakshape=findgen(mul*PtsPerFWHM+1)
        xPeakshape=2*mul*xPeakshape/max(xPeakshape)-mul
        y=fltarr(mul*PtsPerFWHM+1,max(size(maxi[where(maxi lt maxsig/100 or maxi lt max(minsig)*10)],/dimensions)))
        counter=0
        for iii=0,max(size(masses,/dimensions))-1 do begin
                ind=m2t([masses[iii]-mul*masses[iii]/reso,masses[iii]+mul*masses[iii]/reso], a, t0, ex,SampInt)
                indPeak=m2t([masses[iii]-4*masses[iii]/reso,masses[iii]+4*masses[iii]/reso], a, t0, ex,SampInt); +/- 4*FWHM
                indCent=m2t([masses[iii]-0.2*masses[iii]/reso,masses[iii]+0.2*masses[iii]/reso], a, t0, ex,SampInt); +/- 0.5*FWHM
                if(indCent[1]-indCent[0] lt 1.0) then indCent[1]=indCent[0]+1.0
                if((SumSpectrumSM[times[iii]] gt minsig) and (SumSpectrumSM[times[iii]] lt maxsig/100 or SumSpectrumSM[times[iii]] lt max(minsig)*10)) then begin
                        y1=SumSpectrum[indgen(max(ind)-min(ind))+min(ind)]-baselineSM[indgen(max(ind)-min(ind))+min(ind)]; subtract sumspec
                        PEAKmin=min(SumSpectrum[indgen(max(indPeak)-min(indPeak))+min(indPeak)]-baselineSM[indgen(max(indPeak)-min(indPeak))+min(indPeak)]); subtract sumspec
                        PEAKmax=max(SumSpectrum[indgen(max(indCent)-min(indCent))+min(indCent)]-baselineSM[indgen(max(indCent)-min(indCent))+min(indCent)]); subtract sumspec
                        y1=(y1-PEAKmin)/(PEAKmax-PEAKmin); normalize
                        y1=INTERPOLATE(y1, (max(ind)-min(ind))*findgen(mul*PtsPerFWHM+1)/(mul*PtsPerFWHM+1))
                        y[*,counter]=y1
                        counter=counter+1
                        if(abs(59.049-masses[iii]) lt 0.01) then m59=y1
                        if(abs(21.022-masses[iii]) lt 0.01) then m21=y1

                endif
          ;      if( abs(59.049-masses[iii]) lt 0.01 OR abs(21.022-masses[iii]) lt 0.01) then begin
           ;             y1=SumSpectrum[indgen(max(ind)-min(ind))+min(ind)]-baselineSM[indgen(max(ind)-min(ind))+min(ind)]; subtract sumspec
          ;              y1=y1/(SumSpectrumSM[times[iii]]-baselineSM[times[iii]]); normalize
          ;              y1=INTERPOLATE(y1, (max(ind)-min(ind))*findgen(mul*PtsPerFWHM+1)/(mul*PtsPerFWHM+1))
          ;              if(abs(59.049-masses[iii]) lt 0.01) then m59=y1
         ;               if(abs(21.022-masses[iii]) lt 0.01) then m21=y1
         ;       endif
        endfor
        if(kk eq 0) then begin
                dims=size(y,/dimensions)
                ;plot, xPeakshape, y[*,0],color=0,background=-1, xrange=[-4,4], yrange=[-0.2,1.2], ytitle='normalized signal',xtitle='relative m/z [multiples of estimated FWHM]', charsize=1.2, charthick=1.5
                ;for iii=0,dims[1]-1 do oplot , xPeakshape, y[*,iii] ,color=145     
                quant=findgen(100)/100
                quant=quant[3:52]
                fit2=fltarr(mul*PtsPerFWHM+1,50)
                for iii=0,mul*PtsPerFWHM do fit2[iii,*]=quantile(y[iii,*], quant)
                reso=0
                cntmist=0
                for lll=0,49 do begin
                        fit=CONVOL(fit2[*,lll], savgolFilter, /EDGE_TRUNCATE)
                        fit=fit/max(fit)
                        fit3=fit[indgen(mul*PtsPerFWHM)]
                        ind2=where(fit3 gt 0.5)
                        dfit=fit[min(ind2)]-fit[min(ind2)-1]
                        dx=xPeakshape[min(ind2)]-xPeakshape[min(ind2)-1]
                        x1=xPeakshape[min(ind2)-1]+(0.5-fit[min(ind2)-1])*dx/dfit
                        dfit=fit[max(ind2)]-fit[max(ind2)+1]
                        dx=xPeakshape[max(ind2)+1]-xPeakshape[max(ind2)]
                        x2=xPeakshape[max(ind2)]+(fit[max(ind2)]-0.5)*dx/dfit
                        FWHM=x2-x1
                        reso=[reso,resoD/FWHM]
                        ;    if(min(abs([0.1,0.2,0.3,0.4,0.5]-quant[lll])) eq 0) then begin
                        ;    oplot , xPeakshape, fit ,color=0 ,thick=3 
                        ;     xyouts, -3.5,0.9-cntmist, 'Quantile='+string(quant[lll],format='(f4.2)')+', FWHM='+string(resoD/FWHM,format='(I4)'),color=0, charsize=1.2, charthick=1.5
                        ;   cntmist=cntmist+0.07
                        ;   endif
                endfor
                ;   for kk=0,max(size(name,/dimensions))-1 do  write_jpeg, destfold+'FWHM2_'+name[kk]+'.jpg',tvrd(0,true=1), true=1
                ; WDELETE, 5
                reso=reso[1:*]
                d_reso=deriv(quant, reso)
                i_quant=min([30,max([7,where(d_reso[0:30] lt median(d_reso[35:49])*3)])])
                if(reso[i_quant] lt quantile(reso,0.75)) then i_quant=min(where(reso gt quantile(reso,0.75))) 
                
                WINDOW, 6, xsize=800,ysize=600
                !P.MULTI = [0,1,2] 
                DEVICE, DECOMPOSED = 0 
                loadct,5
                plot, quant, reso,color=0,background=-1
                oplot, [quant[i_quant],quant[i_quant]],[-1e8,1e8], color=40
                plot, quant, d_reso ,color=0,background=-1
                oplot, [quant[i_quant],quant[i_quant]],[-1e8,1e8], color=40
                for kkkk=0,max(size(name,/dimensions))-1 do  write_jpeg, destfold+'FileInfo/PeakShape/'+'FWHM(quantile)2_'+name[kkkk]+'.jpg',tvrd(0,true=1), true=1
                WDELETE, 6
                
                quant=quant[i_quant]
                reso=reso[i_quant]
                
        endif
        if(kk eq 1) then begin
                fit=fltarr(mul*PtsPerFWHM+1)
                fit2=fltarr(mul*PtsPerFWHM+1)
                fit3=fltarr(mul*PtsPerFWHM+1)
                for iii=0,mul*PtsPerFWHM do  fit[iii,*]=quantile(y[iii,*], quant)
                for iii=0,mul*PtsPerFWHM do  fit2[iii,*]=quantile(y[iii,*], quant*1.5)
                for iii=0,mul*PtsPerFWHM do  fit3[iii,*]=quantile(y[iii,*], quant*0.5)
   endif 
 endfor
 
 Peakshape2=CONVOL(fit2, savgolFilter, /EDGE_TRUNCATE)
 Peakshape2= Peakshape2-min(Peakshape2[1900:2100])
 Peakshape2= Peakshape2/max(Peakshape2)
 indmax=where(Peakshape2 eq max(Peakshape2))
 for iii=min(indmax)-10,0,-1 do if(Peakshape2[iii] gt Peakshape2[iii+1]) then Peakshape2[iii]=Peakshape2[iii+1]*0.996 ;remove noise on right end
 for iii=max(indmax)+10,mul*PtsPerFWHM do if(Peakshape2[iii] gt Peakshape2[iii-1]) then Peakshape2[iii]=Peakshape2[iii-1]*0.996 ;remove noise on left end
 if(max(where(Peakshape2 lt 0)) gt -0.5) then Peakshape2[where(Peakshape2 lt 0)]=0
 ind0=where(abs(xPeakshape) lt 0.000001)
 if(indmax gt ind0) then begin   ; put the max to center...
   tt=indmax-ind0
   Peakshape2=[Peakshape2[tt:*],fltarr(tt)]
   fit2=[fit2[tt:*],fltarr(tt)]
 endif
 if(indmax lt ind0) then begin
   tt=-indmax+ind0
   Peakshape2=[fltarr(tt),Peakshape2[0:mul*PtsPerFWHM-tt]]
   fit2=[fltarr(tt),fit2[0:mul*PtsPerFWHM-tt]]
 endif
 fit2=fit2/max(fit2[1950:2050]); i.e. this range is one time FWHM
 Peakshape2=Peakshape2/max(Peakshape2[1950:2050]); i.e. this range is one time FWHM
 
 Peakshape3=CONVOL(fit3, savgolFilter, /EDGE_TRUNCATE)
 Peakshape3= Peakshape3-min(Peakshape3[1900:2100])
 Peakshape3= Peakshape3/max(Peakshape3)
 indmax=where(Peakshape3 eq max(Peakshape3))
 for iii=min(indmax)-10,0,-1 do if(Peakshape3[iii] gt Peakshape3[iii+1]) then Peakshape3[iii]=Peakshape3[iii+1]*0.996 ;remove noise on right end
 for iii=max(indmax)+10,mul*PtsPerFWHM do if(Peakshape3[iii] gt Peakshape3[iii-1]) then Peakshape3[iii]=Peakshape3[iii-1]*0.996 ;remove noise on left end
 if(max(where(Peakshape3 lt 0)) gt -0.5) then Peakshape3[where(Peakshape3 lt 0)]=0
 ind0=where(abs(xPeakshape) lt 0.000001)
 if(indmax gt ind0) then begin   ; put the max to center...
   tt=indmax-ind0
   Peakshape3=[Peakshape3[tt:*],fltarr(tt)]
   fit3=[fit3[tt:*],fltarr(tt)]
 endif
 if(indmax lt ind0) then begin
   tt=-indmax+ind0
   Peakshape3=[fltarr(tt),Peakshape3[0:mul*PtsPerFWHM-tt]]
   fit3=[fltarr(tt),fit3[0:mul*PtsPerFWHM-tt]]
 endif
 fit3=fit3/max(fit3[1950:2050]); i.e. this range is one time FWHM
 Peakshape3=Peakshape3/max(Peakshape3[1950:2050]); i.e. this range is one time FWHM

 
 
 Peakshape=CONVOL(fit, savgolFilter, /EDGE_TRUNCATE)
 Peakshape= Peakshape-min(Peakshape[1900:2100])
 Peakshape= Peakshape/max(Peakshape)
 indmax=where(Peakshape eq max(Peakshape))
 for iii=min(indmax)-10,0,-1 do if(Peakshape[iii] gt Peakshape[iii+1]) then Peakshape[iii]=Peakshape[iii+1]*0.996 ;remove noise on right end
 for iii=max(indmax)+10,mul*PtsPerFWHM do if(Peakshape[iii] gt Peakshape[iii-1]) then Peakshape[iii]=Peakshape[iii-1]*0.996 ;remove noise on left end
 if(max(where(Peakshape lt 0)) gt -0.5) then Peakshape[where(Peakshape lt 0)]=0 
 ind0=where(abs(xPeakshape) lt 0.000001)
 if(indmax gt ind0) then begin   ; put the max to center...
      tt=indmax-ind0
      Peakshape=[Peakshape[tt:*],fltarr(tt)]
      fit=[fit[tt:*],fltarr(tt)]
      m59=[m59[tt:*],fltarr(tt)]
      m21=[m21[tt:*],fltarr(tt)]
      y=[y[tt:*,*],fltarr(tt,dims[1])]
 endif
 if(indmax lt ind0) then begin
      tt=-indmax+ind0
      Peakshape=[fltarr(tt),Peakshape[0:mul*PtsPerFWHM-tt]]
      fit=[fltarr(tt),fit[0:mul*PtsPerFWHM-tt]]
      m59=[fltarr(tt),m59[0:mul*PtsPerFWHM-tt]]
      m21=[fltarr(tt),m21[0:mul*PtsPerFWHM-tt]]
      y=[fltarr(tt,dims[1]),y[0:mul*PtsPerFWHM-tt,*]]
      
 endif
 m59=m59/max(m59[1950:2050]); i.e. this range is one time FWHM
 m21=m21/max(m21[1950:2050]); i.e. this range is one time FWHM
 fit=fit/max(fit[1950:2050])
 Peakshape=Peakshape/max(Peakshape[1950:2050])       
 
 ERRplus=abs(Peakshape2-peakshape)
 helpi=median(ERRplus[where(ERRplus gt 0)])
 helpi2=ERRplus[0:1949]
 helpi3=ERRplus[2051:*]
 helpi2[where(helpi2 lt helpi)]=helpi
 helpi3[where(helpi3 lt helpi)]=helpi
ERRplus=[helpi2,ERRplus[1950:2050],helpi3]



ERRmin=abs(peakshape-Peakshape3)
helpi=median(ERRmin[where(ERRmin gt 0)])
helpi2=ERRmin[0:1949]
helpi3=ERRmin[2051:*]
helpi2[where(helpi2 lt helpi)]=helpi
helpi3[where(helpi3 lt helpi)]=helpi
ERRmin=[helpi2,ERRmin[1950:2050],helpi3]




 
 WINDOW, 5, xsize=1200,ysize=800
 !P.MULTI = [0,2,1] 
 DEVICE, DECOMPOSED = 0 
 loadct,5 
 plot,[-mul/10,mul/10],[0,1],color=0,background=-1,psym = 4,yrange=[0, 1.4], ytitle='relative intensity',xtitle='relative m/z [multiples of FWHM]', thick=2,charsize=1.5, charthick=2
 oplot,[-mul,mul],[0,1],color=-1,psym = 4, thick=2
 oplot,[0,0],[0.0001,1.2],color=0
 oplot,[-mul,mul],[0.5,0.5],color=0
 for iii=0,dims[1]-1 do oplot , xPeakshape, y[*,iii] ,color=145     
 
 ;oplot, xPeakshape,m59+0.0001, color=110, thick=5
 oplot, xPeakshape,fit, color=95, thick=5
 oplot, xPeakshape,Peakshape+0.0001, color=50, thick=2
 oplot, xPeakshape,Peakshape2+0.0001, color=0, thick=2
 oplot, xPeakshape,Peakshape3+0.0001, color=110, thick=2
 
 xyouts,-3.5,1.4,Name,charsize=1.3, charthick=2, color=1
 ;xyouts,-3.5,1.34,'mass res. (FWHM): '+string(reso,format='(I4)'),charsize=1.3, charthick=2, color=1
 xyouts,-3.5,1.31,string(max(size(y[0,*],/dimensions)),format='(I4)')+' individual peaks',charsize=1.3, charthick=2, color=135
 xyouts,-3.5,1.25,string(quant,format='(f4.2)')+'-quantile of'+string(max(size(y[0,*],/dimensions)),format='(I4)')+' peaks',charsize=1.3, charthick=2, color=95
 xyouts,-3.5,1.19,'Savitzky-Golay smooth filt',charsize=1.3, charthick=2, color=50
 xyouts,-3.5,1.13,'S-G sm filt2 (based on '+ string(quant*1.5,format='(f4.2)')+'-quantile)' ,charsize=1.3, charthick=2, color=0
 xyouts,-3.5,1.07,'S-G sm filt2 (based on '+ string(quant*0.5,format='(f4.2)')+'-quantile)' ,charsize=1.3, charthick=2, color=110
 sigma=1/(2*SQRT(2*ALOG(2)))        
 plot,[-mul/10,mul/10],[0,1],color=0,background=-1,ytitle='relative intensity',xtitle='relative m/z [multiples of FWHM]',psym = 4, thick=2,charsize=1.5, charthick=2, yrange=[0,1.4]
 oplot,[-mul/10,mul/10],[0,1],color=-1,psym = 4, thick=2
 oplot,[4*sigma,4*sigma],[0,1.08],color=0
 oplot,[2*sigma,2*sigma],[0,1.08],color=0
 oplot,[0,0],[0.9,1.02],color=0
 oplot,[-2*sigma,-2*sigma],[0,1.08],color=0
 oplot,[-4*sigma,-4*sigma],[0,1.08],color=0
 oplot,[-mul,mul],[0.5,0.5],color=0
 oplot, xPeakshape,m59, color=175, thick=5
 oplot, xPeakshape,m21, color=135, thick=5
 oplot, xPeakshape,fit, color=95, thick=5
 oplot, xPeakshape,Peakshape, color=50, thick=2
 oplot, xPeakshape, ERRplus*10.0, color=0, thick=2
 oplot, xPeakshape, ERRmin*10.0, color=110, thick=2
 ;xyouts,-3.5,1.4,Name,charsize=1.3, charthick=2, color=1
 xyouts,-3.5,1.4,'mass res. (FWHM): '+string(reso,format='(I4)'),charsize=1.3, charthick=2, color=1
 xyouts,-3.5,1.19,'Savitzky-Golay smooth filt',charsize=1.3, charthick=2, color=50
 xyouts,-3.5,1.25,string(quant,format='(f4.2)')+'-quantile of'+string(max(size(y[0,*],/dimensions)),format='(I4)')+' peaks',charsize=1.3, charthick=2, color=95
 xyouts,-3.5,1.31,'m/z 59.049',charsize=1.3, charthick=2, color=175
 xyouts,-1,1.31,'m/z 21.022',charsize=1.3, charthick=2, color=135
 xyouts,-3.1,1.09,'%  at +/- 2 & 4 sig:',charsize=1.3, charthick=2, color=1
 xyouts,-8*sigma,1.04,string(100*total(Peakshape[where(xPeakshape lt -4*sigma )])/total(Peakshape),format='(F4.1)'),charsize=1.3, charthick=2, color=1
 xyouts,-4.4*sigma,1.04,string(100*total(Peakshape[where(xPeakshape ge -4*sigma and xPeakshape lt -2*sigma)])/total(Peakshape),format='(F4.1)'),charsize=1.3, charthick=2, color=1
 xyouts,-1.5*sigma,1.04,string(100*total(Peakshape[where(xPeakshape ge -2*sigma and xPeakshape lt 2*sigma)])/total(Peakshape),format='(F4.1)'),charsize=1.3, charthick=2, color=1
 xyouts,1.6*sigma,1.04,string(100*total(Peakshape[where(xPeakshape ge 2*sigma and xPeakshape lt 4*sigma)])/total(Peakshape),format='(F4.1)'),charsize=1.3, charthick=2, color=1
 xyouts,4.5*sigma,1.04,string(100*total(Peakshape[where(xPeakshape ge 4*sigma)])/total(Peakshape),format='(F4.1)'),charsize=1.3, charthick=2, color=1

 xyouts,-3.9,median(ERRplus)*11.5,'rel. shape err. * 10',charsize=0.8, charthick=1, color=1
 xyouts,-3.9,median(ERRmin)*11.5,'rel. shape err. * 10',charsize=0.8, charthick=1, color=110

  for kk=0,max(size(name,/dimensions))-1 do  write_jpeg, destfold+'FileInfo/PeakShape/'+'PeakShape_'+name[kk]+'.jpg',tvrd(0,true=1), true=1
 WDELETE, 5
 endif else begin
            reso=getpar('DefaultRes')
         mul=40
        PtsPerFWHM=100
        xPeakshape=findgen(mul*PtsPerFWHM+1)
        xPeakshape=2*mul*xPeakshape/max(xPeakshape)-mul
        zz=xPeakshape* 2*SQRT(2*ALOG(2)) 
        Peakshape=exp(-0.5*zz^2)  
        Peakshape2=exp(-0.5*zz^2)
 endelse
 baselineSM=baselineSM/(cycles*extractions)
 
 endif else begin ;if(getpar('PeakAnalysis') eq 1)
        reso=getpar('DefaultRes')
        baselinesm=[-9999,-9999]
        mul=40
        PtsPerFWHM=100
        xPeakshape=findgen(mul*PtsPerFWHM+1)
        xPeakshape=2*mul*xPeakshape/max(xPeakshape)-mul
        zz=xPeakshape* 2*SQRT(2*ALOG(2)) 
        Peakshape=exp(-0.5*zz^2)      
        Peakshape2=exp(-0.5*zz^2)
 endelse
       
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Plot Mass Scale Calibration
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;
    WINDOW, 3, xsize=1250,ysize=700
    DEVICE, DECOMPOSED = 0 
    loadct,38
    !P.MULTI = [0,1,4] 
    !x.oMARGIN=[8,8]
    !Y.MARGIN = [3, 1]
 
    
    y=SumSpectrum/duration
    ymax=max(SumSpectrum/duration)
    y[where(y gt ymax/10)]=ymax/10
    
    
    plot, y, xtitle='TOF-bin',ytitle='signal [bin-cps]', xmargin=[15,6],background=-1,yrange=[0,ymax*0.13],thick=2, color=0, charsize=3
    loadct,31
    for ccc=0,23 do oplot,  [Top16[ccc,7],Top16[ccc,7]],  [ymax,ymax+ymax/15]/10 ,color=28, thick=3
    xyouts,max(size(SumSpectrum,/dimensions))/15,ymax*0.115, name, color=16, charsize=1.5,charthick=2      
 
    masses=m2t(peaklist[*,7],a,t0,ex,SampInt,/time)
    mm=[19.0178, 37.0284, 29.9974, 31.9893, 45.9924]
    mm_1=[21.022, 39.0327,30.994, 33.9935, 47.9966]
    mm_2=[487, 242, 269, 242, 242]
    mm2=['m19: ','m37: ','m30: ','m32: ','m46: ']
    
    ;   calPairs=  [[21.022, 59.049], [30.994, 47.997], [21.022, 30.994], [33.994, 47.997], [21.022, 33.994]]
    ; NO  29.997   30.994
    ; NO2  45.992  47.9966
    ; O2  31.989 33.9935
    
    Psig=0
    Isig=0
    xyouts,max(size(SumSpectrum,/dimensions))/1.9,ymax*0.118, 'prim. sig [cps], local bg [cps], ratio sig/bg' , color=16, charsize=1.5,charthick=1  
    xyouts,0.9,0.5,/normal,rat120,color=16
    for r=0,4 do begin
            dm=1000*min(abs(masses-mm[r]))
            rr=floor(m2t([mm[r]-max([0.005, mm[r]/reso]),mm[r]+max([0.005, mm[r]/reso])],a,t0,ex,SampInt))
            sig=(corrtr(79)/corrtr(mm[r]))*total(SumSpectrum[rr[0]:rr[1]])/duration
            rr2=floor(m2t([mm_1[r]-max([0.005, mm_1[r]/reso]),mm_1[r]+max([0.005, mm_1[r]/reso])],a,t0,ex,SampInt))
            sig2=(corrtr(79)/corrtr(mm_1[r]))*mm_2[r]*total(SumSpectrum[rr2[0]:rr2[1]])/duration
            pp=floor((rr2[1]-rr2[0])/2)
            if(floor(1+(rr2[1]-rr2[0])/2) eq pp) then qq=pp-1 else qq=pp
            bk=total([SumSpectrum[-1-qq+rr2[0]:rr2[0]-1],SumSpectrum[1+rr2[1]:rr2[1]+1+pp]])/duration
            bk2=(corrtr(79)/corrtr(mm_1[r]))*mm_2[r]*total([SumSpectrum[-1-qq+rr2[0]:rr2[0]-1],SumSpectrum[1+rr2[1]:rr2[1]+1+pp]])/duration
            sig2=sig2-bk2
            SIGtoBK=sig2/bk2
           ;xyouts,max(size(SumSpectrum,/dimensions))/1.8,ymax*0.095-ymax*0.02*r, mm2[r]+string(sig,Format='(e11.1)')+string(sig2,Format='(e11.1)')+', dm='+string(dm,format='(F5.1)') , color=16, charsize=1.5,charthick=1  
            xyouts,max(size(SumSpectrum,/dimensions))/1.9,ymax*0.095-ymax*0.02*r, mm2[r]+string(sig2,Format='(e11.1)')+string(bk,Format='(e11.1)')+string(SIGtoBK,Format='(F8.2)'), color=16, charsize=1.5,charthick=1  
            Psig=[Psig,sig2]
    endfor
    Psig=Psig[1:*]
   if(where(Psig eq max(Psig)) lt 1.5 ) then mode='H3O+' else if(where(Psig eq max(Psig)) eq 3 ) then mode='O2+' else mode='NO+'
   xyouts,max(size(SumSpectrum,/dimensions))/2.8,ymax*0.115, mode, color=28, charsize=1.5,charthick=2      
   xyouts,max(size(SumSpectrum,/dimensions))/2.8,ymax*0.090, 'res='+string(floor(reso),format='(I4)'), color=28, charsize=1.5,charthick=2      
 xyouts,max(size(SumSpectrum,/dimensions))/2.8,ymax*0.065, 'base='+string(median(baselineSM),Format='(e10.1)'), color=28, charsize=1.5,charthick=2 
 
 
    tst=testSCALE(m2t(peaklist[*,7],a_raw,t0_raw,0.5, SampInt,/time), lib2,instrument ,ions,devs)
    print, 'rough cal:               a=', a_raw, '       t0=',t0_raw, '       ex=',0.5,'        scores:',tst.scorppm
    masses=tst.masses
    filter=where(abs(tst.deviation) lt 0.05)
    !x.oMARGIN=[54,36]
    !Y.MARGIN = [5, 1]
 
    if(max(filter) gt 0) then plot, masses[filter],1000*tst.deviation[filter], xtitle='m/z',ytitle='',yrange=[-60,60],background=239, color=16, psym = 4, xcharsize=3, ycharsize=3, xmargin=[15,6]
    if(max(filter) gt 0) then oplot, [0,800], [0,0], color=16
    filter=where(abs(tst.deviation) lt 0.002)
    if(max(filter) gt 0) then oplot, masses[filter],1000*tst.deviation[filter], psym = 4,thick=2, color=28
    if(max(filter) gt 0) then xyouts, 10,45, string(floor(tst.scorppm),format='(I4)')+' matches within 20 ppm, '+'mean deviation: '+string(20-100*(tst.scorppm-floor(tst.scorppm)),format='(F5.1)')+' ppm    a='+string(a_raw,format='(F7.1)')+' t0='+string(t0_raw,format='(F12.3)')+' ex=0.50000' ,color=28, charsize=1.2,charthick=2
    tst=testSCALE(m2t(peaklist[*,7],a_fine,t0_fine,ex_fine, SampInt,/time), lib2,instrument ,ions,devs)
    scorParVar=floor(tst.scorppm)
    print, 'fine cal:               a=', a, '       t0=',t0, '       ex=',ex,'        scores:',tst.scorppm
    masses=tst.masses
    filter=where(abs(tst.deviation) lt 0.05)
    if(max(filter) gt 0) then plot, xtitle='',ytitle='deviation to closest library match [mDa]',yrange=[-60,60],background=239, color=16, masses[filter],1000*tst.deviation[filter], psym = 4, xcharsize=3, ycharsize=3, xmargin=[15,6]
    if(max(filter) gt 0) then oplot, [0,800], [0,0], color=16
    filter=where(abs(tst.deviation) lt 0.002)
    if(max(filter) gt 0) then oplot, masses[filter],1000*tst.deviation[filter], psym = 4, thick=2, color=28
    if(max(filter) gt 0) then xyouts, 10, 45, string(floor(tst.scorppm),format='(I4)')+' matches within 20 ppm, '+'mean deviation: '+string(20-100*(tst.scorppm-floor(tst.scorppm)),format='(F5.1)')+' ppm    a='+string(a_fine,format='(F7.1)')+' t0='+string(t0_fine,format='(F12.3)')+' ex='+string(ex_fine,format='(F7.5)'),color=28, charsize=1.2,charthick=2
    if(var_exists(a3) gt -0.5) then begin
            tst=testSCALE(m2t(peaklist[*,7],a3,t03,ex3, SampInt,/time), lib2,instrument ,ions,devs)
            scor3=floor(tst.scorppm)
            print, 'fine cal:               a=', a3, '       t0=',t03, '       ex=',ex3,'        scores:',tst.scorppm
            masses=tst.masses
            filter=where(abs(tst.deviation) lt 0.05)
            if(max(filter) gt 0) then plot, xtitle='',ytitle='',yrange=[-60,60],background=239, color=16, masses[filter],1000*tst.deviation[filter], psym = 4, xcharsize=3, ycharsize=3, xmargin=[15,6]
            if(max(filter) gt 0) then oplot, [0,800], [0,0], color=16
            filter=where(abs(tst.deviation) lt 0.002)
            if(max(filter) gt 0) then oplot, masses[filter],1000*tst.deviation[filter], psym = 4, thick=2, color=28
            if(max(filter) gt 0) then xyouts, 10, 45,string(floor(tst.scorppm),format='(I4)')+' matches within 20 ppm, '+'mean deviation: '+string(20-100*(tst.scorppm-floor(tst.scorppm)),format='(F5.1)')+' ppm    a='+string(a3,format='(F7.1)')+' t0='+string(t03,format='(F12.3)')+' ex='+string(ex3,format='(F7.5)'),color=28, charsize=1.2,charthick=2
    endif else begin
            plot, [0,1],[0,1],background=239, color=239
            xyouts, 0.2, 0.50,'No 3-point calibration (3rd point missing) ',color=28, charsize=2,charthick=2
            a3=-9999 & t03=-9999 & ex3=-9999 & scor3=-9999
    endelse
    for kk=0,max(size(name,/dimensions))-1 do  write_jpeg, destfold+'FileInfo/Time2MassPAR/'+'MassScale_'+name[kk]+'.jpg',tvrd(0,true=1), true=1
    !x.oMARGIN=[0,0]
   
 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;prepare output:
    ;mass range, a, to, counts18,21,29,30,32,38,59, res18,21,29,30,32,38,59, error
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   
    
    
    maxMass=m2t(max(x),a,t0,ex,Sampint)
    list=[18.0338,21.0221,29.0134,29.9974,31.9893,38.0326,59.0491,79.0542,93.0699,137.1325]
    masses=m2t(peaklist[*,7],a,t0,ex,SampInt,/time)
    counts=0
    res=0
    rsrs=reso
    for k=0,9 do begin
            cnts=0
            rs=0
            if (min(abs(masses-list[k])) lt 0.003) then begin 
                    i1=sort(abs(masses-list[k])) & i1=i1[0] 
                    tL=m2t(m2t(peaklist[i1,7],a,t0,ex,SampInt,/time)*(1-1/(rsrs*2*SQRT(2*ALOG(2)))),a,t0,ex,SampInt)
                    tH=m2t(m2t(peaklist[i1,7],a,t0,ex,SampInt,/time)*(1+1/(rsrs*2*SQRT(2*ALOG(2)))),a,t0,ex,SampInt)
                    subdata=SumSpectrum[tL-1:tH+1]     
                    subx=x[tL-1:tH+1]      
                    fitLow=GAUSSFIT(subx,subdata,coeff, NTERMS=3)
                    cnts=coeff[0]*coeff[2]*sqrt(2*!pi)
                    ms=coeff[1]
                    msL=coeff[1]-SQRT(2*ALOG(2))*coeff[2]
                    msH=coeff[1]+SQRT(2*ALOG(2))*coeff[2]
                    rs=((ms-t0)/a)^2/(((msH-t0)/a)^2-((msL-t0)/a)^2)
            endif else begin
                    cnts=-9999
                    rs=-9999
            endelse
            counts=[counts,cnts]
            res=[res,rs]
    endfor
    
    
    output=[maxMass,a,t0,counts[1:10],res[1:10]]
    massnames=['m18.0338','m21.0221','m29.0134','m29.9974','m31.9893','m38.0326','m59.0491','m79.0542','m93.0699','m137.1325']
    peaklist[*,0]=masses
    peaklist[*,1]=m2t(peaklist[*,1],a,t0,ex,SampInt,/time)     
    peaklist[*,2]=m2t(peaklist[*,2],a,t0,ex,SampInt,/time)    
    peaklist[*,3]=masses/(peaklist[*,2]-peaklist[*,1])
    peaklistnames=['PeakMax[Da]','StartPeak[Da]','EndPeak[Da]','PeakBroadness','SlopeMax','SlopeMin','PeakHight[counts]','PeakMax[time]','BaseHight[counts]']
    s1=CREATE_STRUCT('MaxMass',maxMass,'a', a,'t0',t0,'ex',ex,'scorParVar',scorParVar,'a3', a3,'t03',t03,'ex3',ex3,'scor3',scor3,'massnames',massnames,$
    'counts', counts[1:10],'res',res[1:10],'masslistnames',peaklistnames,'masslist',peaklist, $
    'baseline', baselineSM, 'PeakShape',[[xPeakshape],[Peakshape],[Peakshape2],[Peakshape3]],'resolution',reso, 'mode', mode)
endif else begin ;this is done if calcrude failed
  s1=CREATE_STRUCT('MaxMass',-9999,'a', -9999,'t0',-9999,'ex',-9999,'scorParVar',-9999,'a3', -9999,'t03',-9999,'ex3',-9999,'scor3',-9999,'massnames',-9999,$
    'counts', -9999,'res',-9999,'masslistnames',-9999,'masslist',-9999, $
    'baseline',-9999, 'PeakShape',-9999,'resolution',-9999, 'mode',-9999)
endelse   
    Return, s1
end



function PS2,x,y

  sepp=8 ; limit to seperate independent peaks, unit: bins of bin mass scale,i.e. 64 ppm above 125 Da
  ysm=smooth(y,5)
  dysm=deriv(x,ysm)
  length=size(y,/dimensions)
  index=lindgen(length)
  PEAKS=max([[ysm],[0,ysm[0:length-2]],[ysm[1:length-1],0],[0,0,ysm[0:length-3]],[ysm[2:length-1],0,0]],dimension=2); PEAKS[i] = max of ysm[i-2:i+2] for all elements
  PEAKS[where(dysm lt 0)]=0
  PEAKS[where([dysm[1:length-1],0] gt 0)]=0
  PEAKS[where(PEAKS lt max(ysm)*getpar('LowThresh'))]=0
  PEAKS[where(PEAKS lt 0.55)]=0
  PEAKS=index[where(PEAKS gt 0)]
  length2=max(size(PEAKS,/dimensions)) ; number of peaks

  print, 'HHGHGH',length2
  xpeaks=0
  sgma=0
  ymax=0
  ymax2=0
  aerM1s=0
  aerM2s=0
  aerP1s=0
  aerP2s=0
  notres=1
  for i=0,length2-1 do begin

    indis=lindgen(11)+PEAKS[i]-5
    xi=x[indis]

    if(max(y[indis])le 10 ) then   r=gaussfit(xi,y[indis],coeff, chisq=fff,nterms=3) else  r=gaussfit(xi,y[indis]+0.0001, coeff, chisq=fff)
    if(coeff[0] lt 0 or coeff[0] gt max(y[indis])*3 or 1e6*abs(coeff[2])/mean(xi) lt 5 or coeff[2] le 0 ) then   r=gaussfit(xi,ysm[indis],coeff, chisq=fff, nterms=3)
    ; if(coeff[0] lt 0 or coeff[0] gt max(y[indis])*3 or coeff[2] lt (5/2*SQRT(2*ALOG(2)))*abs(coeff[2])/mean(xi) or max(y[indis])le 5 ) then   r=gaussfit(xi,ysm[indis],coeff, chisq=fff, nterms=3)
    ;   if (coeff[1] gt 125) then seplim=48 else seplim=float(sepp)*1000/coeff[1]
    seplim= max(float(sepp)*1e6*(x[where(abs(x-coeff[1]) eq min(abs(x-coeff[1])))+1]- x[where(abs(x-coeff[1]) eq min(abs(x-coeff[1])))])/coeff[1])
    xpeaks=[xpeaks,coeff[1]]
    ymax=[ymax,coeff[0]]
    flt=where(abs(x-coeff[1]) eq min(abs(x-coeff[1])))
    ymax2=[ymax2,ysm[flt[0]]]
    sgma=[sgma,coeff[2]]
    flt2=where(x gt coeff[1]-2*coeff[2] and x le coeff[1]-coeff[2]) & if(max(flt2) lt -0.5) then flt2=flt-1
    aerM2s=[aerM2s,total(y[flt2])]
    flt2=where(x gt coeff[1]-coeff[2] and x le coeff[1]) & if(max(flt2) lt -0.5) then flt2=flt
    aerM1s=[aerM1s,total(y[flt2])]
    flt2=where(x gt coeff[1] and x le coeff[1]+coeff[2]) & if(max(flt2) lt -0.5) then flt2=flt
    aerP1s=[aerP1s,total(y[flt2])]
    flt2=where(x gt coeff[1]+coeff[2] and x le coeff[1]+2*coeff[2]) & if(max(flt2) lt -0.5) then flt2=flt+1
    aerP2s=[aerP1s,total(y[flt2])]
    check=0

    if(coeff[0] lt 0) then notres=[notres,1] else if(coeff[0] gt 3.5*max(y[indis])) then notres=[notres,1] else $
      if(coeff[1] lt min(xi) or coeff[1] gt max(xi)) then notres=[notres,1] else $
      if(coeff[2] lt 0) then notres=[notres,1] else $
      if(min(abs(xpeaks[0:i]-coeff[1])/coeff[1]) lt seplim*1e-6) then check=1 else $
      notres=[notres,0]

    if(check eq 1) then begin
      iii=where(1e6*abs((xpeaks[0:i]-coeff[1])/coeff[1]) lt seplim)
      if(min(notres[iii]) eq 1) then notres=[notres,0] else begin
        iv=iii[where(notres[iii] eq 0)]
        if (max(ymax2[iv]) gt ysm[flt[0]]) then notres=[notres,1]
        if (max(ymax2[iv]) le ysm[flt[0]]) then begin
          notres[iv]=1
          notres=[notres,0]
        endif
      endelse
    endif
    ;  if( x[peaks[i]] gt 180 and x[peaks[i]] lt 190 ) then  print, fff, coeff[0],coeff[1],coeff[2],x[peaks[i]],max(y[indis])

  endfor
  ;notres[where(ysm[PEAKS] eq 0)
  xpeaks=xpeaks[where(notres eq 0)]
  sgma=sgma[where(notres eq 0)]
  ymax=ymax[where(notres eq 0)]
  ymax2=ymax2[where(notres eq 0)]
  aerM1s=aerM1s[where(notres eq 0)]
  aerM2s=aerM2s[where(notres eq 0)]
  aerP1s=aerM1s[where(notres eq 0)]
  aerP2s=aerM2s[where(notres eq 0)]
  PEAKS=[0,PEAKS]
  PEAKS=PEAKS[where(notres eq 0)]
  area=ymax*sgma
  names=['xMaxDeriv','xMaxGauss','sigma','yMaxFit','Area','ysm@xpeaks','aer-1*sigma','aer-2*sigma','aer+1*sigma','aer+2*sigma']


  PeakList=[[x[PEAKS]],[xpeaks],[sgma],[ymax],[area],[ymax2],[aerM1s],[aerM2s],[aerP1s],[aerP2s]]
  ;PeakList=[[x[PEAKS]],[xpeaks[1:*]],[fwhm[1:*]],[ymax[1:*]],[area[1:*]]]
  s1=CREATE_STRUCT('names',names,'data',PeakList)


  Return, s1
end


function PS2_ccc,x,y

sepp=8 ; limit to seperate independent peaks, unit: bins of bin mass scale,i.e. 64 ppm above 125 Da
ysm=smooth(y,5)
dysm=deriv(x,ysm)  
length=size(y,/dimensions)
index=lindgen(length)
PEAKS=max([[ysm],[0,ysm[0:length-2]],[ysm[1:length-1],0],[0,0,ysm[0:length-3]],[ysm[2:length-1],0,0]],dimension=2); PEAKS[i] = max of ysm[i-2:i+2] for all elements
PEAKS[where(dysm lt 0)]=0
PEAKS[where([dysm[1:length-1],0] gt 0)]=0
PEAKS[where(PEAKS lt max(ysm)*getpar('LowThresh'))]=0
PEAKS[where(PEAKS lt 0.55)]=0
PEAKS=index[where(PEAKS gt 0)]   
length2=max(size(PEAKS,/dimensions)) ; number of peaks  

print, 'HHGHGH',length2
xpeaks=0
sgma=0
ymax=0
ymax2=0
aerM1s=0
aerM2s=0
aerP1s=0
aerP2s=0
notres=1
for i=0,length2-1 do begin
 
        indis=lindgen(11)+PEAKS[i]-5
        xi=x[indis]
     ;   r=gaussfit(xi,y[indis]+0.0001, coeff, chisq=fff)
       ; if(max(y[indis])le 10 ) then   r=gaussfit(xi,y[indis],coeff, chisq=fff,nterms=3)
      ;  if(coeff[0] lt 0 or coeff[0] gt max(y[indis])*3 or 1e6*abs(coeff[2])/mean(xi) lt 5 or coeff[2] le 0 ) then   r=gaussfit(xi,ysm[indis],coeff, chisq=fff, nterms=3)
    if(max(y[indis])le 10 ) then   r=gaussfit(xi,y[indis],coeff, chisq=fff,nterms=3) else  r=gaussfit(xi,y[indis]+0.0001, coeff, chisq=fff)
    if(coeff[0] lt 0 or coeff[0] gt max(y[indis])*3 or 1e6*abs(coeff[2])/mean(xi) lt 5 or coeff[2] le 0 ) then   r=gaussfit(xi,ysm[indis],coeff, chisq=fff, nterms=3)
  
     
     
       seplim= max(float(sepp)*1e6*(x[where(abs(x-coeff[1]) eq min(abs(x-coeff[1])))+1]- x[where(abs(x-coeff[1]) eq min(abs(x-coeff[1])))])/coeff[1])
        xpeaks=[xpeaks,coeff[1]]
        ymax=[ymax,coeff[0]]
        flt=where(abs(x-coeff[1]) eq min(abs(x-coeff[1])))
        ymax2=[ymax2,ysm[flt[0]]]
        sgma=[sgma,coeff[2]]
        flt2=where(x gt coeff[1]-2*coeff[2] and x le coeff[1]-coeff[2]) & if(max(flt2) lt -0.5) then flt2=flt-1
        aerM2s=[aerM2s,total(y[flt2])]
        flt2=where(x gt coeff[1]-coeff[2] and x le coeff[1]) & if(max(flt2) lt -0.5) then flt2=flt
        aerM1s=[aerM1s,total(y[flt2])]
        flt2=where(x gt coeff[1] and x le coeff[1]+coeff[2]) & if(max(flt2) lt -0.5) then flt2=flt
        aerP1s=[aerP1s,total(y[flt2])]
        flt2=where(x gt coeff[1]+coeff[2] and x le coeff[1]+2*coeff[2]) & if(max(flt2) lt -0.5) then flt2=flt+1
        aerP2s=[aerP1s,total(y[flt2])]
        check=0
        
        if(coeff[0] lt 0) then notres=[notres,1] else if(coeff[0] gt 2.5*max(y[indis])) then notres=[notres,1] else $
              if(coeff[1] lt min(xi) or coeff[1] gt max(xi)) then notres=[notres,1] else $
              if(coeff[2] lt 0) then notres=[notres,1] else $
              if(min(abs(xpeaks[0:i]-coeff[1])/coeff[1]) lt seplim*1e-6) then check=1 else $
               notres=[notres,0]
       
        if(check eq 1) then begin
           iii=where(1e6*abs((xpeaks[0:i]-coeff[1])/coeff[1]) lt seplim) 
           if(min(notres[iii]) eq 1) then notres=[notres,0] else begin
               iv=iii[where(notres[iii] eq 0)]
                if (max(ymax2[iv]) gt ysm[flt[0]]) then notres=[notres,1] 
                if (max(ymax2[iv]) le ysm[flt[0]]) then begin
                    notres[iv]=1
                    notres=[notres,0]
                endif    
           endelse
       endif
      ;  if( x[peaks[i]] gt 180 and x[peaks[i]] lt 190 ) then  print, fff, coeff[0],coeff[1],coeff[2],x[peaks[i]],max(y[indis])
    
endfor   
;notres[where(ysm[PEAKS] eq 0)
   xpeaks=xpeaks[where(notres eq 0)]
   sgma=sgma[where(notres eq 0)]
   ymax=ymax[where(notres eq 0)]
   ymax2=ymax2[where(notres eq 0)]
   aerM1s=aerM1s[where(notres eq 0)]
   aerM2s=aerM2s[where(notres eq 0)]
   aerP1s=aerM1s[where(notres eq 0)]
   aerP2s=aerM2s[where(notres eq 0)]
   PEAKS=[0,PEAKS]
   PEAKS=PEAKS[where(notres eq 0)]
   area=ymax*sgma
names=['xMaxDeriv','xMaxGauss','sigma','yMaxFit','Area','ysm@xpeaks','aer-1*sigma','aer-2*sigma','aer+1*sigma','aer+2*sigma']


PeakList=[[x[PEAKS]],[xpeaks],[sgma],[ymax],[area],[ymax2],[aerM1s],[aerM2s],[aerP1s],[aerP2s]]
;PeakList=[[x[PEAKS]],[xpeaks[1:*]],[fwhm[1:*]],[ymax[1:*]],[area[1:*]]]
s1=CREATE_STRUCT('names',names,'data',PeakList)

  
Return, s1
end


function SmoothSumSpec_old, SumSpectrum, a,t0,ex,SampInt,instrument
  compile_opt idl2
  
  ;in:  SumSpectrum, a,t0,ex,SampInt,
   
      faktor=floor(1e-10/sampint)
     if(faktor eq 0) then faktor=1
     
        if(strpos(instrument,'TOF1000') eq 0) then f2=2 else f2=1
  
  savgolFilter = SAVGOL(9*faktor, 9*faktor, 0, floor(10/(f2*faktor)))
        dataX0=CONVOL(SumSpectrum, savgolFilter, /EDGE_TRUNCATE)   
  derdataX0=CONVOL(deriv(dataX0), savgolFilter, /EDGE_TRUNCATE)   
    savgolFilter = SAVGOL(9*faktor, 9*faktor, 0, floor(6/(f2*faktor)))
        dataX1=CONVOL(SumSpectrum, savgolFilter, /EDGE_TRUNCATE)
  derdataX1=CONVOL(deriv(dataX1), savgolFilter, /EDGE_TRUNCATE)   
    savgolFilter = SAVGOL(14*faktor, 14*faktor, 0,  floor(6/(f2*faktor)))
        dataX2=CONVOL(SumSpectrum, savgolFilter, /EDGE_TRUNCATE)
  derdataX2=CONVOL(deriv(dataX2), savgolFilter, /EDGE_TRUNCATE)   
   savgolFilter = SAVGOL(20*faktor, 20*faktor, 0,  floor(6/(f2*faktor)))
   dataX3=CONVOL(SumSpectrum, savgolFilter, /EDGE_TRUNCATE)
  derdataX3=CONVOL(deriv(dataX3), savgolFilter, /EDGE_TRUNCATE)   
  Npts=size(SumSpectrum,/dimensions) 
  Thresh1=m2t(64.6,a,t0,ex,SampInt)
  Thresh2=m2t(144.6,a,t0,ex,SampInt)
  Thresh3=m2t(324.6,a,t0,ex,SampInt)
  data2=SumSpectrum
  if(Npts gt Thresh1) then data2[0:Thresh1-1]=dataX0[0:Thresh1-1] else data2=dataX0
  if(Npts gt Thresh2) then data2[Thresh1:Thresh2-1]=dataX1[Thresh1:Thresh2-1] else  if(Npts gt Thresh1) then data2[Thresh1:*]=dataX1[Thresh1:*]
  if(Npts gt Thresh3) then begin
          data2[Thresh2:Thresh3-1]=dataX2[Thresh2:Thresh3-1] 
          data2[Thresh3:Npts-1]=dataX3[Thresh3:Npts-1]
  endif else  if(Npts gt Thresh2) then data2[Thresh2:Npts-1]=dataX2[Thresh2:Npts-1]
  derivData=deriv(Data2)
  
  if(Npts gt Thresh1) then derivData[0:Thresh1-1]=derdataX0[0:Thresh1-1] else data2=derdataX0
  if(Npts gt Thresh2) then derivData[Thresh1:Thresh2-1]=derdataX1[Thresh1:Thresh2-1] else if(Npts gt Thresh1) then derivData[Thresh1:*]=derdataX1[Thresh1:*]
  if(Npts gt Thresh3) then begin
          derivData[Thresh2:Thresh3-1]=derdataX2[Thresh2:Thresh3-1] 
          derivData[Thresh3:Npts-1]=derdataX3[Thresh3:Npts-1]
  endif else  if(Npts gt Thresh2) then derivData[Thresh2:Npts-1]=derdataX2[Thresh2:Npts-1]
 
 
; out:  data2, derivData, Npts
 

  return,create_struct('Data',data2, 'derivData',derivData, 'Npts', Npts)
end

function SmoothSumSpec, SumSpectrum, a,t0,ex,SampInt,instrument
  compile_opt idl2
  
   Npts=size(SumSpectrum,/dimensions) 
   if(strpos(instrument,'TOF1000') eq 0) then res=2500 else  if(strpos(instrument,'VOCUS') eq 0) then res=10000 else res=5000
   
   
   
   
   
    factor=getpar('SmFact')
  mm=20.6
  ext0= floor(factor*(m2t(mm+mm/res,a , t0, 0.5,SampInt)-m2t(mm,a , t0, 0.5,SampInt)))+1
 mm=64.6
  ext1= floor(factor*(m2t(mm+mm/res,a , t0, 0.5,SampInt)-m2t(mm,a , t0, 0.5,SampInt)))+1
 mm=144.6
  ext2= floor(factor*(m2t(mm+mm/res,a , t0, 0.5,SampInt)-m2t(mm,a , t0, 0.5,SampInt)))+1
 mm=324.6
  ext3= floor(factor*(m2t(mm+mm/res,a , t0, 0.5,SampInt)-m2t(mm,a , t0, 0.5,SampInt)))+1
  
  savgolFilter = SAVGOL(ext0,ext0, 0, min([2*ext0,4+max(floor(factor/1.5))]))
        dataX0=CONVOL(SumSpectrum, savgolFilter, /EDGE_TRUNCATE)   
  savgolFilter = SAVGOL(ext0,ext0, 1, min([2*ext0,4+max(floor(factor/1.5))]))
        derdataX0=CONVOL(SumSpectrum, savgolFilter, /EDGE_TRUNCATE)   
  ;derdataX0=CONVOL(deriv(dataX0), savgolFilter, /EDGE_TRUNCATE)   
    savgolFilter = SAVGOL(ext1,ext1, 0, min([2*ext1,4+max(floor(factor/1.5))]))
        dataX1=CONVOL(SumSpectrum, savgolFilter, /EDGE_TRUNCATE)
    savgolFilter = SAVGOL(ext1,ext1, 1, min([2*ext1,4+max(floor(factor/1.5))]))
        derdataX1=CONVOL(SumSpectrum, savgolFilter, /EDGE_TRUNCATE)
 ; derdataX1=CONVOL(deriv(dataX1), savgolFilter, /EDGE_TRUNCATE)   
    savgolFilter = SAVGOL(ext2,ext2, 0,min([2*ext2,4+max(floor(factor/1.5))]))
        dataX2=CONVOL(SumSpectrum, savgolFilter, /EDGE_TRUNCATE)
   savgolFilter = SAVGOL(ext2,ext2, 1,min([2*ext2,4+max(floor(factor/1.5))]))
        derdataX2=CONVOL(SumSpectrum, savgolFilter, /EDGE_TRUNCATE)
 ; derdataX2=CONVOL(deriv(dataX2), savgolFilter, /EDGE_TRUNCATE)   
   savgolFilter = SAVGOL(ext3,ext3, 0, min([2*ext3,4+max(floor(factor/1.5))]))
   dataX3=CONVOL(SumSpectrum, savgolFilter, /EDGE_TRUNCATE)
   savgolFilter = SAVGOL(ext3,ext3, 1, min([2*ext3,4+max(floor(factor/1.5))]))
   derdataX3=CONVOL(SumSpectrum, savgolFilter, /EDGE_TRUNCATE)
 ; derdataX3=CONVOL(deriv(dataX3), savgolFilter, /EDGE_TRUNCATE)   


  Npts=size(SumSpectrum,/dimensions) 
  Thresh1=m2t(64.6,a,t0,ex,SampInt)
  Thresh2=m2t(144.6,a,t0,ex,SampInt)
  Thresh3=m2t(324.6,a,t0,ex,SampInt)
  data2=SumSpectrum
  if(Npts gt Thresh1) then data2[0:Thresh1-1]=dataX0[0:Thresh1-1] else data2=dataX0
  if(Npts gt Thresh2) then data2[Thresh1:Thresh2-1]=dataX1[Thresh1:Thresh2-1] else  if(Npts gt Thresh1) then data2[Thresh1:*]=dataX1[Thresh1:*]
  if(Npts gt Thresh3) then begin
          data2[Thresh2:Thresh3-1]=dataX2[Thresh2:Thresh3-1] 
          data2[Thresh3:Npts-1]=dataX3[Thresh3:Npts-1]
  endif else  if(Npts gt Thresh2) then data2[Thresh2:Npts-1]=dataX2[Thresh2:Npts-1]
  derivData=deriv(Data2)
  
  if(Npts gt Thresh1) then derivData[0:Thresh1-1]=derdataX0[0:Thresh1-1] else data2=derdataX0
  if(Npts gt Thresh2) then derivData[Thresh1:Thresh2-1]=derdataX1[Thresh1:Thresh2-1] else if(Npts gt Thresh1) then derivData[Thresh1:*]=derdataX1[Thresh1:*]
  if(Npts gt Thresh3) then begin
          derivData[Thresh2:Thresh3-1]=derdataX2[Thresh2:Thresh3-1] 
          derivData[Thresh3:Npts-1]=derdataX3[Thresh3:Npts-1]
  endif else  if(Npts gt Thresh2) then derivData[Thresh2:Npts-1]=derdataX2[Thresh2:Npts-1]
 
 
; out:  data2, derivData, Npts
 

  return,create_struct('Data',data2, 'derivData',derivData, 'Npts', Npts)
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;
;;;;;;;
;;;;;;;                   Auxiliary routines
;;;;;;;
;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


PRO ____________aux_routines
 end

function CompoundClass, formula

if(strpos(formula,'13CC') gt -0.5) then begin
numb1=strmid(formula,strpos(formula,'13CC')+4,1)
numb2=strmid(formula,strpos(formula,'13CC')+5,1)
if(strpos('1234567890',numb1) gt -0.5) then if (strpos('1234567890',numb2) gt -0.5) then C=long(numb1)*10+long(numb2) +1
if(strpos('1234567890',numb1) gt -0.5) then if (strpos('1234567890',numb2) lt -0.5)then C=long(numb1) +1
if(strpos('1234567890',numb1) lt -0.5) then C=2
endif

if(strpos(formula,'13CC') lt -0.5 and strpos(formula,'C') gt -0.5) then begin
numb1=strmid(formula,strpos(formula,'C')+1,1)
numb2=strmid(formula,strpos(formula,'C')+2,1)
if(strpos('1234567890',numb1) gt -0.5) then if (strpos('1234567890',numb2) gt -0.5) then C=long(numb1)*10+long(numb2) 
if(strpos('1234567890',numb1) gt -0.5) then if (strpos('1234567890',numb2) lt -0.5)then C=long(numb1) 
if(strpos('1234567890',numb1) lt -0.5) then C=1
endif  

if(strpos(formula,'C') lt -0.5) then C=0

if(strpos(formula,'SO4') gt -0.5) then S=1 else S=0

if(strpos(formula,'N') gt -0.5) then begin
numb=strmid(formula,strpos(formula,'N')+1,1)
if(strpos('1234567890',numb) gt -0.5) then N=long(numb) else N=1
endif  else N=0

if(strpos(formula,'O') gt -0.5) then begin
numb=strmid(formula,strpos(formula,'O')+1,1)
if(strpos('1234567890',numb) gt -0.5) then O=long(numb) else O=1
endif  else O=0

H=0
if(strpos(formula,'H') gt -0.5) then begin
numb1=strmid(formula,strpos(formula,'H')+1,1)
numb2=strmid(formula,strpos(formula,'H')+2,1)
if(strpos('1234567890',numb1) gt -0.5) then if (strpos('1234567890',numb2) gt -0.5) then H=long(numb1)*10+long(numb2) 
if(strpos('1234567890',numb1) gt -0.5) then if (strpos('1234567890',numb2) lt -0.5)then H=long(numb1)
if(strpos('1234567890',numb1) lt -0.5) then if(strpos('+',numb1) gt -0.5) then H=0 else H=1
endif

type=''

if (C eq 0) then type=[type,'inorg']
if (C ge 1) then type=[type,'org_']
if (C ge 1 and O eq 0 and N eq 0 and S eq 0) then type=[type,'HC_']
if (C ge 1  and S ge 1) then type=[type,'orgSO4']

if (C ge 1 and S eq 0  and N ge 1) then type=[type,'orgN_']
if (C ge 1 and S eq 0  and N eq 1) then type=[type,'orgN1']
if (C ge 1 and S eq 0  and N eq 2) then type=[type,'orgN2']
if (C ge 1 and S eq 0   and O eq 0 and N ge 1) then type=[type,'NHCO0']
if (C ge 1 and S eq 0   and O eq 1 and N ge 1) then type=[type,'NHCO1']
if (C ge 1 and S eq 0   and O eq 2 and N ge 1) then type=[type,'NHCO2']
if (C ge 1 and S eq 0   and O eq 3 and N ge 1) then type=[type,'NHCO3']
if (C ge 1 and S eq 0   and O eq 4 and N ge 1) then type=[type,'NHCO4']
if (C ge 1 and S eq 0   and O eq 5 and N ge 1) then type=[type,'NHCO5']
if (C ge 1 and S eq 0   and O eq 6 and N ge 1) then type=[type,'NHCO6']
if (C ge 1 and S eq 0   and O eq 7 and N ge 1) then type=[type,'NHCO7']
if (C ge 1 and S eq 0   and O eq 8 and N ge 1) then type=[type,'NHCO8']
if (C ge 1 and S eq 0  and N eq 0) then type=[type,'orgNoN']
if (C ge 1 and S eq 0 and O ge 1  and N eq 0) then type=[type,'HCO_']
if (C ge 1 and S eq 0 and O eq 1 and N eq 0) then type=[type,'HCO1']
if (C ge 1 and S eq 0 and O eq 2 and N eq 0) then type=[type,'HCO2']
if (C ge 1 and S eq 0 and O eq 3 and N eq 0) then type=[type,'HCO3']
if (C ge 1 and S eq 0 and O eq 4 and N eq 0) then type=[type,'HCO4']
if (C ge 1 and S eq 0 and O eq 5 and N eq 0) then type=[type,'HCO5']
if (C ge 1 and S eq 0 and O eq 6 and N eq 0) then type=[type,'HCO6']
if (C ge 1 and S eq 0 and O eq 7 and N eq 0) then type=[type,'HCO7']
if (C ge 1 and S eq 0 and O eq 8 and N eq 0) then type=[type,'HCO8']

if(N gt 0) then unsat='unsat='+string((2.0+2*float(C)+float(N)-float(H))/2,format='(F4.1)')+'N' else unsat='unsat='+string((2.0+2*float(C)+float(N)-float(H))/2,format='(F4.1)')+'C'
type=[type,unsat]
;if(N gt 0) then OSC='OSC=-9999.00' else OSC='OSC='+string(2*float(O)/float(C)-float(H)/float(C),format='(F8.5)')
;if(N gt 100) then OSC='OSC=-9999.00' else OSC='OSC='+string(2*float(O)/(float(N)+float(C))-float(H)/(float(N)+float(C)),format='(F8.5)')
if(N gt 100) then OSC='OSC=-9999.00' else OSC='OSC='+string(2*float(O)/float(C)-getpar('N_ox_st')*float(N)/float(C)-float(H)/float(C),format='(F8.5)')
type=[type,OSC]
nC='nC='+string(C,format='(I2)')
type=[type,nC]
nH='nH='+string(H,format='(I2)')
type=[type,nH]
nO='nO='+string(O,format='(I2)')
type=[type,nO]
nN='nN='+string(N,format='(I2)')
type=[type,nN]
return, type[1:*]
end



function d, array
return, size(array,/dimensions)
end



pro DispCT, index
!P.MULTI = [0,1,6]   
DEVICE, DECOMPOSED = 0 
loadct,index
for k=0,5 do begin
        plot, [-25,25]+k*50,[0,0],yrange=[0,1],xrange=[-25,25]+k*50,background=-1, color=0,charsize=2
        for i=-25,25 do oplot, [i,i]+k*50,[0,1],thick=15,color=i+k*50
endfor
end

function drucksieb, string,fontsize
; subroutine to write numbers into images
  komma=[1,2,4,5]
  eins=[3,4,8,9,13,14,18,19,23,24,26,27,28,29,33,34,39]
  zwei=[1,2,3,4,5,7,8,14,15,21,22,28,34,35,37,38,40,41,44,45,46]
  drei=[2,3,4,7,8,10,11,16,17,21,22,27,28,34,35,37,38,40,41,44,45,46]
  vier=[4,10,13,14,15,16,17,19,22,26,28,32,34,39,40,45,46]
  fuenf=[2,3,4,7,8,10,11,16,17,22,23,25,26,27,28,31,32,37,38,43,44,45,46,47]
  sechs=[3,4,8,10,11,13,14,16,17,19,20,22,23,25,26,27,28,31,32,38,40,45,46]
  sieben=[2,3,8,9,15,21,27,28,33,34,40,41,43,44,45,46,47]
  acht=[2,3,4,7,8,10,11,13,14,16,17,20,21,22,26,27,28,31,32,34,35,37,38,40,41,44,45,46]
  neun=[2,3,8,10,16,17,20,21,22,23,25,26,28,29,31,32,34,35,37,38,40,44,45]
  null=[3,8,10,13,14,16,17,19,20,22,23,25,26,28,29,31,32,34,35,38,40,45]
  
  length=strlen(string)
  siebmat=intarr(1,8)
  for i=0,length-1 do begin
      substri=strmid(string,i,1)
      submat=intarr(6,8)
      if substri EQ '.' then begin
          submat=intarr(3,8) 
          submat[komma]=-2
      endif
      if substri EQ '1' then begin 
          submat=intarr(5,8)
          submat[eins]=-2
      endif   
      
      if substri EQ '2' then submat[zwei]=-2  
      if substri EQ '3' then submat[drei]=-2  
      if substri EQ '4' then submat[vier]=-2 
      if substri EQ '5' then submat[fuenf]=-2  
      if substri EQ '6' then submat[sechs]=-2
      if substri EQ '7' then submat[sieben]=-2
      if substri EQ '8' then submat[acht]=-2  
      if substri EQ '9' then submat[neun]=-2 
      if substri EQ '0' then submat[null]=-2
      siebmat=[siebmat,submat]
  endfor
  dim=size(siebmat,/dimensions)
  expand, siebmat,dim[0]*fontsize,dim[1]*fontsize,siebmatrix
  if(min(siebmatrix) gt -0.5) then siebmatrix[0:4]=-2
  siebmatrix[where(siebmatrix LT -0.5)]=-9999
  Return, siebmatrix
end


function FileList, event, Path
     compile_opt idl2         
; retrieve filelist
  Err=''
  locind=0
  addind=0
  location='/FullSpectra/TofData'
  oldfile='-9999'
  mist=systime(1)
  Recur_Pattern = '*.h5'
  Files = FILE_SEARCH(Path,Recur_Pattern) 
  ; Remove the '_PTR' files from the filename list
  n = N_ELEMENTS(Files) 
  
 ;
 ; 
 ; NEEDED ONLy for SONNBLICK (engineering data in seperatr h5 file)
 ; ;
 ; S=STRPOS(Files[0], '_PTR');
 ; if (n gt 1) then FOR i=1,n-1 DO  S = [S,STRPOS(Files[i], '_PTR')]
 ; Files = Files[where(S EQ -1)]
  
  
  ; Remove non-HDF5 files from list
  n = N_ELEMENTS(Files) 
  errFiles=-1
jj=0
  
  location='/FullSpectra/TofData'
  CATCH, Error_status 
  IF Error_status NE 0 THEN BEGIN 
          if(strpos(location,'/SPECdata/Intensities') eq 0) then  begin 
                  location='/FullSpectra/TofData'
                  errFiles=[errFiles,jj] 
          endif else begin
                  location='/SPECdata/Intensities'
                  errFiles=[errFiles,jj-1] 
          endelse
          print, ''
  ENDIF 
  
  if(max(errFiles) eq jj) then Err=[Err,'','Discard: '+Files[max(errFiles)]]
  FOR jj=max(errFiles)+1,n-1 DO if (min(abs(errFiles-jj))gt 0) then begin 
          file_id = H5f_OPEN(Files[jj]) 
          dataset_id1 = H5D_OPEN(file_id,  location) 
          dataspace_id1 = H5D_GET_SPACE(dataset_id1) 
          Dims=H5S_GET_SIMPLE_EXTENT_DIMS(Dataspace_id1) 
          Start =10000
          Width = 2
          if (max(size(Dims,/dimensions)) ge 2) then begin
                  ddd=lonarr(size(Dims,/dimensions)-1)
                  eee=ddd
                  for ii=1,max(size(Dims,/dimensions))-1 do eee[ii-1]=Dims[ii]
                  start2 = [Start, ddd] 
                  count = [Width,ddd+1] 
          endif else begin
                  start2 = [Start] 
                  count = [Width] 
          endelse
          H5S_SELECT_HYPERSLAB, dataspace_id1, start2, count,  /RESET 
          memory_space_id1 = H5S_CREATE_SIMPLE(count) 
          ptrData=H5D_READ(dataset_id1, FILE_SPACE=dataspace_id1, MEMORY_SPACE=memory_space_id1) ; Data
          H5S_CLOSE, memory_space_id1
          H5d_CLOSE, dataset_id1
          H5S_CLOSE, dataspace_id1 
          H5f_CLOSE,  file_id
          if (var_exists(ind) gt 0) then ind=[ind,jj] else ind=jj
          ;  print, jj
          info=['Checking files:',string(jj+1,format='(I5)')+'   of '+string(n,format='(I5)')+' files']
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= [info, Err]
  endif
  CATCH, /CANCEL 
  
  
 if (var_exists(ind) gt 0) then Files=Files[ind] else NOH5=1
  n = N_ELEMENTS(Files)   
 
CreationTime='nix'
StartTimes=0
StartTimesStr='nix'
 if (var_exists(NOH5) lt 0) then begin      
FOR i=0,n-1 DO  begin

        fid=H5f_OPEN(Files[i]) 
        n_attr=H5A_GET_NUM_ATTRS(fid)
        mistt='nix'
        for j=0,n_attr-1 do if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(fid,j)),'HDF5 File Creation Time') gt -0.5) then mistt=H5A_read( H5A_OPEN_IDX(fid,j))
        if(strpos(mistt ,'nix') eq 0) then for j=0,n_attr-1 do if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(fid,j)),'FileCreatedTimeSTR') gt -0.5) then mistt=H5A_read( H5A_OPEN_IDX(fid,j))
        if(strpos(mistt ,'nix') eq 0) then for j=0,n_attr-1 do if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(fid,j)),'FileCreatedTimeString') gt -0.5) then mistt=H5A_read( H5A_OPEN_IDX(fid,j))
       H5F_close, fid
        CreationTime=[CreationTime,mistt]
        tt09=t09(mistt)
        StartTimes=[StartTimes,tt09]
        StartTimesStr=[StartTimesStr,t09str(tt09)]
        info2=['Reading start times:',string(i+1,format='(I5)')+'   of '+string(n,format='(I5)')+' files']
        WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= [info,info2,Err]
   
endfor

CreationTime=CreationTime[1:*]

endif else begin
  
   ;format4: DD.MM.YYY hh:mm:ss
  FOR i=0,n-1 DO  begin
    year=strmid(files[i],strpos(files[i],'2017'),4)
    month=strmid(files[i],strpos(files[i],'2017')+4,2)
    day=strmid(files[i],strpos(files[i],'2017')+6,2)
    tt09=t09(day+'.'+month+'.'+year+' 12:00:00')
    StartTimes=[StartTimes,tt09]
    StartTimesStr=[StartTimesStr,t09str(tt09)]

  ENDFOR
endelse
  
StartTimes=StartTimes[1:*]
StartTimesStr=StartTimesStr[1:*]

files=files[sort(StartTimes)]
StartTimesStr=StartTimesStr[sort(StartTimes)]
StartTimes=StartTimes[sort(StartTimes)]
 
  

s1=CREATE_STRUCT('path',files,'t09',starttimes,'disp',StartTimesStr)
  
  
   Return, s1
end





function FileLst, Path
; retrieve filelist
  Recur_Pattern = '*UL.fdt'
  Files = FILE_SEARCH(Path,Recur_Pattern) 
  files=files[where(strpos(Files,'ppb20') ne -1)]
  files=files[where(strpos(Files,'corrppb20') eq -1)]
  
  n = N_ELEMENTS(Files) 
  StartTimes = starttimes(files,'ppb20')
  files=files[sort(StartTimes)]    
  StartTimes=StartTimes[sort(StartTimes)]
  mist=SIZE(Files, /DIMENSIONS)
  if(max(mist) gt 2)then $
        mist3= transpose(string(indgen(size(files,/dimensions)),format='(i4)')+' - ')+ transpose(strmid(Files,transpose(strpos(Files,'ppb20')+3),20)) $
        else mist3= string(indgen(size(files,/dimensions)),format='(i4)')+' - '+ strmid(Files,strpos(Files,'ppb20')+3,20) 
  
  filter= where(strpos(files, 'UL.fdt') gt -0.5)
  files=files[filter]
  mist3=mist3[filter]
  s1=CREATE_STRUCT('path',files,'disp',mist3, 'startTimes',startTimes)
  Return, s1
end


pro fitfunc, x, A,F, pder
  z=(x-A[1])/A[2]
  exz=exp(-z*z/2)
  F=A[0]*exz ;+ A[3] + A[4]*x
  
  ;If the procedure is called with four parameters, calculate the 
;partial derivatives. 
  IF N_PARAMS() GE 4 THEN $ 
  ;  pder = transpose([transpose(exz), transpose(A[0] * (X-A[1]) * exz / (A[2]^2)), transpose(A[0] * (X-A[1])^2 * exz / (A[2]^3)),transpose(replicate(1.0, N_ELEMENTS(X))),transpose(x)]) 
    pder = transpose([transpose(exz), transpose(A[0] * (X-A[1]) * exz / (A[2]^2)), transpose(A[0] * (X-A[1])^2 * exz / (A[2]^3))]) 
  
end  


function formula, lib
length=size(lib,/dimensions) & if(size(length,/dimensions) gt 1) then length=max(length[1])else length=1
C12=strarr(length)
C13=strarr(length)
H1=strarr(length)
O16=strarr(length)
O17=strarr(length)
O18=strarr(length)
N14=strarr(length)
N15=strarr(length)
Hpos=strarr(length)
eneg=strarr(length)
Cl35=strarr(length)
Cl37=strarr(length)
F=strarr(length)
S32O4=strarr(length)
S34O4=strarr(length)
Si=strarr(length)

len=size(lib,/dimensions) & len=max(len[0])

FIL=where(lib[1,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then C12[where(lib[1,indgen(length)] gt 0)]='C'
filter=where(lib[1,indgen(length)] gt 9.5) & if(max(filter) gt -0.5) then C12[filter]=C12[filter]+string(lib[1,filter],format='(I2)') 
filter=where(lib[1,indgen(length)] gt 1.5 and lib[1,indgen(length)] lt 9.5) & if(max(filter) gt -0.5) then C12[filter]=C12[filter]+string(lib[1,filter],format='(I1)')

FIL=where(lib[2,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then C13[where(lib[2,indgen(length)] gt 0)]='13C'

FIL=where(lib[3,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then H1[where(lib[3,indgen(length)] gt 0)]='H'
filter=where(lib[3,indgen(length)] gt 9.5) & if(max(filter) gt -0.5) then  H1[filter]=H1[filter]+string(lib[3,filter],format='(I2)') 
filter=where(lib[3,indgen(length)] gt 1.5 and lib[3,indgen(length)] lt 9.5) & if(max(filter) gt -0.5) then H1[filter]=H1[filter]+string(lib[3,filter],format='(I1)')

FIL=where(lib[4,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then O16[where(lib[4,indgen(length)] gt 0)]='O'
filter=where(lib[4,indgen(length)] gt 9.5) & if(max(filter) gt -0.5) then O16[filter]=O16[filter]+string(lib[4,filter],format='(I2)')
filter=where(lib[4,indgen(length)] gt 1.5 and lib[4,indgen(length)] lt 9.5) & if(max(filter) gt -0.5) then O16[filter]=O16[filter]+string(lib[4,filter],format='(I1)')

FIL=where(lib[5,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then O17[where(lib[5,indgen(length)] gt 0)]='17O'
FIL=where(lib[6,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then O18[where(lib[6,indgen(length)] gt 0)]='18O'


FIL=where(lib[7,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then N14[where(lib[7,indgen(length)] gt 0)]='N'
filter=where(lib[7,indgen(length)] gt 9.5) & if(max(filter) gt -0.5) then N14[filter]=N14[filter]+string(lib[7,filter],format='(I2)')
filter=where(lib[7,indgen(length)] gt 1.5 and lib[7,indgen(length)] lt 9.5) & if(max(filter) gt -0.5) then N14[filter]=N14[filter]+string(lib[7,filter],format='(I1)')

FIL=where(lib[8,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then N15[where(lib[8,indgen(length)] gt 0)]='15N'

if(len gt 11) then begin
FIL=where(lib[11,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then Cl35[where(lib[11,indgen(length)] gt 0)]='35Cl'
filter=where(lib[11,indgen(length)] gt 1.5) & if(max(filter) gt -0.5) then Cl35[filter]=Cl35[filter]+string(lib[11,filter],format='(I1)')
FIL=where(lib[12,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then Cl37[where(lib[12,indgen(length)] gt 0)]='37Cl'
filter=where(lib[12,indgen(length)] gt 1.5) & if(max(filter) gt -0.5) then Cl37[filter]=Cl37[filter]+string(lib[12,filter],format='(I1)')

FIL=where(lib[13,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then F[where(lib[13,indgen(length)] gt 0)]='F'
filter=where(lib[13,indgen(length)] gt 1.5) & if(max(filter) gt -0.5) then F[filter]=F[filter]+string(lib[13,filter],format='(I1)')

FIL=where(lib[14,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then S32O4[where(lib[14,indgen(length)] gt 0)]='SO4'
filter=where(lib[14,indgen(length)] gt 1.5) & if(max(filter) gt -0.5) then S32O4[filter]=S32O4[filter]+string(lib[14,filter],format='(I1)')
FIL=where(lib[15,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then S34O4[where(lib[15,indgen(length)] gt 0)]='34SO4'
filter=where(lib[15,indgen(length)] gt 1.5) & if(max(filter) gt -0.5) then S34O4[filter]=S34O4[filter]+string(lib[15,filter],format='(I1)')

hlpi=lib[16,indgen(length)]+lib[17,indgen(length)]+lib[18,indgen(length)]
FIL=where(hlpi gt 0) &  if(max(FIL) gt -0.5) then Si[where(hlpi gt 0)]='Si'
filter=where(hlpi gt 1.5) & if(max(filter) gt -0.5) then Si[filter]=Si[filter]+string(hlpi,format='(I1)')


endif

FIL=where(lib[9,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then Hpos[where(lib[9,indgen(length)] gt 0)]='H+'

FIL=where(lib[10,indgen(length)] gt 0) &  if(max(FIL) gt -0.5) then eneg[where(lib[10,indgen(length)] gt 0)]='+'




form=C13+C12+H1+O18+O17+O16+N15+N14+Cl35+Cl37+F+S32O4+S34O4+Si+Hpos+eneg
return, transpose(form)
end

function GetEngData, event, File
  compile_opt idl2
 
info=strarr(9)
info[0]='H5 OPEN:'
;a=H5_BROWSER(File)
File2=strmid(file,0,strpos(file,'.h5'))+'_PTR.h5'
misst=systime(1)
ErrCode=0
s1=CREATE_STRUCT('duration',-9999)



;open file
file_id = H5f_OPEN(File) 
print, 'H5 FILE OPEN:  '+File
 
 
 ErrCode=-1
 CATCH, Error_status 
 file_1_data=CREATE_STRUCT('n_paths',getpar('#file1'))
 DataSets=-1
 IF Error_status NE 0 THEN ErrCode=[ErrCode,i]
 for i=1,getpar('#file1') do begin
        if(max(where(ErrCode eq i)) lt -0.5) then begin
                DataSets=[DataSets,i]
                if(i le 9) then strnam='H1_0'+strtrim(string(i),2)+'nam' else strnam='H1_'+strtrim(string(i),2)+'nam'
                if(i le 9) then strdat='H1_0'+strtrim(string(i),2)+'dat' else strdat='H1_'+strtrim(string(i),2)+'dat' 
                if(strmatch(getstr(strnam),'-9999') eq 0) then $
                    file_1_data=CREATE_STRUCT(strnam,H5D_READ(H5D_OPEN(file_id,getstr(strnam))),file_1_data) else $
                        file_1_data=CREATE_STRUCT(strnam,'-9999',file_1_data)
                file_1_data=CREATE_STRUCT(strdat,H5D_READ(H5D_OPEN(file_id,getstr(strdat))),file_1_data) 
        endif
endfor 
CATCH, /CANCEL 
  
for i=1,max(d(datasets))-1 do begin
        if(datasets[i] le 9) then strdat='H1_0'+strtrim(string(datasets[i]),2)+'dat' else strdat='H1_'+strtrim(string(datasets[i]),2)+'dat' 
        info[i]=getstr(strdat)
endfor

WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_info'), sET_VALUE= info
if(max(strmatch(info,'/SPECdata/AverageSpec')) eq 1) then  instrument='TOF1000' else  instrument='TOF8000'



helpi=1
CATCH, Error_status
IF Error_status NE 0 THEN BEGIN
  helpi=0
  CATCH, /CANCEL
ENDIF
if (helpi eq 1) then begin
  n_attr=H5A_GET_NUM_ATTRS(file_id)
  ComputerID='nix'
  for j=0,n_attr-1 do if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(file_id,j)),'Computer ID') gt -0.5) then  ComputerID=H5A_read( H5A_OPEN_IDX(file_id,j))
endif
if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then    instrument='VOCUS'
if(strpos(ComputerID,'3cef3dd0-f2f5-4216-95dd-9bdb829f125a') gt -0.5 ) then    instrument='VOCUS'; Pawel Misztal









info = File_Info(File2)
if(info.exists eq 1) then begin
        ErrCode=-1
        file_id2 = H5f_OPEN(File2) 
        CATCH, Error_status 
        file_2_data=CREATE_STRUCT('n_paths',getpar('#file2'))
        DataSets2=-1
        IF Error_status NE 0 THEN ErrCode=[ErrCode,i]
        for i=1,getpar('#file2') do begin
                if(max(where(ErrCode eq i)) lt -0.5) then begin
                        DataSets2=[DataSets2,i]
                        if(i le 9) then strnam='H2_0'+strtrim(string(i),2)+'nam' else strnam='H2_'+strtrim(string(i),2)+'nam'
                        if(i le 9) then strdat='H2_0'+strtrim(string(i),2)+'dat' else strdat='H2_'+strtrim(string(i),2)+'dat' 
                        if(strmatch(getstr(strnam),'-9999') eq 0) then $
                            file_2_data=CREATE_STRUCT(strnam,H5D_READ(H5D_OPEN(file_id2,getstr(strnam))),file_2_data) else $
                                file_2_data=CREATE_STRUCT(strnam,'-9999',file_2_data)
                        file_2_data=CREATE_STRUCT(strdat,H5D_READ(H5D_OPEN(file_id2,getstr(strdat))),file_2_data) 
                endif
        endfor 
        CATCH, /CANCEL 
endif

;retrieve Extractions, SampleInterval, Cycles,  PoisDead, SumSpec, and Buftimes
if(max(datasets) ne -1) then begin

       n_attr=H5A_GET_NUM_ATTRS(file_id)
       mistt='nix'
       for j=0,n_attr-1 do if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(file_id,j)),'HDF5 File Creation Time') gt -0.5) then mistt=H5A_read( H5A_OPEN_IDX(file_id,j))
       if(strpos(mistt ,'nix') eq 0) then begin  ;TOF1000
                for j=0,n_attr-1 do begin
                        if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(file_id,j)),'FileCreatedTimeSTR') gt -0.5) then CreationTime=H5A_read( H5A_OPEN_IDX(file_id,j))
                        if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(file_id,j)),'Single Spec Duration (ms)') gt -0.5) then CycleTime=H5A_read( H5A_OPEN_IDX(file_id,j))
                        if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(file_id,j)),'Timebin width (ps)') gt -0.5) then SampleInterval=H5A_read( H5A_OPEN_IDX(file_id,j))
                        if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(file_id,j)),'Pulsing Period (ns)') gt -0.5) then SingleSpectrumTime=H5A_read( H5A_OPEN_IDX(file_id,j))
               endfor
               CycleTime=float(CycleTime)/1000  ; in seconds
               SampleInterval=max(float(SampleInterval)/1e12) ; in seconds
               SingleSpectrumTime=float(SingleSpectrumTime)/1000 ;in microseconds
               poisCor=1
               PoisDead=1
               Extractions=max(CycleTime*1e6/SingleSpectrumTime)
               
              
               if(datasets[1] le 9) then strdat='H1_0'+strtrim(string(datasets[1]),2)+'DAT' else strdat='H1_'+strtrim(string(datasets[1]),2)+'DAT' 
               BufTimes= file_1_data.(where(strmatch(tag_names(file_1_data),strdat) eq 1))
               if(datasets[2] le 9) then strdat='H1_0'+strtrim(string(datasets[2]),2)+'DAT' else strdat='H1_'+strtrim(string(datasets[2]),2)+'DAT' 
               SumSpec= file_1_data.(where(strmatch(tag_names(file_1_data),strdat) eq 1))
 
               BufTimes=BufTimes[3,*]
               BufTimes=findgen(max(size(buftimes,/dimensions)))*max(CycleTime)+max(CycleTime)
               SumSpec=SumSpec* max(size(buftimes,/dimensions))
               ComputerID='-9999'
               SingleIonSignal=0.1
   
          
               
               
        endif else begin ; TOF800, QiTOF
                ; Can be improved later. For now I keep using the old working code (Sep 2015):
                FileStruct=H5_parse(File)
                Extractions=Filestruct.NbrWaveforms & extractions=max(extractions._data)
                CreationTime=FileStruct.HDF5_FILE_CREATION_TIME & CreationTime=CreationTime._data
                SampleInterval=FileStruct.fullspectra & SampleInterval=SampleInterval.sampleinterval & SampleInterval=max(SampleInterval._data)
                poisCor=FileStruct.RawData 
                ComputerID=Filestruct.COMPUTER_ID
                ComputerID=ComputerID._data
                SingleIonSignal=FileStruct.fullspectra &  SingleIonSignal=SingleIonSignal.SINGLE_ION_SIGNAL  & SingleIonSignal=SingleIonSignal._data
                SingleIonSignal=max(SingleIonSignal)
                FileStruct=0
                if(strpos(strjoin(tag_names(poisCor)),'HPTC') gt -0.5) then begin
                poisCor=poisCor.HPTDC & PoisDead=poisCor.PoissonTdcDeadTime & PoisDead=max(PoisDead._data)
                poisCor=poisCor.PoissonCorrect  & poisCor=max(poisCor._data)
                endif else begin
                        poisCor=1
                        PoisDead=1
                endelse
   
   
   
   
              if(datasets[1] le 9) then strdat='H1_0'+strtrim(string(datasets[1]),2)+'DAT' else strdat='H1_'+strtrim(string(datasets[1]),2)+'DAT' 
               BufTimes= file_1_data.(where(strmatch(tag_names(file_1_data),strdat) eq 1))
               if(datasets[2] le 9) then strdat='H1_0'+strtrim(string(datasets[2]),2)+'DAT' else strdat='H1_'+strtrim(string(datasets[2]),2)+'DAT' 
               SumSpec= file_1_data.(where(strmatch(tag_names(file_1_data),strdat) eq 1))
 
   
                
               ;rearrange 4-dimensional HD5 data to 2 dim array
                mist=size(BufTimes,/dimensions)
                mist2=size(BufTimes,/n_dimensions)
                mist3=1
                for i=0,mist2-1 do mist3=mist3*mist[i]
                BufTimes=Reform(BufTimes,mist3,/overwrite)  
                timestep=median(-BufTimes[0:max(d(BufTimes))-2]+BufTimes[1:max(d(BufTimes))-1])
                BufTimes=dindgen(max(d(BufTimes)))*timestep
 
                
                
        endelse
   

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ErrCode=-1
 CATCH, Error_status 
 IF Error_status NE 0 THEN ErrCode=[ErrCode,i]
 for i=1,getpar('#file1') do begin
        if(max(where(ErrCode eq i)) lt -0.5) then begin
                if(i le 9) then strnam='H1_0'+strtrim(string(i),2)+'nam' else strnam='H1_'+strtrim(string(i),2)+'nam'
                if(i le 9) then strdat='H1_0'+strtrim(string(i),2)+'dat' else strdat='H1_'+strtrim(string(i),2)+'dat' 
                H5d_CLOSE,H5D_OPEN(file_id,getstr(strnam))
                H5d_CLOSE,H5D_OPEN(file_id,getstr(strdat))
        endif
endfor 
CATCH, /CANCEL 
H5f_CLOSE,  file_id 
if(var_exists(file_id2) gt -0.5) then begin 
 ErrCode=-1
 CATCH, Error_status 
 IF Error_status NE 0 THEN ErrCode=[ErrCode,i]
 for i=1,getpar('#file2') do begin
        if(max(where(ErrCode eq i)) lt -0.5) then begin
                if(i le 9) then strnam='H2_0'+strtrim(string(i),2)+'nam' else strnam='H2_'+strtrim(string(i),2)+'nam'
                if(i le 9) then strdat='H2_0'+strtrim(string(i),2)+'dat' else strdat='H2_'+strtrim(string(i),2)+'dat' 
                H5d_CLOSE,H5D_OPEN(file_id2,getstr(strnam))
                H5d_CLOSE,H5D_OPEN(file_id2,getstr(strdat))
        endif
endfor 
H5f_CLOSE,  file_id2 
endif
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

data=-9999
for i=3,max(d(datasets))-1 do begin
        if(datasets[i] le 9) then strnam='H1_0'+strtrim(string(datasets[i]),2)+'NAM' else strnam='H1_'+strtrim(string(datasets[i]),2)+'NAM' 
        if(datasets[i] le 9) then strdat='H1_0'+strtrim(string(datasets[i]),2)+'DAT' else strdat='H1_'+strtrim(string(datasets[i]),2)+'DAT' 
        NamesP= file_1_data.(where(strmatch(tag_names(file_1_data),strnam) eq 1))
        dataP= Rearrange(file_1_data.(where(strmatch(tag_names(file_1_data),strdat) eq 1)))
     if(max(data) eq -9999) then begin
                        data=dataP
                        NamesPTR=NamesP
                endif else if(max(dataP) ne -9999) then begin  
                        data=[data,dataP]
                        NamesPTR=[NamesPTR,NamesP]
                endif
endfor
if(max(d(datasets)) le 3) then begin
NamesPTR=strarr(3)
NamesPTR[0]='pdrift'
NamesPTR[1]='udrift'
NamesPTR[2]='tdrift'
data=dblarr(3,max(d(Buftimes)))
data[0,*]=data[0,*]+getpar('p_drift_default')
data[1,*]=data[1,*]+getpar('u_drift_default')
data[2,*]=data[2,*]+getpar('t_drift_default')
endif


      ;cause an error if highest signal is lower than MIN_SIG
        MIN_SIG=222*max(BufTimes)
        crash=sumspec[where(sumspec-MIN_SIG gt 0)]
        crash=0
 




 

 if(size(NamesPTR,/n_dimensions) eq 2) then NamesPTR=strjoin(transpose(NamesPTR),' ')
 
 if(var_exists(cycles) lt -0.5 ) then begin  
        cycles= max(size(BufTimes,/dimensions))
 endif else  if (cycles gt max(size(BufTimes,/dimensions))) then begin
                cycles= max(size(BufTimes,/dimensions))
        endif 
 if(var_exists(data) lt -0.5 ) then begin  ; crash prevention in case of no engineering data...
          data=transpose([[findgen(cycles)],[findgen(cycles)]])
          data=data[*,0:cycles-1]
          NamesPTR=['cycles2','cycles3']
 endif
 



 
 BufTimes=BufTimes[0:cycles-1]
 BufTimes=reform(buftimes,1,cycles,/overwrite)
 ;t09, time in days since 1.1.2009, 00:00:00
 StartTime=t09(CreationTime)
 TimeRow=StartTime+BufTimes/86400
 ;reaction time, E/N
 filtD=where(strmatch(NamesPTR,'p_drift*') eq 1 or strmatch(NamesPTR,'p-Drift*') eq 1)
 filtU1=where(strmatch(NamesPTR,'Udrift*') eq 1)
 filtU2=where(strmatch(NamesPTR,'Uq*') eq 1 or strmatch(NamesPTR,'Udx*') eq 1)
 filtT=where(strmatch(NamesPTR,'Drift_Temperature*') eq 1 or strmatch(NamesPTR,'T-Drift*') eq 1)
 Cyc=reform(fltarr(cycles),1,cycles,/overwrite)
 if(max(filtD) gt -0.5) then pdrift=data[filtD,*] else pdrift=cyc+max(getpar('p_drift_default'))
 if(max(filtU1) gt -0.5) then begin 
        mistUD=data[filtU1,*]
        mistUD=mistUD[0,*]
 endif else  mistUD=cyc+max(getpar('u_drift_default'))
 if(max(filtU2) gt -0.5) then  udrift=mistUD+data[filtU2,*]  else udrift=mistUD+max(getpar('udx_default'))
 if(max(filtT) gt -0.5) then  tdrift=data[filtT,*]+273.15 else begin
  tdrift=cyc+max(getpar('t_drift_default'))
   endelse
 pdrift=pdrift[0,*]
 udrift=udrift[0,*]
 tdrift=tdrift[0,*]
if(max(where(strmatch(NamesPTR,getstr('pdriftVOCUS')) eq 1)) gt -0.5) then instrument='VOCUS'
if(strmatch('VOCUS', instrument) eq 1) then pdrift=data[max(where(strmatch(NamesPTR,getstr('pdriftVOCUS')) eq 1)),*]
if(strmatch('VOCUS', instrument) eq 1) then udrift=data[max(where(strmatch(NamesPTR,getstr('udriftVOCUS')) eq 1)),*]
if(strmatch('VOCUS', instrument) eq 1) then tdrift=data[max(where(strmatch(NamesPTR,getstr('tdriftVOCUS')) eq 1)),*]+273.15
 
 
 
 ;PARAMETERS
  
 d=max(getpar('reactionlength'))  ;reactionlength in cm
 mu0=max(getpar('reduced_mobility')) ;reduced mobility of H3O+ in N2

 mu=mu0*(1013.25/pdrift)*(tdrift/273.15) ;[=] cm2/Vs 
 trxn=d/(((mu * udrift)/d))  ; reaction time in s  
        Nmolec=24.63*298*pdrift/(1013.25 *tdrift) 
        EoverN=1E17*(udrift/d)/(Nmolec*1E18)

        names=['JulianDate','ReactionTime[s]','N [1E18 molec/cm3]','EoverN',NamesPTR]

        ;remove commas'from the names
        inde=where(strpos(names,',') gt 0)
        if(max(inde) gt 0) then begin 
                posi=strpos(names[inde],',')
                length=max(size(posi,/dimensions))
                for o=0,length-1 do begin 
                        mist=names[inde[o]]
                        strput, mist,'_', posi[o]
                        names[inde[o]]=mist
                endfor
        endif
        if(total(d(TimeRow)) gt total(d(trxn))) then TimeRow=TimeRow[*,lindgen(max(d(trxn)))]
        if(total(d(TimeRow)) lt total(d(trxn))) then begin
            hlpp=dblarr(1,max(d(trxn)))
            hlpp[0,lindgen(max(d(TimeRow)))]=TimeRow
            Timerow=hlpp
        endif
        data=[TimeRow,trxn,Nmolec,EoverN,data]
        
       
        
        

        s1=CREATE_STRUCT('names',names,'data',transpose(data),'FileName',File,'SumSpec',SumSpec,'cycles',cycles,'duration',max(BufTimes),'pdrift',pdrift,'udrift',udrift,'tdrift',tdrift,'StartTime',StartTime,'SampInt',SampleInterval,'extractions',extractions,'PoisCor',poiscor,'PoisDead',poisdead,'instrument',instrument,'ComputerID',ComputerID,'SingleIonSignal',SingleIonSignal)



 endif else print, 'No data could be found in H5 file'

Return, s1
end 


function GetFileExport, event, destfolder, Name1

   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_6'), get_uVALUE= massFL 
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_7'), get_uVALUE= massUL 
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_1'), get_uVALUE= cpsFL 
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_2'), get_uVALUE= corrcpsFL 
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_3'), get_uVALUE= cpsUL 
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_4'), get_uVALUE= corrcpsUL 
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_5'), get_uVALUE= ppbFL 
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_6'), get_uVALUE= corrppbFL 
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_10'), get_uVALUE= ppbUL 
   WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_12'), get_uVALUE= corrppbUL 
 

 WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_5'), gET_uVALUE= Filepar
 
   if(max([max(cpsFL),max(corrcpsFL),max(cpsUL),max(corrcpsUL)]) eq -9999) then begin 
          massUL=readCsv(DestFolder+'Export/UL/IonList/MassIDs_'+Name1+'UL.csv')
          massFL=readCsv(DestFolder+'Export/FL/IonList/MassIDs_'+Name1+'FL.csv')
          corrcpsUL=readFloat(DestFolder+'Export/UL/cps/ocorr/corrcps'+Name1+'UL.fdt')
          cpsUL=readFloat(DestFolder+'Export/UL/cps/cps'+Name1+'UL.fdt')
          corrcpsFL=readFloat(DestFolder+'Export/FL/cps/ocorr/corrcps'+Name1+'FL.fdt')
          cpsFL=readFloat(DestFolder+'Export/FL/cps/cps'+Name1+'FL.fdt')
          corrppbUL=readFloat(DestFolder+'Export/UL/ppb/ocorr/corrppb'+Name1+'UL.fdt')
          ppbUL=readFloat(DestFolder+'Export/UL/ppb/ppb'+Name1+'UL.fdt')
          corrppbFL=readFloat(DestFolder+'Export/FL/ppb/ocorr/corrppb'+Name1+'FL.fdt')
          ppbFL=readFloat(DestFolder+'Export/FL/ppb/ppb'+Name1+'FL.fdt')
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_6'), set_uVALUE= massFL 
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Label_7'), set_uVALUE= massUL 
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_1'), set_uVALUE= cpsFL 
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_2'), set_uVALUE= corrcpsFL 
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_3'), set_uVALUE= cpsUL 
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_4'), set_uVALUE= corrcpsUL 
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_5'), set_uVALUE= ppbFL 
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_6'), set_uVALUE= corrppbFL 
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_10'), set_uVALUE= ppbUL 
          WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'base_12'), set_uVALUE= corrppbUL 
  endif
  return, create_struct('massUL',massUL,'massFL',massFL,'corrcpsUL',corrcpsUL,'cpsUL',cpsUL,'corrcpsFL',corrcpsFL,$
    'cpsFL',cpsFL,'corrppbUL',corrppbUL,'ppbUL',ppbUL,'corrppbFL',corrppbFL,'ppbFL',ppbFL,'resolution',filepar.resolution,'peakshape',filepar.peakshape)
end




 function getPrimIons ,masses,cps,mode                         
  if (mode eq 0) then begin ;H3O+   m21factor = 1/0.206% = 487 m38factor = 99.926/0.074 = 1350 , m39factor = 99.588/0.412 = 242
          Prim1=cps[where(abs(masses-21.0221) eq min(abs(masses-21.0221))),*]
          if(median(Prim1 gt 100)) then Prim1=Prim1*487 else begin 
            
            Prim1=cps[where(abs(masses-19.018) eq min(abs(masses-19.018))),*]
            print,'m19 used (because m21 below 100 cps)'
            endelse
          
          
          if(getpar('m38') eq 1) then  Prim2=cps[where(abs(masses-38.0326) eq min(abs(masses-38.0326))),*]*645 else Prim2=cps[where(abs(masses-39.0327) eq min(abs(masses-39.0327))),*]*242       
       
      
          if(min(abs(masses-38.0326)) gt 0.005) then begin
                  Prim2=Prim2-Prim2
                  Prim2=cps[where(abs(masses-39.0327) eq min(abs(masses-39.0327))),*]*242 
                  print, 'Warning: m38.033 not detected'
           endif
           Prim1=Prim1[0,*]
           Prim2=Prim2[0,*]
   endif
   if (mode eq 5) then begin ;NO+
          Prim1=cps[where(abs(masses-30.994 ) eq min(abs(masses-30.994 ))),*]*269
          Prim2=cps[where(abs(masses-47.9966) eq min(abs(masses-47.9966))),*]*242 
          Prim1=Prim1[0,*]
          Prim2=Prim2[0,*]
  endif
  if (mode eq 9) then begin ;O2+
          Prim1=cps[where(abs(masses-33.9935 ) eq min(abs(masses-33.9935 ))),*]*242
          Prim2=Prim1-Prim1   
          Prim1=Prim1[0,*]
          Prim2=Prim2[0,*]
   endif    
   
   if(mean(Prim1)lt getpar('AveragePrimIonsThresh')) then Prim1=Prim1/Prim1 + mean(Prim1)
    
  Return, create_struct('A',Prim1,'B',Prim2)
 
end                             
 
 function getpar ,par_name
      par_name2='_'+par_name+'='
      OPENR, lun, 'C:/PTRwid/parfile.txt', /GET_LUN
      path=strarr(1)
      READF, lun, path
      Free_Lun, lun
      PTRwidpar=readcsvstr(path) 
      row_index=where(stregex(PTRwidpar,par_name2) gt -0.5) 
      line_index=stregex(PTRwidpar,'=')
      line_index=line_index[row_index]+1
      value=max(double(strmid(PTRwidpar[row_index],line_index,99)))
 return, value
 end     
 
 function getstr ,par_name
      par_name2='_'+par_name+'='
      OPENR, lun, 'C:/PTRwid/parfile.txt', /GET_LUN
      path=strarr(1)
      READF, lun, path
      Free_Lun, lun
      PTRwidpar=readcsvstr(path,/long) 
      row_index=where(stregex(PTRwidpar,par_name2) gt -0.5) 
      line_index=stregex(PTRwidpar,'=')
      line_index=line_index[row_index]+1
      str=strmid(PTRwidpar[row_index],line_index,199)
 return, strtrim(string(str),2)
 end     
 
 function getInstID
   instID=''
    openr, lun,'C:/PTRwid/InstrumentID.txt',/get_lun
    while not eof(lun) do readf, lun, instID
    free_lun, lun
    return,  strtrim(string(instID),2)
 end
 
function gettr ,UniqueCampaignName, zeit
  if(max(var_exists(zeit)) lt -0.5) then zeit=0
  OPENR, lun, 'C:/PTRwid/TransmissionArchive.txt', /GET_LUN
  
  rows=FILE_LINES('C:/PTRwid/TransmissionArchive.txt')
  TRarch = STRARR(rows)
  READF, lun, TRarch
  Free_Lun, lun
  par_name='_'+UniqueCampaignName+'='
  row_index=where(stregex(TRarch,par_name) gt -0.5)
  if( max(row_index) lt -0.5) then begin
      row_index=where(stregex(TRarch,'_default=') gt -0.5)
      print, 'WARNING: UniqueCampaignName not found. Using default parameter'
  endif
  line_index=stregex(TRarch,'=')
  line_index=line_index[row_index[0]]+1
  str=strmid(TRarch[row_index],line_index,199)
  n_sets=max(d(str))
  sets=fltarr(n_sets,20)-1
  for i=0,n_sets-1 do begin
    helpi=strsplit(str[i], ',',/extract)
    sets[i,indgen(max(d(helpi)))]=helpi
endfor
  filt=where(sets[*,0] lt zeit)
  if( max(filt) gt -0.5) then set=sets[filt,*] else set=sets[0,*]
  dims=d(set)
  set=set[dims[0]-1,*] 
  if(abs(zeit - set[0]) gt 30) then print, 'WARNING: nearest transmission more than 30 days away'
  set=set[where(set ne -1)]
  return, set[1:*]
end


Pro addtr ,UniqueCampaignName, set
  OPENR, lun, 'C:/PTRwid/TransmissionArchive.txt', /GET_LUN
  rows=FILE_LINES('C:/PTRwid/TransmissionArchive.txt')
  TRarch = STRARR(rows)
  READF, lun, TRarch
  Free_Lun, lun
  makecsv, 'C:/PTRwid/TransmissionArchive.txt', transpose([TRarch,'_'+UniqueCampaignName+'='+strjoin(strtrim(string(set),2),',')])
 end


function isodist, lib
C12p=0.989
C13p=0.011
H1p=1
O16p=0.9976
O17p=0.0004
O18p=0.0020
N14p=0.9963
N15p=0.0037
H_posp=1
e_negp=1
Cl35p=0.7577
Cl37p=0.2423
Fp=1
S32p=0.9504
S33p=0.0075
S34p=0.0421

C12=12
C13=13.003355
H1=1.007825
O16=15.994915
O17=16.999131
O18=17.99916
N14=14.003074
N15=15.000108
H_pos=1.007276467
e_neg=-0.000548533
Cl35=34.968852
Cl37=36.965903
F=18.998403
S32O4=31.97207+4*O16
S33O4=32.971456+4*O16
S34O4=33.967866+4*O16


nC=lib[0]+lib[1]
nN=lib[6]+lib[7]
nCl=lib[10]+lib[11]

P13C=nC*C13p*C12p^(nC-1)
P15N=nN*N15p*N14p^(nN-1)
P37Cl=nCl*Cl37p*Cl35p^(nCl-1)


masses=0
disp=0
for c=0,1 do for nnn=0,1 do for cl=0,1 do begin
    if(c le nC) then if(nnn le nN) then if (cl le nCl) then begin
        n=[nC-c,c,lib[2:5],nN-nnn,nnn,lib[8:9],nCl-cl,cl,lib[12:14]]
        entry=C12*n[0]+C13*n[1]+H1*n[2]+O16*n[3]+O17*n[4]+O18*n[5]+N14*n[6]+N15*n[7]+Cl35*n[10]+Cl37*n[11]+F*n[12]+S32O4*n[13]+S34O4*n[14]+H_pos*n[8]+e_neg*n[9]
        if(nC ge 1) then if(c eq 1) then PC= P13C else PC=(1- P13C) else PC=1
        if (nN ge 1) then if(nnn eq 1) then PN= P15N else PN=(1- P15N) else PN=1
        if (nCl ge 1) then if(cl eq 1) then PCl= P37Cl else PCl=(1- P37Cl) else PCl=1
        Ptot=PC*PN*PCl
        disp=[disp,Ptot]
        masses=[masses,entry]
    endif
endfor
masses=masses[where(disp ge 0.002)]
disp=disp[where(disp ge 0.002)]
disp=disp[sort(masses)]
masses=masses[sort(masses)]

;print, transpose([[masses],[disp]])

S1=create_struct('masses',masses,'dist',disp)
return, S1
end




function LoadMassRange, file,MassLow, MassHigh, a,t0,ex,SampInt
ErrCode=0
ptrData=-9999
locatie='/FullSpectra/TofData'
CATCH, Error_status 
IF Error_status NE 0 THEN BEGIN 
       if(strpos(locatie,'/SPECdata/Intensities') eq 0) then ErrCode=1 else locatie='/SPECdata/Intensities'
 
      if(ErrCode eq 1) then begin
              PRINT, 'Error index: ', Error_status 
              PRINT, 'Error message: ', !ERROR_STATE.MSG 
              CATCH, /CANCEL 
      endif
ENDIF 
if(ErrCode eq 0) then begin
        fileid=H5f_OPEN(File)
        dataset_id1 = H5D_OPEN(fileid, locatie) 
        dataspace_id1 = H5D_GET_SPACE(dataset_id1) 
        Dims=H5S_GET_SIMPLE_EXTENT_DIMS(Dataspace_id1) 
        ptrData = ptrarr(1)
        Start =max([1,floor(m2t(MassLow,a,t0,ex,SampInt,/mass))])
        Width = ceil(m2t(MassHigh,a,t0,ex,SampInt,/mass)- Start)
        mist2=start+width
        if (max(size(Dims,/dimensions)) ge 2) then begin
                ddd=lonarr(size(Dims,/dimensions)-1)
                eee=ddd
                for i=1,max(size(Dims,/dimensions))-1 do eee[i-1]=Dims[i]
                start2 = [Start, ddd] 
                count = [Width,eee] 
        endif else begin
                start2 = [Start] 
                count = [Width] 
        endelse
        H5S_SELECT_HYPERSLAB, dataspace_id1, start2, count,  /RESET 
        memory_space_id1 = H5S_CREATE_SIMPLE(count) 
        ptrData=Ptr_New(rearrange(H5D_READ(dataset_id1, FILE_SPACE=dataspace_id1, MEMORY_SPACE=memory_space_id1)),/No_Copy) ; Data
        H5S_CLOSE, memory_space_id1
        H5d_CLOSE, dataset_id1
        H5S_CLOSE, dataspace_id1 
        H5f_CLOSE,  fileid
endif else begin
        ptrData=Ptr_New(-9999)
        print, 'HDF5 FILE CORRUPTED 3'
endelse
 
Return, ptrData 

end


function getSplit, file
  ErrCode=0
  ptrData=-9999
  locatie='/FullSpectra/TofData'
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    if(strpos(locatie,'/SPECdata/Intensities') eq 0) then ErrCode=1 else locatie='/SPECdata/Intensities'

    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      CATCH, /CANCEL
    endif
  ENDIF
  if(ErrCode eq 0) then begin

    fileid=H5f_OPEN(File)
    dataset_id1 = H5D_OPEN(fileid, locatie)
    dataspace_id1 = H5D_GET_SPACE(dataset_id1)
    Dims=H5S_GET_SIMPLE_EXTENT_DIMS(Dataspace_id1)
    n_dims=max(d(dims))
    JunkSize= getpar('JunkSize')
    
    timebins=Dims[0]
    pnts=timebins
    for i=1,n_dims-1 do pnts=pnts*Dims[i]
  
         if (pnts gt JunkSize) then begin
                split=0
                counter=0
                while(split eq 0) do begin
                        pntsSUB=timebins
                        if (n_dims gt 2.5) then  for i=2,n_dims-2-counter do pntsSUB=pntsSUB*Dims[i]
                        if(pntsSUB lt JunkSize) then begin
                                
                         max_split=dims[n_dims-1-counter]
                        spliti=ceil(pntsSUB*max_split/Junksize)  
                        counti=round(max_split/spliti)
                        
                        
                        
                        start2=dims-dims
                        startX=start2
                        count=dims
                        count[n_dims-1-counter]=counti
                        countX=count
      for i=1,spliti-1 do begin
                       startX[n_dims-1-counter]= startX[n_dims-1-counter]+counti
                       if(i eq spliti-1) then countX[n_dims-1-counter]=dims[n_dims-1-counter]-(spliti-1)*counti
                       start2=[[start2],[startX]]
                       count=[[count],[countX]]
   
                        
                        endfor
                        
                        split=spliti
   ;   print,'haha'
      
                        endif else counter=counter+1
                 endwhile
         endif else begin
          split=1
          start2=dims-dims
          count=dims

         endelse
   

 

    H5d_CLOSE, dataset_id1
    H5S_CLOSE, dataspace_id1
    H5f_CLOSE,  fileid
    
    endif

return, create_struct('split',split,'start2',start2,'count',count,'locatie',locatie)
end





function LoadCycles, file,locatie, strt,cnt
  ErrCode=0
  ptrData=-9999
   if(ErrCode eq 0) then begin

    fileid=H5f_OPEN(File)
    dataset_id1 = H5D_OPEN(fileid, locatie)
    dataspace_id1 = H5D_GET_SPACE(dataset_id1)
    Dims=H5S_GET_SIMPLE_EXTENT_DIMS(Dataspace_id1)
    
    
   
    
    
    ptrData = ptrarr(1)

   ; Start =max([1,floor(m2t(MassLow,a,t0,ex,SampInt,/mass))])
  ;  Width = ceil(m2t(MassHigh,a,t0,ex,SampInt,/mass)- Start)
;    mist2=start+width


    H5S_SELECT_HYPERSLAB, dataspace_id1, strt, cnt,  /RESET
    memory_space_id1 = H5S_CREATE_SIMPLE(cnt)
    ptrData=Ptr_New(rearrange(H5D_READ(dataset_id1, FILE_SPACE=dataspace_id1, MEMORY_SPACE=memory_space_id1)),/No_Copy) ; Data


    H5S_CLOSE, memory_space_id1



    H5d_CLOSE, dataset_id1
    H5S_CLOSE, dataspace_id1
    H5f_CLOSE,  fileid

  endif else begin
    ptrData=Ptr_New(-9999)
    print, 'HDF5 FILE CORRUPTED 3'
  endelse

  Return, ptrData

end


function m2t, value, a, t0, ex,SampInt, time=time, mass=mass

  ; convert tof- time scale to tof mass scale and vice versa
  help, sampint, output=helpi
  if (strpos(helpi, 'Undefined') gt -0.5) then SampInt=1e-10

  ;if(min(value) gt 10000) then   value2=((float(value)*SampInt/1e-10-t0)/a)^(1/ex)  else  value2=long(a*value^ex+t0)*1e-10/SampInt
  if (keyword_set(time)) then begin
 ;   print,'forced time to mass conversion'
  endif
if (keyword_set(mass)) then begin
 ;   print,'forced mass to time conversion'
  endif

if (keyword_set(time)) then value2=exp(alog((float(value)*SampInt/1e-10-t0)/a)/ex) else $
    if (keyword_set(mass)) then value2=(a*value^ex+t0)*1e-10/SampInt else $
    if(min(value) gt 3500) then   value2=exp(alog((float(value)*SampInt/1e-10-t0)/a)/ex)    else $
    value2=(a*value^ex+t0)*1e-10/SampInt



  return, value2
end  


pro MakeCsv, name, data 
    
     ErrCode=0
CATCH, Error_status 
IF Error_status NE 0 THEN BEGIN 
      ErrCode=1 
      if(ErrCode eq 1) then begin
              PRINT, 'Error index: ', Error_status 
              PRINT, 'Error message: ', !ERROR_STATE.MSG 
              PRINT, 'MAKECSV not possible (disabled) :-((('
              CATCH, /CANCEL 
      endif
ENDIF 
if (ErrCode eq 0) then begin    
    
    
    openw, lun, name , /get_lun, width=1234567
   
    sizex = size(data, /dimensions)
    ;stringx = REFORM(string(data,  FORMAT='(E13.6)'),sizex[0],sizex[1], /OVERWRITE) 
    
    stringx = strtrim(data,2) ;removing of blanks 
    if (sizex[0] gt 1.5) then stringx[0:sizex[0]-2, *] = stringx[0:sizex[0]-2, *] + ',' ; makes commas between columns names
   
    printf, lun, stringx
    close, lun, /file
    free_lun, lun
endif   
end


pro ColorOplot, x, y,z,z2,markersize, xlegend,ylegend, nlabels,lsize,lthick
loadct,39
if (var_exists(xlegend) eq -1) then xlegend=0.85
if (var_exists(ylegend) eq -1) then ylegend=0.75
if (var_exists(nlabels) eq -1) then nlabels=5
if (var_exists(lsize) eq -1) then lsize=1.5
if (var_exists(lthick) eq -1) then lthick=2
if (ylegend lt 0.26) then ylegend=0.26
length=max(d(x))
zResize=round((z-min(z))*255.0/(max(z)-min(z)))
z2Resize=round((z2-min(z2))*2.0/(max(z2)-min(z2)))+1.0
for i=0,length-2 do begin
  ;markersize2=float(markersize)*(3.0-z2Resize[i])
  markersize2=markersize
  oplot, x[[i,i+1]],y[[i,i+1]],psym=4,thick=max([3,markersize2*4.0]),color=zResize[i], symsize=markersize2
endfor


for i=0,275 do xyouts,  xlegend,ylegend+0.01-float(i)/1000.0,/normal,'__________', color=-1
distance=254.0/(nlabels-1)
labl=0.0
labdis=(max(z)-min(z))/(nlabels-1)
labls=max(z)
;for i+1,nlabels-1 do labls=[labls,max(z)-labdis*i]
for i=0,255 do begin
  if(abs(float(i)-round(max(labl))) lt 0.01 ) then begin
    colr=0
    labl=[labl,max(labl)+distance]
     xyouts,  xlegend,ylegend-0.005-float(i)/1000.0,/normal,'        '+strtrim(string(min(labls),format='(I6)'),2), color=0
     labls=[labls,min(labls)-labdis]
    endif else colr=-1
  xyouts,  xlegend,ylegend-float(i)/1000.0,/normal,'______', color=colr
  
endfor

for i=0,254 do xyouts,  xlegend,ylegend-float(i)/1000.0,/normal,'____', color=254-i
end


pro PICAB, event
 
WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), GET_VALUE=DestFolder 
 path=strmid(DestFolder,0,15)
  mTOz=[33,42,45,59,87 ,    69 , 41,71 ,73 , 79 ,    107, 121, 137,81 ,133 ,    181, 223,207, 297,281 ,$
        371 ,355,-1,-1,-1,    -1,-1 ,-1,19,37,     39,34,43,46,60, 88,70, 42,72,74 ,$
             80, 108,122,138,82,134 ,182, 225,209, 299, 283, 374, 358,-1,-1,-1,78,32,120,106 ]
  compounds=['METH_33',   'CH3CN_42',   'Acetal_45',    'Ace_59',   'MBO_87',    'ISO_MBO_69',     'ISO_MBO_41',   'MVK_71',   'MEK_73',   'Ben_79',$
             'Xyl_107',   'TMB_121',    'MT_137',      'MT_81',   'benzF3_133','benzCl3_181','D3_223',   'D3_207',   'D4_297',   'D4_281',$
             'D5_371',    'D5_355',     'TotSIG',       'FCinlet',  'reltime',   'TotSIGiso',  'prim',     'Tdrift',   'I19',      'I37',$
             'I39', 'METH_34iso','CH3CN_43iso','Acetal_46iso','Ace_60iso','MBO_88iso',' MBO_70iso',' MBO_42iso','MVK_72iso','MEK_74iso','Ben_80iso',$
              'Xyl_108iso','TMB_122iso','Pin_138iso','Pin_82iso','benzF3_134iso','benzCl3_182iso','D3_225iso','D3_209iso','D4_299iso',' D4_283iso',$
              'D5_374iso','D5_358iso','Udx','pdrift','Udrift','BEN_78','I32','TMB_120','XYL_106']
RRK=[2.2,2.6+0.5, 3.03,  3.25, 2.68/1.45,         2.68/1.45, 2.68/1.45, 3.53/1.3, 3.25, 1.97,       2.31,  2.4,  2.45/1.2, 2.45/1.2,   2.46,        2.88/1.2,  2.59/1.2,  2.59/1.2,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
 

  mist=systime(1)
  Recur_Pattern = '*STD_PROT*'
  paths = FILE_SEARCH(Path,Recur_Pattern) 
  ; Remove the '_PTR' files from the filename list
  n = N_ELEMENTS(paths)

anz=22

PTRid=strarr(n)
rawdata=fltarr(7,anz,120)-1
sensdata=fltarr(7,anz,120)-1
sensdataCALC=fltarr(7,anz,120)-1
XRdat=fltarr(7,anz,120)-1
Tdri=fltarr(7,anz,120)-1
Pdri=fltarr(7,anz,120)-1
Udri=fltarr(7,anz,120)-1
Udxdri=fltarr(7,anz,120)-1
EoNdri=fltarr(7,anz,120)-1
RwetdrySmeas=fltarr(7,anz,120)-1
RwetdryPrimi=fltarr(7,anz,120)-1
RwetdryI19=fltarr(7,anz,120)-1

II19=fltarr(7,anz,120)-1
II37=fltarr(7,anz,120)-1
II19tr=fltarr(7,anz,120)-1
II37tr=fltarr(7,anz,120)-1
R37to19=fltarr(7,anz,120)-1
eexx=fltarr(7,anz,120)-1
mmLOW=fltarr(7,anz,120)-1
wwLOW=fltarr(7,anz,120)-1
mmHIGH=fltarr(7,anz,120)-1
WWHIGH=fltarr(7,anz,120)-1


counter=0
for i=0,n-1 do begin  ;loop over paths (different PTR-MSses)
  
        hilfi=strmid(strmid(paths[i],strpos(paths[i],'\')+1,1000),1+strpos(strmid(paths[i],strpos(paths[i],'\')+1,1000),'\'))
        hilfi2=strmid(hilfi,0,strpos(hilfi,'\') )
        if (strmatch(hilfi2, 'TOFqi LAN') eq 1) then hilfi2='TOFqi CEH'
        PTRid[i]=hilfi2
        print,  PTRid[i]
        Recur_Pattern = '*SENS *'
        files = FILE_SEARCH(Paths[i],Recur_Pattern) 
        nn = N_ELEMENTS(files)
        if (nn gt 1) then print, transpose(files) else print, files
        print, nn
        print, ''
        if(files[0] ne '') then for j=0,nn-1 do begin ;loop over calibrations (if any...)
                starttime=t09(strmid(files[j],strpos(files[j],'.csv')-20,20))
                 data=readcsv(files[j],/returnstring)
                data=data[*,1:*]
                data[ where(data eq '')]='0'
                data=float(data) 
                ;sensitivities[i]=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[i]/1013.25)
                if(  max(data[14,*]) eq 0.003) then data[14,*]=0.0045  ;adjust reaction time to 4.5ms for PTR3
                sensitivities=1.0E-9*1.0E6*(data[14,*]*data[10,*]/data[9,*])*(2.7E19*273.15/1013.25)     ;data[14,*]= t react in seconds  ,data[9,*]=Tdrift in K, data[10,*]=pdrift in mbar  
                set=[i,starttime,reform(data[64,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[64+r,*])]]
                rawdata[*,*,counter]=set
                set=[i,starttime,reform(data[20,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[20+r,*])]]
                sensdata[*,*,counter]=set
                set=[i,starttime,reform(sensitivities*RRK[0])] & for r=1,anz-1 do set=[set,[i,starttime,reform(sensitivities*RRK[0+r])]]
                 sensdataCALC[*,*,counter]=set
                 set=[i,starttime,reform(data[9,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[9,*])]]
                 Tdri[*,*,counter]=set
                  set=[i,starttime,reform(data[10,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[10,*])]]
                 Pdri[*,*,counter]=set
                 set=[i,starttime,reform(data[15,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[15,*])]]
                 EoNdri[*,*,counter]=set
                 subset=(data[76,*]+data[75,*]+data[74,*]+data[72,*]+data[71,*]+data[69,*]+data[67,*]+data[66,*]+data[65,*])/9
                 subset=fltarr(5)+(3*(subset[2]+subset[3]))/((subset[0]+subset[1]+subset[4])*2)
                 set=[i,starttime,subset] & for r=1,anz-1 do set=[set,[i,starttime,subset]]
                 RwetdrySmeas[*,*,counter]=set
                 subset=data[2,*]+data[3,*]
                 subset=fltarr(5)+(3*(subset[2]+subset[3]))/((subset[0]+subset[1]+subset[4])*2)
                 set=[i,starttime,subset] & for r=1,anz-1 do set=[set,[i,starttime,subset]]
                  RwetdryPrimi[*,*,counter]=set
                  subset=data[0,*]
                  subset=fltarr(5)+(3*(subset[2]+subset[3]))/((subset[0]+subset[1]+subset[4])*2)
                  set=[i,starttime,subset] & for r=1,anz-1 do set=[set,[i,starttime,subset]]
                  RwetdryI19[*,*,counter]=set

                 
                 set=[i,starttime,reform(data[0,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[0,*])]]
                 II19[*,*,counter]=set
                 set=[i,starttime,reform(data[1,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[1,*])]]
                 II37[*,*,counter]=set
                 set=[i,starttime,reform(data[2,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[2,*])]]
                 II19tr[*,*,counter]=set
                 set=[i,starttime,reform(data[3,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[3,*])]]
                 II37tr[*,*,counter]=set
                 set=[i,starttime,reform(data[4,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[4,*])]]
                 R37to19[*,*,counter]=set
  
                 
                 
                 XRfile=files[j]
                  XRfile=strmid(XRfile,0,strpos(XRfile,'SENS'))+'XRdat'+strmid(XRfile,strpos(XRfile,'SENS')+4,1000)
                 data=readcsv(XRfile,/returnstring)
                 data2=float(reform(data[1:4,1] ))
                 data3=float(reform(data[1:4,2] ))
                 data=float(reform(data[5:*,1] ))
                 set=[i,starttime,[data[0],data[0],data[0],data[0],data[0]]] & for r=1,anz-1 do set=[set,[i,starttime,[data[r],data[r],data[r],data[r],data[r]]]]
                 XRdat[*,*,counter]=set

                 for r=0,anz-1 do mmLOW[*,r,counter]=[i,starttime,[data2[0],data2[0],data2[0],data2[0],data2[0]]]
                 for r=0,anz-1 do eexx[*,r,counter]=[i,starttime,[data3[0],data3[0],data3[0],data3[0],data3[0]]]
                 for r=0,anz-1 do wwLOW[*,r,counter]=[i,starttime,[data2[1],data2[1],data2[1],data2[1],data2[1]]]
                 for r=0,anz-1 do mmHIGH[*,r,counter]=[i,starttime,[data2[2],data2[2],data2[2],data2[2],data2[2]]]
                 for r=0,anz-1 do wwHIGH[*,r,counter]=[i,starttime,[data2[3],data2[3],data2[3],data2[3],data2[3]]]

                 
                 
                 
                 
                 
                 
                 
                 
                 
                counter=counter+1
                print, ''
        endfor
        
    endfor    
        xxx=9
        compoundID=3
        filt=where(sensdata[0,0,*] eq xxx)
        mm19= reform(ii19[[2,3,6],compoundID,filt])
       mm19tr= reform(ii19tr[[2,3,6],compoundID,filt])
       mm37= reform(ii37[[2,3,6],compoundID,filt])
       mm37tr= reform(ii37tr[[2,3,6],compoundID,filt])
       mmmL= reform(mmLOW[[2,3,6],compoundID,filt])
        wwwL= reform(wwLOW[[2,3,6],compoundID,filt])
        mmmH= reform(mmHIGH[[2,3,6],compoundID,filt])
        wwwH= reform(wwHIGH[[2,3,6],compoundID,filt])
        EXEXEX= reform(eexx[[2,3,6],compoundID,filt])
        measS= reform(rawdata[[2,3,6],compoundID,filt])
        normS= reform(sensdata[[2,3,6],compoundID,filt])
        calcS= reform(sensdataCALC[[2,3,6],compoundID,filt])
      
      
        mm19trRECALC=mm19
        for i=0,2 do for j=0,3 do mm19trRECALC[i,j]=mm19[i,j]/tr(19,EXEXEX[i,j],mmmL[i,j],wwwL[i,j],mmmH[i,j],wwwH[i,j],/norm)
        mm37trRECALC=mm37
        for i=0,2 do for j=0,3 do mm37trRECALC[i,j]=mm37[i,j]/tr(37,EXEXEX[i,j],mmmL[i,j],wwwL[i,j],mmmH[i,j],wwwH[i,j],/norm)
        facttt11=mm19
        for i=0,2 do for j=0,3 do facttt11[i,j]=tr(mTOz[compoundID],EXEXEX[i,j],mmmL[i,j],wwwL[i,j],mmmH[i,j],wwwH[i,j],/norm)/tr(19,EXEXEX[i,j],mmmL[i,j],wwwL[i,j],mmmH[i,j],wwwH[i,j],/norm)
        facttt22=mm19
        for i=0,2 do for j=0,3 do facttt22[i,j]=tr(mTOz[compoundID],EXEXEX[i,j],mmmL[i,j],wwwL[i,j],mmmH[i,j],wwwH[i,j],/norm)/tr(37,EXEXEX[i,j],mmmL[i,j],wwwL[i,j],mmmH[i,j],wwwH[i,j],/norm)

        normSRECALC=measS*1e6/(mm19*facttt11+mm37*facttt22)

print, ptrid[xxx]
print, compounds[compoundid]
        print, 'norm sens'
        print, normS
        print,''
        print, 'norm sens recalculated'
        print,normSRECALC
        print,''
        print,'m19 tr '
        print,mm19tr
        print,''
        print,'m19 tr recalculated'
        print,mm19trRECALC
        print,'norm sens recalculated / calc sens'
        print,normSRECALC/calcS
        print,100.0*stddev(normSRECALC/calcS)/mean(normSRECALC/calcS)
        print,100.0*stddev(normSRECALC/calcS)

        normSRECALC=measS*1e6/(mm19*median(facttt11)+mm37*median(facttt22))

        print, 'norm sens recalculated'
        print,normSRECALC
       print,'norm sens recalculated / calc sens'
        print,normSRECALC/calcS
        print,100.0*stddev(normSRECALC/calcS)/mean(normSRECALC/calcS)
        print,100.0*stddev(normSRECALC/calcS)

  
 

 
 
 all_XR=fltarr(anz,12)
 all_XR_errors=fltarr(anz,12)
 all_ratios=fltarr(anz,12)
 all_errors=fltarr(anz,12)
 all_sens=fltarr(anz,12)
 all_sens_errors=fltarr(anz,12)
 
 fractISO=fltarr(5,12,20)
 fractMT=fltarr(5,12,20)
 fractD3=fltarr(5,12,20)
 fractD4=fltarr(5,12,20)
 fractD5=fltarr(5,12,20)
 
 
 
 
 
 RSmeas=reform(RwetdrySmeas[*,0,*])
 Rprimi=reform(RwetdryPrimi[*,0,*])
 RI19=reform(RwetdryI19[*,0,*])
 EoN=reform(eondri[*,0,*])

 IDs=ptrid[[100,2,3,4,5,1,6,7,8,100,9,0]]

 WINDOW, 8, xsize=1050,ysize=700
 !P.MULTI = [0,3,3]
 !Y.oMARGIN = [2,8]
 !X.oMARGIN = [8,20]
 !Y.MARGIN = [2,1]
 !x.MARGIN = [5,0]
 DEVICE, DECOMPOSED = 0
 loadct,5
colll=220
 indi=[2,3,4,5,1,6,7,8,9]
 namis=ptrid[indi]
 for i=0,8 do begin ;loop over instruments
   filter=where(RSmeas[0,*] eq indi[i])
   ID=namis[i]
   RSM=RSmeas[*,filter]
   RPR=Rprimi[*,filter]
   RI19i=RI19[*,filter]
   EoNi=EoN[*,filter]

   n_cal=d(RSM)
   n_cal=max(n_cal[1])
   x=indgen(380)+20
   
    ; maxi=[2,2,2,2,1.5,2,2,2,1.5]
   ; xran=[20,140]
   plot,RSM[1,*]-3164,RSM[2,*],psym=3, xrange=[20,29],yrange=[0,2],thick=1, color=1, background=-1, charthick=1.5, charsize=2
    oplot, [0,31],[1,1], color=0
    loadct,13
    fill=where(EoNi[3,*] le 99.0)
  if(max(fill) gt -0.5) then   oplot,RI19i[1,fill]-3164+1.0/24,RI19i[2,fill],psym=2, thick=2, color=colll
  if(max(fill) gt -0.5) then   oplot,RPR[1,fill]-3164+2.0/24,RPR[2,fill],psym=2, thick=2, color=255
  if(max(fill) gt -0.5) then   oplot,RSM[1,fill]-3164,RSM[2,fill],psym=2, thick=2, color=56

  fill=where(EoNi[3,*] gt 99.0)
  if(max(fill) gt -0.5) then   oplot,RI19i[1,fill]-3164+1.0/24,RI19i[2,fill],psym=6, thick=2, color=colll
  if(max(fill) gt -0.5) then   oplot,RPR[1,fill]-3164+2.0/24,RPR[2,fill],psym=6, thick=2, color=255
  if(max(fill) gt -0.5) then   oplot,RSM[1,fill]-3164,RSM[2,fill],psym=6, thick=2, color=56

   xyouts, 21,2*0.86,ID,color=0,charsize=1.2,charthick=1.5
   print, 'hallo'



 endfor

 xyouts, 0.17,0.90,/normal,'Comparison dry vs. humidified sample gas',charsize=2,charthick=3, color=0
 xyouts, 0.06,0.2,/normal,orientation=90, 'Ratio humidified/dry carrier gas ',charsize=1.5,charthick=1.5, color=0
 xyouts, 0.37,0.01,/normal, 'Day in September 2017',charsize=1.5,charthick=1.5, color=0
 
 
 

 xyouts, 0.84,0.82,/normal,'measured',charsize=1.5,charthick=1.5, color=56
 xyouts, 0.84,0.79,/normal,'sensitivity',charsize=1.5,charthick=1.5, color=56
 xyouts, 0.84,0.74,/normal,'F19+F37',charsize=1.5,charthick=1.5, color=255
 xyouts, 0.84,0.71,/normal,'transm. corr.',charsize=1.5,charthick=1.5, color=255
 xyouts, 0.84,0.66,/normal,'F19',charsize=1.5,charthick=1.5, color=colll
 xyouts, 0.84,0.63,/normal,'raw signal',charsize=1.5,charthick=1.5, color=colll
 xyouts, 0.84,0.54,/normal,'Marker info',charsize=1.5,charthick=1.5, color=0
 xyouts, 0.84,0.49,/normal,'star:',charsize=1.5,charthick=1.5, color=0
 xyouts, 0.84,0.46,/normal,'E/N < 100 Td',charsize=1.5,charthick=1.5, color=0
 xyouts, 0.84,0.41,/normal,'rectangle:',charsize=1.5,charthick=1.5, color=0
 xyouts, 0.84,0.38,/normal,'E/N > 100 Td',charsize=1.5,charthick=1.5, color=0


 
 
 ;dati=['Sep 20','Sep 21','Sep 22','Sep 23','Sep 24','Sep 25','Sep 26','Sep 27','Sep 28']
 ;xyouts, 0.90,0.76,/normal,dati[0],charsize=1.5,charthick=3, color=0
 ;for i=1,8 do xyouts, 0.90,0.76-0.03*i,/normal,dati[i],charsize=1.5,charthick=3, color=32*i-1



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 
transen=fltarr(7,120)
for q=0,119 do transen[*,q]=[mmLOW[0,0,q],mmLOW[1,0,q],eexx[2,0,q],mmLOW[2,0,q],wwLOW[2,0,q],mmHIGH[2,0,q],WWHIGH[2,0,q]]
EoN=reform(eondri[*,0,*])


IDs=ptrid[[100,2,3,4,5,1,6,7,8,100,9,0]]

WINDOW, 3, xsize=1000,ysize=700
!P.MULTI = [0,3,3]
!Y.oMARGIN = [2,8]
!X.oMARGIN = [12,15]
!Y.MARGIN = [2,1]
!x.MARGIN = [5,0]
DEVICE, DECOMPOSED = 0
loadct,5

indi=[2,3,4,5,1,6,7,8,9]
namis=ptrid[indi]
for i=0,8 do begin ;loop over instruments
   filter=where(transen[0,*] eq indi[i])
   ID=namis[i]
   transi=transen[*,filter]
   EoNi=EoN[*,filter]
   n_cal=d(transi)
   n_cal=max(n_cal[1])
   x=indgen(380)+20
   maxi=[4,2.5,2.5,4,1.5,2,2.5,2.5,1.5]
   xran=[0,400]
  ; maxi=[2,2,2,2,1.5,2,2,2,1.5]
  ; xran=[20,140]
   plot,x,tr(x,transi[2,0],transi[3,0],transi[4,0],transi[5,0],transi[6,0],/norm),xrange=xran, yrange=[0,maxi[i]],thick=1, color=0, background=-1, charthick=1.5, charsize=2
   oplot,[59,59],[0,0.8*maxi[i]], color=0
   oplot, [0,1000],[1,1], color=0
   if(i eq 8) then oplot,[42,42],[0,1], color=0
   if(i eq 8) then oplot,[45,45],[0,1], color=0
  loadct,13
   for j=0,n_cal-1 do begin
          if(EoNi[3,j] gt 99.0) then thickie=4 else thickie=1
          if (i eq 8) then if(EoNi[3,j] gt 150.0) then thickie=4 else thickie=1
     oplot,x,tr(x,transi[2,j],transi[3,j],transi[4,j],transi[5,j],transi[6,j],/norm),color=28*(transi[1,j]-3166-18),thick=thickie
   endfor
   xyouts, 20,maxi[i]*0.89,ID,color=0,charsize=1.2,charthick=1.5
   print, 'hallo'
   
   

endfor

xyouts, 0.35,0.92,/normal,'Retrieved Transmission',charsize=1.5,charthick=1.5, color=0
 xyouts, 0.1,0.1,/normal,orientation=90, 'transmission  [normalised at m/Q=59 Th]',charsize=1.5,charthick=1.5, color=0
 xyouts, 0.5,0.01,/normal, 'm/Q',charsize=1.5,charthick=1.5, color=0

xyouts, 0.88,0.8,/normal,'Date 2017',charsize=1.5,charthick=3, color=0
dati=['Sep 20','Sep 21','Sep 22','Sep 23','Sep 24','Sep 25','Sep 26','Sep 27','Sep 28']
xyouts, 0.90,0.76,/normal,dati[0],charsize=1.5,charthick=3, color=0
for i=1,8 do xyouts, 0.90,0.76-0.03*i,/normal,dati[i],charsize=1.5,charthick=3, color=32*i-1


 

for g=0,anz-1 do begin ;loop over compounds 
        WINDOW, 4, xsize=1500,ysize=925
        !P.MULTI = [0,9,4]
        !Y.oMARGIN = [2,8]
        !X.oMARGIN = [8,10]
        !Y.MARGIN = [2,1]
        !x.MARGIN = [5,0]
        DEVICE, DECOMPOSED = 0 
        loadct,5
        X = [-2, 0, 2, 0, -2]
        Y = [0, 2, 0, -2, 0]
        X2 = [-1, 0, 1, 0, -1]
        Y2 = [0, 2, 0, -2, 0]
        X3 = [-2, 0, 2, 0, -2]
        Y3 = [0, 1, 0, -1, 0]
        ccoollss=[0,110,140,180,50]
        USERSYM, X, Y,/fill
        PSYMs=[8,8,4,4,8]
        xran=reform(rawdata[1,g,*])
        xran=range(xran[where(xran gt -1)])-3164
  
       for i=1,10 do begin ;loop over instruments
              USERSYM, X, Y,/fill
              filter=where(order(reform(rawdata[0,g,*])) eq i)
              if(max(filter) gt -0.5) then if(max(where(rawdata[2,g,filter] gt -1e90)) gt -0.5) then begin
                      xdat=reform(rawdata[1,g,filter])-3164
                      ydat=reform(EoNdri[2,g,filter])
                      ydat2=reform(Tdri[2,g,filter])-273.15
                      ydat3=reform(Pdri[2,g,filter])*10
                      ydat4=reform(R37to19[2,g,filter])*100
                      if(max(where(ydat4 gt 200)) gt -0.5) then ydat4[where(ydat4 gt 200)]=200
                      USERSYM, X, Y,/fill
                      plot, xdat ,ydat, psym=2, xrange=xran,yrange=[0,200], color=0, background=-1, charsize=2
                      loadct,31
                      USERSYM, X, Y,/fill
                      oplot, xdat ,ydat, psym=2, color=171
                      USERSYM, X2, Y2,/fill
                      oplot, xdat ,ydat2, psym=1,color=211
                      USERSYM, X3, Y3,/fill
                      oplot, xdat ,ydat3, psym=2,color=208
                      loadct,5
                      oplot, xdat ,ydat4, psym=8, color=0
                      for ii=1,4 do  begin
                              ydat=reform(EoNdri[2+ii,g,filter])
                              ydat2=reform(Tdri[2+ii,g,filter])-273.15
                              ydat3=reform(Pdri[2+ii,g,filter])*10
                              ydat4=reform(R37to19[2+ii,g,filter])*100
                              if(max(where(ydat4 gt 200)) gt -0.5) then ydat4[where(ydat4 gt 200)]=200
                              loadct,31
                              USERSYM, X, Y,/fill
                              oplot, xdat,ydat, psym=2, color=171
                              USERSYM, X2, Y2,/fill
                              oplot, xdat,ydat2, psym=1, color=211
                              USERSYM, X3, Y3,/fill
                              oplot, xdat,ydat3, psym=2, color=208
                               loadct,5
                               oplot, xdat,ydat4, psym=8, color=ccoollss[ii]
                  
                      endfor
                      loadct,5

              endif else  begin
                      plot, [0,1],[0,1],psym=8, color=0, background=-1, charsize=2
              endelse
       endfor
  
  
       for i=1,12 do begin
              USERSYM, X, Y,/fill
              filter=where(order(reform(rawdata[0,g,*])) eq i)
              if(max(filter) gt -0.5) then if(max(where(rawdata[2,g,filter] gt -1e90)) gt -0.5) then begin
                      xdat=reform(rawdata[1,g,filter])-3164
                     
                       USERSYM, X2, Y2,/fill
                    
                       ydat=reform(rawdata[[2,3,4,5,6],g,filter])
                       if(g eq 5) then ydat=ydat+reform(rawdata[[2,3,4,5,6],g-1,filter])+reform(rawdata[[2,3,4,5,6],g+1,filter])  ;MBO/iso
                       if(g eq 12) then ydat=ydat+reform(rawdata[[2,3,4,5,6],g+1,filter])  ;MT
                       if(g eq 16) then ydat=ydat+reform(rawdata[[2,3,4,5,6],g+1,filter])  ;D3
                       if(g eq 18) then ydat=ydat+reform(rawdata[[2,3,4,5,6],g+1,filter])  ;D4
                       if(g eq 20) then ydat=ydat+reform(rawdata[[2,3,4,5,6],g+1,filter])  ;D5
                       if(i eq 10) then ydat=ydat/1000
                      yran=[0,max(ydat)]
                    
                      for ii=0,4 do  begin
                               
                              if(i lt 10.5) then if (ii eq 0) then plot, xdat ,ydat[ii,*], psym=8, xrange=xran,yrange=yran, color=0, background=-1, charsize=2 else oplot, xdat,ydat[ii,*], psym=PSYMs[ii], color=ccoollss[ii],thick=2
                                
                             
                      endfor
                      
                      
                      mmm= [rawdata[2,g,filter],rawdata[3,g,filter],rawdata[6,g,filter]]
                      filt=where(mmm gt 0.1*mean(mmm))
                      mmm=mmm[filt]
                      nnn=stddev(mmm)
                      mmm=median([mmm])
                      nnn=100.0*nnn/mmm
                      kkk=XRdat[2,g,filter]
                      ooo=EoNdri[2,g,filter]
                      ppp=Pdri[2,g,filter]
                      if(g eq 14) then begin
                              print,'kkk'
                              print, reform(kkk)
                              print,'kkk'
                      endif
                      filt=where(kkk gt 0.1*median(kkk) and kkk lt 10*median(kkk)  )
                      filt=where(kkk gt -50 and kkk lt 50 and ooo ge 100 and ooo le 135)
                      if (max(filt) gt -0.5) then  kkk=kkk[filt] else kkk=-100
                      mssst=[kkk,kkk,kkk,kkk,kkk,kkk]
                      mssst=mssst[where(mssst gt quantile(mssst,0.25) and mssst lt quantile(mssst,0.75))]
                      lll=stddev([mssst,mssst])
                      kkk=mean([mssst,mssst])
                      lll=100.0*lll/kkk
             ;         if(i lt 10.5) then xyouts, 22,max(rawdata[2,g,filter])*0.2,strtrim(string(mmm,format='(I8)'),2),color=-1,charsize=1.2,charthick=9
             ;         if(i lt 10.5) then xyouts, 22,max(rawdata[2,g,filter])*0.08,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=-1,charsize=1.2,charthick=9
             ;         if(i lt 10.5) then xyouts, 22,max(rawdata[2,g,filter])*0.2,strtrim(string(mmm,format='(I8)'),2),color=0,charsize=1.2,charthick=1.5
              ;        if(i lt 10.5) then xyouts, 22,max(rawdata[2,g,filter])*0.08,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=0,charsize=1.2,charthick=1.5
                      all_sens[g,i]=mmm
                      all_sens_errors[g,i]=nnn/100
                      all_XR[g,i]=kkk
                      all_XR_errors[g,i]=lll/100
              endif else  begin
                      plot, [0,1],[0,1],psym=8, color=0, background=-1, charsize=2
              endelse
      endfor
    for i=1,12 do begin
            USERSYM, X, Y,/fill
            filter=where(order(reform(rawdata[0,g,*])) eq i)
            if(max(filter) gt -0.5) then if(max(where(sensdata[2,g,filter] gt -1e90)) gt -0.5) then begin
                   xdat=reform(sensdata[1,g,filter])-3164
                   USERSYM, X2, Y2,/fill
                   ydat=reform(sensdata[[2,3,4,5,6],g,filter])
                   if(g eq 5) then ydat=ydat+reform(sensdata[[2,3,4,5,6],g-1,filter])+reform(sensdata[[2,3,4,5,6],g+1,filter])  ;MBO/iso
                   if(g eq 12) then ydat=ydat+reform(sensdata[[2,3,4,5,6],g+1,filter])  ;MT
                   if(g eq 16) then ydat=ydat+reform(sensdata[[2,3,4,5,6],g+1,filter])  ;D3
                   if(g eq 18) then ydat=ydat+reform(sensdata[[2,3,4,5,6],g+1,filter])  ;D4
                   if(g eq 20) then ydat=ydat+reform(sensdata[[2,3,4,5,6],g+1,filter])  ;D5
                   yran=[0,max(ydat)]
                   for ii=0,4 do  begin
                     if(i lt 10.5) then if (ii eq 0) then plot, xdat ,ydat[ii,*], psym=8, xrange=xran,yrange=yran, color=0, background=-1, charsize=2 else oplot, xdat,ydat[ii,*], psym=PSYMs[ii], color=ccoollss[ii],thick=2
                   endfor

              
                    
                    
                    
                    mmm= median([sensdata[2,g,filter],sensdata[3,g,filter],sensdata[6,g,filter]])
                    nnn= 100.0*stddev([sensdata[2,g,filter],sensdata[3,g,filter],sensdata[6,g,filter]])/mmm
                ;    if(i lt 10.5) then xyouts, 22,max(sensdata[2,g,filter])*0.2,strtrim(string(mmm,format='(F10.1)'),2),color=-1,charsize=1.2,charthick=9
                  ;  if(i lt 10.5) then xyouts, 22,max(sensdata[2,g,filter])*0.08,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=-1,charsize=1.2,charthick=9
                  ; if(i lt 10.5) then xyouts, 22,max(sensdata[2,g,filter])*0.2,strtrim(string(mmm,format='(F10.1)'),2),color=0,charsize=1.2,charthick=1.5
                  ;  if(i lt 10.5) then xyouts, 22,max(sensdata[2,g,filter])*0.08,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=0,charsize=1.2,charthick=1.5
            endif else plot, [0,1],[0,1],psym=8, color=0, background=-1, charsize=2
    endfor
    for i=1,12 do begin
            USERSYM, X, Y,/fill
            filter=where(order(reform(rawdata[0,g,*])) eq i)
            if(max(filter) gt -0.5) then begin
                            
                  mmm=[sensdata[2,g,filter],sensdata[3,g,filter],sensdata[6,g,filter]]
                  mmmCALC=[sensdataCALC[2,g,filter],sensdataCALC[3,g,filter],sensdataCALC[6,g,filter]]
                  mmm=[sensdata[3,g,filter],sensdata[6,g,filter]]
                  mmmCALC=[sensdataCALC[3,g,filter],sensdataCALC[6,g,filter]]
             mmm=[sensdata[4,g,filter],sensdata[5,g,filter]]                   ;WETPLOT 1 of 6 ACTIVATE
                  mmmCALC=[sensdataCALC[4,g,filter],sensdataCALC[5,g,filter]]       ;WETPLOT 2 of 6 ACTIVATE
    
                  if(g eq 5 or g eq 12 or g eq 15 or g eq 16 or g eq 18 or g eq 20) then  begin
                          ooo=[EoNdri[2,g,filter],EoNdri[3,g,filter],EoNdri[6,g,filter]]
                          ppp=[Pdri[2,g,filter],Pdri[3,g,filter],Pdri[6,g,filter]]
                          qqq=[Tdri[2,g,filter],Tdri[3,g,filter],Tdri[6,g,filter]]
                          mmmQ=[sensdata[2,g+1,filter],sensdata[3,g+1,filter],sensdata[6,g+1,filter]]
                          helpi=total([sensdata[2,4,filter],sensdata[3,4,filter],sensdata[6,4,filter]],1)/3;MBO/iso
                          filtNPL=where(helpi lt 0.5*(quantile(helpi,0.95)+median(helpi)))
                          filtAR=where(helpi gt 0.5*(quantile(helpi,0.95)+median(helpi)))
                          if(g eq 5 or g eq 12) then begin 
                                  mmmQ= mmmQ[*,*,filtNPL]
                                  mmm= mmm[*,*,filtNPL]
                                  mmmCALC= mmmCALC[*,*,filtNPL]
                                  ooo= ooo[*,*,filtNPL]
                                  ppp= ppp[*,*,filtNPL]
                                 qqq= qqq[*,*,filtNPL]
                          endif
                          if(g eq 15 or g eq 16) then begin 
                                  mmmQ= mmmQ[*,*,[filtAR,filtAR]]
                                  mmm= mmm[*,*,[filtAR,filtAR]]
                                  mmmCALC= mmmCALC[*,*,[filtAR,filtAR]]
                                  ooo= ooo[*,*,[filtAR,filtAR]]
                                  ppp= ppp[*,*,[filtAR,filtAR]]
                                  qqq= qqq[*,*,[filtAR,filtAR]]
                          endif
                          ;if(g eq 5) then mmmQ=mmmQ+[sensdata[2,g-1,filter],sensdata[3,g-1,filter],sensdata[6,g-1,filter]];MBO/iso
                          mmmP=mmm/(mmm+mmmQ)
                          dimdim=d(mmmQ)
                          if(size([dimdim],/n_dimensions) gt 0.5) then dimdim=indgen(dimdim[2])else  if(g eq 16) then dimdim=0
                          set= [total(mmmP,1)/3,stddev(mmmP,dimension=1),total(ooo,1)/3,total(ppp,1)/3,total(qqq,1)/3]
                          if(g eq 5) then fractISO[*,i-1,dimdim]=set
                          if(g eq 12) then fractMT[*,i-1,dimdim]=set
                          if(g eq 16) then fractD3[*,i-1,dimdim]=set
                          if(g eq 18) then fractD4[*,i-1,dimdim]=set
                          if(g eq 20) then fractD5[*,i-1,dimdim]=set
                          if(g ne 15) then mmm=mmm+mmmQ
                          print, 'hallo '+string(g)
                          if (g eq 12) then begin
                          print, 'hallo '+string(g)
                          endif
            endif
                    
                    mmm= mmm/mmmCALC
  
  ;clean individual points 
 ; if(i eq 2) then mmm[1,0,0]=0  ; WETPLOT 3 of 6 DE-ACTIVATE   ; delete second N2dry injection for 'TOF8000 FJZ' on 20.9.2017 because signal too low (diluted more than expected)
                
  if(i eq 2 and g eq 3) then begin
    print, 'stop'
    endif
                     
                   
                    filt=where(mmm gt 0.05 and mmm lt 15)
                    mmm=mmm[filt]
                    nnn=mmm
                    mmm=median([mmm],/even)
                    nnn=100.0*stddev(nnn)
                  
                
                
                
                
                    xdat=reform(sensdata[1,g,filter])-3164
                    ydat=reform(sensdata[2,g,filter])
                    if(g eq 5) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;MBO/iso
                    if(g eq 12) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;MT
                    if(g eq 16) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;D3
                    if(g eq 18) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;D4
                    if(g eq 20) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;D5
                    if(i lt 10.5) then plot, xdat,ydat/reform(sensdataCALC[2,g,filter]), psym=8, yrange=[0,2], xrange=xran, color=0, background=-1, charsize=2
                   ; if(i lt 10.5) then xyouts, 22,0.5,strtrim(string(mmm,format='(F5.3)'),2),color=-1,charsize=1.2,charthick=9
                  ;  if(i lt 10.5) then xyouts, 22,0.25,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=-1,charsize=1.2,charthick=9
                  ;  if(i lt 10.5) then if(i lt 10.5) then xyouts, 22,0.5,strtrim(string(mmm,format='(F5.3)'),2),color=0,charsize=1.2,charthick=1.5
                   ; if(i lt 10.5) then xyouts, 22,0.25,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=0,charsize=1.2,charthick=1.5

                 
                  loadct, 31
                     for q=0,100 do if(i lt 10.5) then oplot, [0,32],[mmm,mmm]*(1+nnn/(q*10+100)), color=203, thick=3
                     for q=0,100 do if(i lt 10.5) then oplot, [0,32],[mmm,mmm]*(1-nnn/(q*10+100)), color=203, thick=3
 loadct, 5
                    if(i lt 10.5) then oplot, [0,32],[mmm,mmm],color=0, thick=2
                    if(i lt 10.5) then oplot, xdat,ydat/reform(sensdataCALC[2,g,filter]), psym=8,  color=0, thick=2

                    USERSYM, X2, Y2,/fill
                    for ii=1,4 do begin
                      ydat=reform(sensdata[2+ii,g,filter])
                      ;   if(g eq 5) then ydat=ydat+reform(sensdata[2+ii,g-1,filter])+reform(sensdata[2+ii,g+1,filter])  ;MBO/iso
                      if(g eq 5) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;MBO/iso
                      if(g eq 12) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;MT
                      if(g eq 16) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;D3
                      if(g eq 18) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;D4
                      if(g eq 20) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;D5
                      if(i lt 10.5) then oplot, xdat,ydat/reform(sensdataCALC[2+ii,g,filter]), psym=PSYMs[ii], color=ccoollss[ii],thick=2
                    endfor
           
                
                
                
                xsen=float([0.8,0.8,2.0,3.4,4.6,5.8,5.8,7,8.2,9.4,9.4,10.6,10.6])
                xsen=float([0.8,0.8,1.9,3.0,4.1,5.2,6.3,7.4,8.5,9.4,9.6,10.8,10.8])*1.095
 if(i lt 10.5) then  xyouts,xsen[i]/12,0.92,/normal,ptrid[sensdata[0,g,filter[0]]],color=0,charsize=1.2,charthick=1.5
 all_ratios[g,i]=mmm
 all_errors[g,i]=nnn/100
      
            endif
    endfor

    loadct,31

      xyouts, 0.95,0.87,/normal, 'E/N' ,charsize=1.5,charthick=2, color=171
      xyouts, 0.95,0.84,/normal, '[Td]' ,charsize=1.5,charthick=2, color=171
  xyouts, 0.95,0.8,/normal, 'Tdrift' ,charsize=1.5,charthick=2, color=211
  xyouts, 0.95,0.77,/normal, '[C]' ,charsize=1.5,charthick=2, color=211
    xyouts, 0.95,0.73,/normal, 'Pd*10' ,charsize=1.5,charthick=2, color=208
    xyouts, 0.95,0.70,/normal, '[hPa]' ,charsize=1.5,charthick=2, color=208
    loadct,5
   
 xyouts, 0.4,0.005,/normal, 'Day in September 2017' ,charsize=1.5,charthick=1.5, color=0
      xyouts, 0.005,0.96,/normal, compounds[g],charsize=2,charthick=2, color=0
 
 
      xyouts, 0.015,0.72,/normal,orientation=90, 'Ratio ',charsize=1.5,charthick=1.5, color=0
      xyouts, 0.035,0.72,/normal,orientation=90, 'F37/F19',charsize=1.5,charthick=1.5, color=0
      xyouts, 0.055,0.72,/normal,orientation=90, ' x 100',charsize=1.5,charthick=1.5, color=0
     
     xyouts, 0.015,0.5,/normal,orientation=90, 'Meas. Sens.',charsize=1.5,charthick=1.5, color=0
    xyouts, 0.015,0.3,/normal,orientation=90, 'Norm. Sens.',charsize=1.5,charthick=1.5, color=0
    xyouts, 0.015,0.1,/normal,orientation=90, 'Ratio',charsize=1.5,charthick=1.5, color=0
   xyouts, 0.035,0.5,/normal,orientation=90, 'cps/ppb',charsize=1.5,charthick=1.5, color=0
   xyouts, 0.055,0.5,/normal,orientation=90, '(VOCUS: cps/ppt)',charsize=1,charthick=1.5, color=0
   xyouts, 0.035,0.3,/normal,orientation=90, 'cps/ppb',charsize=1.5,charthick=1.5, color=0
 ;   xyouts, 0.05,0.3,/normal,orientation=90, '(1e6 cps prim ions)',charsize=1,charthick=1, color=0
    xyouts, 0.035,0.09,/normal,orientation=90, 'meas/expd',charsize=1.5,charthick=1.5, color=0

    
    
   xyouts, 0.95,0.5,/normal,'dry',charsize=1.5,charthick=3, color=0
   xyouts, 0.95,0.48,/normal,'N2',charsize=1.5,charthick=3, color=0
  xyouts, 0.95,0.45,/normal,'dry',charsize=1.5,charthick=3, color=110
   xyouts, 0.95,0.43,/normal,'air',charsize=1.5,charthick=3, color=110
  xyouts, 0.95,0.40,/normal,'wet',charsize=1.5,charthick=2, color=140
   xyouts, 0.95,0.38,/normal,'air',charsize=1.5,charthick=2, color=140
  xyouts, 0.95,0.35,/normal,'wet',charsize=1.5,charthick=2, color=180
   xyouts, 0.95,0.33,/normal,'N2',charsize=1.5,charthick=2, color=180
  xyouts, 0.95,0.30,/normal,'dry',charsize=1.5,charthick=3, color=50
   xyouts, 0.95,0.28,/normal,'N2',charsize=1.5,charthick=3, color=50
     
 
 ErrCode=0
CATCH, Error_status 
IF Error_status NE 0 THEN BEGIN 
      ErrCode=1 
      if(ErrCode eq 1) then begin
              PRINT, 'Error index: ', Error_status 
              PRINT, 'Error message: ', !ERROR_STATE.MSG 
              PRINT, 'WRITE_JPG not possible (disabled) :-((('
              CATCH, /CANCEL 
      endif
ENDIF 
if (ErrCode eq 0) then  write_jpeg, strmid(Destfolder,0,22)+'PICAB_'+strtrim(string(g+10),2)+'_'+compounds[g]+'.jpg',tvrd(0,true=1), true=1
 
 
 
 
 
    
 endfor     
 
  ;compounds[g]
 ;mTOz
IDs=ptrid[[11,1,3,4,5,11,6,8,10,11,12,0]]
IDs=ptrid[[100,2,3,4,5,1,6,7,8,100,9,0]]
 cols=['AQUAMARINE','MAGENTA','PURPLE','PINK','DEEP PINK','BLUE','DARK GREEN','YELLOW GREEN','LIME','LIME','RED','CHOCOLATE']
 ;cols=['KHAKI','MAGENTA','PURPLE','NAVY','BLUE','AQUAMARINE','GREEN','ORANGE','GOLD','LIME','RED','CHOCOLATE']
 symb=['<','D','tu','s','tl','d','p','h','S','o','D','s']


 nicht=1
 if(nicht eq 0) then begin

totles=['isoprene', 'monoterpenes','D3-siloxane','D4-siloxane','D5-siloxane']        
for t=0,4 do begin 
  if (t eq 0) then datatitat=fractISO      
  if (t eq 1) then datatitat=fractMT      
  if (t eq 2) then datatitat=fractD3     
  if (t eq 3) then datatitat=fractD4      
  if (t eq 4) then datatitat=fractD5    
 datatitat[2,10,where(datatitat[2,10,*] gt 0)]=70  ;set PT3 E/N to 70  
   x=datatitat[2,0,*]      
  y=datatitat[0,0,*]      
  yerror=datatitat[1,0,*]  
; if(t lt 0.5) then  plot = ERRORPLOT(x, y, yerror,SYMBOL=symb[1],POSITION=[.1,.77,.35,.95], COLOR=cols[1], dimensions=[1200,1000],xTICKname=['','','','','',''], LINESTYLE=' ',  YRANGE=[0.2,1.09],xrange=[51,170])
 ;if(t eq 1 or t eq 3) then plot = ERRORPLOT(x, y, yerror,SYMBOL=symb[1],/current, POSITION=[.1,.77-0.18*t,.35,0.95-0.18*t], COLOR=cols[1],xTICKname=['','','','','',''],  LINESTYLE=' ', YRANGE=[0.2,1.09],xrange=[51,170])
 ;if(t eq 2) then plot = ERRORPLOT(x, y, yerror,SYMBOL=symb[1],/current, POSITION=[.1,.77-0.18*t,.35,0.95-0.18*t], COLOR=cols[1],xTICKname=['','','','','',''],  LINESTYLE=' ',YTITLE="Fraction protonated", YRANGE=[0.2,1.09],xrange=[51,170])
 ;if(t gt 3.5) then plot = ERRORPLOT(x, y, yerror,SYMBOL=symb[1],/current, POSITION=[.1,.77-0.18*t,.35,0.95-0.18*t], COLOR=cols[1],  LINESTYLE=' ', XTITLE="E/N", YRANGE=[0.2,1.09],xrange=[51,170])
 if(t lt 0.5) then  plot = PLOT(x, y, SYMBOL=symb[1],sym_thick=3,POSITION=[.1,.77,.35,.95], COLOR=cols[1], dimensions=[1200,1000],xTICKname=['','','','','',''], LINESTYLE=' ',  YRANGE=[0.2,1.09],xrange=[51,170])
 if(t eq 1 or t eq 3) then plot = PLOT(x, y, SYMBOL=symb[1],/current, sym_thick=3,POSITION=[.1,.77-0.18*t,.35,0.95-0.18*t], COLOR=cols[1],xTICKname=['','','','','',''],  LINESTYLE=' ', YRANGE=[0.2,1.09],xrange=[51,170])
 if(t eq 2) then plot = PLOT(x, y, SYMBOL=symb[1],/current,sym_thick=3, POSITION=[.1,.77-0.18*t,.35,0.95-0.18*t], COLOR=cols[1],xTICKname=['','','','','',''],  LINESTYLE=' ',YTITLE="Fraction protonated",YTICKFONT_SIZE=12, YRANGE=[0.2,1.09],xrange=[51,170])
 if(t gt 3.5) then plot = PLOT(x, y, SYMBOL=symb[1],/current,sym_thick=3, POSITION=[.1,.77-0.18*t,.35,0.95-0.18*t], COLOR=cols[1],  LINESTYLE=' ', XTITLE="E/N",XTICKFONT_SIZE=12,  YRANGE=[0.2,1.09],xrange=[51,170])

  text08 = TEXT(.4,0.97,'FRAGMENTATION', /CURRENT, FONT_SIZE=12, FONT_Style=1)
 text08 = TEXT(.87,0.85,IDs[1], /CURRENT, COLOR=cols[1], FONT_SIZE=10, FONT_Style=1)
 ;text08 = TEXT(.11,.92-0.18*t,totles[t], /CURRENT)
 text08 = TEXT(.753,.92-0.18*t,totles[t], /CURRENT, FONT_SIZE=11, FONT_Style=1)
 
  for ii=1,10 do begin
        x=datatitat[2,ii,*]      
        y=datatitat[0,ii,*]      
        yerror=datatitat[1,ii,*]  
        if(ii lt 4.5) then addx=0 else addx=5
        if(max(y) gt 0.05) then begin
              plot = PLOT(x+0.05*ii, y,SYMBOL=symb[ii+1], sym_thick=3,COLOR=cols[ii+1], LINESTYLE=' ',  /overplot)
          ;    plot = ERRORPLOT(x, y,yerror,SYMBOL=symb[ii+1], COLOR=cols[ii+1], LINESTYLE=' ',  /overplot)
               if(t lt 0.5) then text08 = TEXT(.87,0.85-0.02*ii,IDs[ii+1], /CURRENT, COLOR=cols[ii+1], FONT_SIZE=10, FONT_Style=1)
        endif       
  endfor        
endfor        
           
for t=0,4 do begin 
  if (t eq 0) then datatitat=fractISO      
  if (t eq 1) then datatitat=fractMT      
  if (t eq 2) then datatitat=fractD3     
  if (t eq 3) then datatitat=fractD4      
  if (t eq 4) then datatitat=fractD5      
   datatitat[3,10,where(datatitat[2,10,*] gt 0)]=datatitat[3,10,where(datatitat[2,10,*] gt 0)]/15 ;divide PT3 pdrift by 15
  
  x=datatitat[3,0,*]      
  y=datatitat[0,0,*]      
  yerror=datatitat[1,0,*] 
  filt=where(y gt 0.05) 
;  if(t lt 3.5) then plot = ERRORPLOT(x[filt], y[filt], yerror[filt],SYMBOL=symb[1], /current, POSITION=[.35,.77-0.18*t,.6,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],xTICKname=['','','',''],  LINESTYLE=' ',  YRANGE=[0.2,1.09],xrange=[1.1,5.5])
 ;if(t gt 3.5) then plot = ERRORPLOT(x[filt], y[filt], yerror[filt],SYMBOL=symb[1], /current, POSITION=[.35,.77-0.18*t,.6,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],  LINESTYLE=' ', XTITLE="p drift",  YRANGE=[0.2,1.09],xrange=[1.1,5.5])
 if(t lt 3.5) then plot = PLOT(x[filt], y[filt],SYMBOL=symb[1], /current, sym_thick=3,POSITION=[.35,.77-0.18*t,.6,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],xTICKname=['','','',''],  LINESTYLE=' ',  YRANGE=[0.2,1.09],xrange=[1.1,5.5])
 if(t gt 3.5) then plot = PLOT(x[filt], y[filt], SYMBOL=symb[1], /current,sym_thick=3, POSITION=[.35,.77-0.18*t,.6,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],  LINESTYLE=' ', XTITLE="p drift", XTICKFONT_SIZE=12,  YRANGE=[0.2,1.09],xrange=[1.1,5.5])
  for ii=1,10 do begin
        x=datatitat[3,ii,*]      
        y=datatitat[0,ii,*]      
        yerror=datatitat[1,ii,*]  
        filt=where(y gt 0.05) 
        if(ii lt 4.5) then addx=0 else addx=0.22
        if(max(filt) gt -0.05) then begin
;              plot = ERRORPLOT(x[filt]+0.05*float(ii), y[filt],yerror[filt],SYMBOL=symb[ii+1], COLOR=cols[ii+1], LINESTYLE=' ',  /overplot)
              plot = PLOT(x[filt]+0.05*float(ii), y[filt],SYMBOL=symb[ii+1],sym_thick=3, COLOR=cols[ii+1], LINESTYLE=' ',  /overplot)
     endif       
  endfor        
endfor        

for t=0,4 do begin 
  if (t eq 0) then datatitat=fractISO      
  if (t eq 1) then datatitat=fractMT      
  if (t eq 2) then datatitat=fractD3     
  if (t eq 3) then datatitat=fractD4      
  if (t eq 4) then datatitat=fractD5      
  ; datatitat[3,10,where(datatitat[2,10,*] gt 0)]=datatitat[3,10,where(datatitat[2,10,*] gt 0)]/15 ;divide PT3 pdrift by 15
  
  x=datatitat[4,0,*]      
  y=datatitat[0,0,*]      
  yerror=datatitat[1,0,*] 
  filt=where(y gt 0.05) 
;  if(t lt 3.5) then plot = ERRORPLOT(x[filt], y[filt], yerror[filt],SYMBOL=symb[1], /current, POSITION=[.6,.77-0.18*t,.85,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],xTICKname=['','','',''],  LINESTYLE=' ',  YRANGE=[0.2,1.09],xrange=[301,399])
; if(t gt 3.5) then plot = ERRORPLOT(x[filt], y[filt], yerror[filt],SYMBOL=symb[1], /current, POSITION=[.6,.77-0.18*t,.85,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],  LINESTYLE=' ', XTITLE="T drift",  YRANGE=[0.2,1.09],xrange=[301,399])
 if(t lt 3.5) then plot = PLOT(x[filt], y[filt], SYMBOL=symb[1], /current, sym_thick=3,POSITION=[.6,.77-0.18*t,.85,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],xTICKname=['','','',''],  LINESTYLE=' ',  YRANGE=[0.2,1.09],xrange=[298,398])
 if(t gt 3.5) then plot = PLOT(x[filt], y[filt], SYMBOL=symb[1], /current, sym_thick=3,POSITION=[.6,.77-0.18*t,.85,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],  LINESTYLE=' ', XTITLE="T drift", XTICKFONT_SIZE=12,  YRANGE=[0.2,1.09],xrange=[298,398])
 for ii=1,10 do begin
        x=datatitat[4,ii,*]      
        y=datatitat[0,ii,*]      
        yerror=datatitat[1,ii,*]  
        filt=where(y gt 0.05) 
        if(ii lt 4.5) then addx=0 else addx=0.22
        if(max(filt) gt -0.05) then begin
;              plot = ERRORPLOT(x[filt]+0.05*float(ii), y[filt],yerror[filt],SYMBOL=symb[ii+1], COLOR=cols[ii+1], LINESTYLE=' ',  /overplot)
              plot = PLOT(x[filt]+0.05*float(ii), y[filt],SYMBOL=symb[ii+1], sym_thick=3,COLOR=cols[ii+1], LINESTYLE=' ',  /overplot)
      endif       
  endfor        
endfor        

endif

all_ratios[[4,6,13,17,19,21],*]=0
            
 y = all_ratios[*,1]
yerror = all_errors[*,1]
x = mTOz[lindgen(22)]
;x = lindgen(22)+1
filt=where(y gt 0.05)
y=y[filt]
yerror=yerror[filt]
x=x[filt] & x[where(x eq 69)]=x[where(x eq 69)]-1 & x[where(x eq 73)]=x[where(x eq 73)]+1 & x[where(x eq 137)]=x[where(x eq 137)]+2
Daitl="Measured to Expected Sensitivity"
 Daitl="Measured to Expected Sensitivity (humidified calibrations)"  ;WETPLOT 4 of 6 ACTIVATE
plot = ERRORPLOT(x, y, yerror,xlog=1,SYMBOL=symb[1],margin=[0.12, 0.08, 0.15, 0.08] ,sym_thick=3,sym_size=2, COLOR=cols[1], ERRORBAR_COLOR=cols[1] , dimensions=[1400,700], LINESTYLE=' ', XTITLE="m/Q (log)",XTICKFONT_SIZE=12, YTITLE="ratio meas/expd",YTICKFONT_SIZE=12, TITLE=Daitl,FONT_SIZE=12, YRANGE=[0,2],xrange=[29,420])
 text08 = TEXT(0.87,0.83,IDs[1], /CURRENT, COLOR=cols[1], FONT_SIZE=12, FONT_Style=1)


 plot=ERRORPLOT([20,1000],[1,1],[0,0],' k-1', /overplot)
 plot=ERRORPLOT([20,1000],[1.3,1.3],[0,0],' k-1', /overplot)
 plot=ERRORPLOT([20,1000],[0.7,0.7],[0,0],' k-1', /overplot)

  for ii=2,10 do begin

y = all_ratios[*,ii]
yerror = all_errors[*,ii]
x = mTOz[lindgen(22)]
;x = lindgen(22)+1
filt=where(y gt 0.05)
if(ii eq 10) then filt=filt[1:*]; delete MeOH from VOCUS
y=y[filt]
yerror=yerror[filt]
x=x[filt] & x[where(x eq 69)]=x[where(x eq 69)]-1 & x[where(x eq 73)]=x[where(x eq 73)]+1 & x[where(x eq 137)]=x[where(x eq 137)]+2

print, ii, max( filt)
if(max(filt) gt -0.5) then begin
 plot = ERRORPLOT(x+0.05*ii-0.05, y,yerror,SYMBOL=symb[ii],sym_thick=3,sym_size=2, COLOR=cols[ii], ERRORBAR_COLOR=cols[ii] ,LINESTYLE=' ',  /overplot)
 text08 = TEXT(0.87,0.87-0.04*ii,IDs[ii], /CURRENT, COLOR=cols[ii], FONT_SIZE=12, FONT_Style=1)

endif
print, 'lll'
endfor
nami=['MeOH','CH3CN','acetald','acetone','isop','MVK','MEK','benz','xylene','TMB','3F_benz','monot','3Cl_benz','D3silox','D4silox','D5silox']
xxx=[34,42, 47,59,69,73,77,85,107,121, 135,145,180,220,300,380]
yyy=[0.02,0.4, 0.1,0.5,0.3,0.35,0.4,0.25,0.5,0.5, 0.3,0.35,1.1,1.2,1.3,0.3]
xxx=[34,42, 47,59,69,73,77,85,107,121, 130,145,180,220,280,400]                ;WETPLOT 5 of 6 ACTIVATE
yyy=[0.02,0.2, 0.1,0.2,0.3,0.35,0.4,0.25,0.3,0.3, 0.1,0.35,0.9,1.1,1.3,0.3]    ;WETPLOT 6 of 6 ACTIVATE
for ttt=0,15 do text08 = TEXT(xxx[ttt],yyy[ttt],nami[ttt], /CURRENT, COLOR='BLACK', /DATA, FONT_SIZE=12, FONT_Style=1,orientation=90)
  
   print, 'PICAB YESSS'
  
 all_sens[[4,6,13,17,19,21],*]=0
            
 y = all_sens[*,1]
yerror = all_sens_errors[*,1]
x = mTOz[lindgen(22)]
;x = lindgen(22)+1
filt=where(y gt 0.05)
y=y[filt]
yerror=yerror[filt]
x=x[filt] & x[where(x eq 69)]=x[where(x eq 69)]-1 & x[where(x eq 73)]=x[where(x eq 73)]+1 & x[where(x eq 137)]=x[where(x eq 137)]+2

plot2 = ERRORPLOT(x, y, yerror*y,xlog=1,ylog=1,margin=[0.12, 0.08, 0.15, 0.08] ,SYMBOL=symb[1], sym_thick=3,sym_size=2, COLOR=cols[1], ERRORBAR_COLOR=cols[1] , dimensions=[1400,700], LINESTYLE=' ',XTICKFONT_SIZE=12,YTICKFONT_SIZE=12,FONT_SIZE=12, XTITLE="m/Q (log)", YTITLE="Sensitivity, cps/ppb", TITLE="Sensitivites of all PTR-MS instruments for gas standard compounds", yrange=[0.1,1.5e5], xrange=[29,420])
for qq=0,4 do plot2=ERRORPLOT([20,1000],[1,1]*10^qq,[0,0],' k-1',/overplot)
 text08 = TEXT(0.87,0.83,IDs[1], /CURRENT, COLOR=cols[1], FONT_SIZE=12, FONT_Style=1)

 
  for ii=2,11 do begin
          y = all_sens[*,ii]
          if(ii eq 5) then y[15]=0; delete 3Cl_benz from LSCE

          yerror = all_sens_errors[*,ii]
          x = mTOz[lindgen(22)]
          filt=where(y gt 0.05)
         ; if(ii eq 10) then filt=filt[1:*]; delete MeOH from VOCUS
         y=y[filt]
          yerror=yerror[filt]
          x=x[filt] & x[where(x eq 69)]=x[where(x eq 69)]-1 & x[where(x eq 73)]=x[where(x eq 73)]+1 & x[where(x eq 137)]=x[where(x eq 137)]+2
          print, ii, max( filt)
          if(max(filt) gt -0.5) then begin
                  plot2 = ERRORPLOT(x+0.05*ii-0.05, y,yerror*y,SYMBOL=symb[ii], sym_thick=3,sym_size=2, COLOR=cols[ii], ERRORBAR_COLOR=cols[ii] , LINESTYLE=' ', /overplot)
                  text08 = TEXT(0.87,0.87-0.04*ii,IDs[ii], /CURRENT, COLOR=cols[ii], FONT_SIZE=12, FONT_Style=1)
          endif
          print, 'lll'
endfor
yyy=[0.2,0.6, 0.6,0.7,0.8,1.1,2,1.18,1.1,2, 0.15,0.35,0.8,0.4,0.55,0.3]
for ttt=0,15 do text08 = TEXT(xxx[ttt],yyy[ttt],nami[ttt], /CURRENT, COLOR='BLACK', /DATA, FONT_SIZE=12, FONT_Style=1,orientation=90)

  
    print, 'PICAB YESSS'
  
 all_XR[[4,6,13,17,19,21],*]=-100
            
 y = all_XR[*,1]
yerror = all_XR_errors[*,1]
x = mTOz[lindgen(22)]
;x = lindgen(22)+1
filt=where(y lt 50 and y gt -50)
y=y[filt]
yerror=yerror[filt]
x=x[filt] & x[where(x eq 69)]=x[where(x eq 69)]-1 & x[where(x eq 73)]=x[where(x eq 73)]+1 & x[where(x eq 137)]=x[where(x eq 137)]+2

plot3 = ERRORPLOT(x, y, y*yerror,xlog=1,SYMBOL=symb[1],  sym_thick=3,sym_size=2, COLOR=cols[1], ERRORBAR_COLOR=cols[1] ,  dimensions=[1200,500], LINESTYLE=' ', XTICKFONT_SIZE=12,YTICKFONT_SIZE=12,FONT_SIZE=12, XTITLE="m/Q (log)", YTITLE="XR factor", TITLE="retrieved cluster factor",  yrange=[-3,6],  xrange=[29,420])
plot3=ERRORPLOT([20,1000],[1,1],[0,0],' k-1',/overplot)
 text08 = TEXT(0.15,0.85,IDs[1], /CURRENT, COLOR=cols[1], FONT_SIZE=12, FONT_Style=1)

 
  for ii=2,11 do begin

y = all_XR[*,ii]
yerror = all_XR_errors[*,ii]
x = mTOz[lindgen(22)]
;x = lindgen(22)+1
filt=where(y lt 50 and y gt -50)

y=y[filt]
yerror=yerror[filt]
x=x[filt] & x[where(x eq 69)]=x[where(x eq 69)]-1 & x[where(x eq 73)]=x[where(x eq 73)]+1 & x[where(x eq 137)]=x[where(x eq 137)]+2

print, ii, max( filt)
if (max( filt) lt -0.5) then y=[0,0]
if(ii lt 5.5) then addx=0 else addx=5
if(max(y) ne 0) then begin
 plot3 = ERRORPLOT(x+0.05*ii-0.05, y,y*yerror,SYMBOL=symb[ii], sym_thick=3,sym_size=2, COLOR=cols[ii], ERRORBAR_COLOR=cols[ii] ,  LINESTYLE=' ', /overplot)
text08 = TEXT(0.15+addx*0.025,0.89-0.04*ii+addx*0.04,IDs[ii], /CURRENT, COLOR=cols[ii], FONT_SIZE=12, FONT_Style=1)
endif
print, 'lll'
endfor

  
  
  
    print, 'PICAB YESSS'
      
end



pro PICAB_old, event

 


WIDGET_CONTROL, WIDGET_INFO(event.TOP, FIND_BY_UNAME = 'Text_DestDir'), GET_VALUE=DestFolder
path=strmid(DestFolder,0,22)
mTOz=[33,42,45,59,87 ,    69 , 41,71 ,73 , 79 ,    107, 121, 137,81 ,133 ,    181, 223,207, 297,281 ,$
  371 ,355,-1,-1,-1,    -1,-1 ,-1,19,37,     39,34,43,46,60, 88,70, 42,72,74 ,$
  80, 108,122,138,82,134 ,182, 225,209, 299, 283, 374, 358,-1,-1,-1,78,32,120,106 ]
compounds=['METH_33',   'CH3CN_42',   'Acetal_45',    'Ace_59',   'MBO_87',    'ISO_MBO_69',     'ISO_MBO_41',   'MVK_71',   'MEK_73',   'Ben_79',$
  'Xyl_107',   'TMB_121',    'MT_137',      'MT_81',   'benzF3_133','benzCl3_181','D3_223',   'D3_207',   'D4_297',   'D4_281',$
  'D5_371',    'D5_355',     'TotSIG',       'FCinlet',  'reltime',   'TotSIGiso',  'prim',     'Tdrift',   'I19',      'I37',$
  'I39', 'METH_34iso','CH3CN_43iso','Acetal_46iso','Ace_60iso','MBO_88iso',' MBO_70iso',' MBO_42iso','MVK_72iso','MEK_74iso','Ben_80iso',$
  'Xyl_108iso','TMB_122iso','Pin_138iso','Pin_82iso','benzF3_134iso','benzCl3_182iso','D3_225iso','D3_209iso','D4_299iso',' D4_283iso',$
  'D5_374iso','D5_358iso','Udx','pdrift','Udrift','BEN_78','I32','TMB_120','XYL_106']
RRK=[2.2/1.3,2.6+0.5, 3.03,  3.25, 2.68/1.45,         2.68/1.45, 2.68/1.45, 3.53/1.3, 3.25, 1.97,       2.31,  2.4,  2.45/1.2, 2.45/1.2,   2.46,        2.88/1.2,  2.59/1.2,  2.59/1.2,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9


mist=systime(1)
Recur_Pattern = '*STD_PROT*'
paths = FILE_SEARCH(Path,Recur_Pattern)
; Remove the '_PTR' files from the filename list
n = N_ELEMENTS(paths)

anz=22

PTRid=strarr(n)
rawdata=fltarr(7,anz,120)-1
sensdata=fltarr(7,anz,120)-1
sensdata59=fltarr(7,anz,120)-1
sensdataCALC=fltarr(7,anz,120)-1
XRdat=fltarr(7,anz,120)-1
Tdri=fltarr(7,anz,120)-1
Pdri=fltarr(7,anz,120)-1
Udri=fltarr(7,anz,120)-1
Udxdri=fltarr(7,anz,120)-1
EoNdri=fltarr(7,anz,120)-1

II19=fltarr(7,anz,120)-1
II37=fltarr(7,anz,120)-1
II19tr=fltarr(7,anz,120)-1
II37tr=fltarr(7,anz,120)-1
eexx=fltarr(7,anz,120)-1
mmLOW=fltarr(7,anz,120)-1
wwLOW=fltarr(7,anz,120)-1
mmHIGH=fltarr(7,anz,120)-1
WWHIGH=fltarr(7,anz,120)-1


counter=0
for i=0,n-1 do begin  ;loop over paths (different PTR-MSses)

  hilfi=strmid(strmid(paths[i],strpos(paths[i],'\')+1,1000),1+strpos(strmid(paths[i],strpos(paths[i],'\')+1,1000),'\'))
  PTRid[i]=strmid(hilfi,0,strpos(hilfi,'\') )
  print,  PTRid[i]
  Recur_Pattern = '*SENS *'
  files = FILE_SEARCH(Paths[i],Recur_Pattern)
  nn = N_ELEMENTS(files)
  if (nn gt 1) then print, transpose(files) else print, files
  print, nn
  print, ''
  if(files[0] ne '') then for j=0,nn-1 do begin ;loop over calibrations (if any...)
    starttime=t09(strmid(files[j],strpos(files[j],'.csv')-20,20))
    data=readcsv(files[j])
    data=data[*,1:*]
    ;sensitivities[i]=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[i]/1013.25)
    if(  max(data[14,*]) eq 0.003) then data[14,*]=0.0045  ;adjust reaction time to 4.5ms for PTR3
    sensitivities=1.0E-9*1.0E6*(data[14,*]*data[10,*]/data[9,*])*(2.7E19*273.15/1013.25)     ;data[14,*]= t react in seconds  ,data[9,*]=Tdrift in K, data[10,*]=pdrift in mbar
    set=[i,starttime,reform(data[64,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[64+r,*])]]
    rawdata[*,*,counter]=set
    set=[i,starttime,reform(data[20,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[20+r,*])]]
    sensdata[*,*,counter]=set
    set=[i,starttime,reform(data[42,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[42+r,*])]]
    sensdata59[*,*,counter]=set
    set=[i,starttime,reform(sensitivities*RRK[0])] & for r=1,anz-1 do set=[set,[i,starttime,reform(sensitivities*RRK[0+r])]]
    sensdataCALC[*,*,counter]=set
    set=[i,starttime,reform(data[9,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[9,*])]]
    Tdri[*,*,counter]=set
    set=[i,starttime,reform(data[10,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[10,*])]]
    Pdri[*,*,counter]=set
    set=[i,starttime,reform(data[15,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[15,*])]]
    EoNdri[*,*,counter]=set
    set=[i,starttime,reform(data[0,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[0,*])]]
    II19[*,*,counter]=set
    set=[i,starttime,reform(data[1,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[1,*])]]
    II37[*,*,counter]=set
    set=[i,starttime,reform(data[2,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[2,*])]]
    II19tr[*,*,counter]=set
    set=[i,starttime,reform(data[3,*])] & for r=1,anz-1 do set=[set,[i,starttime,reform(data[3,*])]]
    II37tr[*,*,counter]=set




    XRfile=files[j]
    XRfile=strmid(XRfile,0,strpos(XRfile,'SENS'))+'XRdat'+strmid(XRfile,strpos(XRfile,'SENS')+4,1000)
    data=readcsv(XRfile)
    data2=reform(data[1:4,1] )
    data3=reform(data[1:4,2] )
    data=reform(data[5:*,1] )
    set=[i,starttime,[data[0],data[0],data[0],data[0],data[0]]] & for r=1,anz-1 do set=[set,[i,starttime,[data[r],data[r],data[r],data[r],data[r]]]]
    XRdat[*,*,counter]=set

    for r=0,anz-1 do mmLOW[*,r,counter]=[i,starttime,[data2[0],data2[0],data2[0],data2[0],data2[0]]]
    for r=0,anz-1 do eexx[*,r,counter]=[i,starttime,[data3[0],data3[0],data3[0],data3[0],data3[0]]]
    for r=0,anz-1 do wwLOW[*,r,counter]=[i,starttime,[data2[1],data2[1],data2[1],data2[1],data2[1]]]
    for r=0,anz-1 do mmHIGH[*,r,counter]=[i,starttime,[data2[2],data2[2],data2[2],data2[2],data2[2]]]
    for r=0,anz-1 do wwHIGH[*,r,counter]=[i,starttime,[data2[3],data2[3],data2[3],data2[3],data2[3]]]










    counter=counter+1
    print, ''
  endfor

endfor
xxx=9
compoundID=3
filt=where(sensdata[0,0,*] eq xxx)
mm19= reform(ii19[[2,3,6],compoundID,filt])
mm19tr= reform(ii19tr[[2,3,6],compoundID,filt])
mm37= reform(ii37[[2,3,6],compoundID,filt])
mm37tr= reform(ii37tr[[2,3,6],compoundID,filt])
mmmL= reform(mmLOW[[2,3,6],compoundID,filt])
wwwL= reform(wwLOW[[2,3,6],compoundID,filt])
mmmH= reform(mmHIGH[[2,3,6],compoundID,filt])
wwwH= reform(wwHIGH[[2,3,6],compoundID,filt])
EXEXEX= reform(eexx[[2,3,6],compoundID,filt])
measS= reform(rawdata[[2,3,6],compoundID,filt])
normS= reform(sensdata[[2,3,6],compoundID,filt])
calcS= reform(sensdataCALC[[2,3,6],compoundID,filt])


mm19trRECALC=mm19
for i=0,2 do for j=0,3 do mm19trRECALC[i,j]=mm19[i,j]/tr(19,EXEXEX[i,j],mmmL[i,j],wwwL[i,j],mmmH[i,j],wwwH[i,j],/norm)
mm37trRECALC=mm37
for i=0,2 do for j=0,3 do mm37trRECALC[i,j]=mm37[i,j]/tr(37,EXEXEX[i,j],mmmL[i,j],wwwL[i,j],mmmH[i,j],wwwH[i,j],/norm)
facttt11=mm19
for i=0,2 do for j=0,3 do facttt11[i,j]=tr(mTOz[compoundID],EXEXEX[i,j],mmmL[i,j],wwwL[i,j],mmmH[i,j],wwwH[i,j],/norm)/tr(19,EXEXEX[i,j],mmmL[i,j],wwwL[i,j],mmmH[i,j],wwwH[i,j],/norm)
facttt22=mm19
for i=0,2 do for j=0,3 do facttt22[i,j]=tr(mTOz[compoundID],EXEXEX[i,j],mmmL[i,j],wwwL[i,j],mmmH[i,j],wwwH[i,j],/norm)/tr(37,EXEXEX[i,j],mmmL[i,j],wwwL[i,j],mmmH[i,j],wwwH[i,j],/norm)

normSRECALC=measS*1e6/(mm19*facttt11+mm37*facttt22)

print, ptrid[xxx]
print, compounds[compoundid]
print, 'norm sens'
print, normS
print,''
print, 'norm sens recalculated'
print,normSRECALC
print,''
print,'m19 tr '
print,mm19tr
print,''
print,'m19 tr recalculated'
print,mm19trRECALC
print,'norm sens recalculated / calc sens'
print,normSRECALC/calcS
print,100.0*stddev(normSRECALC/calcS)/mean(normSRECALC/calcS)
print,100.0*stddev(normSRECALC/calcS)

normSRECALC=measS*1e6/(mm19*median(facttt11)+mm37*median(facttt22))

print, 'norm sens recalculated'
print,normSRECALC
print,'norm sens recalculated / calc sens'
print,normSRECALC/calcS
print,100.0*stddev(normSRECALC/calcS)/mean(normSRECALC/calcS)
print,100.0*stddev(normSRECALC/calcS)






all_XR=fltarr(anz,12)
all_XR_errors=fltarr(anz,12)
all_ratios=fltarr(anz,12)
all_errors=fltarr(anz,12)
all_sens=fltarr(anz,12)
all_sens_errors=fltarr(anz,12)

fractISO=fltarr(5,12,20)
fractMT=fltarr(5,12,20)
fractD3=fltarr(5,12,20)
fractD4=fltarr(5,12,20)
fractD5=fltarr(5,12,20)



small=0
for g=0,anz-1 do begin ;loop over compounds
  WINDOW, 4, xsize=1500,ysize=925-175*small
  !P.MULTI = [0,10,4]
  !Y.oMARGIN = [2,8]
  !X.oMARGIN = [8,8]
  !Y.MARGIN = [2,1]
  !x.MARGIN = [5,0]
  DEVICE, DECOMPOSED = 0
  loadct,5
  X = [-2, 0, 2, 0, -2]
  Y = [0, 2, 0, -2, 0]
  X2 = [-1, 0, 1, 0, -1]
  Y2 = [0, 2, 0, -2, 0]
  X3 = [-2, 0, 2, 0, -2]
  Y3 = [0, 1, 0, -1, 0]
  ccoollss=[0,110,140,180,50]
  USERSYM, X, Y,/fill
  PSYMs=[8,8,4,4,8]
  xran=reform(rawdata[1,g,*])
  xran=range(xran[where(xran gt -1)])-3166

  for i=1,12 do begin ;loop over instruments
    USERSYM, X, Y,/fill
    filter=where(order(reform(rawdata[0,g,*])) eq i)
    if(max(filter) gt -0.5) then if(max(where(rawdata[2,g,filter] gt -1e90)) gt -0.5) then begin
      xdat=reform(rawdata[1,g,filter])-3166
      ydat=reform(EoNdri[2,g,filter])
      ydat2=reform(Tdri[2,g,filter])-273.15
      ydat3=reform(Pdri[2,g,filter])*10
      USERSYM, X, Y,/fill
      plot, xdat ,ydat, psym=8, xrange=xran,yrange=[0,1.1*max([ydat,ydat2])], color=0, background=-1, charsize=2
      USERSYM, X2, Y2,/fill
      oplot, xdat ,ydat2, psym=8,color=45
      USERSYM, X3, Y3,/fill
      oplot, xdat ,ydat3, psym=8,color=175
      for ii=1,4 do  begin
        ydat=reform(EoNdri[2+ii,g,filter])
        ydat2=reform(Tdri[2+ii,g,filter])-273.15
        ydat3=reform(Pdri[2+ii,g,filter])*10
        USERSYM, X, Y,/fill
        oplot, xdat,ydat, psym=PSYMs[ii], color=120
        USERSYM, X2, Y2,/fill
        oplot, xdat,ydat2, psym=PSYMs[ii], color=45
        USERSYM, X3, Y3,/fill
        oplot, xdat,ydat3, psym=PSYMs[ii], color=175
      endfor
    endif else  begin
      plot, [0,1],[0,1],psym=8, color=0, background=-1, charsize=2
    endelse
  endfor


  for i=1,12 do begin
    USERSYM, X, Y,/fill
    filter=where(order(reform(rawdata[0,g,*])) eq i)
    if(max(filter) gt -0.5) then if(max(where(rawdata[2,g,filter] gt -1e90)) gt -0.5) then begin
      xdat=reform(rawdata[1,g,filter])-3166
      ydat=reform(rawdata[2,g,filter])
      if(g eq 5) then ydat=ydat+reform(rawdata[2,g-1,filter])+reform(rawdata[2,g+1,filter])  ;MBO/iso
      if(g eq 12) then ydat=ydat+reform(rawdata[2,g+1,filter])  ;MT
      if(g eq 16) then ydat=ydat+reform(rawdata[2,g+1,filter])  ;D3
      if(g eq 18) then ydat=ydat+reform(rawdata[2,g+1,filter])  ;D4
      if(g eq 20) then ydat=ydat+reform(rawdata[2,g+1,filter])  ;D5
      plot, xdat ,ydat, psym=8, xrange=xran, color=0, background=-1, charsize=2
      USERSYM, X2, Y2,/fill
      for ii=1,4 do  begin
        ydat=reform(rawdata[2+ii,g,filter])
        if(g eq 5) then ydat=ydat+reform(rawdata[2+ii,g-1,filter])+reform(rawdata[2+ii,g+1,filter])  ;MBO/iso
        if(g eq 12) then ydat=ydat+reform(rawdata[2+ii,g+1,filter])  ;MT
        if(g eq 16) then ydat=ydat+reform(rawdata[2+ii,g+1,filter])  ;D3
        if(g eq 18) then ydat=ydat+reform(rawdata[2+ii,g+1,filter])  ;D4
        if(g eq 20) then ydat=ydat+reform(rawdata[2+ii,g+1,filter])  ;D5
        oplot, xdat,ydat, psym=PSYMs[ii], color=ccoollss[ii]
      endfor
      mmm= [rawdata[2,g,filter],rawdata[3,g,filter],rawdata[6,g,filter]]
      filt=where(mmm gt 0.1*mean(mmm))
      mmm=mmm[filt]
      nnn=stddev(mmm)
      mmm=median([mmm])
      nnn=100.0*nnn/mmm
      kkk=XRdat[2,g,filter]
      ooo=EoNdri[2,g,filter]
      ppp=Pdri[2,g,filter]
      if(g eq 14) then begin
        print,'kkk'
        print, reform(kkk)
      endif
      filt=where(kkk gt 0.1*median(kkk) and kkk lt 10*median(kkk)  )
      filt=where(kkk gt -10 and kkk lt 10 and ooo ge 100 and ooo le 135)
      if (max(filt) gt -0.5) then  kkk=kkk[filt] else kkk=-100
      mssst=[kkk,kkk,kkk,kkk,kkk,kkk]
      mssst=mssst[where(mssst gt quantile(mssst,0.25) and mssst lt quantile(mssst,0.75))]
      lll=stddev([mssst,mssst])
      kkk=mean([mssst,mssst])
      lll=100.0*lll/kkk
      xyouts, 22,max(rawdata[2,g,filter])*0.2,strtrim(string(mmm,format='(I8)'),2),color=-1,charsize=1.2,charthick=9
      xyouts, 22,max(rawdata[2,g,filter])*0.08,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=-1,charsize=1.2,charthick=9
      xyouts, 22,max(rawdata[2,g,filter])*0.2,strtrim(string(mmm,format='(I8)'),2),color=0,charsize=1.2,charthick=1.5
      xyouts, 22,max(rawdata[2,g,filter])*0.08,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=0,charsize=1.2,charthick=1.5
      all_sens[g,i]=mmm
      all_sens_errors[g,i]=nnn/100
      all_XR[g,i]=kkk
      all_XR_errors[g,i]=lll/100
    endif else  begin
      plot, [0,1],[0,1],psym=8, color=0, background=-1, charsize=2
    endelse
  endfor
  for i=1,12 do begin
    USERSYM, X, Y,/fill
    filter=where(order(reform(rawdata[0,g,*])) eq i)
    if(max(filter) gt -0.5) then if(max(where(sensdata[2,g,filter] gt -1e90)) gt -0.5) then begin
      xdat=reform(sensdata[1,g,filter])-3166
      ydat=reform(sensdata[2,g,filter])
      if(g eq 5) then ydat=ydat+reform(sensdata[2,g-1,filter])+reform(sensdata[2,g+1,filter])  ;MBO/iso
      if(g eq 12) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;MT
      if(g eq 16) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;D3
      if(g eq 18) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;D4
      if(g eq 20) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;D5

      plot, xdat,ydat, psym=8,  xrange=xran, color=0, background=-1, charsize=2
      USERSYM, X2, Y2,/fill
      for ii=1,4 do   begin
        ydat=reform(sensdata[2+ii,g,filter])
        if(g eq 5) then ydat=ydat+reform(sensdata[2+ii,g-1,filter])+reform(sensdata[2+ii,g+1,filter])  ;MBO/iso
        if(g eq 12) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;MT
        if(g eq 16) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;D3
        if(g eq 18) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;D4
        if(g eq 20) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;D5


        oplot, xdat,ydat, psym=PSYMs[ii], color=ccoollss[ii]
      endfor
      mmm= median([sensdata[2,g,filter],sensdata[3,g,filter],sensdata[6,g,filter]])
      nnn= 100.0*stddev([sensdata[2,g,filter],sensdata[3,g,filter],sensdata[6,g,filter]])/mmm
      xyouts, 22,max(sensdata[2,g,filter])*0.2,strtrim(string(mmm,format='(F10.1)'),2),color=-1,charsize=1.2,charthick=9
      xyouts, 22,max(sensdata[2,g,filter])*0.08,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=-1,charsize=1.2,charthick=9
      xyouts, 22,max(sensdata[2,g,filter])*0.2,strtrim(string(mmm,format='(F10.1)'),2),color=0,charsize=1.2,charthick=1.5
      xyouts, 22,max(sensdata[2,g,filter])*0.08,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=0,charsize=1.2,charthick=1.5
    endif else plot, [0,1],[0,1],psym=8, color=0, background=-1, charsize=2
  endfor
  for i=1,12 do begin
    USERSYM, X, Y,/fill
    filter=where(order(reform(rawdata[0,g,*])) eq i)
    if(max(filter) gt -0.5) then begin
      xdat=reform(sensdata[1,g,filter])-3166
      ydat=reform(sensdata[2,g,filter])
      print, ''
      print, i
      print, compounds[g]
      print, ptrid[sensdata[0,g,filter[0]]]
      print,"raw sensitivity (cps/ppb, rawdata),  sensitivity59 (n59cps/ppb, sensdata59), normalized sensitivity (ncps/ppb sensdata), calculated sensitivity (ncps/ppb sensdataCALC)'
      print,reform(rawdata[2,g,filter])
      print,reform(sensdata59[2,g,filter])
      print,reform(sensdata[2,g,filter])
      print,reform(sensdataCalc[2,g,filter])
      ; if(g eq 5) then ydat=ydat+reform(sensdata[2,g-1,filter])+reform(sensdata[2,g+1,filter])  ;MBO/iso
      if(g eq 5) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;MBO/iso
      if(g eq 12) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;MT
      if(g eq 16) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;D3
      if(g eq 18) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;D4
      if(g eq 20) then ydat=ydat+reform(sensdata[2,g+1,filter])  ;D5

      plot, xdat,ydat/reform(sensdataCALC[2,g,filter]), psym=8, yrange=[0,2], xrange=xran, color=0, background=-1, charsize=2
      USERSYM, X2, Y2,/fill
      for ii=1,4 do begin
        ydat=reform(sensdata[2+ii,g,filter])
        ;   if(g eq 5) then ydat=ydat+reform(sensdata[2+ii,g-1,filter])+reform(sensdata[2+ii,g+1,filter])  ;MBO/iso
        if(g eq 5) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;MBO/iso
        if(g eq 12) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;MT
        if(g eq 16) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;D3
        if(g eq 18) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;D4
        if(g eq 20) then ydat=ydat+reform(sensdata[2+ii,g+1,filter])  ;D5
        oplot, xdat,ydat/reform(sensdataCALC[2+ii,g,filter]), psym=PSYMs[ii], color=ccoollss[ii]
      endfor

      mmm=[sensdata[2,g,filter],sensdata[3,g,filter],sensdata[6,g,filter]]
      mmmCALC=[sensdataCALC[2,g,filter],sensdataCALC[3,g,filter],sensdataCALC[6,g,filter]]
      if(g eq 5 or g eq 12 or g eq 15 or g eq 16 or g eq 18 or g eq 20) then  begin
        ooo=[EoNdri[2,g,filter],EoNdri[3,g,filter],EoNdri[6,g,filter]]
        ppp=[Pdri[2,g,filter],Pdri[3,g,filter],Pdri[6,g,filter]]
        qqq=[Tdri[2,g,filter],Tdri[3,g,filter],Tdri[6,g,filter]]
        mmmQ=[sensdata[2,g+1,filter],sensdata[3,g+1,filter],sensdata[6,g+1,filter]]
        helpi=total([sensdata[2,4,filter],sensdata[3,4,filter],sensdata[6,4,filter]],1)/3;MBO/iso
        filtNPL=where(helpi lt 0.5*(quantile(helpi,0.95)+median(helpi)))
        filtAR=where(helpi gt 0.5*(quantile(helpi,0.95)+median(helpi)))
        if(g eq 5 or g eq 12) then begin
          mmmQ= mmmQ[*,*,filtNPL]
          mmm= mmm[*,*,filtNPL]
          mmmCALC= mmmCALC[*,*,filtNPL]
          ooo= ooo[*,*,filtNPL]
          ppp= ppp[*,*,filtNPL]
          qqq= qqq[*,*,filtNPL]
        endif
        if(g eq 15 or g eq 16) then begin
          mmmQ= mmmQ[*,*,[filtAR,filtAR]]
          mmm= mmm[*,*,[filtAR,filtAR]]
          mmmCALC= mmmCALC[*,*,[filtAR,filtAR]]
          ooo= ooo[*,*,[filtAR,filtAR]]
          ppp= ppp[*,*,[filtAR,filtAR]]
          qqq= qqq[*,*,[filtAR,filtAR]]
        endif
        ;if(g eq 5) then mmmQ=mmmQ+[sensdata[2,g-1,filter],sensdata[3,g-1,filter],sensdata[6,g-1,filter]];MBO/iso
        mmmP=mmm/(mmm+mmmQ)
        dimdim=d(mmmQ)
        if(size([dimdim],/n_dimensions) gt 0.5) then dimdim=indgen(dimdim[2])else  if(g eq 16) then dimdim=0
        set= [total(mmmP,1)/3,stddev(mmmP,dimension=1),total(ooo,1)/3,total(ppp,1)/3,total(qqq,1)/3]
        if(g eq 5) then fractISO[*,i-1,dimdim]=set
        if(g eq 12) then fractMT[*,i-1,dimdim]=set
        if(g eq 16) then fractD3[*,i-1,dimdim]=set
        if(g eq 18) then fractD4[*,i-1,dimdim]=set
        if(g eq 20) then fractD5[*,i-1,dimdim]=set
        if(g ne 15) then mmm=mmm+mmmQ
        print, 'hallo '+string(g)
        if (g eq 12) then begin
          print, 'hallo '+string(g)
        endif
      endif

      mmm= mmm/mmmCALC

      ;clean individual points
      if(i eq 3) then mmm[0,0,0]=0  ; delete first N2dry injection for 'TOF8000 UHEL' on 20.9.2017 because signal too low (diluted more than expected)
      if(i eq 2) then mmm[2,0,0]=0  ; delete second N2dry injection for 'TOF8000 FJZ' on 20.9.2017 because signal too low (diluted more than expected)

      if(i eq 2 and g eq 3) then begin
        print, 'stop'
      endif


      filt=where(mmm gt 0.05 and mmm lt 15)
      mmm=mmm[filt]
      nnn=mmm
      mmm=median([mmm],/even)
      nnn=100.0*stddev(nnn)

      xyouts, 22,0.5,strtrim(string(mmm,format='(F5.3)'),2),color=-1,charsize=1.2,charthick=9
      xyouts, 22,0.25,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=-1,charsize=1.2,charthick=9
      xyouts, 22,0.5,strtrim(string(mmm,format='(F5.3)'),2),color=0,charsize=1.2,charthick=1.5
      xyouts, 22,0.25,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=0,charsize=1.2,charthick=1.5
      xsen=float([0.8,0.8,2.0,3.4,4.6,5.8,5.8,7,8.2,9.4,9.4,10.6,10.6])
      xsen=float([0.8,0.8,1.9,3.0,4.1,5.2,6.3,7.4,8.5,9.4,9.6,10.8,10.8])
      xyouts,xsen[i]/12,0.92-0.02*small,/normal,ptrid[sensdata[0,g,filter[0]]],color=0,charsize=1.2,charthick=1.5
      all_ratios[g,i]=mmm
      all_errors[g,i]=nnn/100

    endif
  endfor
  if (small ne 0) then for i=1,12 do begin
    USERSYM, X, Y,/fill
    filter=where(order(reform(rawdata[0,g,*])) eq i)
    if(max(filter) gt -0.5) then begin
      xdat=reform(sensdata59[1,g,filter])-3166
      ydat=reform(sensdata59[2,g,filter])
      if(g eq 5) then ydat=ydat+reform(sensdata59[2,g-1,filter])+reform(sensdata59[2,g+1,filter])  ;MBO/iso
      if(g eq 12) then ydat=ydat+reform(sensdata59[2,g+1,filter])  ;MT
      if(g eq 16) then ydat=ydat+reform(sensdata59[2,g+1,filter])  ;D3
      if(g eq 18) then ydat=ydat+reform(sensdata59[2,g+1,filter])  ;D4
      if(g eq 20) then ydat=ydat+reform(sensdata59[2,g+1,filter])  ;D5
      ydat0=ydat/reform(sensdataCALC[2,g,filter])

      plot, xdat,ydat/reform(sensdataCALC[2,g,filter]), psym=8, xrange=xran,yrange=[-1.0,1.0]+median(ydat0), color=0, background=-1, charsize=2
      USERSYM, X2, Y2,/fill
      for ii=1,4 do begin
        ydat=reform(sensdata59[2+ii,g,filter])
        if(g eq 5) then ydat=ydat+reform(sensdata59[2+ii,g-1,filter])+reform(sensdata59[2+ii,g+1,filter])  ;MBO/iso
        if(g eq 12) then ydat=ydat+reform(sensdata59[2+ii,g+1,filter])  ;MT
        if(g eq 16) then ydat=ydat+reform(sensdata59[2+ii,g+1,filter])  ;D3
        if(g eq 18) then ydat=ydat+reform(sensdata59[2+ii,g+1,filter])  ;D4
        if(g eq 20) then ydat=ydat+reform(sensdata59[2+ii,g+1,filter])  ;D5
        oplot, xdat,ydat/reform(sensdataCALC[2+ii,g,filter]), psym=PSYMs[ii], color=ccoollss[ii]
      endfor
      mmm= median([sensdata59[2,g,filter],sensdata59[3,g,filter],sensdata59[6,g,filter]]/[sensdataCALC[2,g,filter],sensdataCALC[3,g,filter],sensdataCALC[6,g,filter]])
      nnn= 100.0*stddev([sensdata59[2,g,filter],sensdata59[3,g,filter],sensdata59[6,g,filter]]/[sensdataCALC[2,g,filter],sensdataCALC[3,g,filter],sensdataCALC[6,g,filter]])/mmm

      xyouts, 22,median(ydat0)-0.5,strtrim(string(mmm,format='(F5.3)'),2),color=-1,charsize=1.2,charthick=9
      xyouts, 22,median(ydat0)-0.75,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=-1,charsize=1.2,charthick=9
      xyouts, 22,median(ydat0)-0.5,strtrim(string(mmm,format='(F5.3)'),2),color=0,charsize=1.2,charthick=1.5
      xyouts, 22,median(ydat0)-0.75,strtrim(string(nnn,format='(F5.1)'),2)+'%',color=0,charsize=1.2,charthick=1.5


      ;all_ratios[g,i]=mmm
      ;all_errors[g,i]=nnn/100


    endif
  endfor

  xyouts, 0.005,0.88-0.06*small,/normal, 'E/N' ,charsize=2,charthick=1.5, color=110
  xyouts, 0.005,0.82-0.06*small,/normal, 'Tdrift' ,charsize=2,charthick=1.5, color=45
  xyouts, 0.005,0.76-0.06*small,/normal, 'Pd*10' ,charsize=2,charthick=1.5, color=175

  xyouts, 0.4,0.005,/normal, 'Day in September 2017' ,charsize=1.5,charthick=1.5, color=0
  xyouts, 0.005,0.95,/normal, compounds[g],charsize=2,charthick=2, color=0

  xyouts, 0.02,0.5,/normal,orientation=90, 'Sensitivity',charsize=1.5,charthick=1.5, color=0
  xyouts, 0.02,0.3,/normal,orientation=90, 'Sensitivity',charsize=1.5,charthick=1.5, color=0
  xyouts, 0.02,0.1,/normal,orientation=90, 'Sensitivity',charsize=1.5,charthick=1.5, color=0
  xyouts, 0.035,0.5,/normal,orientation=90, 'cps/ppb',charsize=1.5,charthick=1.5, color=0
  xyouts, 0.035,0.3,/normal,orientation=90, 'ncps/ppb',charsize=1.5,charthick=1.5, color=0
  ;   xyouts, 0.05,0.3,/normal,orientation=90, '(1e6 cps prim ions)',charsize=1,charthick=1, color=0
  xyouts, 0.035,0.1,/normal,orientation=90, 'meas/calc',charsize=1.5,charthick=1.5, color=0

  ;    if(small eq 0) then begin
  ;       xyouts, 0.02,0.06,/normal,orientation=90, 'Sens. TR59',charsize=1.5,charthick=1.5, color=0
  ;  xyouts, 0.035,0.06,/normal,orientation=90, 'meas/calc',charsize=1.5,charthick=1.5, color=0
  ;   endif



  xyouts, 0.97,0.6,/normal,'dry',charsize=1.5,charthick=2, color=0
  xyouts, 0.97,0.58,/normal,'N2',charsize=1.5,charthick=2, color=0
  xyouts, 0.97,0.55,/normal,'dry',charsize=1.5,charthick=2, color=110
  xyouts, 0.97,0.53,/normal,'air',charsize=1.5,charthick=2, color=110
  xyouts, 0.97,0.50,/normal,'wet',charsize=1.5,charthick=1, color=140
  xyouts, 0.97,0.48,/normal,'air',charsize=1.5,charthick=1, color=140
  xyouts, 0.97,0.45,/normal,'wet',charsize=1.5,charthick=1, color=180
  xyouts, 0.97,0.43,/normal,'N2',charsize=1.5,charthick=1, color=180
  xyouts, 0.97,0.40,/normal,'dry',charsize=1.5,charthick=2, color=50
  xyouts, 0.97,0.38,/normal,'N2',charsize=1.5,charthick=2, color=50


  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then  write_jpeg, strmid(Destfolder,0,22)+'PICAB_'+strtrim(string(small),2)+'_'+strtrim(string(g+10),2)+'_'+compounds[g]+'.jpg',tvrd(0,true=1), true=1






endfor

;compounds[g]
;mTOz
IDs=ptrid[[11,1,3,4,5,11,6,8,10,11,12,0]]
IDs=ptrid[[100,2,3,4,5,1,6,7,8,100,9,0]]
cols=['AQUAMARINE','MAGENTA','PURPLE','PINK','DEEP PINK','BLUE','DARK GREEN','YELLOW GREEN','LIME','LIME','RED','CHOCOLATE']
;cols=['KHAKI','MAGENTA','PURPLE','NAVY','BLUE','AQUAMARINE','GREEN','ORANGE','GOLD','LIME','RED','CHOCOLATE']
symb=['<','D','tu','s','tl','d','p','h','S','o','D','s']


nicht=1
if(nicht eq 0) then begin

  totles=['isoprene', 'monoterpenes','D3-siloxane','D4-siloxane','D5-siloxane']
  for t=0,4 do begin
    if (t eq 0) then datatitat=fractISO
    if (t eq 1) then datatitat=fractMT
    if (t eq 2) then datatitat=fractD3
    if (t eq 3) then datatitat=fractD4
    if (t eq 4) then datatitat=fractD5
    datatitat[2,10,where(datatitat[2,10,*] gt 0)]=70  ;set PT3 E/N to 70
    x=datatitat[2,0,*]
    y=datatitat[0,0,*]
    yerror=datatitat[1,0,*]
    ; if(t lt 0.5) then  plot = ERRORPLOT(x, y, yerror,SYMBOL=symb[1],POSITION=[.1,.77,.35,.95], COLOR=cols[1], dimensions=[1200,1000],xTICKname=['','','','','',''], LINESTYLE=' ',  YRANGE=[0.2,1.09],xrange=[51,170])
    ;if(t eq 1 or t eq 3) then plot = ERRORPLOT(x, y, yerror,SYMBOL=symb[1],/current, POSITION=[.1,.77-0.18*t,.35,0.95-0.18*t], COLOR=cols[1],xTICKname=['','','','','',''],  LINESTYLE=' ', YRANGE=[0.2,1.09],xrange=[51,170])
    ;if(t eq 2) then plot = ERRORPLOT(x, y, yerror,SYMBOL=symb[1],/current, POSITION=[.1,.77-0.18*t,.35,0.95-0.18*t], COLOR=cols[1],xTICKname=['','','','','',''],  LINESTYLE=' ',YTITLE="Fraction protonated", YRANGE=[0.2,1.09],xrange=[51,170])
    ;if(t gt 3.5) then plot = ERRORPLOT(x, y, yerror,SYMBOL=symb[1],/current, POSITION=[.1,.77-0.18*t,.35,0.95-0.18*t], COLOR=cols[1],  LINESTYLE=' ', XTITLE="E/N", YRANGE=[0.2,1.09],xrange=[51,170])
    if(t lt 0.5) then  plot = PLOT(x, y, SYMBOL=symb[1],sym_thick=3,POSITION=[.1,.77,.35,.95], COLOR=cols[1], dimensions=[1200,1000],xTICKname=['','','','','',''], LINESTYLE=' ',  YRANGE=[0.2,1.09],xrange=[51,170])
    if(t eq 1 or t eq 3) then plot = PLOT(x, y, SYMBOL=symb[1],/current, sym_thick=3,POSITION=[.1,.77-0.18*t,.35,0.95-0.18*t], COLOR=cols[1],xTICKname=['','','','','',''],  LINESTYLE=' ', YRANGE=[0.2,1.09],xrange=[51,170])
    if(t eq 2) then plot = PLOT(x, y, SYMBOL=symb[1],/current,sym_thick=3, POSITION=[.1,.77-0.18*t,.35,0.95-0.18*t], COLOR=cols[1],xTICKname=['','','','','',''],  LINESTYLE=' ',YTITLE="Fraction protonated",YTICKFONT_SIZE=12, YRANGE=[0.2,1.09],xrange=[51,170])
    if(t gt 3.5) then plot = PLOT(x, y, SYMBOL=symb[1],/current,sym_thick=3, POSITION=[.1,.77-0.18*t,.35,0.95-0.18*t], COLOR=cols[1],  LINESTYLE=' ', XTITLE="E/N",XTICKFONT_SIZE=12,  YRANGE=[0.2,1.09],xrange=[51,170])

    text08 = TEXT(.4,0.97,'FRAGMENTATION', /CURRENT, FONT_SIZE=12, FONT_Style=1)
    text08 = TEXT(.87,0.85,IDs[1], /CURRENT, COLOR=cols[1], FONT_SIZE=10, FONT_Style=1)
    ;text08 = TEXT(.11,.92-0.18*t,totles[t], /CURRENT)
    text08 = TEXT(.753,.92-0.18*t,totles[t], /CURRENT, FONT_SIZE=11, FONT_Style=1)

    for ii=1,10 do begin
      x=datatitat[2,ii,*]
      y=datatitat[0,ii,*]
      yerror=datatitat[1,ii,*]
      if(ii lt 4.5) then addx=0 else addx=5
      if(max(y) gt 0.05) then begin
        plot = PLOT(x+0.05*ii, y,SYMBOL=symb[ii+1], sym_thick=3,COLOR=cols[ii+1], LINESTYLE=' ',  /overplot)
        ;    plot = ERRORPLOT(x, y,yerror,SYMBOL=symb[ii+1], COLOR=cols[ii+1], LINESTYLE=' ',  /overplot)
        if(t lt 0.5) then text08 = TEXT(.87,0.85-0.02*ii,IDs[ii+1], /CURRENT, COLOR=cols[ii+1], FONT_SIZE=10, FONT_Style=1)
      endif
    endfor
  endfor

  for t=0,4 do begin
    if (t eq 0) then datatitat=fractISO
    if (t eq 1) then datatitat=fractMT
    if (t eq 2) then datatitat=fractD3
    if (t eq 3) then datatitat=fractD4
    if (t eq 4) then datatitat=fractD5
    datatitat[3,10,where(datatitat[2,10,*] gt 0)]=datatitat[3,10,where(datatitat[2,10,*] gt 0)]/15 ;divide PT3 pdrift by 15

    x=datatitat[3,0,*]
    y=datatitat[0,0,*]
    yerror=datatitat[1,0,*]
    filt=where(y gt 0.05)
    ;  if(t lt 3.5) then plot = ERRORPLOT(x[filt], y[filt], yerror[filt],SYMBOL=symb[1], /current, POSITION=[.35,.77-0.18*t,.6,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],xTICKname=['','','',''],  LINESTYLE=' ',  YRANGE=[0.2,1.09],xrange=[1.1,5.5])
    ;if(t gt 3.5) then plot = ERRORPLOT(x[filt], y[filt], yerror[filt],SYMBOL=symb[1], /current, POSITION=[.35,.77-0.18*t,.6,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],  LINESTYLE=' ', XTITLE="p drift",  YRANGE=[0.2,1.09],xrange=[1.1,5.5])
    if(t lt 3.5) then plot = PLOT(x[filt], y[filt],SYMBOL=symb[1], /current, sym_thick=3,POSITION=[.35,.77-0.18*t,.6,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],xTICKname=['','','',''],  LINESTYLE=' ',  YRANGE=[0.2,1.09],xrange=[1.1,5.5])
    if(t gt 3.5) then plot = PLOT(x[filt], y[filt], SYMBOL=symb[1], /current,sym_thick=3, POSITION=[.35,.77-0.18*t,.6,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],  LINESTYLE=' ', XTITLE="p drift", XTICKFONT_SIZE=12,  YRANGE=[0.2,1.09],xrange=[1.1,5.5])
    for ii=1,10 do begin
      x=datatitat[3,ii,*]
      y=datatitat[0,ii,*]
      yerror=datatitat[1,ii,*]
      filt=where(y gt 0.05)
      if(ii lt 4.5) then addx=0 else addx=0.22
      if(max(filt) gt -0.05) then begin
        ;              plot = ERRORPLOT(x[filt]+0.05*float(ii), y[filt],yerror[filt],SYMBOL=symb[ii+1], COLOR=cols[ii+1], LINESTYLE=' ',  /overplot)
        plot = PLOT(x[filt]+0.05*float(ii), y[filt],SYMBOL=symb[ii+1],sym_thick=3, COLOR=cols[ii+1], LINESTYLE=' ',  /overplot)
      endif
    endfor
  endfor

  for t=0,4 do begin
    if (t eq 0) then datatitat=fractISO
    if (t eq 1) then datatitat=fractMT
    if (t eq 2) then datatitat=fractD3
    if (t eq 3) then datatitat=fractD4
    if (t eq 4) then datatitat=fractD5
    ; datatitat[3,10,where(datatitat[2,10,*] gt 0)]=datatitat[3,10,where(datatitat[2,10,*] gt 0)]/15 ;divide PT3 pdrift by 15

    x=datatitat[4,0,*]
    y=datatitat[0,0,*]
    yerror=datatitat[1,0,*]
    filt=where(y gt 0.05)
    ;  if(t lt 3.5) then plot = ERRORPLOT(x[filt], y[filt], yerror[filt],SYMBOL=symb[1], /current, POSITION=[.6,.77-0.18*t,.85,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],xTICKname=['','','',''],  LINESTYLE=' ',  YRANGE=[0.2,1.09],xrange=[301,399])
    ; if(t gt 3.5) then plot = ERRORPLOT(x[filt], y[filt], yerror[filt],SYMBOL=symb[1], /current, POSITION=[.6,.77-0.18*t,.85,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],  LINESTYLE=' ', XTITLE="T drift",  YRANGE=[0.2,1.09],xrange=[301,399])
    if(t lt 3.5) then plot = PLOT(x[filt], y[filt], SYMBOL=symb[1], /current, sym_thick=3,POSITION=[.6,.77-0.18*t,.85,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],xTICKname=['','','',''],  LINESTYLE=' ',  YRANGE=[0.2,1.09],xrange=[298,398])
    if(t gt 3.5) then plot = PLOT(x[filt], y[filt], SYMBOL=symb[1], /current, sym_thick=3,POSITION=[.6,.77-0.18*t,.85,0.95-0.18*t],COLOR=cols[1],yTICKname=['','','','',''],  LINESTYLE=' ', XTITLE="T drift", XTICKFONT_SIZE=12,  YRANGE=[0.2,1.09],xrange=[298,398])
    for ii=1,10 do begin
      x=datatitat[4,ii,*]
      y=datatitat[0,ii,*]
      yerror=datatitat[1,ii,*]
      filt=where(y gt 0.05)
      if(ii lt 4.5) then addx=0 else addx=0.22
      if(max(filt) gt -0.05) then begin
        ;              plot = ERRORPLOT(x[filt]+0.05*float(ii), y[filt],yerror[filt],SYMBOL=symb[ii+1], COLOR=cols[ii+1], LINESTYLE=' ',  /overplot)
        plot = PLOT(x[filt]+0.05*float(ii), y[filt],SYMBOL=symb[ii+1], sym_thick=3,COLOR=cols[ii+1], LINESTYLE=' ',  /overplot)
      endif
    endfor
  endfor

endif

all_ratios[[4,6,13,17,19,21],*]=0

y = all_ratios[*,1]
yerror = all_errors[*,1]
x = mTOz[lindgen(22)]
;x = lindgen(22)+1
filt=where(y gt 0.05)
y=y[filt]
yerror=yerror[filt]
x=x[filt] & x[where(x eq 69)]=x[where(x eq 69)]-1 & x[where(x eq 73)]=x[where(x eq 73)]+1 & x[where(x eq 137)]=x[where(x eq 137)]+2

plot = ERRORPLOT(x, y, yerror,xlog=1,SYMBOL=symb[1],sym_thick=3,sym_size=2, COLOR=cols[1], ERRORBAR_COLOR=cols[1] , dimensions=[1400,700], LINESTYLE=' ', XTITLE="m/z (log)",XTICKFONT_SIZE=12, YTITLE="ratio meas/calc",YTICKFONT_SIZE=12, TITLE="Measured to Calculated Sensitivity",FONT_SIZE=12, YRANGE=[0,2],xrange=[29,420])
text08 = TEXT(30,1.9,IDs[1], /CURRENT, COLOR=cols[1], /DATA, FONT_SIZE=12, FONT_Style=1)

plot=ERRORPLOT([20,1000],[1,1],[0,0],' k-1', /overplot)
plot=ERRORPLOT([20,1000],[1.3,1.3],[0,0],' k-1', /overplot)
plot=ERRORPLOT([20,1000],[0.7,0.7],[0,0],' k-1', /overplot)

for ii=2,10 do begin

  y = all_ratios[*,ii]
  yerror = all_errors[*,ii]
  x = mTOz[lindgen(22)]
  ;x = lindgen(22)+1
  filt=where(y gt 0.05)
  if(ii eq 10) then filt=filt[1:*]; delete MeOH from VOCUS
  y=y[filt]
  yerror=yerror[filt]
  x=x[filt] & x[where(x eq 69)]=x[where(x eq 69)]-1 & x[where(x eq 73)]=x[where(x eq 73)]+1 & x[where(x eq 137)]=x[where(x eq 137)]+2

  print, ii, max( filt)
  if(ii lt 5.5) then addx=0 else addx=5
  if(max(filt) gt -0.5) then begin
    plot = ERRORPLOT(x+0.05*ii-0.05, y,yerror,SYMBOL=symb[ii],sym_thick=3,sym_size=2, COLOR=cols[ii], ERRORBAR_COLOR=cols[ii] ,LINESTYLE=' ',  /overplot)
    text08 = TEXT(30+addx*3,2.0-0.1*ii+addx*0.1,IDs[ii], /CURRENT, COLOR=cols[ii], /DATA, FONT_SIZE=12, FONT_Style=1)
  endif
  print, 'lll'
endfor
nami=['MeOH','CH3CN','acetald','acetone','isop','MVK','MEK','benz','xylene','TMB','3F_benz','monot','3Cl_benz','D3silox','D4silox','D5silox']
xxx=[34,42, 47,59,69,73,77,85,107,121, 135,145,180,220,300,380]
yyy=[0.02,0.4, 0.1,0.5,0.3,0.35,0.4,0.25,0.5,0.5, 0.3,0.35,1.1,1.2,1.3,0.3]
for ttt=0,15 do text08 = TEXT(xxx[ttt],yyy[ttt],nami[ttt], /CURRENT, COLOR='BLACK', /DATA, FONT_SIZE=12, FONT_Style=1,orientation=90)

print, 'PICAB YESSS'

all_sens[[4,6,13,17,19,21],*]=0

y = all_sens[*,1]
yerror = all_sens_errors[*,1]
x = mTOz[lindgen(22)]
;x = lindgen(22)+1
filt=where(y gt 0.05)
y=y[filt]
yerror=yerror[filt]
x=x[filt] & x[where(x eq 69)]=x[where(x eq 69)]-1 & x[where(x eq 73)]=x[where(x eq 73)]+1 & x[where(x eq 137)]=x[where(x eq 137)]+2

plot2 = ERRORPLOT(x, y, yerror*y,xlog=1,ylog=1,SYMBOL=symb[1], sym_thick=3,sym_size=2, COLOR=cols[1], ERRORBAR_COLOR=cols[1] , dimensions=[1400,700], LINESTYLE=' ',XTICKFONT_SIZE=12,YTICKFONT_SIZE=12,FONT_SIZE=12, XTITLE="m/z (log)", YTITLE="Sensitivity, cps/ppb", TITLE="Sensitivites of all PTR-MS instruments for gas standard compounds", yrange=[0.1,1e5], xrange=[29,420])
for qq=0,4 do plot2=ERRORPLOT([20,1000],[1,1]*10^qq,[0,0],' k-1',/overplot)
text08 = TEXT(0.15,0.85,IDs[1], /CURRENT, COLOR=cols[1], FONT_SIZE=12, FONT_Style=1)


for ii=2,11 do begin
  y = all_sens[*,ii]
  if(ii eq 5) then y[15]=0; delete 3Cl_benz from LSCE

  yerror = all_sens_errors[*,ii]
  x = mTOz[lindgen(22)]
  filt=where(y gt 0.05)
  ; if(ii eq 10) then filt=filt[1:*]; delete MeOH from VOCUS
  y=y[filt]
  yerror=yerror[filt]
  x=x[filt] & x[where(x eq 69)]=x[where(x eq 69)]-1 & x[where(x eq 73)]=x[where(x eq 73)]+1 & x[where(x eq 137)]=x[where(x eq 137)]+2
  print, ii, max( filt)
  if(ii lt 5.5) then addx=0 else addx=5
  if(max(filt) gt -0.5) then begin
    plot2 = ERRORPLOT(x+0.05*ii-0.05, y,yerror*y,SYMBOL=symb[ii], sym_thick=3,sym_size=2, COLOR=cols[ii], ERRORBAR_COLOR=cols[ii] , LINESTYLE=' ', /overplot)
    text08 = TEXT(0.15+addx*0.06,0.89-0.04*ii+addx*0.04,IDs[ii], /CURRENT, COLOR=cols[ii], FONT_SIZE=12, FONT_Style=1)
  endif
  print, 'lll'
endfor
yyy=[0.2,0.6, 0.6,0.7,0.8,1.1,2,1.1,0.4,2, 0.15,0.35,0.8,0.4,0.7,0.3]
for ttt=0,15 do text08 = TEXT(xxx[ttt],yyy[ttt],nami[ttt], /CURRENT, COLOR='BLACK', /DATA, FONT_SIZE=12, FONT_Style=1,orientation=90)


print, 'PICAB YESSS'

all_XR[[4,6,13,17,19,21],*]=-100

y = all_XR[*,1]
yerror = all_XR_errors[*,1]
x = mTOz[lindgen(22)]
;x = lindgen(22)+1
filt=where(y lt 10 and y gt -10)
y=y[filt]
yerror=yerror[filt]
x=x[filt] & x[where(x eq 69)]=x[where(x eq 69)]-1 & x[where(x eq 73)]=x[where(x eq 73)]+1 & x[where(x eq 137)]=x[where(x eq 137)]+2

plot3 = ERRORPLOT(x, y, y*yerror,xlog=1,SYMBOL=symb[1],  sym_thick=3,sym_size=2, COLOR=cols[1], ERRORBAR_COLOR=cols[1] ,  dimensions=[1200,500], LINESTYLE=' ', XTICKFONT_SIZE=12,YTICKFONT_SIZE=12,FONT_SIZE=12, XTITLE="m/z (log)", YTITLE="XR factor", TITLE="retrieved cluster factor",  yrange=[-3,6],  xrange=[29,420])
plot3=ERRORPLOT([20,1000],[1,1],[0,0],' k-1',/overplot)
text08 = TEXT(0.15,0.85,IDs[1], /CURRENT, COLOR=cols[1], FONT_SIZE=12, FONT_Style=1)


for ii=2,11 do begin

  y = all_XR[*,ii]
  yerror = all_XR_errors[*,ii]
  x = mTOz[lindgen(22)]
  ;x = lindgen(22)+1
  filt=where(y lt 10 and y gt -10)
  if(ii eq 10) then if(max(d(filt)) gt 1.5) then filt=filt[1:*] else filt=-1; delete MeOH from VOCUS

  y=y[filt]
  yerror=yerror[filt]
  x=x[filt] & x[where(x eq 69)]=x[where(x eq 69)]-1 & x[where(x eq 73)]=x[where(x eq 73)]+1 & x[where(x eq 137)]=x[where(x eq 137)]+2

  print, ii, max( filt)
  if (max( filt) lt -0.5) then y=[0,0]
  if(ii lt 5.5) then addx=0 else addx=5
  if(max(y) ne 0) then begin
    plot3 = ERRORPLOT(x+0.05*ii-0.05, y,y*yerror,SYMBOL=symb[ii], sym_thick=3,sym_size=2, COLOR=cols[ii], ERRORBAR_COLOR=cols[ii] ,  LINESTYLE=' ', /overplot)
    text08 = TEXT(0.15+addx*0.025,0.89-0.04*ii+addx*0.04,IDs[ii], /CURRENT, COLOR=cols[ii], FONT_SIZE=12, FONT_Style=1)
  endif
  print, 'lll'
endfor



print, 'PICAB YESSS'

end


function order, in
out=in-in 
;out[where(in eq 1)]=1

;out[where(in eq 3)]=2
;out[where(in eq 4)]=3
;out[where(in eq 5)]=4




;out[where(in eq 6)]=6
;out[where(in eq 8)]=7
;out[where(in eq 10)]=8

;out[where(in eq 12)]=10
;out[where(in eq 0)]=11

out[where(in eq 1)]=5

;out[where(in eq 2)]=1

;out[where(in eq 4)]=2
;out[where(in eq 5)]=3
;out[where(in eq 6)]=4




;out[where(in eq 7)]=6
;out[where(in eq 9)]=7
;out[where(in eq 11)]=8

;out[where(in eq 13)]=10
;out[where(in eq 0)]=11



out[where(in eq 1)]=5

out[where(in eq 2)]=1
out[where(in eq 3)]=2

out[where(in eq 4)]=3
out[where(in eq 5)]=4
out[where(in eq 6)]=6




out[where(in eq 7)]=7
out[where(in eq 8)]=8
out[where(in eq 9)]=10

out[where(in eq 0)]=11


return, out
end

function fitTR, m19,m37,MtoQvalues,expPPBs,Sensitivities, Counts,BGcounts,Figure=Figure



  if(var_exists(BGcounts) lt -0.5) then BGcounts=Counts-Counts
  numMtoQ=max(d(MtoQvalues))
  indis=indgen(numMtoQ)
  NC=fltarr(numMtoQ)
  MeasSens=fltarr(numMtoQ)
  Set1=fltarr(numMtoQ)

 
    mLOW=10
    wLOW=2
    mHIGH=1000
    wHIGH=10
    ex=0.5
    window,28, xsize = 500, ysize=400
    !P.MULTI = [0,1,1]
    loadct,20
   DELTAex=0.01
    EXrange=[0,2]
    field=fltarr(201)
    scoreee=1e10
    bestEX=0.5
    
;    for i=0,numMtoQ-1 do begin
 ;     factor1=tr(MtoQvalues[i],bestEX,mLOW,wLOW,mHIGH,wHIGH)/tr(19,bestEX,mLOW,wLOW,mHIGH,wHIGH)
  ;    factor2=tr(MtoQvalues[i],bestEX,mLOW,wLOW,mHIGH,wHIGH)/tr(37,bestEX,mLOW,wLOW,mHIGH,wHIGH)
   ;   NC[i]=(Counts[i]-BGcounts[i])*1e6/(factor1*m19+factor2*m37)
    ;endfor
;    for i=0,numMtoQ-1 do begin
 ;     MeasSens[i]=NC[i]/expPPBs[i]
  ;    if (abs(MtoQvalues[i]-69) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-41) lt 0.5)]/expPPBs[i]
   ;   if (abs(MtoQvalues[i]-137) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-81) lt 0.5)]/expPPBs[i]
    ;  if (abs(MtoQvalues[i]-223) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-207) lt 0.5)]/expPPBs[i]
     ; if (abs(MtoQvalues[i]-297) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-281) lt 0.5)]/expPPBs[i]
      ;if (abs(MtoQvalues[i]-371) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-355) lt 0.5)]/expPPBs[i]
;      Set1[i]= MeasSens[i]/Sensitivities[i]
 ;   endfor


  ;  fiiil=where(set ne max(set[1:8]) and set ne min(set[1:8]))
 
     for dEX=0,200 do begin
      ex=DELTAex*dEX

      for i=0,numMtoQ-1 do begin
        factor1=tr(MtoQvalues[i],ex,mLOW,wLOW,mHIGH,wHIGH)/tr(19,ex,mLOW,wLOW,mHIGH,wHIGH)
        factor2=tr(MtoQvalues[i],ex,mLOW,wLOW,mHIGH,wHIGH)/tr(37,ex,mLOW,wLOW,mHIGH,wHIGH)
        NC[i]=(Counts[i]-BGcounts[i])*1e6/(factor1*m19+factor2*m37)
      endfor

      for i=0,numMtoQ-1 do begin
        MeasSens[i]=NC[i]/expPPBs[i]
        if (abs(MtoQvalues[i]-69) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-41) lt 0.5)]/expPPBs[i]
        if (abs(MtoQvalues[i]-137) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-81) lt 0.5)]/expPPBs[i]
        if (abs(MtoQvalues[i]-223) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-207) lt 0.5)]/expPPBs[i]
        if (abs(MtoQvalues[i]-297) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-281) lt 0.5)]/expPPBs[i]
        if (abs(MtoQvalues[i]-371) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-355) lt 0.5)]/expPPBs[i]
        Set1[i]= MeasSens[i]/Sensitivities[i]
      endfor
      fiiil=where(MtoQvalues gt 58.5 AND MtoQvalues lt 138.5 AND set1 lt 9999)
     
      set=set1[fiiil]
      xx=MtoQvalues[fiiil]
      set=set/max(set)
      slpe=linfit(xx,set, YFIT=fitti)
      good=mean(abs(set-fitti))
      int=slpe[0]
      slpe=1000*abs(slpe[1])

      slpe=abs(max(set[where(xx lt 74)])-max(set[where(xx gt 120)]))
      if(slpe lt scoreee) then begin
        scoreee=slpe
        bestEX=ex
      endif
      if (dEX eq 0) then  plot,xx, set, xrange=[50,150],yrange=[0,5], background=0,color=-1

      oplot,xx, set, color=200
      if(dEX eq 0) then print, 'ex slope(tar=0) differenceSET_FIT(tar=min) intersept(tar=1) meanSET(tar=1) stdevSET(tar=0) masses'
      print, string([ex,slpe,good,int,mean(set),stddev(set),xx],format='(f10.5)')
      oplot,xx, set, color=100
    endfor
    ;bestEX=0.5

    xyouts,0.2,0.5,'Best ex='+strtrim(string(bestEX,format='(f8.3)'),2),/norm,charsize=4,charthick=3,color=-100

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;        TRANSMISSION retrieve best LOW filter
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    bestEXold=-9999
    while (abs(bestEXold-bestEX) gt 0.02) do begin
      DELTAm=0.2
   ;   if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then DELTAm=0.05 ;VOCUS
      Mrange=[0,50]
      Wrange=[0,50]
      Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
      Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
      field=fltarr(dim1,dim2)
      for ML=0,dim1-1 do begin
        for WL=0,dim2-1 do begin
          mLOW=min(Mrange)+deltam*ML
          wLOW=min(Wrange)+deltam*WL
          if(tr(59,bestEX, mLOW,wLOW,mHIGH,wHIGH)/tr(59,bestex,10,2,1000,10) gt 0.98) then begin

            for i=0,numMtoQ-1 do begin
              factor1=tr(MtoQvalues[i],bestEX,mLOW,wLOW,mHIGH,wHIGH)/tr(19,bestEX,mLOW,wLOW,mHIGH,wHIGH)
              factor2=tr(MtoQvalues[i],bestEX,mLOW,wLOW,mHIGH,wHIGH)/tr(37,bestEX,mLOW,wLOW,mHIGH,wHIGH)
              NC[i]=(Counts[i]-BGcounts[i])*1e6/(factor1*m19+factor2*m37)
            endfor

            for i=0,numMtoQ-1 do begin
              MeasSens[i]=NC[i]/expPPBs[i]
              if (abs(MtoQvalues[i]-69) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-41) lt 0.5)]/expPPBs[i]
              if (abs(MtoQvalues[i]-137) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-81) lt 0.5)]/expPPBs[i]
              if (abs(MtoQvalues[i]-223) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-207) lt 0.5)]/expPPBs[i]
              if (abs(MtoQvalues[i]-297) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-281) lt 0.5)]/expPPBs[i]
              if (abs(MtoQvalues[i]-371) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-355) lt 0.5)]/expPPBs[i]
              Set1[i]= MeasSens[i]/Sensitivities[i]
            endfor
            fiiil=where( MtoQvalues lt 75.5 AND set1 lt 9999)
            set=set1[fiiil]
            if(max(where(set lt 1)) gt -0.5) then set[where(set lt 1)]=1/set[where(set lt 1)]
            xx=MtoQvalues[fiiil]
            field[ML,WL]=mean(set[[0,1]])

          endif else field[ML,WL]=9999
        endfor
      endfor
      field=1/field
      maxi=max(field,/nan)
      field[where(field lt 0.98*maxi)]=field[where(field lt 0.98*maxi)]*0.5
      field[where(field lt 0.99*maxi)]=field[where(field lt 0.99*maxi)]*0.5
      field[where(field lt 0.995*maxi)]=field[where(field lt 0.995*maxi)]*0.5
      field[where(field gt 0.998*maxi)]=1
      window,26, xsize = dim1, ysize=dim2
      loadct,20
      tvscl, field
      wLOW=0
      while (max(where(field[*,wLOW] eq 1)) lt -0.5) do wLOW=wLOW+1
      mLOW=where(field[*,wLOW] eq 1) & mLOW=mLOW[0]
      mLOW=min(Mrange)+deltam*mLOW
      wLOW=min(Wrange)+deltam*wLOW
      print, [mLOW,wLOW,mHIGH,wHIGH]

      stoppi=0
      bestEXold=bestEX
      addi=0
      increase_prev=-1
      while(stoppi eq 0) do begin
        increase=0
        for i=0,numMtoQ-1 do begin
          factor1=tr(MtoQvalues[i],bestEX+addi,mLOW,wLOW,mHIGH,wHIGH)/tr(19,bestEX+addi,mLOW,wLOW,mHIGH,wHIGH)
          factor2=tr(MtoQvalues[i],bestEX+addi,mLOW,wLOW,mHIGH,wHIGH)/tr(37,bestEX+addi,mLOW,wLOW,mHIGH,wHIGH)
          NC[i]=(Counts[i]-BGcounts[i])*1e6/(factor1*m19+factor2*m37)
        endfor
        for i=0,numMtoQ-1 do begin
          MeasSens[i]=NC[i]/expPPBs[i]
          if (abs(MtoQvalues[i]-69) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-41) lt 0.5)]/expPPBs[i]
          if (abs(MtoQvalues[i]-137) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-81) lt 0.5)]/expPPBs[i]
          if (abs(MtoQvalues[i]-223) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-207) lt 0.5)]/expPPBs[i]
          if (abs(MtoQvalues[i]-297) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-281) lt 0.5)]/expPPBs[i]
          if (abs(MtoQvalues[i]-371) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-355) lt 0.5)]/expPPBs[i]
          Set1[i]= MeasSens[i]/Sensitivities[i]
        endfor
        fiiil=where( MtoQvalues gt 106.5 AND set1 lt 9999)
        set=set1[fiiil]
        xx=MtoQvalues[fiiil]

if(max(where(set gt 1)) gt -0.5) then increase=max(d(where(set gt 1))) 
        
        
        
        if(increase ge 1.5) then  addi=addi+0.01
        ;if(increase le 0.5) then  stoppi=1
        if(increase le 0.5) then  addi=addi-0.01
        if(increase gt 0.5 and increase lt 1.5)  then   if(increase_prev gt increase)  then stoppi=1 else addi=addi-0.01
        if(increase_prev eq 0 and increase gt 1)  then   stoppi=1
        increase_prev=increase
      endwhile
      bestEXmist=max([bestEX+addi,0])
      bestEX=min([bestEXmist,2])
      print,[bestEXold,bestEX,abs(bestEXold-bestEX)]
      print,'haha'
    endwhile

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;        TRANSMISSION retrieve best HIGH filter
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    DELTAm=0.5
    Mrange=[150,600]
    Wrange=[30,300]
    Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
    Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
    field=fltarr(dim1,dim2)
    for MH=0,dim1-1 do begin
      for WH=0,dim2-1 do begin
        mHIGH=max(Mrange)-deltam*MH
        wHIGH=min(Wrange)+deltam*WH
        if(tr(71,bestEX, mLOW,wLOW,mHIGH,wHIGH)/tr(71,bestex,mLOW,wLOW,1000,10) gt 0.98) then begin

         
        
          for i=0,numMtoQ-1 do begin
            factor1=tr(MtoQvalues[i],bestEX,mLOW,wLOW,mHIGH,wHIGH)/tr(19,bestEX,mLOW,wLOW,mHIGH,wHIGH)
            factor2=tr(MtoQvalues[i],bestEX,mLOW,wLOW,mHIGH,wHIGH)/tr(37,bestEX,mLOW,wLOW,mHIGH,wHIGH)
            NC[i]=(Counts[i]-BGcounts[i])*1e6/(factor1*m19+factor2*m37)
          endfor

          for i=0,numMtoQ-1 do begin
            MeasSens[i]=NC[i]/expPPBs[i]
            if (abs(MtoQvalues[i]-69) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-41) lt 0.5)]/expPPBs[i]
            if (abs(MtoQvalues[i]-137) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-81) lt 0.5)]/expPPBs[i]
            if (abs(MtoQvalues[i]-223) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-207) lt 0.5)]/expPPBs[i]
            if (abs(MtoQvalues[i]-297) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-281) lt 0.5)]/expPPBs[i]
            if (abs(MtoQvalues[i]-371) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-355) lt 0.5)]/expPPBs[i]
            Set1[i]= MeasSens[i]/Sensitivities[i]
          endfor
          fiiil=where( MtoQvalues gt 78.5 AND set1 lt 9999)
          set=set1[fiiil]
          if(max(where(set lt 1)) gt -0.5) then set[where(set lt 1)]=1/set[where(set lt 1)]
 
         ;set=set[where(set ne max(set))]
         ;set=set[where(set ne min(set))]
         sett=mean(set)
          field[dim1-1-MH,WH]=sett
        endif else field[dim1-1-MH,WH]=9999

      endfor
    endfor
    field=1/field
    field[where(field gt 1)]=0
    maxi=max(field,/nan)
    window,31, xsize = dim1, ysize=dim2
    loadct,20
    tvscl, field
    indi=where(field eq maxi)
    mHIGH=max(indi mod dim1)
    wHIGH=max((indi-mHIGH)/dim1)
    mHIGH=min(Mrange)+deltam*mHIGH
    wHIGH=min(Wrange)+deltam*wHIGH

TRpar=[bestex,mlow,wlow,mhigh,whigh]




  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;              END TRANSMISSION
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  if (keyword_set(Figure)) then begin
 

    for i=0,numMtoQ-1 do begin
      factor1=tr(MtoQvalues[i],bestEX,mLOW,wLOW,mHIGH,wHIGH)/tr(19,bestEX,mLOW,wLOW,mHIGH,wHIGH)
      factor2=tr(MtoQvalues[i],bestEX,mLOW,wLOW,mHIGH,wHIGH)/tr(37,bestEX,mLOW,wLOW,mHIGH,wHIGH)
      NC[i]=(Counts[i]-BGcounts[i])*1e6/(factor1*m19+factor2*m37)
    endfor

    for i=0,numMtoQ-1 do begin
      MeasSens[i]=NC[i]/expPPBs[i]
      if (abs(MtoQvalues[i]-69) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-41) lt 0.5)]/expPPBs[i]
      if (abs(MtoQvalues[i]-137) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-81) lt 0.5)]/expPPBs[i]
      if (abs(MtoQvalues[i]-223) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-207) lt 0.5)]/expPPBs[i]
      if (abs(MtoQvalues[i]-297) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-281) lt 0.5)]/expPPBs[i]
      if (abs(MtoQvalues[i]-371) lt 0.5) then MeasSens[i]=MeasSens[i]+NC[where(abs(MtoQvalues-355) lt 0.5)]/expPPBs[i]
      Set1[i]= MeasSens[i]/Sensitivities[i]
    endfor
    fiiil=where(set1 lt 9999)
    set=set1[fiiil]
    xx=MtoQvalues[fiiil]
   fact=tr(xx,bestEX,mLOW,wLOW,mHIGH,wHIGH,/norm)
   window,29, xsize = dim1, ysize=dim2
   loadct,20

 plot,indgen(300),tr(indgen(300),bestEX,mLOW,wLOW,mHIGH,wHIGH,/norm)
for i=0,max(d(xx))-1 do oplot, [xx[i],xx[i]],[0,set[i]]*fact[i],thick=3


endif




return, TRpar
end

function caNC, ex,mLOW,wLOW,mHIGH,wHIGH,m19,m37,MtoQvalues,Counts,BGcounts,low=low,medium=medium,high=high
  
 if(var_exists(BGcounts) lt -0.5) then BGcounts=Counts-Counts
  
  numMtoQ=max(d(MtoQvalues))
  indis=indgen(numMtoQ)
  NC=fltarr(numMtoQ)
  
  if (keyword_set(low)) then begin
    indis=where(MtoQvalues lt 80.5)
  endif
  if (keyword_set(medium)) then begin
    indis=where(MtoQvalues gt 58.5 AND MtoQvalues lt 138.5)
  endif
  if (keyword_set(high)) then begin
    indis=where(MtoQvalues gt 106.5 )
  endif

  for i=0,max(d(indis))-1 do begin
    factor1=tr(MtoQvalues[indis[i]],ex,mLOW,wLOW,mHIGH,wHIGH)/tr(19,ex,mLOW,wLOW,mHIGH,wHIGH)
    factor2=tr(MtoQvalues[indis[i]],ex,mLOW,wLOW,mHIGH,wHIGH)/tr(37,ex,mLOW,wLOW,mHIGH,wHIGH)
     NC[indis[i]]=(Counts[indis[i]]-BGcounts[indis[i]])*1e6/(factor1*m19+factor2*m37)
  endfor
return, NC
end

function calcNC, ex,masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,low=low,medium=medium,high=high
  indis=indgen(22)
  if (keyword_set(low)) then begin
    indis=[0,1,2,3,7,8,9]
  endif
  if (keyword_set(medium)) then begin
    indis=[3,5,6,7,8,9,10,11,12,13,14]
  endif
  if (keyword_set(high)) then begin
    indis=[10,11,12,13,14,18,19,20,21]
  endif



  mTOz=[33,42,45,59,87 ,    69 , 41,71 ,73 , 79 ,    107, 121, 137,81 ,133 ,    181, 223,207, 297,281 ,    371 ,355]
  factor1=fltarr(22)
  factor2=fltarr(22)
  primi=fltarr(22)
  C=fltarr(22)
  NC=fltarr(22)
  
  
  for i=0,max(d(indis))-1 do begin
    factor1[indis[i]]=tr(mTOz[indis[i]],ex,masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,ex, masslow,widthlow,MASShigh,WIDTHhigh)
    factor2[indis[i]]=tr(mTOz[indis[i]],ex,masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,ex, masslow,widthlow,MASShigh,WIDTHhigh)
    primi[indis[i]]= (mean(countsBG[indgen(10)+ADD40,28])*factor1[indis[i]]+mean(countsBG[indgen(10)+ADD40,29])*factor2[indis[i]])/4; divide by 4 because mean(countsBG is based on 4s integration. Unit is cps.
    if(indis[i] eq 14) then  primi[indis[i]]= (mean(countsBG[indgen(10)+ADD40,28])*factor1[indis[i]]+1*mean(countsBG[indgen(10)+ADD40,29])*factor2[indis[i]])/4; divide by 4
    if(indis[i] eq 15) then  primi[indis[i]]= (mean(countsBG[indgen(10)+ADD40,28])*factor1[indis[i]]+1*mean(countsBG[indgen(10)+ADD40,29])*factor2[indis[i]])/4; divide by 4
    if(indis[i] eq 9) then  primi[indis[i]]= (mean(countsBG[indgen(10)+ADD40,28])*factor1[indis[i]]+1*mean(countsBG[indgen(10)+ADD40,29])*factor2[indis[i]])/4; divide by 4
    C[indis[i]]=mean(counts[indgen(10)+ADD40,indis[i]])-mean(countsBG[indgen(10)+ADD40,indis[i]]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
    NC[indis[i]]=C[indis[i]]*1e6/primi[indis[i]]
  endfor
  return, NC
end

function ActrisProtocol_simple, path,name,ProtData,masses, ProtEngData , engnames, computerID

  ;email Alex March 29, 2018:
  ;According to our notes, zero-air dilution flow was 5 slpm. I replicated figures 3 and 4 from the paper, please find them attached. PTR3 is not very
  ;sensitive to acetaldehyde, benzene, xylene, trimethylbenzene, trifluorobenzene and trichlorobenzene, so I didn't include these species in my version
  ;of figure 3. I guess we could just write a note in the figure caption saying that the instrument is not sensitive to certain compounds. I also attach
  ;sensitivity data I calculated for the figures (cps/ppb in dry air for all compounds and cps/ppb, ncps/ppb for acetone) in case you need it.

  ;Also, here are the operating conditions of the instrument:
  ;p_drift = 69 mbar
  ;T_drift = 30 degrees C
  ;E/N varied from 50-77 Td
  ;Please find attached a table with p_drift, T_drift and E/N (for calibrations from Sept 20-Sept 27) which could be shown in the first row of figure 4.
  ;
  ;email Martin Oct 31, 2017:
  ; This is tricky. Pressure = 70.0 mbar, but time is unknown. It is approx. 3 ms, but entirely defined by the flow and how the (laminar) flow profile develops
  ; after the critical orifice. We therefore assume that MEK (m73) or MVK (m71) is transmitted with a duty-cycle-like efficiency, Then we measure relative
  ; transmission of our primary ions to these masses. Then we know primary ions and with the k-rates we calculate reaction time.
  ;
  ; Appendif E (from alex states t=3.5+/- 0.5 ms. So, I use this value in the code




  helpi=1
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    helpi=0
    CATCH, /CANCEL
  ENDIF


  if (helpi eq 1) then begin
    file_id=H5f_open(name)
    n_attr=H5A_GET_NUM_ATTRS(file_id)
    ComputerID='nix'
    for j=0,n_attr-1 do if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(file_id,j)),'Computer ID') gt -0.5) then  ComputerID=H5A_read( H5A_OPEN_IDX(file_id,j))
    H5f_close, file_id
  endif else ComputerID='QMS_LSCE'



  T_FC=31
  Fcal=200
  if(max(protengdata[0]) gt 3770) then Fcal=240.0*298/273

  Fplus=0
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  Fcal=2000 ; VOCUS  PTR-TOF
  if(strlen(ComputerID) eq 0 ) then begin
    Fcal=2000
    Fplus=5000*298/273 ;Harvard
  endif
  Flow=float(Fcal)*273/298+Fplus+9.6



  Dil=(9.6*273/(273+T_FC))/Flow
  T_loop=273+100

  ; if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 and abs(min(ProtEngData[*,0])-3186.4) lt 0.2) then  masses=[masses[1:*],9999] ; Juelich PTR-TOF

  Path2=path+'STD_PROT/'
  mmist=file_info(path2)
  if (mmist.directory eq 0) then begin
    FILE_MKDIR, path2
  endif
  starttim=min(ProtEngData[*,0])
  reltime=(ProtEngData[*,0]-min(ProtEngData[*,0]))*24*60
  hilfi=strmid(strmid(path2,strpos(path2,'\')+1,1000),1+strpos(strmid(path2,strpos(path2,'\')+1,1000),'\'))
  PTRid=strmid(hilfi,0,strpos(hilfi,'\') )
  Datumzeit=t09str(ProtEngData[0])

  ; convert cps to counts
  timestep=max(reltime)*60/max(d(reltime))
  ;ProtData=ProtData*timestep


  I19=ProtData[where(abs(masses-19.017) eq min(abs(masses-19.017)) ),*]
  I21=ProtData[where(abs(masses-21.022) eq min(abs(masses-21.022)) ),*]
  I37=ProtData[where(abs(masses-37.028) eq min(abs(masses-37.028)) ),*]
  I38=ProtData[where(abs(masses-38.033) eq min(abs(masses-38.033)) ),*]
  I39=ProtData[where(abs(masses-39.033) eq min(abs(masses-39.033)) ),*]
  I34=ProtData[where(abs(masses-33.994) eq min(abs(masses-33.994)) ),*]
  I32=ProtData[where(abs(masses-31.989) eq min(abs(masses-31.989)) ),*]
  I32[where(I32 gt 6000)]=I34[where(I32 gt 6000)]*242

  if( max(I19) gt 5000) then I19=I21*487
  I37[where(I37 lt I38 *645)]=I38[where(I37 lt I38 *645)]*645
  ; if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 ) then    I37[where(I37 lt I39 *242)]=I38[where(I37 lt I38 *242)]*242  ; Juelich PTR-TOF


  Prim=reform(I19+I37)


  F37=I37/prim
  F32=I34*242/prim

  Pdrift=ProtEngData[*,where(strpos(engnames,'p-Drift') gt -0.5)] & Pdrift=Pdrift[*,0]

  H2Oscc=ProtEngData[*,where(strpos(engnames,'H2O scc')  gt -0.5 or strpos(engnames,'H2O[scc')  gt -0.5)] & H2Oscc=H2Oscc[*,0]
  Udrift=ProtEngData[*,where(strpos(engnames,'Udrift') gt -0.5)] & Udrift=Udrift[*,0]
  Udx=ProtEngData[*,where(strpos(engnames,'Udx') gt -0.5)] & Udx=Udx[*,0]
  FCinlet=ProtEngData[*,where(strpos(engnames,'FCinlet') gt -0.5)] & FCinlet=FCinlet[*,0]
  Tdrift=ProtEngData[*,where(strpos(engnames,'T-Drift') gt -0.5 )] & Tdrift=Tdrift[*,0]
  if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 ) then  Tdrift=ProtEngData[*,-1]+60   ; Juelich PTR-TOF
  PC=ProtEngData[*,where(strpos(engnames,'PC mba') gt -0.5 or strpos(engnames,'PC[mba')  gt -0.5)] & PC=PC[*,0]

  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  begin  ; VOCUS  PTR-TOF
    Pdrift=ProtEngData[*,where(strpos(engnames,'SSQ pressure monitor [mbar]') gt -0.5)] & Pdrift=Pdrift[*,0]
    Tdrift=ProtEngData[*,where(strpos(engnames,'TOF temp monitor') gt -0.5 )]
    Udrift=ProtEngData[*,where(strpos(engnames,'Spare 1 monitor [V]') gt -0.5)] & Udrift=Udrift[*,0]-25
  endif   ; VOCUS  PTR-TOF
  if(strlen(ComputerID) eq 0 ) then begin ;PTR3
    Tdrift=ProtEngData[*,where(strpos(engnames,'TPS body temp monitor') gt -0.5)] & Pdrift=Pdrift[*,0]
    Pdrift=ProtEngData[*,where(strpos(engnames,'REAC   sensor: APR/CMR') gt -0.5)] & Pdrift=Pdrift[*,0]
  endif

  D5_355=ProtData[where(abs(masses-355.07) eq min(abs(masses-355.07)) ),*]*1.67
  D5_371=ProtData[where(abs(masses-371.102) eq min(abs(masses-371.102)) ),*]*1.69
  if( min(abs(masses-371.102)) gt 1) then  D5_371= D5_371/1000
  if( min(abs(masses-355.07)) gt 1) then  D5_355= D5_355/1000
  D4_297=ProtData[where(abs(masses-297.083) eq min(abs(masses-297.083)) ),*]*1.52
  D4_281=ProtData[where(abs(masses-281.052) eq min(abs(masses-281.052)) ),*]*1.51
  D3_223=ProtData[where(abs(masses-223.064) eq min(abs(masses-223.064)) ),*]*1.37
  D3_207=ProtData[where(abs(masses-207.033) eq min(abs(masses-207.033)) ),*]*1.36
  benzCl3_181=ProtData[where(abs(masses-180.938) eq min(abs(masses-180.938)) ),*]*2.48
  benzF3_133=ProtData[where(abs(masses-133.026) eq min(abs(masses-133.026)) ),*]*1.07
  Pin_137=ProtData[where(abs(masses-137.132) eq min(abs(masses-137.132)) ),*]*1.12
  Pin_81=ProtData[where(abs(masses-81.07) eq min(abs(masses-81.07)) ),*]*1.07
  TMB_121=ProtData[where(abs(masses-121.101) eq min(abs(masses-121.101)) ),*]*1.10
  XYL_107=ProtData[where(abs(masses-107.086) eq min(abs(masses-107.086)) ),*]*1.09
  BEN_79=ProtData[where(abs(masses-79.054) eq min(abs(masses-79.054)) ),*]*1.07
  MEK_73=ProtData[where(abs(masses-73.065) eq min(abs(masses-73.065)) ),*]*1.05
  MVK_71=ProtData[where(abs(masses-71.049) eq min(abs(masses-71.049)) ),*]*1.05
  MBO_87=ProtData[where(abs(masses-87.080) eq min(abs(masses-87.080)) ),*]*1.06
  MBO_69=ProtData[where(abs(masses-69.070) eq min(abs(masses-69.070)) ),*]*1.06
  MBO_41=ProtData[where(abs(masses-41.039) eq min(abs(masses-41.039)) ),*]*1.03
  ACE_59=ProtData[where(abs(masses-59.049) eq min(abs(masses-59.049)) ),*]*1.03
  ACETAL_45=ProtData[where(abs(masses-45.033) eq min(abs(masses-45.033)) ),*]*1.02
  CH3CN_42=ProtData[where(abs(masses-42.034) eq min(abs(masses-42.034)) ),*]*1.02
  METH_33=ProtData[where(abs(masses-33.033) eq min(abs(masses-33.033)) ),*]*1.01
  BEN_78=ProtData[where(abs(masses-78.047) eq min(abs(masses-78.047)) ),*]*1.07
  if( min(abs(masses-78.047)) gt 1) then  BEN_78= BEN_78/1000
  TMB_120=ProtData[where(abs(masses-120.094) eq min(abs(masses-120.094)) ),*]*1.10
  if( min(abs(masses-120.094)) gt 1) then  TMB_120= TMB_120/1000
  XYL_106=ProtData[where(abs(masses-106.079) eq min(abs(masses-106.079)) ),*]*1.09
  if( min(abs(masses-106.079)) gt 1) then  XYL_106= XYL_106/1000

  ;correlation to correct delay

  Bestcor= correlate(ACE_59,D5_371)
  timeshift=0
  for i=1,50 do begin
    shiftcor= correlate(ACE_59,[D5_371[i:*],intarr(i)])
    if( shiftcor gt bestcor) then timeshift=i
    if( shiftcor gt bestcor) then bestcor=shiftcor
  endfor
  if(timeshift gt 0.5) then begin
    Print, 'D5 data shifted by '+string(timeshift)+' points'
    D5_355=transpose([D5_355[timeshift:*], fltarr(timeshift)])
    D5_371=transpose([D5_371[timeshift:*], fltarr(timeshift)])
  endif

  TotSIG=    METH_33 +    CH3CN_42 +    Acetal_45 +     Ace_59 +    MBO_87 +     MBO_69 +      MBO_41 +    MVK_71 +    MEK_73 +    Ben_79 +$
    Xyl_107 +    TMB_121 +     Pin_137 +       Pin_81 +   benzF3_133 + benzCl3_181 +  D3_223 +    D3_207 +    D4_297 +    D4_281 +$
    D5_371 +     D5_355


  D5_358iso=ProtData[where(abs(masses-358.073) eq min(abs(masses-358.073)) ),*]/0.0358
  D5_374iso=ProtData[where(abs(masses-374.105) eq min(abs(masses-374.105)) ),*]/0.0370
  D4_299iso=ProtData[where(abs(masses-299.086) eq min(abs(masses-299.086)) ),*]/0.1178
  D4_283iso=ProtData[where(abs(masses-283.055) eq min(abs(masses-283.055)) ),*]/0.1170
  D3_225iso=ProtData[where(abs(masses-225.067) eq min(abs(masses-225.067)) ),*]/0.0923
  D3_209iso=ProtData[where(abs(masses-209.036) eq min(abs(masses-209.036)) ),*]/0.0916
  benzCl3_182iso=ProtData[where(abs(masses-181.941) eq min(abs(masses-181.941)) ),*]/0.0267
  benzF3_134iso=ProtData[where(abs(masses-134.029) eq min(abs(masses-134.029)) ),*]/0.0612
  Pin_138iso=ProtData[where(abs(masses-138.135) eq min(abs(masses-138.135)) ),*]/0.0987
  Pin_82iso=ProtData[where(abs(masses-82.073) eq min(abs(masses-82.073)) ),*]/0.0617
  TMB_122iso=ProtData[where(abs(masses-122.104) eq min(abs(masses-122.104)) ),*]/0.0896
  XYL_108iso=ProtData[where(abs(masses-108.089) eq min(abs(masses-108.089)) ),*]/0.0804
  BEN_80iso=ProtData[where(abs(masses-80.057) eq min(abs(masses-80.057)) ),*]/0.0615
  MEK_74iso=ProtData[where(abs(masses-74.068) eq min(abs(masses-74.068)) ),*]/0.0426
  MVK_72iso=ProtData[where(abs(masses-72.052) eq min(abs(masses-72.052)) ),*]/0.0424
  MBO_88iso=ProtData[where(abs(masses-88.083) eq min(abs(masses-88.083)) ),*]/0.0526
  MBO_70iso=ProtData[where(abs(masses-70.073) eq min(abs(masses-70.073)) ),*]/0.0522
  MBO_42iso=ProtData[where(abs(masses-42.042) eq min(abs(masses-42.042)) ),*]/0.0320
  ACE_60iso=ProtData[where(abs(masses-60.052) eq min(abs(masses-60.052)) ),*]/0.0325
  ACETAL_46iso=ProtData[where(abs(masses-46.036) eq min(abs(masses-46.036)) ),*]/0.0220
  CH3CN_43iso=ProtData[where(abs(masses-43.037) eq min(abs(masses-43.037)) ),*]/0.0251
  METH_34iso=ProtData[where(abs(masses-34.036) eq min(abs(masses-34.036)) ),*]/0.0116

  MBO_42iso=MBO_42iso*0.000001
  METH_34iso=METH_34iso*0.00001
  TotSIGiso=    METH_34iso +    CH3CN_43iso +    Acetal_46iso +     Ace_60iso +    MBO_88iso +     MBO_70iso +      MBO_42iso +    MVK_72iso +    MEK_74iso +    Ben_80iso +$
    Xyl_108iso +    TMB_122iso +     Pin_138iso +       Pin_82iso +   benzF3_134iso + benzCl3_182iso +  D3_225iso +    D3_209iso +    D4_299iso +    D4_283iso +$
    D5_374iso +     D5_358iso




  mTOz=[33,42,45,59,87 ,    69 , 41,71 ,73 , 79 ,    107, 121, 137,81 ,133 ,    181, 223,207, 297,281 ,$
    371 ,355,-1,-1,-1,    -1,-1 ,-1,19,37,     39,34,43,46,60, 88,70, 42,72,74 ,$
    80, 108,122,138,82,134 ,182, 225,209, 299, 283, 374, 358,-1,-1,-1,78,32,120,106 ]
  compounds=['METH_33',   'CH3CN_42',   'Acetal_45',    'Ace_59',   'MBO_87',    'ISO/MBO_69',     'ISO/MBO_41',   'MVK_71',   'MEK_73',   'Ben_79',$
    'Xyl_107',   'TMB_121',    'MT_137',      'MT_81',   'benzF3_133','benzCl3_181','D3_223',   'D3_207',   'D4_297',   'D4_281',$
    'D5_371',    'D5_355',     'TotSIG',       'FCinlet',  'reltime',   'TotSIGiso',  'prim',     'Tdrift',   'I19',      'I37',$
    'I39', 'METH_34iso','CH3CN_43iso','Acetal_46iso','Ace_60iso','MBO_88iso',' MBO_70iso',' MBO_42iso','MVK_72iso','MEK_74iso','Ben_80iso',$
    'Xyl_108iso','TMB_122iso','Pin_138iso','Pin_82iso','benzF3_134iso','benzCl3_182iso','D3_225iso','D3_209iso','D4_299iso',' D4_283iso',$
    'D5_374iso','D5_358iso','Udx','pdrift','Udrift','BEN_78','I32','TMB_120','XYL_106']
  isotopecor=[1.01,1.02,1.02,1.03,1.06,1.06,1.03,1.05,1.05,1.07,1.09,1.1,1.12,1.07,1.07,2.48,1.37,1.36,1.52,1.51,1.69,1.67,1,1,1,1,1,1]

  RRK=[2.2,2.5+0.9, 3.03,  3.25, 2.68,  2.68, 2.68, 3.53, 3.25, 1.97, 2.31,  2.4,  2.45, 2.45,   2.46*1.0,  2.88,  2.59,  2.59,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
  RRK=[2.2,2.6+0.5, 3.03,  3.25, 2.68,         2.68, 2.68, 3.53, 3.25, 1.97,       2.31,  2.4,  2.45, 2.45,   2.46*1.1,        2.88,  2.59,  2.59,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
  RRK=[2.2/1.3,2.6+0.5, 3.03,  3.25, 2.68/1.45,         2.68/1.45, 2.68/1.45, 3.53/1.3, 3.25, 1.97,       2.31,  2.4,  2.45/1.2, 2.45/1.2,   2.46,        2.88/1.2,  2.59/1.2,  2.59/1.2,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9


  VMRppmNPL=[1.019,1.020,1.001,0.983,0.996,0.996,0.996,0.961,1.009,1.025,0.998,1.001,0.989,0.989,1.047,0,0,0,0.901,0.901,1.051,1.051,4,0,0,0,0,0]
  VMRppmAR=[1.011,1.01,1.111,0.967,0.998,0.998,0.998,0.937,1.017,1.006,0.983,0.989,0.983,0.983,1.032,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]
  VMRppmAR=[1.011,1.01,  0.6 ,0.967,0.998,0.998,0.998,0.55 ,1.017,1.006,0.983,0.989,0.983,0.983,1.2  ,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]

  CompARR=[METH_33, CH3CN_42, ACETAL_45, ACE_59, MBO_87 ,$
    MBO_69 , MBO_41,MVK_71 ,MEK_73 ,BEN_79 ,$
    XYL_107, TMB_121, Pin_137,Pin_81 ,benzF3_133 ,$
    benzCl3_181, D3_223, D3_207, D4_297,D4_281 ,$
    D5_371 ,D5_355, TotSIG, transpose((FCinlet-FCinlet)+Flow), transpose(reltime),$
    TotSIGiso,transpose(prim) ,transpose(Tdrift),I19,I37,$
    I39,METH_34iso,CH3CN_43iso,Acetal_46iso,Ace_60iso, MBO_88iso,MBO_70iso, MBO_42iso,MVK_72iso,MEK_74iso ,$
    Ben_80iso, Xyl_108iso,TMB_122iso,Pin_138iso,Pin_82iso,benzF3_134iso ,benzCl3_182iso, D3_225iso,D3_209iso, D4_299iso, D4_283iso,$
    D5_374iso, D5_358iso ,transpose(Udx),transpose(pdrift),transpose(Udrift),BEN_78,I32,TMB_120,XYL_106]

  i_Tdrift=27
  i_Udx=53
  i_pdrift=54
  i_Udrift=55


  ;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;    Find Injections
  ;;;;;;;;;;;;;;;;;;;;;;;;;;

  LongDUR=10
  tims=0
  timmax=0
  timend=0
  sigmax=0
  SearchStart=1
  SearchEnd=0

  data=ACE_59
  dataSTR='ACE_59'
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 and abs(min(ProtEngData[*,0])-3184.484) lt 0.2) then  data=MEK_73 ; VOCUS Calib 20 sep
  if(strpos(ComputerID,'50b4c522-8345-4094-bb5d-683484b5253e') gt -0.5 and abs(min(ProtEngData[*,0])-3190.6) lt 0.2) then  data=benzF3_133 ; UHEL Calib 26 sep
  if(strlen(ComputerID) eq 0 ) then  data=CH3CN_42 ; Harvard
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 and abs(min(ProtEngData[*,0])-3184.484) lt 0.2) then  dataSTR='MEK_73' ; VOCUS Calib 20 sep
  if(strpos(ComputerID,'50b4c522-8345-4094-bb5d-683484b5253e') gt -0.5 and abs(min(ProtEngData[*,0])-3190.6) lt 0.2) then  dataSTR='benzF3_133' ; UHEL Calib 26 sep

  if(strlen(ComputerID) eq 0 ) then  dataSTR='CH3CN_42' ; Harvard


  mini=quantile(data,0.1)
  midi=quantile(data,0.4)
  i30s=ceil(0.5*max(d(data))/max(reltime))
  faktor2=2
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  faktor2=3 ; VOCUS  PTR-TOF
  step=1
  ; step=0.5
  if(strlen(ComputerID) eq 0 ) then step=5
  print, [mini,midi,max(d(data)),step, faktor2, i30s]
  for i=3,max(d(data))-2 do begin
    if( SearchStart eq 1) then if(abs(data[i]-mini)/abs(data[i-2*step]-mini) gt 3) then if(data[i]gt faktor2*midi) then   begin
      tims=[tims,i]
      ; print, abs(data[i]-mini)/abs(data[i-1]-mini)
      istart=i
      mini=min([data[i-1*step],data[i-2*step],data[i-3*step] ])
      i=i+1+step-1
      SearchStart=0
      SearchEnd=1

    endif
    if(i gt i30s) then mininew=min(data[lindgen(i30s)+i-i30s])
    faktor=1.0
    if(strpos(ComputerID,'a5607e09-ea6a-4dc2-8b59-43e174eb06af') gt -0.5 and abs(min(ProtEngData[*,0])-3188.457) lt 0.2) then  faktor=1.3 ; Lancaster Calib 24 sep  PTR-TOF

    if(i gt i30s) then  if(mininew lt midi*faktor) then mini = mininew
    if( SearchEnd eq 1) then  if(abs(data[i-1*step]-mini)/abs(data[i]-mini) gt 1.5) then  if(data[i-1*step] gt midi ) then   begin
      ;  print, [i,abs(data[i-1]-mini)/abs(data[i]-mini)-1.5,data[i-1] - midi]
      timend=[timend,i]
      sigmax=[sigmax,max(data[istart:i])/midi]
      helpi=where((data[istart:i]) eq max(data[istart:i]))
      timmax=[timmax,istart+helpi[0]]
      ;   print, [i-istart,i,1.0*i/120,abs(data[istart]-mini)/abs(data[istart-1]-mini),data[istart],midi ,data[i-1] ,abs(data[i-1]-mini)/abs(data[i]-mini) ]
      i=i+1
      istart=istart+1
      ;   print, [i-istart,i, 1.0*i/120,abs(data[istart]-mini)/abs(data[istart-1]-mini),data[istart] ,midi,data[i-1] ,abs(data[i-1]-mini)/abs(data[i]-mini) ]
      ;    print, ''

      SearchStart=1
      SearchEnd=0

    endif
    ;i=i+step-1
  endfor


  tims=tims[1:*]
  timend=timend[1:*]
  sigmax=sigmax[1:*]
  timmax=timmax[1:*]

  ;fix:
  if(max(d(tims))-1 eq max(d(timend))) then timend=[timend,max(tims)+3]
  if(max(d(tims))-1 eq max(d(timend))) then sigmax=[sigmax,data[max(tims)+3]]
  if(max(d(tims))-1 eq max(d(timend))) then timmax=[timmax,max(tims)+1]

  injectiontimes=reltime[tims]
  injectiontimesEND=reltime[timend]

  duration=(injectiontimesEND-injectiontimes)*60  ; in seconds

  ;;;
  ; clean
  ;;;

  timsold=tims
  durationold=duration
  injectiontimesold=injectiontimes
  injectiontimesENDold=injectiontimesEND

  if(duration[0] lt LongDUR) then if(injectiontimes[1]*60-6 gt injectiontimesEND[0]*60) then begin
    tims[0]=-9999
    timend[0]=-9999
    injectiontimes[0]=-9999
    injectiontimesEND[0]=-9999
    duration[0]=-9999
  endif

  for i=1, max(d(tims))-2 do begin
    if(duration[i-1] lt LongDUR) then if(injectiontimesEND[i-1]*60+6 lt injectiontimes[i]*60) then  if(duration[i] lt LongDUR) then if(injectiontimes[i+1]*60-6 gt injectiontimesEND[i]*60) then begin

      tims[i]=-9999

      timend[i]=-9999
      injectiontimes[i]=-9999
      injectiontimesEND[i]=-9999
      duration[i]=-9999
    endif
  endfor


  if(duration[max(d(tims))-1] lt LongDUR) then if(injectiontimesEND[max(d(tims))-2]*60+6 lt injectiontimes[max(d(tims))-1]*60) then begin
    tims[max(d(tims))-1]=-9999
    timend[max(d(tims))-1]=-9999
    injectiontimes[max(d(tims))-1]=-9999
    injectiontimesEND[max(d(tims))-1]=-9999
    duration[max(d(tims))-1]=-9999
  endif


  ; clean short injections
  Shortsig=quantile(sigmax[where(duration lt LongDUR)],0.6)
  intex=where(duration lt LongDUR and sigmax lt Shortsig/5)
  if(max(intex) gt -0.5) then  begin
    tims[intex]=-9999
    timend[intex]=-9999
    injectiontimes[intex]=-9999
    injectiontimesEND[intex]=-9999
    duration[intex]=-9999
  endif
  ;  print, [transpose(string(timsold,format='(F8.1)')),transpose(string(durationold,format='(F8.1)')),transpose(string(injectiontimesold*60,format='(F8.1)')),transpose(string(injectiontimesENDold*60,format='(F8.1)')),transpose(string(tims,format='(F8.1)')),transpose(string(duration,format='(F8.1)')),transpose(string(injectiontimes*60,format='(F8.1)')),transpose(string(injectiontimesEND*60,format='(F8.1)')),transpose(string(sigmax,format='(F8.1)'))]




  tims=tims[where(tims gt -9999)]
  sigmax=sigmax[where(timend gt -9999)]
  timmax=timmax[where(timend gt -9999)]

  timend=timend[where(timend gt -9999)]
  injectiontimes=injectiontimes[where(injectiontimes gt -9999)]
  injectiontimesEND=injectiontimesEND[where(injectiontimesEND gt -9999)]
  duration=duration[where(duration gt -9999)]

  PREVdistance=[-9999,-60.0*(injectiontimes[0:max(d(tims))-2]-injectiontimes[1:*])]
  NEXTdistance=[60.0*(injectiontimes[1:*]-injectiontimes[0:max(d(tims))-2]),-9999]
  if(duration[0] gt LongDUR) then sequence=100 else sequence = 1
  for i=1,max(d(tims))-1 do if(duration[i] le LongDUR) then if (abs(PREVdistance[i]) lt 8.5) then if (sequence[i-1] lt 99) then sequence=[sequence,sequence[i-1]+1] else sequence=[sequence,1] else sequence=[sequence,1] else sequence=[sequence,100]
  for i=0, max(d(tims))-1 do if(sequence[i] eq 10) then for j=0,9 do sequence[i-j]=10

  ; clean long injections
  Longsig=max(sigmax[where(sequence eq 100)])
  intex=where(sequence eq 100 and sigmax lt Longsig/10)
  if(max(intex) gt -0.5) then sequence[intex]=-9999




  if( max(where(sequence ne 10 and sequence ne 100  )) gt -0.5) then begin
    sequence[where(sequence ne 10 and sequence ne 100  )]=-9999
    tims=tims[where(sequence gt -9999)]
    timend=timend[where(sequence gt -9999)]
    injectiontimes=injectiontimes[where(sequence gt -9999)]
    injectiontimesEND=injectiontimesEND[where(sequence gt -9999)]
    duration=duration[where(sequence gt -9999)]
    sigmax=sigmax[where(sequence gt -9999)]
    timmax=timmax[where(sequence gt -9999)]
    sequence=sequence[where(sequence gt -9999)]

  endif


  injectSHORT=injectiontimes[where(duration lt 4)]
  injectSHORTend=injectiontimesEND[where(duration lt 4)]
  timsSHORT=tims[where(duration lt 4)]
  timsSHORTend=timend[where(duration lt 4)]

  injectLONG=injectiontimes[where(duration gt 4)]
  injectLONGend=injectiontimesEND[where(duration gt 4)]
  timsLONG=tims[where(duration gt 4)]
  timsLONGend=timend[where(duration gt 4)]



  CompCUB=dblarr(max(d(injectSHORT)),max(d(compounds)),15*step) ; 12 injections, 23 ions, 15 cycles
  for i=0,max(d(timsSHORT))-1 do CompCUB[i,*,*]=CompARR[*,indgen(15*step)-5*step+timsShort[i]]
  ;  counts=total(compCUB[*,*,step*[4,5,6,7,8,9,10,11]],3)
  ;countsBG=8*total(compCUB[*,*,step*[1,2,3,12,13]],3)/5

  counts=total(compCUB[*,*,[indgen(8*step)+4*step]],3)*timestep; counts over 4s integration period
  countsBG=(8.0/5)*total(compCUB[*,*,[indgen(3*step)+1*step,indgen(2*step)+12*step]],3)*timestep


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;; S
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;   Cylinder: CC502781
  ;Cylinder Test Date: 02/14
  ;Valve: Ceodeux 14/686691 SS CGA350
  ;Cylinder Pressure: 2000 psi @ 22 °C
  ;Analysis Date: April 12, 2016
  ;Multi-component calibration mix
  ;Compound CAS# Concentration (ppb) Uncertainty
  ;
  ;Acetaldehyde 75-07-0         1111 ±5%
  ;Methanol 67-56-1        1011 ±5%
  ;Acetone 67-64-1 967 ±5%
  ;Acetonitrile 75-05-8 1010 ±5%
  ;Methyl Vinyl Ketone 78-94-4 937 ±5%
  ;Methyl Ethyl Ketone 78-93-3 1017 ±5%
  ;2-Methyl-3-Buten-2-ol 115-18-4 998 ±5%
  ;Benzene 71-43-2 1006 ±5%
  ;1,2,3-Trifluorobenzene 367-23-7 1032 ±5%
  ;Hexamethylcyclotrisiloxane (D3) 541-05-9 992 ±5%
  ;m-Xylene 108-38-3 983 ±5%
  ;alpha-Pinene 80-56-8 983 ±5%
  ;Octamethylcyclotetrasiloxane (D4) 556-67-2 995 ±5%
  ;1,3,5-Trimethylbenzene 108-67-8 989 ±5%
  ;Decamethylcyclopentasiloxane (D5) 541-02-6 995 ±5%
  ;1,2,4-Trichlorobenzene 120-82-1 995 ±5%


  ;propane 0.981 0.015
  ;ethanol 0.965 0.024
  ;
  ;methanol 1.019 0.031
  ;acetonitrile 1.020 0.031
  ;acetaldehyde 1.001 0.030
  ;acetone 0.983 0.020
  ;isoprene 0.996 0.020
  ;3-buten-2-one (MVK) 0.961 0.029
  ;butan-2-one (MEK) 1.009 0.030
  ;benzene 1.025 0.015
  ;m-xylene 0.998 0.025
  ;1,2,4-TMB 1.001 0.025
  ;1,2,4-trifluorobenzene 1.047 0.052
  ;3-carene 0.989 0.025
  ;D4-siloxane 0.901 0.045
  ;D5-siloxane 1.051 0.053



  if(min(ProtEngData[*,0]) lt 3186.0 or min(ProtEngData[*,0]) gt 3194.0 ) then VMRppm=VMRppmAR
  if(min(ProtEngData[*,0]) ge 3186.0  and min(ProtEngData[*,0]) le 3194.0 ) then VMRppm=VMRppmNPL


  VMRppm[where(VMRppm eq 0)]=1e5
  en=fltarr(22)
  for i=0,21 do  en[i]=1e-6*VMRppm[i]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  Fmol=(Flow)/(60.0*1000.0*22.4) ; unit is mol/s
  d_d=9.6
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  d_d=10; estimated based on E/N of 160 Td, VOCUS  PTR-TOF
  p_d=mean(counts[indgen(10),i_pdrift]/4)
  E_d=(mean(counts[indgen(10),i_udrift]/4)+mean(counts[indgen(10),i_udx]/4))/d_d
  T_d=mean(counts[indgen(10),i_Tdrift]/4)+273.15
  t_react=(d_d*p_d*273.15)/(E_d*T_d*2.7*1013.25)
  if(strlen(ComputerID) eq 0 ) then t_react=0.0035 ; harvard

  sensitivities=fltarr(22)
  for i=0,21 do sensitivities[i]=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[i]/1013.25)


  ADD40=0
  if(strmatch(strtrim(strmid(name,strpos(name,'\',/reverse_search)+1,1000),2),'2017.09.20-13h21m39s_calib_rupert_1s.h5') eq 1) then ADD40=40


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;        TRANSMISSION retrieve nitial best EX
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  MMLL=fltarr(5)
  WWLL=fltarr(5)
  MMHH=fltarr(5)
  WWHH=fltarr(5)
  exex=fltarr(5)

  for pp=0,4 do begin


    ADD40=pp*10

    MASSlow=10
    WIDTHlow=2
    MASShigh=1000
    WIDTHhigh=10
    ex=0.5




    window,28, xsize = 500, ysize=400
    !P.MULTI = [0,1,1]
    loadct,20



    DELTAex=0.01
    EXrange=[0,2]
    field=fltarr(201)
    scoreee=1e10
    bestEX=0.5

    NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/medium)
    essen=fltarr(22)
    for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
    xx=[59,69,71,73,79,107,121,133,137,223,297,355]
    set=[essen[3]/sensitivities[3],(essen[5]+essen[6])/sensitivities[5],essen[7]/sensitivities[7],essen[8]/sensitivities[8],essen[9]/sensitivities[9], $
      essen[10]/sensitivities[10],essen[11]/sensitivities[11],essen[14]/sensitivities[14],(essen[12]+essen[13])/sensitivities[12]]
    if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then begin ;VOCUS
      set1=set[[0,2,3,5,6,8]]
      xx=xx[[0,2,3,5,6,8]]
      fiiil=where(set1 ne max(set1[1:5]) and set1 ne min(set1[1:5]))
    endif else begin
      set1=set[[0,1,2,3,4,5,6,7,8]]
      xx=xx[[0,1,2,3,4,5,6,7,8]]
      fiiil=where(set1 ne max(set1[1:8]) and set1 ne min(set1[1:8]))
    endelse



    for dEX=0,200 do begin
      ex=DELTAex*dEX
      NC=calcNC(ex, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/medium)
      essen=fltarr(22)
      for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
      cols=[10,10,10,10,10,   100,100,100,100,100,   175,175,175,175,175, 250,250,250,250,250,250,250,250,250]
      xx=[59,69,71,73,79,107,121,133,137,223,297,355]
      set=[essen[3]/sensitivities[3],(essen[5]+essen[6])/sensitivities[5],essen[7]/sensitivities[7],essen[8]/sensitivities[8],essen[9]/sensitivities[9], $
        essen[10]/sensitivities[10],essen[11]/sensitivities[11],essen[14]/sensitivities[14],(essen[12]+essen[13])/sensitivities[12]]
      if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then begin ;VOCUS
        set1=set[[0,2,3,5,6,8]]
        xx=xx[[0,2,3,5,6,8]]
      endif else begin
        set1=set[[0,1,2,3,4,5,6,7,8]]
        xx=xx[[0,1,2,3,4,5,6,7,8]]
      endelse

      set=set1[fiiil]
      xx=xx[fiiil]
      set=set/max(set)
      slpe=linfit(xx,set, YFIT=fitti)
      good=mean(abs(set-fitti))
      int=slpe[0]
      slpe=1000*abs(slpe[1])

      slpe=abs(max(set[where(xx lt 74)])-max(set[where(xx gt 120)]))
      if(slpe lt scoreee) then begin
        scoreee=slpe
        bestEX=ex
      endif
      if (dEX eq 0) then  plot,xx, set, xrange=[50,150], background=0,color=-1

      oplot,xx, set, color=200
      print, string([ex,slpe,good,int,mean(set),stddev(set),xx],format='(f10.5)')
      oplot,xx, set, color=100
    endfor
    ;bestEX=0.5

    xyouts,0.2,0.5,'Best ex='+strtrim(string(bestEX,format='(f8.3)'),2),/norm,charsize=4,charthick=3,color=-100



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;        TRANSMISSION retrieve best LOW filter
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    bestEXold=-9999
    while (abs(bestEXold-bestEX) gt 0.02) do begin
      DELTAm=0.5
      if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then DELTAm=0.05 ;VOCUS
      Mrange=[0,50]
      Wrange=[0,50]
      Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
      Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
      field=fltarr(dim1,dim2)
      for ML=0,dim1-1 do begin
        for WL=0,dim2-1 do begin
          masslow=min(Mrange)+deltam*ML
          widthlow=min(Wrange)+deltam*WL
          if(tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(59,bestex,10,2,1000,10) gt 0.98) then begin
            NC=calcNC(bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/low)
            essen =fltarr(22)
            for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
            if(essen[1] gt sensitivities[1]) then xx42=essen[1]/sensitivities[1] else xx42=sensitivities[1]/essen[1]
            if(essen[2] gt sensitivities[2]) then xx45=essen[2]/sensitivities[2] else xx45=sensitivities[2]/essen[2]
            if(essen[3] gt sensitivities[3]) then xx59=essen[3]/sensitivities[3] else xx59=sensitivities[3]/essen[3]
            if(essen[7] gt sensitivities[7]) then xx71=essen[7]/sensitivities[7] else xx71=sensitivities[7]/essen[7]
            if(essen[8] gt sensitivities[8]) then xx73=essen[8]/sensitivities[8] else xx73=sensitivities[8]/essen[8]
            field[ML,WL]=mean([xx42,xx45,xx59,xx71,xx73])
          endif else field[ML,WL]=9999
        endfor
      endfor
      field=1/field
      maxi=max(field,/nan)
      field[where(field lt 0.98*maxi)]=field[where(field lt 0.98*maxi)]*0.5
      field[where(field lt 0.99*maxi)]=field[where(field lt 0.99*maxi)]*0.5
      field[where(field lt 0.995*maxi)]=field[where(field lt 0.995*maxi)]*0.5
      field[where(field gt 0.998*maxi)]=1
      window,26, xsize = dim1, ysize=dim2
      loadct,20
      tvscl, field
      WidthLow=0
      while (max(where(field[*,WidthLow] eq 1)) lt -0.5) do WidthLow=WidthLow+1
      MassLow=where(field[*,WidthLow] eq 1) & Masslow=Masslow[0]
      masslow=min(Mrange)+deltam*masslow
      widthlow=min(Wrange)+deltam*widthlow
      print, [Masslow,widthlow,MassHigh,Widthhigh]

      stoppi=0
      bestEXold=bestEX
      addi=0
      increase_prev=-1
      while(stoppi eq 0) do begin
        increase=0
        NC=calcNC(bestEX+addi, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/high)
        essen =fltarr(22)
        for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
        if(essen[20]+essen[21] gt sensitivities[20]) then increase=increase+1
        if(essen[18]+essen[19] gt sensitivities[18]) then increase=increase+1
        if(essen[10] gt sensitivities[10]) then increase=increase+1
        if(essen[11] gt sensitivities[11]) then increase=increase+1
        if(essen[12]+essen[13] gt sensitivities[12]) then increase=increase+1
        if(essen[14] gt sensitivities[14]) then increase=increase+1
        if(increase ge 1.5) then  addi=addi+0.01
        if(increase le 0.5) then  addi=addi-0.01
        if(increase gt 0.5 and increase lt 1.5)  then   if(increase_prev gt increase)  then stoppi=1 else addi=addi-0.01
        if(increase_prev eq 0 and increase gt 1)  then   stoppi=1
        increase_prev=increase
      endwhile
      bestEX=bestEX+addi
    endwhile

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;        TRANSMISSION retrieve best HIGH filter
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    DELTAm=0.5
    Mrange=[150,600]
    Wrange=[30,300]
    Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
    Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
    field=fltarr(dim1,dim2)
    for MH=0,dim1-1 do begin
      for WH=0,dim2-1 do begin
        MASShigh=max(Mrange)-deltam*MH
        WIDTHhigh=min(Wrange)+deltam*WH
        if(tr(137,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(137,bestex,10,2,1000,10) gt 0.98) then begin

          NC=calcNC(bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/high)
          essen =fltarr(22)
          for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
          essen121= essen[11]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen133= essen[14]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then essen133= essen[12]+essen[13]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen297= essen[18]+essen[19]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen371= essen[20]+essen[21]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          sensitivity121=sensitivities[11]
          sensitivity133=sensitivities[14]
          if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then sensitivity133=sensitivities[12]
          sensitivity297=sensitivities[18]
          sensitivity371=sensitivities[20]

          prim19= mean(countsBG[indgen(10)+ADD40,28])/4
          prim37= mean(countsBG[indgen(10)+ADD40,29])/4
          if(WH eq 0 and MH eq 0) then begin
            if(mean(essen121) gt mean(essen133)) then begin
              essen_H1=essen121
              sensitivity_H1=sensitivity121
              HH1=1
            endif else begin
              essen_H1=essen133
              sensitivity_H1=sensitivity133
              HH1=2
            endelse
            if(mean(essen297) gt mean(essen371)*5) then begin
              essen_H2=essen297
              sensitivity_H2=sensitivity297
              HH2=1
            endif else begin
              essen_H2=essen371
              sensitivity_H2=sensitivity371
              HH2=2
            endelse
          endif

          if(HH2 eq 1) then begin
            essen_H2=essen297
            sensitivity_H2=sensitivity297
            essen_H3=essen297
            sensitivity_H3=sensitivity297
          endif else begin
            essen_H2=essen371
            sensitivity_H2=sensitivity371
            essen_H3=essen297
            sensitivity_H3=sensitivity297
          endelse
          if(HH1 eq 1) then begin
            essen_H1=essen121
            sensitivity_H1=sensitivity121
          endif else begin
            essen_H1=essen133
            sensitivity_H1=sensitivity133
          endelse




          if(essen_H1 gt sensitivity_H1) then xx_H1=essen_H1/sensitivity_H1 else xx_H1=sensitivity_H1/essen_H1
          if(essen_H2 gt sensitivity_H2) then xx_H2=essen_H2/sensitivity_H2 else xx_H2=sensitivity_H2/essen_H2
          if(essen_H3 gt sensitivity_H3) then xx_H3=essen_H3/sensitivity_H3 else xx_H3=sensitivity_H3/essen_H3
          if(xx_H1 lt 0.9) then begin
            print, 'hahha'
          endif
          if(xx_H2 lt 0.9) then begin
            print, 'hahha'
          endif


          sett=[max([xx_H1,0.9],/nan),max([xx_H2,0.9],/nan),max([xx_H3,0.9],/nan)]
          if(min(sett) eq 0.9) then begin
            sett=0.9
          endif else sett=max(sett)
          field[dim1-1-MH,WH]=sett
        endif else field[dim1-1-MH,WH]=9999

      endfor
    endfor
    field=1/field
    field[where(field gt 1)]=0
    maxi=max(field,/nan)
    window,31, xsize = dim1, ysize=dim2
    loadct,20
    tvscl, field
    indi=where(field eq maxi)
    MassHigh=max(indi mod dim1)
    Widthhigh=max((indi-MassHigh)/dim1)
    MASShigh=min(Mrange)+deltam*MASShigh
    WIDTHhigh=min(Wrange)+deltam*WIDTHhigh

    MMLL[pp]=Masslow
    WWLL[pp]=widthlow
    MMHH[pp]=MassHigh
    WWHH[pp]=Widthhigh
    exex[pp]=bestEX



  endfor
  Masslow=MMLL[0]
  widthlow=WWLL[0]
  MassHigh=MMHH[0]
  Widthhigh=WWHH[0]
  bestEX=exex[0]
  Add40=0





  print, [Masslow,widthlow,MassHigh,Widthhigh]
  print,''
  MasslowOLD=Masslow
  widthlowOLD=widthlow
  MassHighOLD=MassHigh
  WidthhighOLD=Widthhigh
  MasslowOLD2=Masslow
  widthlowOLD2=widthlow
  MassHighOLD2=MassHigh
  WidthhighOLD2=Widthhigh




  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  CompARRtranse=CompARR
  for i=0,max(d(compounds))-1 do if (mTOz[i] ne -1) then CompARRtranse[i,*]=CompARR[i,*]/tr(mTOz[i],bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  PrimTR=CompARRtranse[29,*]+CompARRtranse[28,*]
  TotSigTR=CompARRtranse[0,*]
  for i=1,21 do  TotSigTR=TotSigTR+CompARRtranse[i,*]
  CompCUBtranse=CompCUB
  for i=0,max(d(timsSHORT))-1 do CompCUBtranse[i,*,*]=CompARRtranse[*,indgen(15*step)-5*step+timsShort[i]]
  countsTR=total(compCUBtranse[*,*,[indgen(8*step)+4*step]],3)*timestep; counts over 4s integration period
  countsBGTR=(8.0/5)*total(compCUBtranse[*,*,[indgen(3*step)+1*step,indgen(2*step)+12*step]],3)*timestep

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;              END TRANSMISSION
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;











  ;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;; Xr
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  resultis=[0,0,0]
  print, '           XR   |     stdev XR'

  XRdata=fltarr(22,2)


  oldold=1 ; old version based on Truman's work
  if (oldold eq 1) then begin
    for j=0,22 do begin
      XRall=0
      for p=0,9 do begin
        XR=0
        for k=0,50 do begin
          counter=0
          classs=0
          if (k eq 0) then XR=0.0
          if (k eq 1) then XR=0.01
          if (k gt 1.5) then begin
            if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then XR=XRpre+(XRpre-XRprepre)*slopeprepre/(slopeprepre-slopepre)
            if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then begin
              XR=XRprepre+(XRpre-XRprepre)/2
              class=1
            endif
            if(classs eq 1) then counter=counter+1
            if(counter eq 1 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then increment=-0.1 else increment=0.1
            if(counter gt 1.5 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then increment=increment *(-0.1)
            if(counter gt 0.5) then  XR=XRpre+increment
          endif
          NCs=0
          CRs=0
          for i=0,4 do begin

            m19=countsBGTR[p+10*i,28]
            m37=countsBGTR[p+10*i,29]
            cntss=countsTR[p+10*i,j]
            if(j eq 4) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 5) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 6) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 12) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
            if(j eq 13) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
            if(j eq 16) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
            if(j eq 17) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
            if(j eq 18) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
            if(j eq 19) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
            if(j eq 20) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
            if(j eq 21) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]

            NCs=[NCs,cntss/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
            CRs=[CRs,100*m37/(m19+m37)]
          endfor
          CRs=CRs[1:*]
          NCs=NCs[1:*]
          CRs=CRs[[0,3,4]];only N2
          NCs=NCs[[0,3,4]];only N2

          fitp=linfit(CRs,NCs)
          if (k eq 0) then begin
            slopePre=fitp[1]
            XRpre=XR
          endif
          XRprepre=XRpre
          XRpre=XR
          slopePrepre=slopePre
          slopePre=fitp[1]
        endfor
        XRall=[XRall,XR]

      endfor
      XRall=XRall[1:*]
      print,[compounds[j], string([mean(XRall),stddev(XRall)],format='(F12.2)')]
      if(j lt 21.5) then XRdata[j,*]=[mean(XRall),stddev(XRall)]
    endfor
  endif

  if (oldold eq 0) then begin
    for j=0,22 do begin
      pN2_1=0
      pN2_2=0
      pAIR=0
      pN2_AIR=0
      pAIR_N2_1=0
      pAIR_N2_2=0
      XRall=0

      for xxx=0,100 do begin
        XR=-1.5+float(xxx)/10.0
        NCsall=[0,0,0,0,0]
        for p=0,9 do begin
          NCs=0
          for i=0,4 do begin
            m19=countsBGTR[p+10*i,28]
            m37=countsBGTR[p+10*i,29]
            cntss=countsTR[p+10*i,j]
            if(j eq 4 or j eq 5 or j eq 6) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 12 or j eq 13) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
            if(j eq 16 or j eq 17) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
            if(j eq 18 or j eq 19) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
            if(j eq 20 or j eq 21) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
            NCs=[NCs,cntss/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
          endfor
          NCs=NCs[1:*]
          NCsall=[[NCsall],[NCs]]
        endfor
        NCsall= NCsall[*,1:*]

        pvalue=TM_test(NCsall[0,*],NCsall[3,*])
        pN2_1=[pN2_1, pvalue[1]]
        pvalue=TM_test(NCsall[4,*],NCsall[3,*])
        pN2_2=[pN2_2, pvalue[1]]
        pvalue=TM_test(NCsall[1,*],NCsall[3,*])
        pN2_AIR=[pN2_AIR, pvalue[1]]


        pvalue=TM_test(NCsall[1,*],NCsall[2,*])
        pAIR=[pAIR, pvalue[1]]
        pvalue=TM_test(NCsall[0,*],NCsall[2,*])
        pAIR_N2_1=[pAIR_N2_1, pvalue[1]]
        pvalue=TM_test(NCsall[4,*],NCsall[2,*])
        pAIR_N2_2=[pAIR_N2_2, pvalue[1]]
        XRall=[XRall,XR]
      endfor
      pN2_1=pN2_1[1:*]
      pN2_2=pN2_2[1:*]
      pN2_AIR=pN2_AIR[1:*]
      pAIR=pAIR[1:*]
      pAIR_N2_1=pAIR_N2_1[1:*]
      pAIR_N2_2=pAIR_N2_2[1:*]


      XRall=XRall[1:*]
      !P.MULTI = [0,1,1]
      WINDOW, 4, xsize=750,ysize=500

      loadct,5

      plot, XRall,pN2_1,color=0,background=-1,  yrange=[0,1]
      oplot,XRall, pN2_1, color=40, thick=1
      oplot,XRall, pN2_AIR, color=20, thick=1
      oplot,XRall, pAIR_N2_1, color=109, thick=1
      oplot,XRall, pAIR_N2_2, color=150, thick=1
      oplot,XRall, pN2_2, color=50, thick=3
      oplot,XRall, pAIR, color=111, thick=1

      xyouts, 0,0.9, compounds[j],color=0, charthick=2
      resultis=[[resultis],[XRall[where(pN2_2 eq max(pN2_2))],XRall[where(pN2_1 eq max(pN2_1))], XRall[where(pAIR eq max(pAIR))]]]

      print, 'haha'
    endfor
    print, resultis

    print, 'haha'
  endif

















  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;    SENS file
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;







  print, ''


  S_set3=[0,0,0,0,0]
  S_set2=[0,0,0,0,0]
  S_set3TR=[0,0,0,0,0]
  S_set2TR=[0,0,0,0,0]
  S_set=starttim
  Serr_set=starttim
  sensitivitiesCALC=fltarr(22)
  ncpsPERppbTR=fltarr(22,5)
  ncpsPERppbTRxr=fltarr(22,5)
  cpsPERppbRAW=fltarr(22,5)
  KINSPECS=fltarr(20,5)

  for j=0,22 do begin
    essen=fltarr(max(d(timsSHORT)))
    essen3=fltarr(max(d(timsSHORT)))
    essenTR=fltarr(max(d(timsSHORT)))
    essen3TR=fltarr(max(d(timsSHORT)))

    i2=0
    for i=0,max(d(timsSHORT))-1 do begin

      en1=1e-6*VMRppm[j]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
      factor1=tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
      factor2=tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
      primi= (countsBG[i,28]*factor1+countsBG[i,29]*factor2)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      if(j eq 9) then   primi= (countsBG[i,28]*factor1+0*countsBG[i,29]*factor2)/4; divide by 4
      if(j eq 14) then   primi= (countsBG[i,28]*factor1+0*countsBG[i,29]*factor2)/4; divide by 4
      if(j eq 15) then   primi= (countsBG[i,28]*factor1+0*countsBG[i,29]*factor2)/4; divide by 4



      C=counts[i,j]-countsBG[i,j] ; total signal of an injection (independent of integration interval). Unit is 'counts'.
      NC=C*1e6/primi ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
      Fmol=(Flow)/(60.0*1000.0*22.4) ; unit is mol/s
      es=NC*Fmol*1e-9/en1  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      es3=C*Fmol*1e-9/en1  ; UNIT cps/ppb
      essen[i2]= es
      essen3[i2]= es3

      if(j lt 21.5) then XR1=XRdata[j,0] else XR1=1
      if (XR1 lt-50 or XR1 gt 50) then XR1=1
      primiTR= (countsBGTR[i,28]+countsBGTR[i,29])/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      if(j eq 9) then    primiTR= (countsBGTR[i,28]+1*countsBGTR[i,29])/4; divide by 4
      if(j eq 14) then    primiTR= (countsBGTR[i,28]+1*countsBGTR[i,29])/4; divide by 4
      if(j eq 15) then    primiTR= (countsBGTR[i,28]+1*countsBGTR[i,29])/4; divide by 4
      primiTRxr= (countsBGTR[i,28]+XR1*countsBGTR[i,29])/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      CTR=countsTR[i,j]-countsBGTR[i,j] ; total signal of an injection (independent of integration interval). Unit is 'counts'.
      NCTR=CTR*1e6/primiTR ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
      NCTRxr=CTR*1e6/primiTRxr ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
      esTR=NCTR*Fmol*1e-9/en1  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      es3TR=NCTRxr*Fmol*1e-9/en1  ;UNIT ncps/ppb  (1E-9 to normalize to ppb) Xr corrected
      essenTR[i2]= esTR
      essen3TR[i2]= es3TR

      i2=i2+1

    endfor
    Sset2=[mean(essen[0:9])]
    Sset3=[mean(essen3[0:9])]
    Sset2TR=[mean(essenTR[0:9])]
    Sset3TR=[mean(essen3TR[0:9])]
    for k=1,4 do Sset2=[Sset2, [mean(essen[10*k+0:10*k+9])]]
    for k=1,4 do Sset3=[Sset3, [mean(essen3[10*k+0:10*k+9])]]
    for k=1,4 do Sset2TR=[Sset2TR, [mean(essenTR[10*k+0:10*k+9])]]
    for k=1,4 do Sset3TR=[Sset3TR, [mean(essen3TR[10*k+0:10*k+9])]]
    ;  print,[compounds[j], string(Sset2TR,format='(F12.2)'), string(Sset2,format='(F12.2)'),string(Sset3,format='(F12.2)')]
    S_set2=[[S_set2],[Sset2]]
    S_set=[S_set,[mean(essen)]]
    Serr_set=[Serr_set,stddev(essen)]
    if(j lt 21.5) then begin
      sensitivitiesCALC[j]=Sset2TR[0+ADD40/10]
      ncpsPERppbTR[j,*]=Sset2TR
      ncpsPERppbTRxr[j,*]=Sset3TR
      cpsPERppbRAW[j,*]=Sset3
    endif
  endfor

  sig19=fltarr(max(d(timsSHORT)))
  sig37=fltarr(max(d(timsSHORT)))
  sig19at59=fltarr(max(d(timsSHORT)))
  sig37at59=fltarr(max(d(timsSHORT)))
  r37to19=fltarr(max(d(timsSHORT)))
  r32to19=fltarr(max(d(timsSHORT)))
  BENZ78to79=fltarr(max(d(timsSHORT)))
  TMB120to121=fltarr(max(d(timsSHORT)))
  XYL106to107=fltarr(max(d(timsSHORT)))

  sigTTd=fltarr(max(d(timsSHORT)))
  sigppd=fltarr(max(d(timsSHORT)))
  sigUUd=fltarr(max(d(timsSHORT)))
  sigUUdx=fltarr(max(d(timsSHORT)))

  for i=0,max(d(timsSHORT))-1 do begin
    sig19[i]=countsBG[i,28]/4
    sig37[i]=countsBG[i,29]/4
    sig19at59[i]=countsBGTR[i,28]/4
    sig37at59[i]=countsBGTR[i,29]/4
    r37to19[i]=countsBGTR[i,29]/countsBGTR[i,28]
    r32to19[i]=countsBGTR[i,57]/countsBGTR[i,28]
    BENZ78to79[i]=countsTR[i,56]/countsTR[i,9]
    TMB120to121[i]=countsTR[i,58]/countsTR[i,11]
    XYL106to107[i]=countsTR[i,59]/countsTR[i,10]
    sigTTd[i]=counts[i,i_Tdrift]/4+273.15
    sigppd[i]=counts[i,i_pdrift]/4
    sigUUd[i]=counts[i,i_udrift]/4
    sigUUdx[i]=counts[i,i_udx]/4

  endfor

  Set19=[mean(sig19[0:9])]
  Set37=[mean(sig37[0:9])]
  Set19at59=[mean(sig19at59[0:9])]
  Set37at59=[mean(sig37at59[0:9])]
  Set37to19=[mean(r37to19[0:9])]
  Set32to19=[mean(r32to19[0:9])]
  Set78to79=[mean(BENZ78to79[0:9])]
  Set120to121=[mean(TMB120to121[0:9])]
  Set106to107=[mean(XYL106to107[0:9])]
  SetTTd=[mean(sigTTd[0:9])]
  Setppd=[mean(sigppd[0:9])]
  SetUUd=[mean(sigUUd[0:9])]
  SetUUdx=[mean(sigUUdx[0:9])]
  for k=1,4 do   Set19=[Set19, [mean(sig19[10*k+0:10*k+9])]]
  for k=1,4 do   Set37=[Set37, [mean(sig37[10*k+0:10*k+9])]]
  for k=1,4 do   Set19at59=[Set19at59, [mean(sig19at59[10*k+0:10*k+9])]]
  for k=1,4 do   Set37at59=[Set37at59, [mean(sig37at59[10*k+0:10*k+9])]]
  for k=1,4 do   Set37to19=[Set37to19, [mean(r37to19[10*k+0:10*k+9])]]
  for k=1,4 do   Set32to19=[Set32to19, [mean(r32to19[10*k+0:10*k+9])]]
  for k=1,4 do   Set78to79=[Set78to79, [mean(BENZ78to79[10*k+0:10*k+9])]]
  for k=1,4 do   Set120to121=[Set120to121, [mean(TMB120to121[10*k+0:10*k+9])]]
  for k=1,4 do   Set106to107=[Set106to107, [mean(XYL106to107[10*k+0:10*k+9])]]
  for k=1,4 do   SetTTd=[SetTTd, [mean(sigTTd[10*k+0:10*k+9])]]
  for k=1,4 do   Setppd=[Setppd, [mean(sigppd[10*k+0:10*k+9])]]
  for k=1,4 do   SetUUd=[SetUUd, [mean(sigUUd[10*k+0:10*k+9])]]
  for k=1,4 do   SetUUdx=[SetUUdx, [mean(sigUUdx[10*k+0:10*k+9])]]
  SetEEd=(SetUUd+SetUUdx)/d_d
  Setttreact=(d_d*Setppd*273.15)/(SetEEd*SetTTd*2.7*1013.25)
  if(strlen(ComputerID) eq 0 ) then Setttreact=Setttreact*0.003/Setttreact ; harvard
  SetEoverN=(1e17*22400*1013.25*SetTTd*SetEEd)/(6.022E23*Setppd*273.15)
  KINSPECS[0,*]=set19
  KINSPECS[1,*]=Set37
  KINSPECS[2,*]=Set19at59
  KINSPECS[3,*]=Set37at59
  KINSPECS[4,*]=Set37to19
  KINSPECS[5,*]=Set32to19
  KINSPECS[6,*]=Set78to79
  KINSPECS[7,*]=Set120to121
  KINSPECS[8,*]=Set106to107
  KINSPECS[9,*]=SetTTd
  KINSPECS[10,*]=Setppd
  KINSPECS[11,*]=SetUUd
  KINSPECS[12,*]=SetUUdx
  KINSPECS[13,*]=SetEEd
  KINSPECS[14,*]=Setttreact
  KINSPECS[15,*]=SetEoverN

  print,''
  print, set19
  print, Set37
  print, Set19at59
  print, Set37at59
  print,''
  print, Set37to19
  print,''
  print, Set32to19
  print, Set78to79
  print, Set120to121
  print, Set106to107
  print,''
  print, SetTTd
  print, Setppd
  print, SetUUd
  print, SetUUdx
  print, SetEEd
  print, Setttreact
  print, SetEoverN

  ;;;; save data
  names=['sig19','sig37','sig19TR','sig37TR','R37/19TR',    'R32/19TR','R78/79TR','R120/121TR','R106/107TR','Tdrift',    'pdrift','Udrift','Udx','Efield','treact',    'EoverN','','','','', $
    'nS_33','nS_42','nS_45','nS_59','nS_87',    'nS_69','nS_41','nS_71','nS_73','nS_79',    'nS_107','nS_121','nS_137','nS_81','nS_133',    'nS_181','nS_223','nS_207','nS_297','nS_281',    'nS_371','nS_355',$
    'nSxr_33','nSxr_42','nSxr_45','nSxr_59','nSxr_87',    'nSxr_69','nSxr_41','nSxr_71','nSxr_73','nSxr_79',    'nSxr_107','nSxr_121','nSxr_137','nSxr_81','nSxr_133',    'nSxr_181','nSxr_223','nSxr_207','nSxr_297','nSxr_281',    'nSxr_371','nSxr_355',$
    'rawS_33','rawS_42','rawS_45','rawS_59','rawS_87',    'rawS_69','rawS_41','rawS_71','rawS_73','rawS_79',    'rawS_107','rawS_121','rawS_137','rawS_81','rawS_133',    'rawS_181','rawS_223','rawS_207','rawS_297','rawS_281',    'rawS_371','rawS_355']
  dataAA=[KINSPECS, ncpsPERppbTR, ncpsPERppbTRxr,cpsPERppbRAW]

  dataAA=[transpose(names),transpose(string(dataAA))]
  makecsv, path2+'SENS '+PTRid+'_'+Datumzeit+'.csv',dataAA




  mames=(['rangeClusterRatio','tr_mLOW_bestex','tr_wLOW','tr_mHIGH','tr_wHIGH',compounds[0:21]])
  dataAA=([transpose([min(Set37to19[[0,3,4]]),max(Set37to19[[0,3,4]])]),transpose([masslow,bestEX]),transpose([widthlow,0]),transpose([masshigh,0]),transpose([widthhigh,0]),[XRdata]])

  dataAA=[transpose(mames),transpose(string(dataAA))]
  makecsv, path2+'XRdat '+PTRid+'_'+Datumzeit+'.csv',dataAA

  ;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; FIGURE TRANSMISSION
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  WINDOW, 5, xsize=1150,ysize=500
  !P.MULTI = [0,2,1]
  !Y.oMARGIN = [2,1]
  !X.oMARGIN = [5,5]
  !Y.MARGIN = [2,1]
  !x.MARGIN = [5,0]

  DEVICE, DECOMPOSED = 0


  ;plot transe
  loadct,5

  plot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),color=0,ytitle="transmission",xtitle="m/Q",background=-1,charsize=2, thick =2, charthick=2

  loadct,13

  oplot,indgen(399)+1,(indgen(399)+1)^bestEX/(59)^bestEX
  oplot,indgen(399)+1,tr(indgen(399)+1, bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/(indgen(399)+1)^bestEX,color=60



  mmm=[33,42,45,59,69,71,73,79,107,121,137,133,181,223,297,371]
  tansen=tr(mmm,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  ;tansen=tansen/tansen
  sense=sensitivities[[0,1,2,3,5,7,8,9,10,11,12,14,15,17,19,21]]

  NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40)
  essen=fltarr(22)
  for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
  senseCALC=[essen[0],essen[1],essen[2],essen[3],total(essen[4:6]),$
    essen[7],essen[8],essen[9],essen[10],essen[11],$
    total(essen[12:13]),essen[14],essen[15],total(essen[16:17]),$
    total(essen[18:19]),total(essen[20:21])]


  For i=0,3  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
  For i=4,11  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=60
  For i=12,15  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
  oplot, [mmm[10],mmm[10]], [0, tansen[10]*senseCALC[10]/sense[10]], thick=3, color=-1 ; plot m137 in red
  loadct,5

  xyouts,0.55,0.80,/normal,PTRid, color=0, charthick =3, charsize=2
  xyouts,0.55,0.72,/normal,Datumzeit, color=0, charthick =3, charsize=2
  xyouts,0.55,0.61,/normal,'Transmission parameters:  ', color=0, charthick =2, charsize=2
  xyouts,0.55,0.53,/norm,'ex: '+strtrim(string(bestEX,Format='(F8.2)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.45,/norm,'mLOW: '+strtrim(string(MASSlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.40,/norm,'wLOW: '+strtrim(string(WIDTHlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.32,/norm,'mHIGH: '+strtrim(string(MASShigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.27,/norm,'wHIGH: '+strtrim(string(WIDTHhigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2

  xyouts,0.55,0.19,/norm,'F37/F19: '+strtrim(string(Set37to19[ADD40],Format='(F8.3)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.14,/norm,'E/N: '+strtrim(string(SetEoverN[ADD40],Format='(I8)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.09,/norm,'Pd: '+strtrim(string(Setppd[ADD40],Format='(F8.2)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.04,/norm,'t_react: '+strtrim(string(1e6*Setttreact[ADD40],Format='(I8)'),2), color=0,charsize=2, charthick=2




  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then   write_jpeg, path2+'TRANS '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  WDELETE, 5


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; FIGURE TRANSMISSION
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  WINDOW, 7, xsize=1400,ysize=900
  !P.MULTI = [0,3,2]
  !Y.oMARGIN = [4,4]
  !X.oMARGIN = [8,4]
  !Y.MARGIN = [3,1]
  !x.MARGIN = [1,3]

  DEVICE, DECOMPOSED = 0
  cols=[110,50,70,175,160]
  transis=fltarr(5,399)
  for pp=0,4 do transis[pp,*]=tr(indgen(399)+1,exex[pp], MMLL[pp],WWLL[pp],MMHH[pp],WWHH[pp],/norm)

  for pp=0,4 do begin

    ADD40=pp*10

    Masslow=MMLL[pp]
    widthlow=WWLL[pp]
    MassHigh=MMHH[pp]
    Widthhigh=WWHH[pp]
    bestEX=exex[pp]

    ;plot transe
    loadct,5

    plot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),yrange=[0,max(transis)],color=0,background=-1,charsize=2, thick =2, charthick=2
    oplot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),color=cols[pp], thick =4

    loadct,13

    oplot,indgen(399)+1,(indgen(399)+1)^bestEX/(59)^bestEX
    oplot,indgen(399)+1,tr(indgen(399)+1, bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/(indgen(399)+1)^bestEX,color=60



    mmm=[33,42,45,59,69,71,73,79,107,121,137,133,181,223,297,371]
    tansen=tr(mmm,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
    ;tansen=tansen/tansen
    sense=sensitivities[[0,1,2,3,5,7,8,9,10,11,12,14,15,17,19,21]]

    NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40)
    essen=fltarr(22)
    for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
    senseCALC=[essen[0],essen[1],essen[2],essen[3],total(essen[4:6]),$
      essen[7],essen[8],essen[9],essen[10],essen[11],$
      total(essen[12:13]),essen[14],essen[15],total(essen[16:17]),$
      total(essen[18:19]),total(essen[20:21])]


    For i=0,3  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
    For i=4,11  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=60
    For i=12,15  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
    oplot, [mmm[10],mmm[10]], [0, tansen[10]*senseCALC[10]/sense[10]], thick=3, color=-1 ; plot m137 in red
    loadct,5

    xyouts,20,0.9*max([2,max(transis)]),'F37/F19: '+strtrim(string(Set37to19[pp],Format='(F8.3)'),2), color=0,charsize=1.5, charthick=2


  endfor

  plot, indgen(399)+1, transis[0,*],yrange=[0,max(transis)],color=0,background=-1,charsize=2, thick =2, charthick=2
  for pp=0,4 do oplot, indgen(399)+1, transis[pp,*],color=cols[pp], thick =3
  xyouts,0.72,0.26,/normal,'N2 dry', color=110,charsize=2,charthick=3
  xyouts,0.72,0.225,/normal,'air dry', color=50,charsize=2,charthick=3
  xyouts,0.72,0.19,/normal,'air wet', color=70,charsize=2,charthick=3
  xyouts,0.72,0.155,/normal,'N2 wet', color=175,charsize=2,charthick=3
  xyouts,0.72,0.12,/normal,'N2 dry', color=160,charsize=2,charthick=3

  xyouts,0.82,0.18,/norm,'E/N: '+strtrim(string(SetEoverN[0],Format='(I8)'),2), color=0,charsize=1.5, charthick=2
  xyouts,0.82,0.155,/norm,'Pd: '+strtrim(string(Setppd[0],Format='(F8.2)'),2), color=0,charsize=1.5, charthick=2
  xyouts,0.82,0.13,/norm,'t_react: '+strtrim(string(1e6*Setttreact[0],Format='(I8)'),2), color=0,charsize=1.5, charthick=2

  xyouts,0.30,0.97,/normal,PTRid+' '+Datumzeit, color=0, charthick =3, charsize=2
  xyouts,0.48,0.03,/normal,'m/Q', color=0, charthick =3, charsize=2
  xyouts,0.03,0.3,/normal,'transmission efficiency', orientation=90,color=0, charthick =3, charsize=2

  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then   write_jpeg, path2+'allTRANS '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  WDELETE, 7
  ADD40=0

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; FIGURE basic parameters
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  WINDOW, 4, xsize=1150,ysize=700
  !P.MULTI = [0,1,3]
  !Y.MARGIN = [3,1]
  !x.oMARGIN = [8,8]
  DEVICE, DECOMPOSED = 0
  loadct,5
  plot,reltime,TotSIG,xstyle=1,yrange=[0,1.1*max([I19+I37,TotSIG])],ystyle=1,color=0,ytitle="raw signal [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  oplot, reltime,smooth( I19+I37,5),thick =2, color=185
  xyouts,0.4,0.920,/normal,'Autodetection of            and            of injections', color=0
  xyouts,0.5,0.920,/normal,'START', color=110
  xyouts,0.58,0.920,/normal,'END', color=175
  xyouts,0.11,0.887,/normal,'Primary ions: I19+I37', color=178, charthick =2, charsize=1.5
  xyouts,0.11,0.860,/normal,'Product ions: sum of compounds in standard', color=0, charthick =2, charsize=1.5
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max([I19+I37,TotSIG]),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max([I19+I37,TotSIG]),1e14], color=175
  loadct,6
  faktor3=max(TotSIG,/nan)/max(data,/nan)
  oplot,reltime,data*faktor3,color=126
  ; oplot,reltime,data,color=126,thick =1.5
  xyouts,0.11,0.833,/normal,'Single compound: '+Datastr+' (x '+strtrim(string(faktor3,format='(F10.1)'),2)+')', color=105, charthick =2, charsize=1.5
  loadct,5
  tr19=tr(19,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  tr37=tr(37,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  tr32=tr(32,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  plot,reltime, smooth(primTR+TotSIGTR,5),yrange=[0,max(primTR+TotSIGTR)],xstyle=1,ystyle=1,color=0,ytitle="(transmission) corrected signal [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  oplot,reltime, smooth(primTR+TotSIGTR,5),thick =2,color=126
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max(primTR+TotSIGTR),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max(primTR+TotSIGTR),1e14], color=175
  oplot, reltime, smooth(TotSIGTR,5),thick =2, color=0
  oplot, reltime,smooth( I19,5)/tr19,thick =2, color=35
  oplot, reltime, smooth(I37,5)/tr37,thick =2, color=50
  oplot, reltime, smooth(I32,5)/tr32*10,thick =2, color=109

  xyouts,0.11,0.60,/normal,'Total signal:Primary+product ions', color=126, charthick =2, charsize=1.5
  xyouts,0.11,0.57,/normal,'Product ions', color=0, charthick =2, charsize=1.5
  xyouts,0.11,0.54,/normal,'I19', color=35, charthick =2, charsize=1.5
  xyouts,0.11,0.51,/normal,'I37', color=50, charthick =2, charsize=1.5
  xyouts,0.11,0.48,/normal,'I32 (x10)', color=109, charthick =2, charsize=1.5

  mmmax=max([smooth( (I37*tr19)/(I19*tr37),5),smooth( (I32*tr19)/(I19*tr32),5)])
  plot,reltime, smooth( (I37*tr19)/(I19*tr37),5),yrange=[0,mmmax],xstyle=1,ystyle=1,color=0,ytitle="ion ratios",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max(smooth( (I37*tr19)/(I19*tr37),5)),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max(smooth( (I37*tr19)/(I19*tr37),5)),1e14], color=175

  oplot,reltime, smooth( (I32*tr19)/(I19*tr32),5),color=109, thick =1.5;, charthick=2
  xyouts,0.11,0.25,/normal,'I37 / I19 (transmission corrected)', color=0, charthick =2, charsize=1.5
  xyouts,0.11,0.22,/normal,'I32 / I19 (transmission corrected)', color=109, charthick =2, charsize=1.5

  xyouts,0.97,0.9,/normal,orientation=-90,PTRid+'  '+Datumzeit, color=0, charthick =3, charsize=2

  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then  write_jpeg, path2+'SEQ '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; FIGURE  Fast injections
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  WINDOW, 6, xsize=1600,ysize=800
  !P.MULTI = [0,8,3]
  ;  !x.oMARGIN=[]
  !Y.oMARGIN = [5,5]
  !x.oMARGIN = [10,10]
  !Y.MARGIN = [3,1]
  !x.MARGIN = [3,1]
  DEVICE, DECOMPOSED = 0
  loadct,5
  for j=0,21 do begin
    yrange=range(compCUB[*,j,*]/1000)
    cols=[intarr(10)+110,intarr(10)+50,intarr(10)+70,intarr(10)+175,intarr(10)+160,$
      0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    plot,timestep*(indgen(15*step)-5*step),compCUB[0,j,*]/1000,xstyle=1,ystyle=1,yrange=yrange,color=0,background=-1,charsize=2, thick =2;, charthick=2
    cnts=0
    for i=0,max(d(timsSHORT))-1 do begin
      oplot,timestep*(indgen(15*step)-5*step),compCUB[i,j,*]/1000, color=cols[i], thick=1
      cnts=[cnts, counts[i,j]-countsBG[i,j]]
    endfor
    cnts=cnts[1:*]
    set=[mean(cnts[0:9]),100*stddev(cnts[0:9])/mean(cnts[0:9])]
    for k=1,4 do set=[set, [mean(cnts[10*k+0:10*k+9]),100*stddev(cnts[10*k+0:10*k+9])/mean(cnts[10*k+0:10*k+9])]]
    ;print,[ mean(set[[0,2,4,6,8]]),mean(set[[1,3,5,7,9]]),  stddev(set[[1,3,5,7,9]])]
    xyouts,-2,max(yrange)*0.9,compounds[j],color=0,charsize=1.5,charthick=1.5
    xyouts,-2,max(yrange)*0.8,string(VMRppm[j]*1000*dil,format='(F5.1)'),color=0,charsize=1.5,charthick=1.5
    xyouts,2,max(yrange)*0.8,string(set[1],format='(F4.1)')+'%',color=110,charthick=2
    xyouts,2,max(yrange)*0.7,string(set[3],format='(F4.1)')+'%',color=50,charthick=2
    xyouts,2,max(yrange)*0.6,string(set[5],format='(F4.1)')+'%',color=70,charthick=2
    xyouts,2,max(yrange)*0.5,string(set[7],format='(F4.1)')+'%',color=175,charthick=2
    xyouts,2,max(yrange)*0.4,string(set[9],format='(F4.1)')+'%',color=160,charthick=2
  endfor
  xyouts,0.85,0.21,/normal,PTRid,color=1,charsize=1.5,charthick=2
  datum=strmid(datumzeit,0,strpos(datumzeit,'-'))
  xyouts,0.85,0.18,/normal,Datum,color=1,charsize=1.5,charthick=2
  Zeit=strmid(datumzeit,1+strpos(datumzeit,'-'),1000)
  xyouts,0.85,0.15,/normal,Zeit,color=1,charsize=1.5,charthick=2
  xyouts,0.76,0.25,/normal,'N2 dry', color=110,charsize=1.5,charthick=1.5
  xyouts,0.76,0.225,/normal,'air dry', color=50,charsize=1.5,charthick=1.5
  xyouts,0.76,0.20,/normal,'air wet', color=70,charsize=1.5,charthick=1.5
  xyouts,0.76,0.175,/normal,'N2 wet', color=175,charsize=1.5,charthick=1.5
  xyouts,0.76,0.15,/normal,'N2 dry', color=160,charsize=1.5,charthick=1.5

  xyouts,0.4,0.05,/normal,'time in seconds', color=1,charsize=1.5,charthick=1.5
  xyouts,0.04,0.43,/normal,'signal in kcps',orientation=90, color=1,charsize=1.5,charthick=1.5

  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then  write_jpeg, path2+'INJ '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  WDELETE, 6
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  print, 'end'
  return, create_struct('Fptr', [1,1,1], 'S_nam', ['time', compounds[0:21]], 'S_val',S_set[0:22], 'Serr_val',Serr_set[0:22])
end





function ActrisProtocol, path,name,ProtData,masses, ProtEngData , engnames, computerID ;PICAB

;email Alex March 29, 2018:
;According to our notes, zero-air dilution flow was 5 slpm. I replicated figures 3 and 4 from the paper, please find them attached. PTR3 is not very 
;sensitive to acetaldehyde, benzene, xylene, trimethylbenzene, trifluorobenzene and trichlorobenzene, so I didn't include these species in my version 
;of figure 3. I guess we could just write a note in the figure caption saying that the instrument is not sensitive to certain compounds. I also attach 
;sensitivity data I calculated for the figures (cps/ppb in dry air for all compounds and cps/ppb, ncps/ppb for acetone) in case you need it.

;Also, here are the operating conditions of the instrument:
;p_drift = 69 mbar
;T_drift = 30 degrees C
;E/N varied from 50-77 Td
;Please find attached a table with p_drift, T_drift and E/N (for calibrations from Sept 20-Sept 27) which could be shown in the first row of figure 4.
;
;email Martin Oct 31, 2017:
; This is tricky. Pressure = 70.0 mbar, but time is unknown. It is approx. 3 ms, but entirely defined by the flow and how the (laminar) flow profile develops 
; after the critical orifice. We therefore assume that MEK (m73) or MVK (m71) is transmitted with a duty-cycle-like efficiency, Then we measure relative 
; transmission of our primary ions to these masses. Then we know primary ions and with the k-rates we calculate reaction time.
; 
; Appendif E (from alex states t=3.5+/- 0.5 ms. So, I use this value in the code




  helpi=1
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    helpi=0
    CATCH, /CANCEL
  ENDIF


  if (helpi eq 1) then begin
    file_id=H5f_open(name)
    n_attr=H5A_GET_NUM_ATTRS(file_id)
    ComputerID='nix'
    for j=0,n_attr-1 do if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(file_id,j)),'Computer ID') gt -0.5) then  ComputerID=H5A_read( H5A_OPEN_IDX(file_id,j))
    H5f_close, file_id
  endif else ComputerID='QMS_LSCE'



  T_FC=31
  Fcal=200
  if(max(protengdata[0]) gt 3770) then Fcal=240.0*298/273  ; Orleans May 2019
  if(max(protengdata[0]) gt 3800 and max(protengdata[0]) lt 4005) then Fcal=240.0*291/273  ; Sonnblick Aug-Dec 2019
  if(max(protengdata[0]) gt 3800 and max(protengdata[0]) lt 4005) then  T_FC=18  ; Sonnblick Aug-Dec 2019

  Fplus=0
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  Fcal=2000 ; VOCUS  PTR-TOF
  if(strlen(ComputerID) eq 0 ) then begin
    Fcal=2000
    Fplus=5000*298/273 ;Harvard
  endif
  Flow=float(Fcal)*273/298+Fplus+9.6



  Dil=(9.6*273/(273+T_FC))/Flow
  T_loop=273+100
  if(max(protengdata[0]) gt 3800 and max(protengdata[0]) lt 4005) then T_loop=273+110  ; Sonnblick Aug-Dec 2019

   ;if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 and abs(min(ProtEngData[*,0])-3186.4) lt 0.2) then  masses=[masses[1:*],9999] ; Juelich PTR-TOF

  Path2=path+'STD_PROT/'
  mmist=file_info(path2)
  if (mmist.directory eq 0) then begin
    FILE_MKDIR, path2
  endif
  starttim=min(ProtEngData[*,0])
  reltime=(ProtEngData[*,0]-min(ProtEngData[*,0]))*24*60
  hilfi=strmid(strmid(path2,strpos(path2,'\')+1,1000),1+strpos(strmid(path2,strpos(path2,'\')+1,1000),'\'))
  PTRid=strmid(hilfi,0,strpos(hilfi,'\') )
  Datumzeit=t09str(ProtEngData[0])

  ; convert cps to counts
  timestep=max(reltime)*60/max(d(reltime))
  ;ProtData=ProtData*timestep


  I19=ProtData[where(abs(masses-19.017) eq min(abs(masses-19.017)) ),*]
  I21=ProtData[where(abs(masses-21.022) eq min(abs(masses-21.022)) ),*]
  I37=ProtData[where(abs(masses-37.028) eq min(abs(masses-37.028)) ),*]
  I38=ProtData[where(abs(masses-38.033) eq min(abs(masses-38.033)) ),*]
  I39=ProtData[where(abs(masses-39.033) eq min(abs(masses-39.033)) ),*]
  I34=ProtData[where(abs(masses-33.994) eq min(abs(masses-33.994)) ),*]
  I32=ProtData[where(abs(masses-31.989) eq min(abs(masses-31.989)) ),*]
  I32[where(I32 gt 6000)]=I34[where(I32 gt 6000)]*242

  if( max(I19) gt 5000) then I19=I21*487
  I37[where(I37 lt I38 *645)]=I38[where(I37 lt I38 *645)]*645
 ; if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 ) then    I37[where(I37 lt I39 *242)]=I38[where(I37 lt I38 *242)]*242  ; Juelich PTR-TOF


  Prim=reform(I19+I37)


  F37=I37/prim
  F32=I34*242/prim

  Pdrift=ProtEngData[*,where(strpos(engnames,'p-Drift') gt -0.5)] & Pdrift=Pdrift[*,0]

  H2Oscc=ProtEngData[*,where(strpos(engnames,'H2O scc')  gt -0.5 or strpos(engnames,'H2O[scc')  gt -0.5)] & H2Oscc=H2Oscc[*,0]
  Udrift=ProtEngData[*,where(strpos(engnames,'Udrift') gt -0.5)] & Udrift=Udrift[*,0]
  Udx=ProtEngData[*,where(strpos(engnames,'Udx') gt -0.5)] & Udx=Udx[*,0]
  FCinlet=ProtEngData[*,where(strpos(engnames,'FCinlet') gt -0.5)] & FCinlet=FCinlet[*,0]
  Tdrift=ProtEngData[*,where(strpos(engnames,'T-Drift') gt -0.5 )] & Tdrift=Tdrift[*,0]
  if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 ) then  Tdrift=ProtEngData[*,-1]+60   ; Juelich PTR-TOF
  PC=ProtEngData[*,where(strpos(engnames,'PC mba') gt -0.5 or strpos(engnames,'PC[mba')  gt -0.5)] & PC=PC[*,0]

  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  begin  ; VOCUS  PTR-TOF
    Pdrift=ProtEngData[*,where(strpos(engnames,'SSQ pressure monitor [mbar]') gt -0.5)] & Pdrift=Pdrift[*,0]
    Tdrift=ProtEngData[*,where(strpos(engnames,'TOF temp monitor') gt -0.5 )]
    Udrift=ProtEngData[*,where(strpos(engnames,'Spare 1 monitor [V]') gt -0.5)] & Udrift=Udrift[*,0]-25
  endif   ; VOCUS  PTR-TOF
  if(strlen(ComputerID) eq 0 ) then begin ;PTR3
    Tdrift=ProtEngData[*,where(strpos(engnames,'TPS body temp monitor') gt -0.5)] & Pdrift=Pdrift[*,0]
    Pdrift=ProtEngData[*,where(strpos(engnames,'REAC   sensor: APR/CMR') gt -0.5)] & Pdrift=Pdrift[*,0]
  endif

  D5_355=ProtData[where(abs(masses-355.07) eq min(abs(masses-355.07)) ),*]*1.67
  D5_371=ProtData[where(abs(masses-371.102) eq min(abs(masses-371.102)) ),*]*1.69
  if( min(abs(masses-371.102)) gt 1) then  D5_371= D5_371/1000
  if( min(abs(masses-355.07)) gt 1) then  D5_355= D5_355/1000
  D4_297=ProtData[where(abs(masses-297.083) eq min(abs(masses-297.083)) ),*]*1.52
  D4_281=ProtData[where(abs(masses-281.052) eq min(abs(masses-281.052)) ),*]*1.51
  D3_223=ProtData[where(abs(masses-223.064) eq min(abs(masses-223.064)) ),*]*1.37
  D3_207=ProtData[where(abs(masses-207.033) eq min(abs(masses-207.033)) ),*]*1.36
  benzCl3_181=ProtData[where(abs(masses-180.938) eq min(abs(masses-180.938)) ),*]*2.48
  benzF3_133=ProtData[where(abs(masses-133.026) eq min(abs(masses-133.026)) ),*]*1.07
  Pin_137=ProtData[where(abs(masses-137.132) eq min(abs(masses-137.132)) ),*]*1.12
  Pin_81=ProtData[where(abs(masses-81.07) eq min(abs(masses-81.07)) ),*]*1.07
  TMB_121=ProtData[where(abs(masses-121.101) eq min(abs(masses-121.101)) ),*]*1.10
  XYL_107=ProtData[where(abs(masses-107.086) eq min(abs(masses-107.086)) ),*]*1.09
  BEN_79=ProtData[where(abs(masses-79.054) eq min(abs(masses-79.054)) ),*]*1.07
  MEK_73=ProtData[where(abs(masses-73.065) eq min(abs(masses-73.065)) ),*]*1.05
  MVK_71=ProtData[where(abs(masses-71.049) eq min(abs(masses-71.049)) ),*]*1.05
  MBO_87=ProtData[where(abs(masses-87.080) eq min(abs(masses-87.080)) ),*]*1.06
  MBO_69=ProtData[where(abs(masses-69.070) eq min(abs(masses-69.070)) ),*]*1.06
  MBO_41=ProtData[where(abs(masses-41.039) eq min(abs(masses-41.039)) ),*]*1.03
  ACE_59=ProtData[where(abs(masses-59.049) eq min(abs(masses-59.049)) ),*]*1.03
  ACETAL_45=ProtData[where(abs(masses-45.033) eq min(abs(masses-45.033)) ),*]*1.02
  CH3CN_42=ProtData[where(abs(masses-42.034) eq min(abs(masses-42.034)) ),*]*1.02
  METH_33=ProtData[where(abs(masses-33.033) eq min(abs(masses-33.033)) ),*]*1.01
  BEN_78=ProtData[where(abs(masses-78.047) eq min(abs(masses-78.047)) ),*]*1.07
  if( min(abs(masses-78.047)) gt 1) then  BEN_78= BEN_78/1000
  TMB_120=ProtData[where(abs(masses-120.094) eq min(abs(masses-120.094)) ),*]*1.10
  if( min(abs(masses-120.094)) gt 1) then  TMB_120= TMB_120/1000
  XYL_106=ProtData[where(abs(masses-106.079) eq min(abs(masses-106.079)) ),*]*1.09
  if( min(abs(masses-106.079)) gt 1) then  XYL_106= XYL_106/1000

  ;correlation to correct delay

  Bestcor= correlate(ACE_59,D5_371)
  timeshift=0
  for i=1,round(5/timestep) do begin
    shiftcor= correlate(ACE_59,[D5_371[i:*],intarr(i)])
    if( shiftcor gt bestcor) then timeshift=i
    if( shiftcor gt bestcor) then bestcor=shiftcor
  endfor
  if(timeshift gt 0.5) then begin
    Print, 'D5 data shifted by '+string(timeshift)+' points'
    D5_355=transpose([D5_355[timeshift:*], fltarr(timeshift)])
    D5_371=transpose([D5_371[timeshift:*], fltarr(timeshift)])
  endif

  TotSIG=    METH_33 +    CH3CN_42 +    Acetal_45 +     Ace_59 +    MBO_87 +     MBO_69 +      MBO_41 +    MVK_71 +    MEK_73 +    Ben_79 +$
    Xyl_107 +    TMB_121 +     Pin_137 +       Pin_81 +   benzF3_133 + benzCl3_181 +  D3_223 +    D3_207 +    D4_297 +    D4_281 +$
    D5_371 +     D5_355


  D5_358iso=ProtData[where(abs(masses-358.073) eq min(abs(masses-358.073)) ),*]/0.0358
  D5_374iso=ProtData[where(abs(masses-374.105) eq min(abs(masses-374.105)) ),*]/0.0370
  D4_299iso=ProtData[where(abs(masses-299.086) eq min(abs(masses-299.086)) ),*]/0.1178
  D4_283iso=ProtData[where(abs(masses-283.055) eq min(abs(masses-283.055)) ),*]/0.1170
  D3_225iso=ProtData[where(abs(masses-225.067) eq min(abs(masses-225.067)) ),*]/0.0923
  D3_209iso=ProtData[where(abs(masses-209.036) eq min(abs(masses-209.036)) ),*]/0.0916
  benzCl3_182iso=ProtData[where(abs(masses-181.941) eq min(abs(masses-181.941)) ),*]/0.0267
  benzF3_134iso=ProtData[where(abs(masses-134.029) eq min(abs(masses-134.029)) ),*]/0.0612
  Pin_138iso=ProtData[where(abs(masses-138.135) eq min(abs(masses-138.135)) ),*]/0.0987
  Pin_82iso=ProtData[where(abs(masses-82.073) eq min(abs(masses-82.073)) ),*]/0.0617
  TMB_122iso=ProtData[where(abs(masses-122.104) eq min(abs(masses-122.104)) ),*]/0.0896
  XYL_108iso=ProtData[where(abs(masses-108.089) eq min(abs(masses-108.089)) ),*]/0.0804
  BEN_80iso=ProtData[where(abs(masses-80.057) eq min(abs(masses-80.057)) ),*]/0.0615
  MEK_74iso=ProtData[where(abs(masses-74.068) eq min(abs(masses-74.068)) ),*]/0.0426
  MVK_72iso=ProtData[where(abs(masses-72.052) eq min(abs(masses-72.052)) ),*]/0.0424
  MBO_88iso=ProtData[where(abs(masses-88.083) eq min(abs(masses-88.083)) ),*]/0.0526
  MBO_70iso=ProtData[where(abs(masses-70.073) eq min(abs(masses-70.073)) ),*]/0.0522
  MBO_42iso=ProtData[where(abs(masses-42.042) eq min(abs(masses-42.042)) ),*]/0.0320
  ACE_60iso=ProtData[where(abs(masses-60.052) eq min(abs(masses-60.052)) ),*]/0.0325
  ACETAL_46iso=ProtData[where(abs(masses-46.036) eq min(abs(masses-46.036)) ),*]/0.0220
  CH3CN_43iso=ProtData[where(abs(masses-43.037) eq min(abs(masses-43.037)) ),*]/0.0251
  METH_34iso=ProtData[where(abs(masses-34.036) eq min(abs(masses-34.036)) ),*]/0.0116

  MBO_42iso=MBO_42iso*0.000001
  METH_34iso=METH_34iso*0.00001
  TotSIGiso=    METH_34iso +    CH3CN_43iso +    Acetal_46iso +     Ace_60iso +    MBO_88iso +     MBO_70iso +      MBO_42iso +    MVK_72iso +    MEK_74iso +    Ben_80iso +$
    Xyl_108iso +    TMB_122iso +     Pin_138iso +       Pin_82iso +   benzF3_134iso + benzCl3_182iso +  D3_225iso +    D3_209iso +    D4_299iso +    D4_283iso +$
    D5_374iso +     D5_358iso




  mTOz=[33,42,45,59,87 ,    69 , 41,71 ,73 , 79 ,    107, 121, 137,81 ,133 ,    181, 223,207, 297,281 ,$
    371 ,355,-1,-1,-1,    -1,-1 ,-1,19,37,     39,34,43,46,60, 88,70, 42,72,74 ,$
    80, 108,122,138,82,134 ,182, 225,209, 299, 283, 374, 358,-1,-1,-1,78,32,120,106 ]
  compounds=['METH_33',   'CH3CN_42',   'Acetal_45',    'Ace_59',   'MBO_87',    'ISO/MBO_69',     'ISO/MBO_41',   'MVK_71',   'MEK_73',   'Ben_79',$
    'Xyl_107',   'TMB_121',    'MT_137',      'MT_81',   'benzF3_133','benzCl3_181','D3_223',   'D3_207',   'D4_297',   'D4_281',$
    'D5_371',    'D5_355',     'TotSIG',       'FCinlet',  'reltime',   'TotSIGiso',  'prim',     'Tdrift',   'I19',      'I37',$
    'I39', 'METH_34iso','CH3CN_43iso','Acetal_46iso','Ace_60iso','MBO_88iso',' MBO_70iso',' MBO_42iso','MVK_72iso','MEK_74iso','Ben_80iso',$
    'Xyl_108iso','TMB_122iso','Pin_138iso','Pin_82iso','benzF3_134iso','benzCl3_182iso','D3_225iso','D3_209iso','D4_299iso',' D4_283iso',$
    'D5_374iso','D5_358iso','Udx','pdrift','Udrift','BEN_78','I32','TMB_120','XYL_106']
  isotopecor=[1.01,1.02,1.02,1.03,1.06,1.06,1.03,1.05,1.05,1.07,1.09,1.1,1.12,1.07,1.07,2.48,1.37,1.36,1.52,1.51,1.69,1.67,1,1,1,1,1,1]

  RRK=[2.2,2.5+0.9, 3.03,  3.25, 2.68,  2.68, 2.68, 3.53, 3.25, 1.97, 2.31,  2.4,  2.45, 2.45,   2.46*1.0,  2.88,  2.59,  2.59,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
  RRK=[2.2,2.6+0.5, 3.03,  3.25, 2.68,         2.68, 2.68, 3.53, 3.25, 1.97,       2.31,  2.4,  2.45, 2.45,   2.46*1.1,        2.88,  2.59,  2.59,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
  RRK=[2.2/1.3,2.6+0.5, 3.03,  3.25, 2.68/1.45,         2.68/1.45, 2.68/1.45, 3.53/1.3, 3.25, 1.97,       2.31,  2.4,  2.45/1.2, 2.45/1.2,   2.46,        2.88/1.2,  2.59/1.2,  2.59/1.2,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9


  VMRppmNPL=[1.019,1.020,1.001,0.983,0.996,0.996,0.996,0.961,1.009,1.025,0.998,1.001,0.989,0.989,1.047,0,0,0,0.901,0.901,1.051,1.051,4,0,0,0,0,0]
  VMRppmAR=[1.011,1.01,1.111,0.967,0.998,0.998,0.998,0.937,1.017,1.006,0.983,0.989,0.983,0.983,1.032,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]
  VMRppmAR=[1.011,1.01,  0.6 ,0.967,0.998,0.998,0.998,0.55 ,1.017,1.006,0.983,0.989,0.983,0.983,1.2  ,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]
  VMRppmNPL2=[0.105,0.105,0.104,0.102,0.102,0.102,0.102,0.098,0.103,0.106,0.109,0.101,0.103,0.103,0.106,0.103,0.095,0.095,0,0,0.101,0.101,4,0,0,0,0,0]

  CompARR=[METH_33, CH3CN_42, ACETAL_45, ACE_59, MBO_87 ,$
    MBO_69 , MBO_41,MVK_71 ,MEK_73 ,BEN_79 ,$
    XYL_107, TMB_121, Pin_137,Pin_81 ,benzF3_133 ,$
    benzCl3_181, D3_223, D3_207, D4_297,D4_281 ,$
    D5_371 ,D5_355, TotSIG, transpose((FCinlet-FCinlet)+Flow), transpose(reltime),$
    TotSIGiso,transpose(prim) ,transpose(Tdrift),I19,I37,$
    I39,METH_34iso,CH3CN_43iso,Acetal_46iso,Ace_60iso, MBO_88iso,MBO_70iso, MBO_42iso,MVK_72iso,MEK_74iso ,$
    Ben_80iso, Xyl_108iso,TMB_122iso,Pin_138iso,Pin_82iso,benzF3_134iso ,benzCl3_182iso, D3_225iso,D3_209iso, D4_299iso, D4_283iso,$
    D5_374iso, D5_358iso ,transpose(Udx),transpose(pdrift),transpose(Udrift),BEN_78,I32,TMB_120,XYL_106]

  i_Tdrift=27
  i_Udx=53
  i_pdrift=54
  i_Udrift=55


  ;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;    Find Injections
  ;;;;;;;;;;;;;;;;;;;;;;;;;;

  LongDUR=10
  tims=0
  timmax=0
  timend=0
  sigmax=0
  SearchStart=1
  SearchEnd=0

  data=ACE_59
  data=data-smooth(data, round(10/timestep))+quantile(data,0.1) ;;added in Dec 2019 to correct for major offset in Sonnblick 2019 data
  dataSTR='ACE_59'
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 and abs(min(ProtEngData[*,0])-3184.484) lt 0.2) then  data=MEK_73 ; VOCUS Calib 20 sep
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 and abs(min(ProtEngData[*,0])-3184.484) lt 0.2) then  dataSTR='MEK_73' ; VOCUS Calib 20 sep

   if(strpos(ComputerID,'50b4c522-8345-4094-bb5d-683484b5253e') gt -0.5 and abs(min(ProtEngData[*,0])-3190.6) lt 0.2) then  data=benzF3_133 ; UHEL Calib 26 sep
  if(strpos(ComputerID,'50b4c522-8345-4094-bb5d-683484b5253e') gt -0.5 and abs(min(ProtEngData[*,0])-3190.6) lt 0.2) then  dataSTR='benzF3_133' ; UHEL Calib 26 sep

  if(strlen(ComputerID) eq 0 ) then  data=CH3CN_42 ; Harvard
  if(strlen(ComputerID) eq 0 ) then  dataSTR='CH3CN_42' ; Harvard



  mini=quantile(data,0.1)
  midi=quantile(data,0.4)

  
  if(strpos(ComputerID,'nix') gt -0.5 and abs(min(ProtEngData[*,0])-3788) lt 15) then  begin ; TOF1000 Orleans campaign in May 2019
    data=MBO_69 ; TOF1000 Orleans campaign in May 2019
    MPvalve=ProtEngData[*,where(strpos(engnames, 'Act') ge 0 and strpos(engnames, 'MPvalve') ge 0 )]
    data2=data[where(MPvalve lt 1.5)]
  mini=quantile(data2,0.1)
  midi=quantile(data2,0.6)
  endif  
  if(strpos(ComputerID,'nix') gt -0.5 and abs(min(ProtEngData[*,0])-3788) lt 15) then  dataSTR='ISO/MBO_69' ; TOF1000 Orleans campaign in May 2019

 

  i30s=ceil(0.5*max(d(data))/max(reltime))
  faktor2=2
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  faktor2=3 ; VOCUS  PTR-TOF
  step=1 ; for 0.5s cycles
 ;  step=0.5 ;for 1s cycles
  if(strlen(ComputerID) eq 0 ) then step=5
  print, [mini,midi,max(d(data)),step, faktor2, i30s]
  for i=3,max(d(data))-2 do begin
    if( SearchStart eq 1) then if(abs(data[i]-mini)/abs(data[i-2*step]-mini) gt 3) then if(data[i]gt faktor2*midi) then   begin
      tims=[tims,i]
      ; print, abs(data[i]-mini)/abs(data[i-1]-mini)
      istart=i
      mini=min([data[i-1*step],data[i-2*step],data[i-3*step] ])
      i=i+1+step-1
      SearchStart=0
      SearchEnd=1

    endif
    if(i gt i30s) then mininew=min(data[lindgen(i30s)+i-i30s])
    faktor=1.0
    if(strpos(ComputerID,'a5607e09-ea6a-4dc2-8b59-43e174eb06af') gt -0.5 and abs(min(ProtEngData[*,0])-3188.457) lt 0.2) then  faktor=1.3 ; Lancaster Calib 24 sep  PTR-TOF

    if(i gt i30s) then  if(mininew lt midi*faktor) then mini = mininew
    if( SearchEnd eq 1) then  if(abs(data[i-1*step]-mini)/abs(data[i]-mini) gt 1.5) then  if(data[i-1*step] gt midi ) then   begin
      ;  print, [i,abs(data[i-1]-mini)/abs(data[i]-mini)-1.5,data[i-1] - midi]
      timend=[timend,i]
      sigmax=[sigmax,max(data[istart:i])/midi]
      helpi=where((data[istart:i]) eq max(data[istart:i]))
      timmax=[timmax,istart+helpi[0]]
      ;   print, [i-istart,i,1.0*i/120,abs(data[istart]-mini)/abs(data[istart-1]-mini),data[istart],midi ,data[i-1] ,abs(data[i-1]-mini)/abs(data[i]-mini) ]
      i=i+1
      istart=istart+1
      ;   print, [i-istart,i, 1.0*i/120,abs(data[istart]-mini)/abs(data[istart-1]-mini),data[istart] ,midi,data[i-1] ,abs(data[i-1]-mini)/abs(data[i]-mini) ]
      ;    print, ''

      SearchStart=1
      SearchEnd=0

    endif
    ;i=i+step-1
  endfor


  tims=tims[1:*]
  timend=timend[1:*]
  sigmax=sigmax[1:*]
  timmax=timmax[1:*]

  ;fix:
  if(max(d(tims))-1 eq max(d(timend))) then timend=[timend,max(tims)+3]
  if(max(d(tims))-1 eq max(d(timend))) then sigmax=[sigmax,data[max(tims)+3]]
  if(max(d(tims))-1 eq max(d(timend))) then timmax=[timmax,max(tims)+1]

  injectiontimes=reltime[tims]
  injectiontimesEND=reltime[timend]

  duration=(injectiontimesEND-injectiontimes)*60  ; in seconds

  ;;;
  ; clean
  ;;;

  timsold=tims
  durationold=duration
  injectiontimesold=injectiontimes
  injectiontimesENDold=injectiontimesEND

  if(duration[0] lt LongDUR) then if(injectiontimes[1]*60-6 gt injectiontimesEND[0]*60) then begin
    tims[0]=-9999
    timend[0]=-9999
    injectiontimes[0]=-9999
    injectiontimesEND[0]=-9999
    duration[0]=-9999
  endif

  for i=1, max(d(tims))-2 do begin
    if(duration[i-1] lt LongDUR) then if(injectiontimesEND[i-1]*60+6 lt injectiontimes[i]*60) then  if(duration[i] lt LongDUR) then if(injectiontimes[i+1]*60-6 gt injectiontimesEND[i]*60) then begin

      tims[i]=-9999

      timend[i]=-9999
      injectiontimes[i]=-9999
      injectiontimesEND[i]=-9999
      duration[i]=-9999
    endif
  endfor


  if(duration[max(d(tims))-1] lt LongDUR) then if(injectiontimesEND[max(d(tims))-2]*60+6 lt injectiontimes[max(d(tims))-1]*60) then begin
    tims[max(d(tims))-1]=-9999
    timend[max(d(tims))-1]=-9999
    injectiontimes[max(d(tims))-1]=-9999
    injectiontimesEND[max(d(tims))-1]=-9999
    duration[max(d(tims))-1]=-9999
  endif


  ; clean short injections
  Shortsig=quantile(sigmax[where(duration lt LongDUR)],0.6)
  intex=where(duration lt LongDUR and sigmax lt Shortsig/5)
  if(max(intex) gt -0.5) then  begin
    tims[intex]=-9999
    timend[intex]=-9999
    injectiontimes[intex]=-9999
    injectiontimesEND[intex]=-9999
    duration[intex]=-9999
  endif
  ;  print, [transpose(string(timsold,format='(F8.1)')),transpose(string(durationold,format='(F8.1)')),transpose(string(injectiontimesold*60,format='(F8.1)')),transpose(string(injectiontimesENDold*60,format='(F8.1)')),transpose(string(tims,format='(F8.1)')),transpose(string(duration,format='(F8.1)')),transpose(string(injectiontimes*60,format='(F8.1)')),transpose(string(injectiontimesEND*60,format='(F8.1)')),transpose(string(sigmax,format='(F8.1)'))]




  tims=tims[where(tims gt -9999)]
  sigmax=sigmax[where(timend gt -9999)]
  timmax=timmax[where(timend gt -9999)]

  timend=timend[where(timend gt -9999)]
  injectiontimes=injectiontimes[where(injectiontimes gt -9999)]
  injectiontimesEND=injectiontimesEND[where(injectiontimesEND gt -9999)]
  duration=duration[where(duration gt -9999)]

  PREVdistance=[-9999,-60.0*(injectiontimes[0:max(d(tims))-2]-injectiontimes[1:*])]
  NEXTdistance=[60.0*(injectiontimes[1:*]-injectiontimes[0:max(d(tims))-2]),-9999]
  if(duration[0] gt LongDUR) then sequence=100 else sequence = 1
  for i=1,max(d(tims))-1 do begin
          if(duration[i] le LongDUR) then begin 
                  if (abs(PREVdistance[i]) lt 8.5) then begin
                          if (sequence[i-1] lt 99) then sequence=[sequence,sequence[i-1]+1] else sequence=[sequence,1] 
                  endif else begin
                          sequence=[sequence,1]
                  endelse
          endif else begin
                  sequence=[sequence,100]
          endelse
  endfor
  AnzInj=[sequence[where(sequence eq 1)-1],sequence[max(d(sequence))-1]]
  AnzInj=AnzInj[1:*]
  repair=where(AnzInj gt 5.5 and AnzInj lt 9.5)
  
  for x=0, max(d(repair))-1 do begin
          insert=10-AnzInj[repair[x]]
          strtind=-1
          lenn=max(d(tims))
          for s=0,repair[x] do strtind=strtind+AnzInj[s]
          if(strtind lt lenn-1) then tims=[tims[0:strtind],tims[strtind+1-insert:strtind],tims[strtind+1:*]] else tims=[tims[0:strtind],tims[strtind+1-insert:strtind]]
          if(strtind lt lenn-1) then sigmax=[sigmax[0:strtind],sigmax[strtind+1-insert:strtind],sigmax[strtind+1:*]] else sigmax=[sigmax[0:strtind],sigmax[strtind+1-insert:strtind]]
          if(strtind lt lenn-1) then timmax=[timmax[0:strtind],timmax[strtind+1-insert:strtind],timmax[strtind+1:*]] else timmax=[timmax[0:strtind],timmax[strtind+1-insert:strtind]]
          if(strtind lt lenn-1) then timend=[timend[0:strtind],timend[strtind+1-insert:strtind],timend[strtind+1:*]] else timend=[timend[0:strtind],timend[strtind+1-insert:strtind]]
          if(strtind lt lenn-1) then injectiontimes=[injectiontimes[0:strtind],injectiontimes[strtind+1-insert:strtind],injectiontimes[strtind+1:*]] else  injectiontimes=[injectiontimes[0:strtind],injectiontimes[strtind+1-insert:strtind]] 
          if(strtind lt lenn-1) then injectiontimesEND=[injectiontimesEND[0:strtind],injectiontimesEND[strtind+1-insert:strtind],injectiontimesEND[strtind+1:*]] else injectiontimesEND=[injectiontimesEND[0:strtind],injectiontimesEND[strtind+1-insert:strtind]]
          if(strtind lt lenn-1) then duration=[duration[0:strtind],duration[strtind+1-insert:strtind],duration[strtind+1:*]] else  duration=[duration[0:strtind],duration[strtind+1-insert:strtind]]
     
          if(strtind lt lenn-1) then sequence=[sequence[0:strtind],sequence[strtind+1-insert:strtind]+insert,sequence[strtind+1:*]] else sequence=[sequence[0:strtind],sequence[strtind+1-insert:strtind]+insert]
   
          AnzInj[repair[x]]=10
  endfor
  
  
  for i=0, max(d(tims))-1 do if(sequence[i] eq 10) then for j=0,9 do sequence[i-j]=10

  ; clean long injections
  Longsig=max(sigmax[where(sequence eq 100)])
  intex=where(sequence eq 100 and sigmax lt Longsig/10)
  if(max(intex) gt -0.5) then sequence[intex]=-9999




  if( max(where(sequence ne 10 and sequence ne 100  )) gt -0.5) then begin
    sequence[where(sequence ne 10 and sequence ne 100  )]=-9999
    tims=tims[where(sequence gt -9999)]
    timend=timend[where(sequence gt -9999)]
    injectiontimes=injectiontimes[where(sequence gt -9999)]
    injectiontimesEND=injectiontimesEND[where(sequence gt -9999)]
    duration=duration[where(sequence gt -9999)]
    sigmax=sigmax[where(sequence gt -9999)]
    timmax=timmax[where(sequence gt -9999)]
    sequence=sequence[where(sequence gt -9999)]

  endif


  injectSHORT=injectiontimes[where(duration lt 4)]
  injectSHORTend=injectiontimesEND[where(duration lt 4)]
  timsSHORT=tims[where(duration lt 4)]
  timsSHORTend=timend[where(duration lt 4)]

  injectLONG=injectiontimes[where(duration gt 4)]
  injectLONGend=injectiontimesEND[where(duration gt 4)]
  timsLONG=tims[where(duration gt 4)]
  timsLONGend=timend[where(duration gt 4)]


step=0.5/timestep
  CompCUB=dblarr(max(d(injectSHORT)),max(d(compounds)),ceil(15*step)) ; 12 injections, 23 ions, 15 cycles
  for i=0,max(d(timsSHORT))-1 do CompCUB[i,*,*]=CompARR[*,indgen(ceil(15*step))-ceil(5*step)+timsShort[i]]
  ;  counts=total(compCUB[*,*,step*[4,5,6,7,8,9,10,11]],3)
  ;countsBG=8*total(compCUB[*,*,step*[1,2,3,12,13]],3)/5

  counts=total(compCUB[*,*,[indgen(round(8*step))+round(4*step)]],3)*timestep; counts over 4s integration period
  countsBG=(float(round(8.0*step))/ceil(5*step))*total(compCUB[*,*,[indgen(ceil(3*step))+floor(1*step),indgen(round(2*step))+round(12*step+0.01)]],3)*timestep
print,'haha'

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;; S
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;   Cylinder: CC502781
  ;Cylinder Test Date: 02/14
  ;Valve: Ceodeux 14/686691 SS CGA350
  ;Cylinder Pressure: 2000 psi @ 22 °C
  ;Analysis Date: April 12, 2016
  ;Multi-component calibration mix
  ;Compound CAS# Concentration (ppb) Uncertainty
  ;
  ;Acetaldehyde 75-07-0         1111 ±5%
  ;Methanol 67-56-1        1011 ±5%
  ;Acetone 67-64-1 967 ±5%
  ;Acetonitrile 75-05-8 1010 ±5%
  ;Methyl Vinyl Ketone 78-94-4 937 ±5%
  ;Methyl Ethyl Ketone 78-93-3 1017 ±5%
  ;2-Methyl-3-Buten-2-ol 115-18-4 998 ±5%
  ;Benzene 71-43-2 1006 ±5%
  ;1,2,3-Trifluorobenzene 367-23-7 1032 ±5%
  ;Hexamethylcyclotrisiloxane (D3) 541-05-9 992 ±5%
  ;m-Xylene 108-38-3 983 ±5%
  ;alpha-Pinene 80-56-8 983 ±5%
  ;Octamethylcyclotetrasiloxane (D4) 556-67-2 995 ±5%
  ;1,3,5-Trimethylbenzene 108-67-8 989 ±5%
  ;Decamethylcyclopentasiloxane (D5) 541-02-6 995 ±5%
  ;1,2,4-Trichlorobenzene 120-82-1 995 ±5%

 
  ;propane 0.981 0.015
  ;ethanol 0.965 0.024
  ;
  ;methanol 1.019 0.031
  ;acetonitrile 1.020 0.031
  ;acetaldehyde 1.001 0.030
  ;acetone 0.983 0.020
  ;isoprene 0.996 0.020
  ;3-buten-2-one (MVK) 0.961 0.029
  ;butan-2-one (MEK) 1.009 0.030
  ;benzene 1.025 0.015
  ;m-xylene 0.998 0.025
  ;1,2,4-TMB 1.001 0.025
  ;1,2,4-trifluorobenzene 1.047 0.052
  ;3-carene 0.989 0.025
  ;D4-siloxane 0.901 0.045
  ;D5-siloxane 1.051 0.053
  
  
  
  if(min(ProtEngData[*,0]) lt 3186.0 or min(ProtEngData[*,0]) gt 3194.0 ) then VMRppm=VMRppmAR
  if(min(ProtEngData[*,0]) ge 3186.0  and min(ProtEngData[*,0]) le 3194.0 ) then VMRppm=VMRppmNPL
  if(min(ProtEngData[*,0]) ge 3788.67  and min(ProtEngData[*,0]) le 3788.68 ) then VMRppm=VMRppmNPL2
  if(min(ProtEngData[*,0]) ge 3788.65  and min(ProtEngData[*,0]) le 3788.66 ) then VMRppm=VMRppmAR
  if(min(ProtEngData[*,0]) ge 3792.01  and min(ProtEngData[*,0]) le 3793.99 ) then VMRppm=VMRppmNPL2
  if(min(ProtEngData[*,0]) lt 4005.0 or min(ProtEngData[*,0]) gt 3800.0 ) then VMRppm=VMRppmNPL2

   VMRppm[where(VMRppm eq 0)]=1e5
  en=fltarr(22)
  for i=0,21 do  en[i]=1e-6*VMRppm[i]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  Fmol=(Flow)/(60.0*1000.0*22.4) ; unit is mol/s
  d_d=9.6
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  d_d=10; estimated based on E/N of 160 Td, VOCUS  PTR-TOF
  p_d=mean(counts[indgen(10),i_pdrift]/4)
  E_d=(mean(counts[indgen(10),i_udrift]/4)+mean(counts[indgen(10),i_udx]/4))/d_d
  T_d=mean(counts[indgen(10),i_Tdrift]/4)+273.15
  t_react=(d_d*p_d*273.15)/(E_d*T_d*2.7*1013.25)
  if(strlen(ComputerID) eq 0 ) then t_react=0.0035 ; harvard

   sensitivities=fltarr(22)
  for i=0,21 do sensitivities[i]=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[i]/1013.25)


  ADD40=0
  if(strmatch(strtrim(strmid(name,strpos(name,'\',/reverse_search)+1,1000),2),'2017.09.20-13h21m39s_calib_rupert_1s.h5') eq 1) then ADD40=40


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;        TRANSMISSION retrieve initial best EX
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

AnzSeq=round(max(d(tims))/10)
MMLL=fltarr(AnzSeq)
WWLL=fltarr(AnzSeq)
MMHH=fltarr(AnzSeq)
WWHH=fltarr(AnzSeq)
exex=fltarr(AnzSeq)

for pp=0,AnzSeq-1 do begin
  
  
  ADD40=pp*10

  MASSlow=10
  WIDTHlow=2
  MASShigh=1000
  WIDTHhigh=10
  ex=0.5




  window,28, xsize = 500, ysize=400
  !P.MULTI = [0,1,1]
  loadct,20



  DELTAex=0.01
  EXrange=[0,2]
  field=fltarr(201)
  scoreee=1e10
  bestEX=0.5

  NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/medium)
  essen=fltarr(22)
  for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
  xx=[59,69,71,73,79,107,121,133,137,223,297,355]
  set=[essen[3]/sensitivities[3],(essen[5]+essen[6])/sensitivities[5],essen[7]/sensitivities[7],essen[8]/sensitivities[8],essen[9]/sensitivities[9], $
    essen[10]/sensitivities[10],essen[11]/sensitivities[11],essen[14]/sensitivities[14],(essen[12]+essen[13])/sensitivities[12]]
  if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then begin ;VOCUS
    set1=set[[0,2,3,5,6,8]]
    xx=xx[[0,2,3,5,6,8]]
    fiiil=where(set1 ne max(set1[1:5]) and set1 ne min(set1[1:5]))
  endif else begin
    set1=set[[0,1,2,3,4,5,6,7,8]]
    xx=xx[[0,1,2,3,4,5,6,7,8]]
    fiiil=where(set1 ne max(set1[1:8]) and set1 ne min(set1[1:8]))
  endelse



  for dEX=0,200 do begin
    ex=DELTAex*dEX
    NC=calcNC(ex, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/medium)
    essen=fltarr(22)
    for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
    cols=[10,10,10,10,10,   100,100,100,100,100,   175,175,175,175,175, 250,250,250,250,250,250,250,250,250]
    xx=[59,69,71,73,79,107,121,133,137,223,297,355]
    set=[essen[3]/sensitivities[3],(essen[5]+essen[6])/sensitivities[5],essen[7]/sensitivities[7],essen[8]/sensitivities[8],essen[9]/sensitivities[9], $
      essen[10]/sensitivities[10],essen[11]/sensitivities[11],essen[14]/sensitivities[14],(essen[12]+essen[13])/sensitivities[12]]
    if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then begin ;VOCUS
      set1=set[[0,2,3,5,6,8]]
      xx=xx[[0,2,3,5,6,8]]
    endif else begin
      set1=set[[0,1,2,3,4,5,6,7,8]]
      xx=xx[[0,1,2,3,4,5,6,7,8]]
    endelse

    set=set1[fiiil]
    xx=xx[fiiil]
    set=set/max(set)
    slpe=linfit(xx,set, YFIT=fitti)
    good=mean(abs(set-fitti))
    int=slpe[0]
    slpe=1000*abs(slpe[1])

    slpe=abs(max(set[where(xx lt 74)])-max(set[where(xx gt 120)]))
    if(slpe lt scoreee) then begin
      scoreee=slpe
      bestEX=ex
    endif
    if (dEX eq 0) then  plot,xx, set, xrange=[50,150], background=0,color=-1

    oplot,xx, set, color=200
    if(dEX eq 0) then print, 'ex slope(tar=0) differenceSET_FIT(tar=min) intersept(tar=1) meanSET(tar=1) stdevSET(tar=0) masses'
    print, string([ex,slpe,good,int,mean(set),stddev(set),xx],format='(f10.5)')
    oplot,xx, set, color=100
  endfor
  ;bestEX=0.5

  xyouts,0.2,0.5,'Best ex='+strtrim(string(bestEX,format='(f8.3)'),2),/norm,charsize=4,charthick=3,color=-100



  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;        TRANSMISSION retrieve best LOW filter
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  bestEXold=-9999
  while (abs(bestEXold-bestEX) gt 0.02) do begin
    DELTAm=0.5
    if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then DELTAm=0.05 ;VOCUS
    Mrange=[0,50]
    Wrange=[0,50]
    Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
    Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
    field=fltarr(dim1,dim2)
    for ML=0,dim1-1 do begin
      for WL=0,dim2-1 do begin
        masslow=min(Mrange)+deltam*ML
        widthlow=min(Wrange)+deltam*WL
        if(tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(59,bestex,10,2,1000,10) gt 0.98) then begin
          NC=calcNC(bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/low)
          NC[where(NC lt 0)]=0.001
          essen =fltarr(22)
          for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
          if(essen[1] gt sensitivities[1]) then xx42=essen[1]/sensitivities[1] else xx42=sensitivities[1]/essen[1]
          if(essen[2] gt sensitivities[2]) then xx45=essen[2]/sensitivities[2] else xx45=sensitivities[2]/essen[2]
          if(essen[3] gt sensitivities[3]) then xx59=essen[3]/sensitivities[3] else xx59=sensitivities[3]/essen[3]
          if(essen[7] gt sensitivities[7]) then xx71=essen[7]/sensitivities[7] else xx71=sensitivities[7]/essen[7]
          if(essen[8] gt sensitivities[8]) then xx73=essen[8]/sensitivities[8] else xx73=sensitivities[8]/essen[8]
        field[ML,WL]=mean([xx42,xx45,xx59,xx71,xx73])
        endif else field[ML,WL]=9999
      endfor
    endfor
    field=1/field
    maxi=max(field,/nan)
    field[where(field lt 0.98*maxi)]=field[where(field lt 0.98*maxi)]*0.5
    field[where(field lt 0.99*maxi)]=field[where(field lt 0.99*maxi)]*0.5
    field[where(field lt 0.995*maxi)]=field[where(field lt 0.995*maxi)]*0.5
    field[where(field gt 0.998*maxi)]=1
    window,26, xsize = dim1, ysize=dim2
    loadct,20
    tvscl, field
    WidthLow=0
    while (max(where(field[*,WidthLow] eq 1)) lt -0.5) do WidthLow=WidthLow+1
    MassLow=where(field[*,WidthLow] eq 1) & Masslow=Masslow[0]
    masslow=min(Mrange)+deltam*masslow
    widthlow=min(Wrange)+deltam*widthlow
    print, [Masslow,widthlow,MassHigh,Widthhigh]

   stoppi=0
    bestEXold=bestEX
    addi=0
    increase_prev=-1
    while(stoppi eq 0) do begin
      increase=0
      NC=calcNC(bestEX+addi, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/high)
      NC[where(NC lt 0)]=0.001
      essen =fltarr(22)
      for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
      if(essen[20]+essen[21] gt sensitivities[20]) then increase=increase+1
      if(essen[18]+essen[19] gt sensitivities[18]) then increase=increase+1
      if(essen[10] gt sensitivities[10]) then increase=increase+1
      if(essen[11] gt sensitivities[11]) then increase=increase+1
      if(essen[12]+essen[13] gt sensitivities[12]) then increase=increase+1
      if(essen[14] gt sensitivities[14]) then increase=increase+1
      if(increase ge 1.5) then  addi=addi+0.01
      if(increase le 0.5) then  addi=addi-0.01
      if(increase gt 0.5 and increase lt 1.5)  then   if(increase_prev gt increase)  then stoppi=1 else addi=addi-0.01
      if(increase_prev eq 0 and increase gt 1)  then   stoppi=1
      increase_prev=increase
    endwhile
    bestEXmist=max([bestEX+addi,0])
    bestEX=min([bestEXmist,2])
  print,[bestEXold,bestEX,abs(bestEXold-bestEX)]
    print,'haha'
  endwhile

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;        TRANSMISSION retrieve best HIGH filter
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  DELTAm=0.5
  Mrange=[150,600]
  Wrange=[30,300]
  Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
  Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
  field=fltarr(dim1,dim2)
  for MH=0,dim1-1 do begin
    for WH=0,dim2-1 do begin
      MASShigh=max(Mrange)-deltam*MH
      WIDTHhigh=min(Wrange)+deltam*WH
      if(tr(137,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(137,bestex,10,2,1000,10) gt 0.98) then begin

        NC=calcNC(bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/high)
        essen =fltarr(22)
        for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
        essen121= essen[11]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
        essen133= essen[14]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
        if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then essen133= essen[12]+essen[13]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
        essen297= essen[18]+essen[19]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
        essen371= essen[20]+essen[21]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
        sensitivity121=sensitivities[11]
        sensitivity133=sensitivities[14]
        if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then sensitivity133=sensitivities[12]
        sensitivity297=sensitivities[18]
        sensitivity371=sensitivities[20]

        prim19= mean(countsBG[indgen(10)+ADD40,28])/4
        prim37= mean(countsBG[indgen(10)+ADD40,29])/4
        if(WH eq 0 and MH eq 0) then begin
          if(mean(essen121) gt mean(essen133)) then begin
            essen_H1=essen121
            sensitivity_H1=sensitivity121
            HH1=1
          endif else begin
            essen_H1=essen133
            sensitivity_H1=sensitivity133
            HH1=2
          endelse
          if(mean(essen297) gt mean(essen371)*5) then begin
            essen_H2=essen297
            sensitivity_H2=sensitivity297
            HH2=1
          endif else begin
            essen_H2=essen371
            sensitivity_H2=sensitivity371
            HH2=2
          endelse
        endif

        if(HH2 eq 1) then begin
          essen_H2=essen297
          sensitivity_H2=sensitivity297
          essen_H3=essen297
          sensitivity_H3=sensitivity297
        endif else begin
          essen_H2=essen371
          sensitivity_H2=sensitivity371
          essen_H3=essen297
          sensitivity_H3=sensitivity297
        endelse
        if(HH1 eq 1) then begin
          essen_H1=essen121
          sensitivity_H1=sensitivity121
        endif else begin
          essen_H1=essen133
          sensitivity_H1=sensitivity133
        endelse




        if(essen_H1 gt sensitivity_H1) then xx_H1=essen_H1/sensitivity_H1 else xx_H1=sensitivity_H1/essen_H1
        if(essen_H2 gt sensitivity_H2) then xx_H2=essen_H2/sensitivity_H2 else xx_H2=sensitivity_H2/essen_H2
        if(essen_H3 gt sensitivity_H3) then xx_H3=essen_H3/sensitivity_H3 else xx_H3=sensitivity_H3/essen_H3
        if(xx_H1 lt 0.9) then begin
          print, 'hahha'
        endif
        if(xx_H2 lt 0.9) then begin
          print, 'hahha'
        endif


        sett=[max([xx_H1,0.9],/nan),max([xx_H2,0.9],/nan),max([xx_H3,0.9],/nan)]
        if(min(sett) eq 0.9) then begin
          sett=0.9
        endif else sett=max(sett)
        field[dim1-1-MH,WH]=sett
      endif else field[dim1-1-MH,WH]=9999

    endfor
  endfor
  field=1/field
  field[where(field gt 1)]=0
  maxi=max(field,/nan)
  window,31, xsize = dim1, ysize=dim2
  loadct,20
  tvscl, field
  indi=where(field eq maxi)
  MassHigh=max(indi mod dim1)
  Widthhigh=max((indi-MassHigh)/dim1)
  MASShigh=min(Mrange)+deltam*MASShigh
  WIDTHhigh=min(Wrange)+deltam*WIDTHhigh

  MMLL[pp]=Masslow
  WWLL[pp]=widthlow
  MMHH[pp]=MassHigh
  WWHH[pp]=Widthhigh
  exex[pp]=bestEX



endfor
Masslow=MMLL[0]
widthlow=WWLL[0]
MassHigh=MMHH[0]
Widthhigh=WWHH[0]
bestEX=exex[0]
Add40=0





  print, [Masslow,widthlow,MassHigh,Widthhigh]
  print,''
  MasslowOLD=Masslow
  widthlowOLD=widthlow
  MassHighOLD=MassHigh
  WidthhighOLD=Widthhigh
  MasslowOLD2=Masslow
  widthlowOLD2=widthlow
  MassHighOLD2=MassHigh
  WidthhighOLD2=Widthhigh




  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   CompARRtranse=CompARR
  for i=0,max(d(compounds))-1 do if (mTOz[i] ne -1) then CompARRtranse[i,*]=CompARR[i,*]/tr(mTOz[i],bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  PrimTR=CompARRtranse[29,*]+CompARRtranse[28,*]
  TotSigTR=CompARRtranse[0,*]
  for i=1,21 do  TotSigTR=TotSigTR+CompARRtranse[i,*]
  CompCUBtranse=CompCUB
  for i=0,max(d(timsSHORT))-1 do CompCUBtranse[i,*,*]=CompARRtranse[*,indgen(ceil(15*step))-ceil(5*step)+timsShort[i]]
   countsTR=total(compCUBtranse[*,*,[indgen(round(8*step))+round(4*step)]],3)*timestep; counts over 4s integration period
  countsBGTR=(float(round(8.0*step))/ceil(5*step))*total(compCUBtranse[*,*,[indgen(ceil(3*step))+floor(1*step),indgen(round(2*step))+round(12*step+0.01)]],3)*timestep
 


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;              END TRANSMISSION
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;










;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;; Xr
;;;;;;;;;;;;;;;;;;;;;;;;;;;
resultis=[0,0,0]
print, '           XR   |     stdev XR'

XRdata=fltarr(22,2)


oldold=1 ; old version based on Truman's work
if (oldold eq 1) then begin
  for j=0,22 do begin
    XRall=0
    for p=0,9 do begin
      XR=0
      for k=0,50 do begin
        counter=0
        classs=0
        if (k eq 0) then XR=0.0
        if (k eq 1) then XR=0.01
        if (k gt 1.5) then begin
          if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then XR=XRpre+(XRpre-XRprepre)*slopeprepre/(slopeprepre-slopepre)
          if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then begin
            XR=XRprepre+(XRpre-XRprepre)/2
            class=1
          endif
          if(classs eq 1) then counter=counter+1
          if(counter eq 1 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then increment=-0.1 else increment=0.1
          if(counter gt 1.5 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then increment=increment *(-0.1)
          if(counter gt 0.5) then  XR=XRpre+increment
        endif
        NCs=0
        CRs=0
        for i=0,AnzSeq-1 do begin

          m19=countsBGTR[p+10*i,28]
          m37=countsBGTR[p+10*i,29]
          cntss=countsTR[p+10*i,j]
          if(j eq 4) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
          if(j eq 5) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
          if(j eq 6) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
          if(j eq 12) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
          if(j eq 13) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
          if(j eq 16) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
          if(j eq 17) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
          if(j eq 18) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
          if(j eq 19) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
          if(j eq 20) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
          if(j eq 21) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]

          NCs=[NCs,cntss/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
          CRs=[CRs,100*m37/(m19+m37)]
        endfor
        CRs=CRs[1:*]
        NCs=NCs[1:*]
        CRs=CRs[[0,3,4]];only N2
        NCs=NCs[[0,3,4]];only N2

        fitp=linfit(CRs,NCs)
        if (k eq 0) then begin
          slopePre=fitp[1]
          XRpre=XR
        endif
        XRprepre=XRpre
        XRpre=XR
        slopePrepre=slopePre
        slopePre=fitp[1]
      endfor
      XRall=[XRall,XR]

    endfor
    XRall=XRall[1:*]
    print,[compounds[j], string([mean(XRall),stddev(XRall)],format='(F12.2)')]
    if(j lt 21.5) then XRdata[j,*]=[mean(XRall),stddev(XRall)]
  endfor
endif

if (oldold eq 0) then begin
  for j=0,22 do begin
    pN2_1=0
    pN2_2=0
    pAIR=0
    pN2_AIR=0
    pAIR_N2_1=0
    pAIR_N2_2=0
    XRall=0

    for xxx=0,100 do begin
      XR=-1.5+float(xxx)/10.0
      NCsall=[0,0,0,0,0]
      for p=0,9 do begin
        NCs=0
        for i=0,AnzSeq-1 do begin
          m19=countsBGTR[p+10*i,28]
          m37=countsBGTR[p+10*i,29]
          cntss=countsTR[p+10*i,j]
          if(j eq 4 or j eq 5 or j eq 6) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
          if(j eq 12 or j eq 13) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
          if(j eq 16 or j eq 17) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
          if(j eq 18 or j eq 19) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
          if(j eq 20 or j eq 21) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
          NCs=[NCs,cntss/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
        endfor
        NCs=NCs[1:*]
        NCsall=[[NCsall],[NCs]]
      endfor
      NCsall= NCsall[*,1:*]

      pvalue=TM_test(NCsall[0,*],NCsall[3,*])
      pN2_1=[pN2_1, pvalue[1]]
      pvalue=TM_test(NCsall[4,*],NCsall[3,*])
      pN2_2=[pN2_2, pvalue[1]]
      pvalue=TM_test(NCsall[1,*],NCsall[3,*])
      pN2_AIR=[pN2_AIR, pvalue[1]]


      pvalue=TM_test(NCsall[1,*],NCsall[2,*])
      pAIR=[pAIR, pvalue[1]]
      pvalue=TM_test(NCsall[0,*],NCsall[2,*])
      pAIR_N2_1=[pAIR_N2_1, pvalue[1]]
      pvalue=TM_test(NCsall[4,*],NCsall[2,*])
      pAIR_N2_2=[pAIR_N2_2, pvalue[1]]
      XRall=[XRall,XR]
    endfor
    pN2_1=pN2_1[1:*]
    pN2_2=pN2_2[1:*]
    pN2_AIR=pN2_AIR[1:*]
    pAIR=pAIR[1:*]
    pAIR_N2_1=pAIR_N2_1[1:*]
    pAIR_N2_2=pAIR_N2_2[1:*]


    XRall=XRall[1:*]
    !P.MULTI = [0,1,1]
    WINDOW, 4, xsize=750,ysize=500

    loadct,5

    plot, XRall,pN2_1,color=0,background=-1,  yrange=[0,1]
    oplot,XRall, pN2_1, color=40, thick=1
    oplot,XRall, pN2_AIR, color=20, thick=1
    oplot,XRall, pAIR_N2_1, color=109, thick=1
    oplot,XRall, pAIR_N2_2, color=150, thick=1
    oplot,XRall, pN2_2, color=50, thick=3
    oplot,XRall, pAIR, color=111, thick=1

    xyouts, 0,0.9, compounds[j],color=0, charthick=2
    resultis=[[resultis],[XRall[where(pN2_2 eq max(pN2_2))],XRall[where(pN2_1 eq max(pN2_1))], XRall[where(pAIR eq max(pAIR))]]]

    print, 'haha'
  endfor
  print, resultis

  print, 'haha'
endif

















;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;    SENS file
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;







  print, ''


  S_set3=[0,0,0,0,0]
  S_set2=[0,0,0,0,0]
  S_set3TR=[0,0,0,0,0]
  S_set2TR=[0,0,0,0,0]
  S_set3=intarr(AnzSeq)
  S_set2=intarr(AnzSeq)
  S_set3TR=intarr(AnzSeq)
  S_set2TR=intarr(AnzSeq)
 
  S_set=starttim
  Serr_set=starttim
  sensitivitiesCALC=fltarr(22)
  ncpsPERppbTR=fltarr(22,AnzSeq)
  ncpsPERppbTRxr=fltarr(22,AnzSeq)
  cpsPERppbRAW=fltarr(22,AnzSeq)
  KINSPECS=fltarr(20,AnzSeq)

  for j=0,22 do begin
    essen=fltarr(max(d(timsSHORT)))
    essen3=fltarr(max(d(timsSHORT)))
    essenTR=fltarr(max(d(timsSHORT)))
    essen3TR=fltarr(max(d(timsSHORT)))

    i2=0
    for i=0,max(d(timsSHORT))-1 do begin

      en1=1e-6*VMRppm[j]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
      factor1=tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
      factor2=tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
      primi= (countsBG[i,28]*factor1+countsBG[i,29]*factor2)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      if(j eq 9) then   primi= (countsBG[i,28]*factor1+0*countsBG[i,29]*factor2)/4; divide by 4 
      if(j eq 14) then   primi= (countsBG[i,28]*factor1+0*countsBG[i,29]*factor2)/4; divide by 4
      if(j eq 15) then   primi= (countsBG[i,28]*factor1+0*countsBG[i,29]*factor2)/4; divide by 4
  
     
     
      C=counts[i,j]-countsBG[i,j] ; total signal of an injection (independent of integration interval). Unit is 'counts'.
      NC=C*1e6/primi ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
      Fmol=(Flow)/(60.0*1000.0*22.4) ; unit is mol/s
      es=NC*Fmol*1e-9/en1  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      es3=C*Fmol*1e-9/en1  ; UNIT cps/ppb
      essen[i2]= es
      essen3[i2]= es3

      if(j lt 21.5) then XR1=XRdata[j,0] else XR1=1
      if (XR1 lt-50 or XR1 gt 50) then XR1=1
      primiTR= (countsBGTR[i,28]+countsBGTR[i,29])/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      if(j eq 9) then    primiTR= (countsBGTR[i,28]+1*countsBGTR[i,29])/4; divide by 4
      if(j eq 14) then    primiTR= (countsBGTR[i,28]+1*countsBGTR[i,29])/4; divide by 4
      if(j eq 15) then    primiTR= (countsBGTR[i,28]+1*countsBGTR[i,29])/4; divide by 4
      primiTRxr= (countsBGTR[i,28]+XR1*countsBGTR[i,29])/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      CTR=countsTR[i,j]-countsBGTR[i,j] ; total signal of an injection (independent of integration interval). Unit is 'counts'.
      NCTR=CTR*1e6/primiTR ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
      NCTRxr=CTR*1e6/primiTRxr ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
      esTR=NCTR*Fmol*1e-9/en1  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      es3TR=NCTRxr*Fmol*1e-9/en1  ;UNIT ncps/ppb  (1E-9 to normalize to ppb) Xr corrected
      essenTR[i2]= esTR
      essen3TR[i2]= es3TR

      i2=i2+1

    endfor
    Sset2=[mean(essen[0:9])]
    Sset3=[mean(essen3[0:9])]
    Sset2TR=[mean(essenTR[0:9])]
    Sset3TR=[mean(essen3TR[0:9])]
    for k=1,AnzSeq-1 do Sset2=[Sset2, [mean(essen[10*k+0:10*k+9])]]
    for k=1,AnzSeq-1 do Sset3=[Sset3, [mean(essen3[10*k+0:10*k+9])]]
    for k=1,AnzSeq-1 do Sset2TR=[Sset2TR, [mean(essenTR[10*k+0:10*k+9])]]
    for k=1,AnzSeq-1 do Sset3TR=[Sset3TR, [mean(essen3TR[10*k+0:10*k+9])]]
    ;  print,[compounds[j], string(Sset2TR,format='(F12.2)'), string(Sset2,format='(F12.2)'),string(Sset3,format='(F12.2)')]
    S_set2=[[S_set2],[Sset2]]
    S_set=[S_set,[mean(essen)]]
    Serr_set=[Serr_set,stddev(essen)]
    if(j lt 21.5) then begin
      sensitivitiesCALC[j]=Sset2TR[0+ADD40/10]
      ncpsPERppbTR[j,*]=Sset2TR
      ncpsPERppbTRxr[j,*]=Sset3TR
      cpsPERppbRAW[j,*]=Sset3
    endif
  endfor

  sig19=fltarr(max(d(timsSHORT)))
  sig37=fltarr(max(d(timsSHORT)))
  sig19at59=fltarr(max(d(timsSHORT)))
  sig37at59=fltarr(max(d(timsSHORT)))
  r37to19=fltarr(max(d(timsSHORT)))
  r32to19=fltarr(max(d(timsSHORT)))
  BENZ78to79=fltarr(max(d(timsSHORT)))
  TMB120to121=fltarr(max(d(timsSHORT)))
  XYL106to107=fltarr(max(d(timsSHORT)))

  sigTTd=fltarr(max(d(timsSHORT)))
  sigppd=fltarr(max(d(timsSHORT)))
  sigUUd=fltarr(max(d(timsSHORT)))
  sigUUdx=fltarr(max(d(timsSHORT)))

  for i=0,max(d(timsSHORT))-1 do begin
    sig19[i]=countsBG[i,28]/4
    sig37[i]=countsBG[i,29]/4
    sig19at59[i]=countsBGTR[i,28]/4
    sig37at59[i]=countsBGTR[i,29]/4
    r37to19[i]=countsBGTR[i,29]/countsBGTR[i,28]
    r32to19[i]=countsBGTR[i,57]/countsBGTR[i,28]
    BENZ78to79[i]=countsTR[i,56]/countsTR[i,9]
    TMB120to121[i]=countsTR[i,58]/countsTR[i,11]
    XYL106to107[i]=countsTR[i,59]/countsTR[i,10]
    sigTTd[i]=counts[i,i_Tdrift]/4+273.15
    sigppd[i]=counts[i,i_pdrift]/4
    sigUUd[i]=counts[i,i_udrift]/4
    sigUUdx[i]=counts[i,i_udx]/4

  endfor

  Set19=[mean(sig19[0:9])]
  Set37=[mean(sig37[0:9])]
  Set19at59=[mean(sig19at59[0:9])]
  Set37at59=[mean(sig37at59[0:9])]
  Set37to19=[mean(r37to19[0:9])]
  Set32to19=[mean(r32to19[0:9])]
  Set78to79=[mean(BENZ78to79[0:9])]
  Set120to121=[mean(TMB120to121[0:9])]
  Set106to107=[mean(XYL106to107[0:9])]
  SetTTd=[mean(sigTTd[0:9])]
  Setppd=[mean(sigppd[0:9])]
  SetUUd=[mean(sigUUd[0:9])]
  SetUUdx=[mean(sigUUdx[0:9])]
  for k=1,AnzSeq-1 do   Set19=[Set19, [mean(sig19[10*k+0:10*k+9])]]
  for k=1,AnzSeq-1 do   Set37=[Set37, [mean(sig37[10*k+0:10*k+9])]]
  for k=1,AnzSeq-1 do   Set19at59=[Set19at59, [mean(sig19at59[10*k+0:10*k+9])]]
  for k=1,AnzSeq-1 do   Set37at59=[Set37at59, [mean(sig37at59[10*k+0:10*k+9])]]
  for k=1,AnzSeq-1 do   Set37to19=[Set37to19, [mean(r37to19[10*k+0:10*k+9])]]
  for k=1,AnzSeq-1 do   Set32to19=[Set32to19, [mean(r32to19[10*k+0:10*k+9])]]
  for k=1,AnzSeq-1 do   Set78to79=[Set78to79, [mean(BENZ78to79[10*k+0:10*k+9])]]
  for k=1,AnzSeq-1 do   Set120to121=[Set120to121, [mean(TMB120to121[10*k+0:10*k+9])]]
  for k=1,AnzSeq-1 do   Set106to107=[Set106to107, [mean(XYL106to107[10*k+0:10*k+9])]]
  for k=1,AnzSeq-1 do   SetTTd=[SetTTd, [mean(sigTTd[10*k+0:10*k+9])]]
  for k=1,AnzSeq-1 do   Setppd=[Setppd, [mean(sigppd[10*k+0:10*k+9])]]
  for k=1,AnzSeq-1 do   SetUUd=[SetUUd, [mean(sigUUd[10*k+0:10*k+9])]]
  for k=1,AnzSeq-1 do   SetUUdx=[SetUUdx, [mean(sigUUdx[10*k+0:10*k+9])]]
  SetEEd=(SetUUd+SetUUdx)/d_d
  Setttreact=(d_d*Setppd*273.15)/(SetEEd*SetTTd*2.7*1013.25)
  if(strlen(ComputerID) eq 0 ) then Setttreact=Setttreact*0.003/Setttreact ; harvard
  SetEoverN=(1e17*22400*1013.25*SetTTd*SetEEd)/(6.022E23*Setppd*273.15)
  KINSPECS[0,*]=set19
  KINSPECS[1,*]=Set37
  KINSPECS[2,*]=Set19at59
  KINSPECS[3,*]=Set37at59
  KINSPECS[4,*]=Set37to19
  KINSPECS[5,*]=Set32to19
  KINSPECS[6,*]=Set78to79
  KINSPECS[7,*]=Set120to121
  KINSPECS[8,*]=Set106to107
  KINSPECS[9,*]=SetTTd
  KINSPECS[10,*]=Setppd
  KINSPECS[11,*]=SetUUd
  KINSPECS[12,*]=SetUUdx
  KINSPECS[13,*]=SetEEd
  KINSPECS[14,*]=Setttreact
  KINSPECS[15,*]=SetEoverN

  print,''
  print, set19
  print, Set37
  print, Set19at59
  print, Set37at59
  print,''
  print, Set37to19
  print,''
  print, Set32to19
  print, Set78to79
  print, Set120to121
  print, Set106to107
  print,''
  print, SetTTd
  print, Setppd
  print, SetUUd
  print, SetUUdx
  print, SetEEd
  print, Setttreact
  print, SetEoverN
  
  ;;;; save data
  names=['sig19','sig37','sig19TR','sig37TR','R37/19TR',    'R32/19TR','R78/79TR','R120/121TR','R106/107TR','Tdrift',    'pdrift','Udrift','Udx','Efield','treact',    'EoverN','','','','', $
    'nS_33','nS_42','nS_45','nS_59','nS_87',    'nS_69','nS_41','nS_71','nS_73','nS_79',    'nS_107','nS_121','nS_137','nS_81','nS_133',    'nS_181','nS_223','nS_207','nS_297','nS_281',    'nS_371','nS_355',$
    'nSxr_33','nSxr_42','nSxr_45','nSxr_59','nSxr_87',    'nSxr_69','nSxr_41','nSxr_71','nSxr_73','nSxr_79',    'nSxr_107','nSxr_121','nSxr_137','nSxr_81','nSxr_133',    'nSxr_181','nSxr_223','nSxr_207','nSxr_297','nSxr_281',    'nSxr_371','nSxr_355',$
    'rawS_33','rawS_42','rawS_45','rawS_59','rawS_87',    'rawS_69','rawS_41','rawS_71','rawS_73','rawS_79',    'rawS_107','rawS_121','rawS_137','rawS_81','rawS_133',    'rawS_181','rawS_223','rawS_207','rawS_297','rawS_281',    'rawS_371','rawS_355']
  dataAA=[KINSPECS, ncpsPERppbTR, ncpsPERppbTRxr,cpsPERppbRAW]

  dataAA=[transpose(names),transpose(string(dataAA))]
  makecsv, path2+'SENS '+PTRid+'_'+Datumzeit+'.csv',dataAA


  

  mames=(['rangeClusterRatio','tr_mLOW_bestex','tr_wLOW','tr_mHIGH','tr_wHIGH',compounds[0:21]])
  dataAA=([transpose([min(Set37to19[[0,3,4]]),max(Set37to19[[0,3,4]])]),transpose([masslow,bestEX]),transpose([widthlow,0]),transpose([masshigh,0]),transpose([widthhigh,0]),[XRdata]])

  dataAA=[transpose(mames),transpose(string(dataAA))]
  makecsv, path2+'XRdat '+PTRid+'_'+Datumzeit+'.csv',dataAA

;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; FIGURE TRANSMISSION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WINDOW, 5, xsize=1150,ysize=500
!P.MULTI = [0,2,1]
!Y.oMARGIN = [2,1]
!X.oMARGIN = [5,5]
!Y.MARGIN = [2,1]
!x.MARGIN = [5,0]

DEVICE, DECOMPOSED = 0


;plot transe
loadct,5

plot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),color=0,ytitle="transmission",xtitle="m/Q",background=-1,charsize=2, thick =2, charthick=2

loadct,13

oplot,indgen(399)+1,(indgen(399)+1)^bestEX/(59)^bestEX
oplot,indgen(399)+1,tr(indgen(399)+1, bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/(indgen(399)+1)^bestEX,color=60



mmm=[33,42,45,59,69,71,73,79,107,121,137,133,181,223,297,371]
tansen=tr(mmm,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
;tansen=tansen/tansen
sense=sensitivities[[0,1,2,3,5,7,8,9,10,11,12,14,15,17,19,21]]

NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40)
essen=fltarr(22)
for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
senseCALC=[essen[0],essen[1],essen[2],essen[3],total(essen[4:6]),$
  essen[7],essen[8],essen[9],essen[10],essen[11],$
  total(essen[12:13]),essen[14],essen[15],total(essen[16:17]),$
  total(essen[18:19]),total(essen[20:21])]


For i=0,3  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
For i=4,11  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=60
For i=12,15  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
oplot, [mmm[10],mmm[10]], [0, tansen[10]*senseCALC[10]/sense[10]], thick=3, color=-1 ; plot m137 in red
loadct,5

xyouts,0.55,0.80,/normal,PTRid, color=0, charthick =3, charsize=2
xyouts,0.55,0.72,/normal,Datumzeit, color=0, charthick =3, charsize=2
xyouts,0.55,0.61,/normal,'Transmission parameters:  ', color=0, charthick =2, charsize=2
xyouts,0.55,0.53,/norm,'ex: '+strtrim(string(bestEX,Format='(F8.2)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.45,/norm,'mLOW: '+strtrim(string(MASSlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.40,/norm,'wLOW: '+strtrim(string(WIDTHlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.32,/norm,'mHIGH: '+strtrim(string(MASShigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.27,/norm,'wHIGH: '+strtrim(string(WIDTHhigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2

xyouts,0.55,0.19,/norm,'F37/F19: '+strtrim(string(Set37to19[ADD40],Format='(F8.3)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.14,/norm,'E/N: '+strtrim(string(SetEoverN[ADD40],Format='(I8)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.09,/norm,'Pd: '+strtrim(string(Setppd[ADD40],Format='(F8.2)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.04,/norm,'t_react: '+strtrim(string(1e6*Setttreact[ADD40],Format='(I8)'),2), color=0,charsize=2, charthick=2




ErrCode=0
CATCH, Error_status
IF Error_status NE 0 THEN BEGIN
  ErrCode=1
  if(ErrCode eq 1) then begin
    PRINT, 'Error index: ', Error_status
    PRINT, 'Error message: ', !ERROR_STATE.MSG
    PRINT, 'WRITE_JPG not possible (disabled) :-((('
    CATCH, /CANCEL
  endif
ENDIF
if (ErrCode eq 0) then   write_jpeg, path2+'TRANS '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
WDELETE, 5


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; FIGURE TRANSMISSION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WINDOW, 7, xsize=1400,ysize=900
!P.MULTI = [0,3,2]
!Y.oMARGIN = [4,4]
!X.oMARGIN = [8,4]
!Y.MARGIN = [3,1]
!x.MARGIN = [1,3]

DEVICE, DECOMPOSED = 0
cols=[110,50,70,175,160]
transis=fltarr(5,399)
for pp=0,AnzSeq-1 do transis[pp,*]=tr(indgen(399)+1,exex[pp], MMLL[pp],WWLL[pp],MMHH[pp],WWHH[pp],/norm)

for pp=0,AnzSeq-1 do begin
  
  ADD40=pp*10
  
  Masslow=MMLL[pp]
  widthlow=WWLL[pp]
  MassHigh=MMHH[pp]
  Widthhigh=WWHH[pp]
  bestEX=exex[pp]

;plot transe
loadct,5

plot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),yrange=[0,max(transis)],color=0,background=-1,charsize=2, thick =2, charthick=2
oplot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),color=cols[pp], thick =4

loadct,13

oplot,indgen(399)+1,(indgen(399)+1)^bestEX/(59)^bestEX
oplot,indgen(399)+1,tr(indgen(399)+1, bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/(indgen(399)+1)^bestEX,color=60



mmm=[33,42,45,59,69,71,73,79,107,121,137,133,181,223,297,371]
tansen=tr(mmm,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
;tansen=tansen/tansen
sense=sensitivities[[0,1,2,3,5,7,8,9,10,11,12,14,15,17,19,21]]

NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40)
essen=fltarr(22)
for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
senseCALC=[essen[0],essen[1],essen[2],essen[3],total(essen[4:6]),$
  essen[7],essen[8],essen[9],essen[10],essen[11],$
  total(essen[12:13]),essen[14],essen[15],total(essen[16:17]),$
  total(essen[18:19]),total(essen[20:21])]


For i=0,3  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
For i=4,11  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=60
For i=12,15  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
oplot, [mmm[10],mmm[10]], [0, tansen[10]*senseCALC[10]/sense[10]], thick=3, color=-1 ; plot m137 in red
loadct,5

xyouts,20,0.9*max([2,max(transis)]),'F37/F19: '+strtrim(string(Set37to19[pp],Format='(F8.3)'),2), color=0,charsize=1.5, charthick=2


endfor

plot, indgen(399)+1, transis[0,*],yrange=[0,max(transis)],color=0,background=-1,charsize=2, thick =2, charthick=2
for pp=0,4 do oplot, indgen(399)+1, transis[pp,*],color=cols[pp], thick =3
xyouts,0.72,0.26,/normal,'N2 dry', color=110,charsize=2,charthick=3
xyouts,0.72,0.225,/normal,'air dry', color=50,charsize=2,charthick=3
xyouts,0.72,0.19,/normal,'air wet', color=70,charsize=2,charthick=3
xyouts,0.72,0.155,/normal,'N2 wet', color=175,charsize=2,charthick=3
xyouts,0.72,0.12,/normal,'N2 dry', color=160,charsize=2,charthick=3

xyouts,0.82,0.18,/norm,'E/N: '+strtrim(string(SetEoverN[0],Format='(I8)'),2), color=0,charsize=1.5, charthick=2
xyouts,0.82,0.155,/norm,'Pd: '+strtrim(string(Setppd[0],Format='(F8.2)'),2), color=0,charsize=1.5, charthick=2
xyouts,0.82,0.13,/norm,'t_react: '+strtrim(string(1e6*Setttreact[0],Format='(I8)'),2), color=0,charsize=1.5, charthick=2

xyouts,0.30,0.97,/normal,PTRid+' '+Datumzeit, color=0, charthick =3, charsize=2
xyouts,0.48,0.03,/normal,'m/Q', color=0, charthick =3, charsize=2
xyouts,0.03,0.3,/normal,'transmission efficiency', orientation=90,color=0, charthick =3, charsize=2

ErrCode=0
CATCH, Error_status
IF Error_status NE 0 THEN BEGIN
  ErrCode=1
  if(ErrCode eq 1) then begin
    PRINT, 'Error index: ', Error_status
    PRINT, 'Error message: ', !ERROR_STATE.MSG
    PRINT, 'WRITE_JPG not possible (disabled) :-((('
    CATCH, /CANCEL
  endif
ENDIF
if (ErrCode eq 0) then   write_jpeg, path2+'allTRANS '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
WDELETE, 7
ADD40=0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; FIGURE basic parameters
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  WINDOW, 4, xsize=1150,ysize=700
  !P.MULTI = [0,1,3]
  !Y.MARGIN = [3,1]
  !x.oMARGIN = [8,8]
  DEVICE, DECOMPOSED = 0
  loadct,5
  plot,reltime,TotSIG,xstyle=1,yrange=[0,1.1*max([I19+I37,TotSIG])],ystyle=1,color=0,ytitle="raw signal [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  oplot, reltime,smooth( I19+I37,5),thick =2, color=185
 xyouts,0.4,0.920,/normal,'Autodetection of            and            of injections', color=0
  xyouts,0.5,0.920,/normal,'START', color=110
  xyouts,0.58,0.920,/normal,'END', color=175
  xyouts,0.11,0.887,/normal,'Primary ions: I19+I37', color=178, charthick =2, charsize=1.5
  xyouts,0.11,0.860,/normal,'Product ions: sum of compounds in standard', color=0, charthick =2, charsize=1.5
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max([I19+I37,TotSIG]),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max([I19+I37,TotSIG]),1e14], color=175
  loadct,6
  faktor3=max(TotSIG,/nan)/max(data,/nan)
  oplot,reltime,data*faktor3,color=126
  ; oplot,reltime,data,color=126,thick =1.5
  xyouts,0.11,0.833,/normal,'Single compound: '+Datastr+' (x '+strtrim(string(faktor3,format='(F10.1)'),2)+')', color=105, charthick =2, charsize=1.5
  loadct,5
  tr19=tr(19,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  tr37=tr(37,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  tr32=tr(32,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  plot,reltime, smooth(primTR+TotSIGTR,5),yrange=[0,max(primTR+TotSIGTR)],xstyle=1,ystyle=1,color=0,ytitle="(transmission) corrected signal [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  oplot,reltime, smooth(primTR+TotSIGTR,5),thick =2,color=126
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max(primTR+TotSIGTR),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max(primTR+TotSIGTR),1e14], color=175
  oplot, reltime, smooth(TotSIGTR,5),thick =2, color=0
  oplot, reltime,smooth( I19,5)/tr19,thick =2, color=35
  oplot, reltime, smooth(I37,5)/tr37,thick =2, color=50
  oplot, reltime, smooth(I32,5)/tr32*10,thick =2, color=109

  xyouts,0.11,0.60,/normal,'Total signal:Primary+product ions', color=126, charthick =2, charsize=1.5
  xyouts,0.11,0.57,/normal,'Product ions', color=0, charthick =2, charsize=1.5
  xyouts,0.11,0.54,/normal,'I19', color=35, charthick =2, charsize=1.5
  xyouts,0.11,0.51,/normal,'I37', color=50, charthick =2, charsize=1.5
  xyouts,0.11,0.48,/normal,'I32 (x10)', color=109, charthick =2, charsize=1.5

  mmmax=max([smooth( (I37*tr19)/(I19*tr37),5),smooth( (I32*tr19)/(I19*tr32),5)])
  plot,reltime, smooth( (I37*tr19)/(I19*tr37),5),yrange=[0,mmmax],xstyle=1,ystyle=1,color=0,ytitle="ion ratios",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max(smooth( (I37*tr19)/(I19*tr37),5)),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max(smooth( (I37*tr19)/(I19*tr37),5)),1e14], color=175

  oplot,reltime, smooth( (I32*tr19)/(I19*tr32),5),color=109, thick =1.5;, charthick=2
  xyouts,0.11,0.25,/normal,'I37 / I19 (transmission corrected)', color=0, charthick =2, charsize=1.5
  xyouts,0.11,0.22,/normal,'I32 / I19 (transmission corrected)', color=109, charthick =2, charsize=1.5

  xyouts,0.97,0.9,/normal,orientation=-90,PTRid+'  '+Datumzeit, color=0, charthick =3, charsize=2

  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then  write_jpeg, path2+'SEQ '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; FIGURE  Fast injections
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  WINDOW, 6, xsize=1600,ysize=800
  !P.MULTI = [0,8,3]
  ;  !x.oMARGIN=[]
  !Y.oMARGIN = [5,5]
  !x.oMARGIN = [10,10]
  !Y.MARGIN = [3,1]
  !x.MARGIN = [3,1]
  DEVICE, DECOMPOSED = 0
  loadct,5
  for j=0,21 do begin
    yrange=range(compCUB[*,j,*]/1000)
    cols=[intarr(10)+110,intarr(10)+50,intarr(10)+70,intarr(10)+175,intarr(10)+160,$
      0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    plot,timestep*(indgen(15*step)-5*step),compCUB[0,j,*]/1000,xstyle=1,ystyle=1,yrange=yrange,color=0,background=-1,charsize=2, thick =2;, charthick=2
    cnts=0
    for i=0,max(d(timsSHORT))-1 do begin
      oplot,timestep*(indgen(15*step)-5*step),compCUB[i,j,*]/1000, color=cols[i], thick=1
      cnts=[cnts, counts[i,j]-countsBG[i,j]]
    endfor
    cnts=cnts[1:*]
    set=fltarr(10)
     for k=0,AnzSeq-1 do begin
      set[k*2]=mean(cnts[10*k+0:10*k+9])
      set[k*2+1]=100*stddev(cnts[10*k+0:10*k+9])/mean(cnts[10*k+0:10*k+9])
    endfor
    ;print,[ mean(set[[0,2,4,6,8]]),mean(set[[1,3,5,7,9]]),  stddev(set[[1,3,5,7,9]])]
    xyouts,-2,max(yrange)*0.9,compounds[j],color=0,charsize=1.5,charthick=1.5
    xyouts,-2,max(yrange)*0.8,string(VMRppm[j]*1000*dil,format='(F5.1)'),color=0,charsize=1.5,charthick=1.5
    xyouts,2,max(yrange)*0.8,string(set[1],format='(F4.1)')+'%',color=110,charthick=2
    xyouts,2,max(yrange)*0.7,string(set[3],format='(F4.1)')+'%',color=50,charthick=2
    xyouts,2,max(yrange)*0.6,string(set[5],format='(F4.1)')+'%',color=70,charthick=2
    xyouts,2,max(yrange)*0.5,string(set[7],format='(F4.1)')+'%',color=175,charthick=2
    xyouts,2,max(yrange)*0.4,string(set[9],format='(F4.1)')+'%',color=160,charthick=2
  endfor
  xyouts,0.85,0.21,/normal,PTRid,color=1,charsize=1.5,charthick=2
  datum=strmid(datumzeit,0,strpos(datumzeit,'-'))
  xyouts,0.85,0.18,/normal,Datum,color=1,charsize=1.5,charthick=2
  Zeit=strmid(datumzeit,1+strpos(datumzeit,'-'),1000)
  xyouts,0.85,0.15,/normal,Zeit,color=1,charsize=1.5,charthick=2
  xyouts,0.76,0.25,/normal,'N2 dry', color=110,charsize=1.5,charthick=1.5
  xyouts,0.76,0.225,/normal,'air dry', color=50,charsize=1.5,charthick=1.5
  xyouts,0.76,0.20,/normal,'air wet', color=70,charsize=1.5,charthick=1.5
  xyouts,0.76,0.175,/normal,'N2 wet', color=175,charsize=1.5,charthick=1.5
  xyouts,0.76,0.15,/normal,'N2 dry', color=160,charsize=1.5,charthick=1.5

  xyouts,0.4,0.05,/normal,'time in seconds', color=1,charsize=1.5,charthick=1.5
  xyouts,0.04,0.43,/normal,'signal in kcps',orientation=90, color=1,charsize=1.5,charthick=1.5

  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then  write_jpeg, path2+'INJ '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  WDELETE, 6
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  print, 'end'
  return, create_struct('Fptr', [1,1,1], 'S_nam', ['time', compounds[0:21]], 'S_val',S_set[0:22], 'Serr_val',Serr_set[0:22])
end




function ActrisProtocol_PICAB, path,name,ProtData,masses, ProtEngData , engnames, computerID ;PICAB

  ;email Alex March 29, 2018:
  ;According to our notes, zero-air dilution flow was 5 slpm. I replicated figures 3 and 4 from the paper, please find them attached. PTR3 is not very
  ;sensitive to acetaldehyde, benzene, xylene, trimethylbenzene, trifluorobenzene and trichlorobenzene, so I didn't include these species in my version
  ;of figure 3. I guess we could just write a note in the figure caption saying that the instrument is not sensitive to certain compounds. I also attach
  ;sensitivity data I calculated for the figures (cps/ppb in dry air for all compounds and cps/ppb, ncps/ppb for acetone) in case you need it.

  ;Also, here are the operating conditions of the instrument:
  ;p_drift = 69 mbar
  ;T_drift = 30 degrees C
  ;E/N varied from 50-77 Td
  ;Please find attached a table with p_drift, T_drift and E/N (for calibrations from Sept 20-Sept 27) which could be shown in the first row of figure 4.
  ;
  ;email Martin Oct 31, 2017:
  ; This is tricky. Pressure = 70.0 mbar, but time is unknown. It is approx. 3 ms, but entirely defined by the flow and how the (laminar) flow profile develops
  ; after the critical orifice. We therefore assume that MEK (m73) or MVK (m71) is transmitted with a duty-cycle-like efficiency, Then we measure relative
  ; transmission of our primary ions to these masses. Then we know primary ions and with the k-rates we calculate reaction time.
  ;
  ; Appendif E (from alex states t=3.5+/- 0.5 ms. So, I use this value in the code




  helpi=1
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    helpi=0
    CATCH, /CANCEL
  ENDIF


  if (helpi eq 1) then begin
    file_id=H5f_open(name)
    n_attr=H5A_GET_NUM_ATTRS(file_id)
    ComputerID='nix'
    for j=0,n_attr-1 do if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(file_id,j)),'Computer ID') gt -0.5) then  ComputerID=H5A_read( H5A_OPEN_IDX(file_id,j))
    H5f_close, file_id
  endif else ComputerID='QMS_LSCE'



  T_FC=31
  Fcal=200
  if(max(protengdata[0]) gt 3770) then Fcal=240.0*298/273

  Fplus=0
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  Fcal=2000 ; VOCUS  PTR-TOF
  if(strlen(ComputerID) eq 0 ) then begin
    Fcal=2000
    Fplus=5000*298/273 ;Harvard
  endif
  Flow=float(Fcal)*273/298+Fplus+9.6



  Dil=(9.6*273/(273+T_FC))/Flow
  T_loop=273+100

  ;if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 and abs(min(ProtEngData[*,0])-3186.4) lt 0.2) then  masses=[masses[1:*],9999] ; Juelich PTR-TOF

  Path2=path+'STD_PROT/'
  mmist=file_info(path2)
  if (mmist.directory eq 0) then begin
    FILE_MKDIR, path2
  endif
  starttim=min(ProtEngData[*,0])
  reltime=(ProtEngData[*,0]-min(ProtEngData[*,0]))*24*60
  hilfi=strmid(strmid(path2,strpos(path2,'\')+1,1000),1+strpos(strmid(path2,strpos(path2,'\')+1,1000),'\'))
  PTRid=strmid(hilfi,0,strpos(hilfi,'\') )
  Datumzeit=t09str(ProtEngData[0])

  ; convert cps to counts
  timestep=max(reltime)*60/max(d(reltime))
  ;ProtData=ProtData*timestep


  I19=ProtData[where(abs(masses-19.017) eq min(abs(masses-19.017)) ),*]
  I21=ProtData[where(abs(masses-21.022) eq min(abs(masses-21.022)) ),*]
  I37=ProtData[where(abs(masses-37.028) eq min(abs(masses-37.028)) ),*]
  I38=ProtData[where(abs(masses-38.033) eq min(abs(masses-38.033)) ),*]
  I39=ProtData[where(abs(masses-39.033) eq min(abs(masses-39.033)) ),*]
  I34=ProtData[where(abs(masses-33.994) eq min(abs(masses-33.994)) ),*]
  I32=ProtData[where(abs(masses-31.989) eq min(abs(masses-31.989)) ),*]
  I32[where(I32 gt 6000)]=I34[where(I32 gt 6000)]*242

  if( max(I19) gt 5000) then I19=I21*487
  I37[where(I37 lt I38 *645)]=I38[where(I37 lt I38 *645)]*645
  ; if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 ) then    I37[where(I37 lt I39 *242)]=I38[where(I37 lt I38 *242)]*242  ; Juelich PTR-TOF


  Prim=reform(I19+I37)


  F37=I37/prim
  F32=I34*242/prim

  Pdrift=ProtEngData[*,where(strpos(engnames,'p-Drift') gt -0.5)] & Pdrift=Pdrift[*,0]

  H2Oscc=ProtEngData[*,where(strpos(engnames,'H2O scc')  gt -0.5 or strpos(engnames,'H2O[scc')  gt -0.5)] & H2Oscc=H2Oscc[*,0]
  Udrift=ProtEngData[*,where(strpos(engnames,'Udrift') gt -0.5)] & Udrift=Udrift[*,0]
  Udx=ProtEngData[*,where(strpos(engnames,'Udx') gt -0.5)] & Udx=Udx[*,0]
  FCinlet=ProtEngData[*,where(strpos(engnames,'FCinlet') gt -0.5)] & FCinlet=FCinlet[*,0]
  Tdrift=ProtEngData[*,where(strpos(engnames,'T-Drift') gt -0.5 )] & Tdrift=Tdrift[*,0]
  if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 ) then  Tdrift=ProtEngData[*,-1]+60   ; Juelich PTR-TOF
  PC=ProtEngData[*,where(strpos(engnames,'PC mba') gt -0.5 or strpos(engnames,'PC[mba')  gt -0.5)] & PC=PC[*,0]

  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  begin  ; VOCUS  PTR-TOF
    Pdrift=ProtEngData[*,where(strpos(engnames,'SSQ pressure monitor [mbar]') gt -0.5)] & Pdrift=Pdrift[*,0]
    Tdrift=ProtEngData[*,where(strpos(engnames,'TOF temp monitor') gt -0.5 )]
    Udrift=ProtEngData[*,where(strpos(engnames,'Spare 1 monitor [V]') gt -0.5)] & Udrift=Udrift[*,0]-25
  endif   ; VOCUS  PTR-TOF
  if(strlen(ComputerID) eq 0 ) then begin ;PTR3
    Tdrift=ProtEngData[*,where(strpos(engnames,'TPS body temp monitor') gt -0.5)] & Pdrift=Pdrift[*,0]
    Pdrift=ProtEngData[*,where(strpos(engnames,'REAC   sensor: APR/CMR') gt -0.5)] & Pdrift=Pdrift[*,0]
  endif

  D5_355=ProtData[where(abs(masses-355.07) eq min(abs(masses-355.07)) ),*]*1.67
  D5_371=ProtData[where(abs(masses-371.102) eq min(abs(masses-371.102)) ),*]*1.69
  if( min(abs(masses-371.102)) gt 1) then  D5_371= D5_371/1000
  if( min(abs(masses-355.07)) gt 1) then  D5_355= D5_355/1000
  D4_297=ProtData[where(abs(masses-297.083) eq min(abs(masses-297.083)) ),*]*1.52
  D4_281=ProtData[where(abs(masses-281.052) eq min(abs(masses-281.052)) ),*]*1.51
  D3_223=ProtData[where(abs(masses-223.064) eq min(abs(masses-223.064)) ),*]*1.37
  D3_207=ProtData[where(abs(masses-207.033) eq min(abs(masses-207.033)) ),*]*1.36
  benzCl3_181=ProtData[where(abs(masses-180.938) eq min(abs(masses-180.938)) ),*]*2.48
  benzF3_133=ProtData[where(abs(masses-133.026) eq min(abs(masses-133.026)) ),*]*1.07
  Pin_137=ProtData[where(abs(masses-137.132) eq min(abs(masses-137.132)) ),*]*1.12
  Pin_81=ProtData[where(abs(masses-81.07) eq min(abs(masses-81.07)) ),*]*1.07
  TMB_121=ProtData[where(abs(masses-121.101) eq min(abs(masses-121.101)) ),*]*1.10
  XYL_107=ProtData[where(abs(masses-107.086) eq min(abs(masses-107.086)) ),*]*1.09
  BEN_79=ProtData[where(abs(masses-79.054) eq min(abs(masses-79.054)) ),*]*1.07
  MEK_73=ProtData[where(abs(masses-73.065) eq min(abs(masses-73.065)) ),*]*1.05
  MVK_71=ProtData[where(abs(masses-71.049) eq min(abs(masses-71.049)) ),*]*1.05
  MBO_87=ProtData[where(abs(masses-87.080) eq min(abs(masses-87.080)) ),*]*1.06
  MBO_69=ProtData[where(abs(masses-69.070) eq min(abs(masses-69.070)) ),*]*1.06
  MBO_41=ProtData[where(abs(masses-41.039) eq min(abs(masses-41.039)) ),*]*1.03
  ACE_59=ProtData[where(abs(masses-59.049) eq min(abs(masses-59.049)) ),*]*1.03
  ACETAL_45=ProtData[where(abs(masses-45.033) eq min(abs(masses-45.033)) ),*]*1.02
  CH3CN_42=ProtData[where(abs(masses-42.034) eq min(abs(masses-42.034)) ),*]*1.02
  METH_33=ProtData[where(abs(masses-33.033) eq min(abs(masses-33.033)) ),*]*1.01
  BEN_78=ProtData[where(abs(masses-78.047) eq min(abs(masses-78.047)) ),*]*1.07
  if( min(abs(masses-78.047)) gt 1) then  BEN_78= BEN_78/1000
  TMB_120=ProtData[where(abs(masses-120.094) eq min(abs(masses-120.094)) ),*]*1.10
  if( min(abs(masses-120.094)) gt 1) then  TMB_120= TMB_120/1000
  XYL_106=ProtData[where(abs(masses-106.079) eq min(abs(masses-106.079)) ),*]*1.09
  if( min(abs(masses-106.079)) gt 1) then  XYL_106= XYL_106/1000

  ;correlation to correct delay

  Bestcor= correlate(ACE_59,D5_371)
  timeshift=0
  for i=1,50 do begin
    shiftcor= correlate(ACE_59,[D5_371[i:*],intarr(i)])
    if( shiftcor gt bestcor) then timeshift=i
    if( shiftcor gt bestcor) then bestcor=shiftcor
  endfor
  if(timeshift gt 0.5) then begin
    Print, 'D5 data shifted by '+string(timeshift)+' points'
    D5_355=transpose([D5_355[timeshift:*], fltarr(timeshift)])
    D5_371=transpose([D5_371[timeshift:*], fltarr(timeshift)])
  endif

  TotSIG=    METH_33 +    CH3CN_42 +    Acetal_45 +     Ace_59 +    MBO_87 +     MBO_69 +      MBO_41 +    MVK_71 +    MEK_73 +    Ben_79 +$
    Xyl_107 +    TMB_121 +     Pin_137 +       Pin_81 +   benzF3_133 + benzCl3_181 +  D3_223 +    D3_207 +    D4_297 +    D4_281 +$
    D5_371 +     D5_355


  D5_358iso=ProtData[where(abs(masses-358.073) eq min(abs(masses-358.073)) ),*]/0.0358
  D5_374iso=ProtData[where(abs(masses-374.105) eq min(abs(masses-374.105)) ),*]/0.0370
  D4_299iso=ProtData[where(abs(masses-299.086) eq min(abs(masses-299.086)) ),*]/0.1178
  D4_283iso=ProtData[where(abs(masses-283.055) eq min(abs(masses-283.055)) ),*]/0.1170
  D3_225iso=ProtData[where(abs(masses-225.067) eq min(abs(masses-225.067)) ),*]/0.0923
  D3_209iso=ProtData[where(abs(masses-209.036) eq min(abs(masses-209.036)) ),*]/0.0916
  benzCl3_182iso=ProtData[where(abs(masses-181.941) eq min(abs(masses-181.941)) ),*]/0.0267
  benzF3_134iso=ProtData[where(abs(masses-134.029) eq min(abs(masses-134.029)) ),*]/0.0612
  Pin_138iso=ProtData[where(abs(masses-138.135) eq min(abs(masses-138.135)) ),*]/0.0987
  Pin_82iso=ProtData[where(abs(masses-82.073) eq min(abs(masses-82.073)) ),*]/0.0617
  TMB_122iso=ProtData[where(abs(masses-122.104) eq min(abs(masses-122.104)) ),*]/0.0896
  XYL_108iso=ProtData[where(abs(masses-108.089) eq min(abs(masses-108.089)) ),*]/0.0804
  BEN_80iso=ProtData[where(abs(masses-80.057) eq min(abs(masses-80.057)) ),*]/0.0615
  MEK_74iso=ProtData[where(abs(masses-74.068) eq min(abs(masses-74.068)) ),*]/0.0426
  MVK_72iso=ProtData[where(abs(masses-72.052) eq min(abs(masses-72.052)) ),*]/0.0424
  MBO_88iso=ProtData[where(abs(masses-88.083) eq min(abs(masses-88.083)) ),*]/0.0526
  MBO_70iso=ProtData[where(abs(masses-70.073) eq min(abs(masses-70.073)) ),*]/0.0522
  MBO_42iso=ProtData[where(abs(masses-42.042) eq min(abs(masses-42.042)) ),*]/0.0320
  ACE_60iso=ProtData[where(abs(masses-60.052) eq min(abs(masses-60.052)) ),*]/0.0325
  ACETAL_46iso=ProtData[where(abs(masses-46.036) eq min(abs(masses-46.036)) ),*]/0.0220
  CH3CN_43iso=ProtData[where(abs(masses-43.037) eq min(abs(masses-43.037)) ),*]/0.0251
  METH_34iso=ProtData[where(abs(masses-34.036) eq min(abs(masses-34.036)) ),*]/0.0116

  MBO_42iso=MBO_42iso*0.000001
  METH_34iso=METH_34iso*0.00001
  TotSIGiso=    METH_34iso +    CH3CN_43iso +    Acetal_46iso +     Ace_60iso +    MBO_88iso +     MBO_70iso +      MBO_42iso +    MVK_72iso +    MEK_74iso +    Ben_80iso +$
    Xyl_108iso +    TMB_122iso +     Pin_138iso +       Pin_82iso +   benzF3_134iso + benzCl3_182iso +  D3_225iso +    D3_209iso +    D4_299iso +    D4_283iso +$
    D5_374iso +     D5_358iso




  mTOz=[33,42,45,59,87 ,    69 , 41,71 ,73 , 79 ,    107, 121, 137,81 ,133 ,    181, 223,207, 297,281 ,$
    371 ,355,-1,-1,-1,    -1,-1 ,-1,19,37,     39,34,43,46,60, 88,70, 42,72,74 ,$
    80, 108,122,138,82,134 ,182, 225,209, 299, 283, 374, 358,-1,-1,-1,78,32,120,106 ]
  compounds=['METH_33',   'CH3CN_42',   'Acetal_45',    'Ace_59',   'MBO_87',    'ISO/MBO_69',     'ISO/MBO_41',   'MVK_71',   'MEK_73',   'Ben_79',$
    'Xyl_107',   'TMB_121',    'MT_137',      'MT_81',   'benzF3_133','benzCl3_181','D3_223',   'D3_207',   'D4_297',   'D4_281',$
    'D5_371',    'D5_355',     'TotSIG',       'FCinlet',  'reltime',   'TotSIGiso',  'prim',     'Tdrift',   'I19',      'I37',$
    'I39', 'METH_34iso','CH3CN_43iso','Acetal_46iso','Ace_60iso','MBO_88iso',' MBO_70iso',' MBO_42iso','MVK_72iso','MEK_74iso','Ben_80iso',$
    'Xyl_108iso','TMB_122iso','Pin_138iso','Pin_82iso','benzF3_134iso','benzCl3_182iso','D3_225iso','D3_209iso','D4_299iso',' D4_283iso',$
    'D5_374iso','D5_358iso','Udx','pdrift','Udrift','BEN_78','I32','TMB_120','XYL_106']
  isotopecor=[1.01,1.02,1.02,1.03,1.06,1.06,1.03,1.05,1.05,1.07,1.09,1.1,1.12,1.07,1.07,2.48,1.37,1.36,1.52,1.51,1.69,1.67,1,1,1,1,1,1]

  RRK=[2.2,2.5+0.9, 3.03,  3.25, 2.68,  2.68, 2.68, 3.53, 3.25, 1.97, 2.31,  2.4,  2.45, 2.45,   2.46*1.0,  2.88,  2.59,  2.59,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
  RRK=[2.2,2.6+0.5, 3.03,  3.25, 2.68,         2.68, 2.68, 3.53, 3.25, 1.97,       2.31,  2.4,  2.45, 2.45,   2.46*1.1,        2.88,  2.59,  2.59,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
  RRK=[2.2/1.3,2.6+0.5, 3.03,  3.25, 2.68/1.45,         2.68/1.45, 2.68/1.45, 3.53/1.3, 3.25, 1.97,       2.31,  2.4,  2.45/1.2, 2.45/1.2,   2.46,        2.88/1.2,  2.59/1.2,  2.59/1.2,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9


  VMRppmNPL=[1.019,1.020,1.001,0.983,0.996,0.996,0.996,0.961,1.009,1.025,0.998,1.001,0.989,0.989,1.047,0,0,0,0.901,0.901,1.051,1.051,4,0,0,0,0,0]
  VMRppmAR=[1.011,1.01,1.111,0.967,0.998,0.998,0.998,0.937,1.017,1.006,0.983,0.989,0.983,0.983,1.032,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]
  VMRppmAR=[1.011,1.01,  0.6 ,0.967,0.998,0.998,0.998,0.55 ,1.017,1.006,0.983,0.989,0.983,0.983,1.2  ,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]

  CompARR=[METH_33, CH3CN_42, ACETAL_45, ACE_59, MBO_87 ,$
    MBO_69 , MBO_41,MVK_71 ,MEK_73 ,BEN_79 ,$
    XYL_107, TMB_121, Pin_137,Pin_81 ,benzF3_133 ,$
    benzCl3_181, D3_223, D3_207, D4_297,D4_281 ,$
    D5_371 ,D5_355, TotSIG, transpose((FCinlet-FCinlet)+Flow), transpose(reltime),$
    TotSIGiso,transpose(prim) ,transpose(Tdrift),I19,I37,$
    I39,METH_34iso,CH3CN_43iso,Acetal_46iso,Ace_60iso, MBO_88iso,MBO_70iso, MBO_42iso,MVK_72iso,MEK_74iso ,$
    Ben_80iso, Xyl_108iso,TMB_122iso,Pin_138iso,Pin_82iso,benzF3_134iso ,benzCl3_182iso, D3_225iso,D3_209iso, D4_299iso, D4_283iso,$
    D5_374iso, D5_358iso ,transpose(Udx),transpose(pdrift),transpose(Udrift),BEN_78,I32,TMB_120,XYL_106]

  i_Tdrift=27
  i_Udx=53
  i_pdrift=54
  i_Udrift=55


  ;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;    Find Injections
  ;;;;;;;;;;;;;;;;;;;;;;;;;;

  LongDUR=10
  tims=0
  timmax=0
  timend=0
  sigmax=0
  SearchStart=1
  SearchEnd=0

  data=ACE_59
  dataSTR='ACE_59'
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 and abs(min(ProtEngData[*,0])-3184.484) lt 0.2) then  data=MEK_73 ; VOCUS Calib 20 sep
  if(strpos(ComputerID,'50b4c522-8345-4094-bb5d-683484b5253e') gt -0.5 and abs(min(ProtEngData[*,0])-3190.6) lt 0.2) then  data=benzF3_133 ; UHEL Calib 26 sep
  if(strlen(ComputerID) eq 0 ) then  data=CH3CN_42 ; Harvard
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 and abs(min(ProtEngData[*,0])-3184.484) lt 0.2) then  dataSTR='MEK_73' ; VOCUS Calib 20 sep
  if(strpos(ComputerID,'50b4c522-8345-4094-bb5d-683484b5253e') gt -0.5 and abs(min(ProtEngData[*,0])-3190.6) lt 0.2) then  dataSTR='benzF3_133' ; UHEL Calib 26 sep

  if(strlen(ComputerID) eq 0 ) then  dataSTR='CH3CN_42' ; Harvard


  mini=quantile(data,0.1)
  midi=quantile(data,0.4)
  i30s=ceil(0.5*max(d(data))/max(reltime))
  faktor2=2
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  faktor2=3 ; VOCUS  PTR-TOF
  step=1 ; for 0.5s cycles
  ;  step=0.5 ;for 1s cycles
  if(strlen(ComputerID) eq 0 ) then step=5
  print, [mini,midi,max(d(data)),step, faktor2, i30s]
  for i=3,max(d(data))-2 do begin
    if( SearchStart eq 1) then if(abs(data[i]-mini)/abs(data[i-2*step]-mini) gt 3) then if(data[i]gt faktor2*midi) then   begin
      tims=[tims,i]
      ; print, abs(data[i]-mini)/abs(data[i-1]-mini)
      istart=i
      mini=min([data[i-1*step],data[i-2*step],data[i-3*step] ])
      i=i+1+step-1
      SearchStart=0
      SearchEnd=1

    endif
    if(i gt i30s) then mininew=min(data[lindgen(i30s)+i-i30s])
    faktor=1.0
    if(strpos(ComputerID,'a5607e09-ea6a-4dc2-8b59-43e174eb06af') gt -0.5 and abs(min(ProtEngData[*,0])-3188.457) lt 0.2) then  faktor=1.3 ; Lancaster Calib 24 sep  PTR-TOF

    if(i gt i30s) then  if(mininew lt midi*faktor) then mini = mininew
    if( SearchEnd eq 1) then  if(abs(data[i-1*step]-mini)/abs(data[i]-mini) gt 1.5) then  if(data[i-1*step] gt midi ) then   begin
      ;  print, [i,abs(data[i-1]-mini)/abs(data[i]-mini)-1.5,data[i-1] - midi]
      timend=[timend,i]
      sigmax=[sigmax,max(data[istart:i])/midi]
      helpi=where((data[istart:i]) eq max(data[istart:i]))
      timmax=[timmax,istart+helpi[0]]
      ;   print, [i-istart,i,1.0*i/120,abs(data[istart]-mini)/abs(data[istart-1]-mini),data[istart],midi ,data[i-1] ,abs(data[i-1]-mini)/abs(data[i]-mini) ]
      i=i+1
      istart=istart+1
      ;   print, [i-istart,i, 1.0*i/120,abs(data[istart]-mini)/abs(data[istart-1]-mini),data[istart] ,midi,data[i-1] ,abs(data[i-1]-mini)/abs(data[i]-mini) ]
      ;    print, ''

      SearchStart=1
      SearchEnd=0

    endif
    ;i=i+step-1
  endfor


  tims=tims[1:*]
  timend=timend[1:*]
  sigmax=sigmax[1:*]
  timmax=timmax[1:*]

  ;fix:
  if(max(d(tims))-1 eq max(d(timend))) then timend=[timend,max(tims)+3]
  if(max(d(tims))-1 eq max(d(timend))) then sigmax=[sigmax,data[max(tims)+3]]
  if(max(d(tims))-1 eq max(d(timend))) then timmax=[timmax,max(tims)+1]

  injectiontimes=reltime[tims]
  injectiontimesEND=reltime[timend]

  duration=(injectiontimesEND-injectiontimes)*60  ; in seconds

  ;;;
  ; clean
  ;;;

  timsold=tims
  durationold=duration
  injectiontimesold=injectiontimes
  injectiontimesENDold=injectiontimesEND

  if(duration[0] lt LongDUR) then if(injectiontimes[1]*60-6 gt injectiontimesEND[0]*60) then begin
    tims[0]=-9999
    timend[0]=-9999
    injectiontimes[0]=-9999
    injectiontimesEND[0]=-9999
    duration[0]=-9999
  endif

  for i=1, max(d(tims))-2 do begin
    if(duration[i-1] lt LongDUR) then if(injectiontimesEND[i-1]*60+6 lt injectiontimes[i]*60) then  if(duration[i] lt LongDUR) then if(injectiontimes[i+1]*60-6 gt injectiontimesEND[i]*60) then begin

      tims[i]=-9999

      timend[i]=-9999
      injectiontimes[i]=-9999
      injectiontimesEND[i]=-9999
      duration[i]=-9999
    endif
  endfor


  if(duration[max(d(tims))-1] lt LongDUR) then if(injectiontimesEND[max(d(tims))-2]*60+6 lt injectiontimes[max(d(tims))-1]*60) then begin
    tims[max(d(tims))-1]=-9999
    timend[max(d(tims))-1]=-9999
    injectiontimes[max(d(tims))-1]=-9999
    injectiontimesEND[max(d(tims))-1]=-9999
    duration[max(d(tims))-1]=-9999
  endif


  ; clean short injections
  Shortsig=quantile(sigmax[where(duration lt LongDUR)],0.6)
  intex=where(duration lt LongDUR and sigmax lt Shortsig/5)
  if(max(intex) gt -0.5) then  begin
    tims[intex]=-9999
    timend[intex]=-9999
    injectiontimes[intex]=-9999
    injectiontimesEND[intex]=-9999
    duration[intex]=-9999
  endif
  ;  print, [transpose(string(timsold,format='(F8.1)')),transpose(string(durationold,format='(F8.1)')),transpose(string(injectiontimesold*60,format='(F8.1)')),transpose(string(injectiontimesENDold*60,format='(F8.1)')),transpose(string(tims,format='(F8.1)')),transpose(string(duration,format='(F8.1)')),transpose(string(injectiontimes*60,format='(F8.1)')),transpose(string(injectiontimesEND*60,format='(F8.1)')),transpose(string(sigmax,format='(F8.1)'))]




  tims=tims[where(tims gt -9999)]
  sigmax=sigmax[where(timend gt -9999)]
  timmax=timmax[where(timend gt -9999)]

  timend=timend[where(timend gt -9999)]
  injectiontimes=injectiontimes[where(injectiontimes gt -9999)]
  injectiontimesEND=injectiontimesEND[where(injectiontimesEND gt -9999)]
  duration=duration[where(duration gt -9999)]

  PREVdistance=[-9999,-60.0*(injectiontimes[0:max(d(tims))-2]-injectiontimes[1:*])]
  NEXTdistance=[60.0*(injectiontimes[1:*]-injectiontimes[0:max(d(tims))-2]),-9999]
  if(duration[0] gt LongDUR) then sequence=100 else sequence = 1
  for i=1,max(d(tims))-1 do if(duration[i] le LongDUR) then if (abs(PREVdistance[i]) lt 8.5) then if (sequence[i-1] lt 99) then sequence=[sequence,sequence[i-1]+1] else sequence=[sequence,1] else sequence=[sequence,1] else sequence=[sequence,100]
  for i=0, max(d(tims))-1 do if(sequence[i] eq 10) then for j=0,9 do sequence[i-j]=10

  ; clean long injections
  Longsig=max(sigmax[where(sequence eq 100)])
  intex=where(sequence eq 100 and sigmax lt Longsig/10)
  if(max(intex) gt -0.5) then sequence[intex]=-9999




  if( max(where(sequence ne 10 and sequence ne 100  )) gt -0.5) then begin
    sequence[where(sequence ne 10 and sequence ne 100  )]=-9999
    tims=tims[where(sequence gt -9999)]
    timend=timend[where(sequence gt -9999)]
    injectiontimes=injectiontimes[where(sequence gt -9999)]
    injectiontimesEND=injectiontimesEND[where(sequence gt -9999)]
    duration=duration[where(sequence gt -9999)]
    sigmax=sigmax[where(sequence gt -9999)]
    timmax=timmax[where(sequence gt -9999)]
    sequence=sequence[where(sequence gt -9999)]

  endif


  injectSHORT=injectiontimes[where(duration lt 4)]
  injectSHORTend=injectiontimesEND[where(duration lt 4)]
  timsSHORT=tims[where(duration lt 4)]
  timsSHORTend=timend[where(duration lt 4)]

  injectLONG=injectiontimes[where(duration gt 4)]
  injectLONGend=injectiontimesEND[where(duration gt 4)]
  timsLONG=tims[where(duration gt 4)]
  timsLONGend=timend[where(duration gt 4)]


  step=0.5/timestep
  CompCUB=dblarr(max(d(injectSHORT)),max(d(compounds)),ceil(15*step)) ; 12 injections, 23 ions, 15 cycles
  for i=0,max(d(timsSHORT))-1 do CompCUB[i,*,*]=CompARR[*,indgen(ceil(15*step))-ceil(5*step)+timsShort[i]]
  ;  counts=total(compCUB[*,*,step*[4,5,6,7,8,9,10,11]],3)
  ;countsBG=8*total(compCUB[*,*,step*[1,2,3,12,13]],3)/5

  counts=total(compCUB[*,*,[indgen(round(8*step))+round(4*step)]],3)*timestep; counts over 4s integration period
  countsBG=(round(8.0*step)/ceil(5*step))*total(compCUB[*,*,[indgen(ceil(3*step))+floor(1*step),indgen(round(2*step))+round(12*step+0.01)]],3)*timestep
  print,'haha'

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;; S
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;   Cylinder: CC502781
  ;Cylinder Test Date: 02/14
  ;Valve: Ceodeux 14/686691 SS CGA350
  ;Cylinder Pressure: 2000 psi @ 22 °C
  ;Analysis Date: April 12, 2016
  ;Multi-component calibration mix
  ;Compound CAS# Concentration (ppb) Uncertainty
  ;
  ;Acetaldehyde 75-07-0         1111 ±5%
  ;Methanol 67-56-1        1011 ±5%
  ;Acetone 67-64-1 967 ±5%
  ;Acetonitrile 75-05-8 1010 ±5%
  ;Methyl Vinyl Ketone 78-94-4 937 ±5%
  ;Methyl Ethyl Ketone 78-93-3 1017 ±5%
  ;2-Methyl-3-Buten-2-ol 115-18-4 998 ±5%
  ;Benzene 71-43-2 1006 ±5%
  ;1,2,3-Trifluorobenzene 367-23-7 1032 ±5%
  ;Hexamethylcyclotrisiloxane (D3) 541-05-9 992 ±5%
  ;m-Xylene 108-38-3 983 ±5%
  ;alpha-Pinene 80-56-8 983 ±5%
  ;Octamethylcyclotetrasiloxane (D4) 556-67-2 995 ±5%
  ;1,3,5-Trimethylbenzene 108-67-8 989 ±5%
  ;Decamethylcyclopentasiloxane (D5) 541-02-6 995 ±5%
  ;1,2,4-Trichlorobenzene 120-82-1 995 ±5%


  ;propane 0.981 0.015
  ;ethanol 0.965 0.024
  ;
  ;methanol 1.019 0.031
  ;acetonitrile 1.020 0.031
  ;acetaldehyde 1.001 0.030
  ;acetone 0.983 0.020
  ;isoprene 0.996 0.020
  ;3-buten-2-one (MVK) 0.961 0.029
  ;butan-2-one (MEK) 1.009 0.030
  ;benzene 1.025 0.015
  ;m-xylene 0.998 0.025
  ;1,2,4-TMB 1.001 0.025
  ;1,2,4-trifluorobenzene 1.047 0.052
  ;3-carene 0.989 0.025
  ;D4-siloxane 0.901 0.045
  ;D5-siloxane 1.051 0.053



  if(min(ProtEngData[*,0]) lt 3186.0 or min(ProtEngData[*,0]) gt 3194.0 ) then VMRppm=VMRppmAR
  if(min(ProtEngData[*,0]) ge 3186.0  and min(ProtEngData[*,0]) le 3194.0 ) then VMRppm=VMRppmNPL


  VMRppm[where(VMRppm eq 0)]=1e5
  en=fltarr(22)
  for i=0,21 do  en[i]=1e-6*VMRppm[i]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  Fmol=(Flow)/(60.0*1000.0*22.4) ; unit is mol/s
  d_d=9.6
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  d_d=10; estimated based on E/N of 160 Td, VOCUS  PTR-TOF
  p_d=mean(counts[indgen(10),i_pdrift]/4)
  E_d=(mean(counts[indgen(10),i_udrift]/4)+mean(counts[indgen(10),i_udx]/4))/d_d
  T_d=mean(counts[indgen(10),i_Tdrift]/4)+273.15
  t_react=(d_d*p_d*273.15)/(E_d*T_d*2.7*1013.25)
  if(strlen(ComputerID) eq 0 ) then t_react=0.0035 ; harvard

  sensitivities=fltarr(22)
  for i=0,21 do sensitivities[i]=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[i]/1013.25)


  ADD40=0
  if(strmatch(strtrim(strmid(name,strpos(name,'\',/reverse_search)+1,1000),2),'2017.09.20-13h21m39s_calib_rupert_1s.h5') eq 1) then ADD40=40


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;        TRANSMISSION retrieve initial best EX
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  MMLL=fltarr(5)
  WWLL=fltarr(5)
  MMHH=fltarr(5)
  WWHH=fltarr(5)
  exex=fltarr(5)

  for pp=0,4 do begin


    ADD40=pp*10

    MASSlow=10
    WIDTHlow=2
    MASShigh=1000
    WIDTHhigh=10
    ex=0.5




    window,28, xsize = 500, ysize=400
    !P.MULTI = [0,1,1]
    loadct,20



    DELTAex=0.01
    EXrange=[0,2]
    field=fltarr(201)
    scoreee=1e10
    bestEX=0.5

    NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/medium)
    essen=fltarr(22)
    for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
    xx=[59,69,71,73,79,107,121,133,137,223,297,355]
    set=[essen[3]/sensitivities[3],(essen[5]+essen[6])/sensitivities[5],essen[7]/sensitivities[7],essen[8]/sensitivities[8],essen[9]/sensitivities[9], $
      essen[10]/sensitivities[10],essen[11]/sensitivities[11],essen[14]/sensitivities[14],(essen[12]+essen[13])/sensitivities[12]]
    if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then begin ;VOCUS
      set1=set[[0,2,3,5,6,8]]
      xx=xx[[0,2,3,5,6,8]]
      fiiil=where(set1 ne max(set1[1:5]) and set1 ne min(set1[1:5]))
    endif else begin
      set1=set[[0,1,2,3,4,5,6,7,8]]
      xx=xx[[0,1,2,3,4,5,6,7,8]]
      fiiil=where(set1 ne max(set1[1:8]) and set1 ne min(set1[1:8]))
    endelse



    for dEX=0,200 do begin
      ex=DELTAex*dEX
      NC=calcNC(ex, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/medium)
      essen=fltarr(22)
      for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
      cols=[10,10,10,10,10,   100,100,100,100,100,   175,175,175,175,175, 250,250,250,250,250,250,250,250,250]
      xx=[59,69,71,73,79,107,121,133,137,223,297,355]
      set=[essen[3]/sensitivities[3],(essen[5]+essen[6])/sensitivities[5],essen[7]/sensitivities[7],essen[8]/sensitivities[8],essen[9]/sensitivities[9], $
        essen[10]/sensitivities[10],essen[11]/sensitivities[11],essen[14]/sensitivities[14],(essen[12]+essen[13])/sensitivities[12]]
      if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then begin ;VOCUS
        set1=set[[0,2,3,5,6,8]]
        xx=xx[[0,2,3,5,6,8]]
      endif else begin
        set1=set[[0,1,2,3,4,5,6,7,8]]
        xx=xx[[0,1,2,3,4,5,6,7,8]]
      endelse

      set=set1[fiiil]
      xx=xx[fiiil]
      set=set/max(set)
      slpe=linfit(xx,set, YFIT=fitti)
      good=mean(abs(set-fitti))
      int=slpe[0]
      slpe=1000*abs(slpe[1])

      slpe=abs(max(set[where(xx lt 74)])-max(set[where(xx gt 120)]))
      if(slpe lt scoreee) then begin
        scoreee=slpe
        bestEX=ex
      endif
      if (dEX eq 0) then  plot,xx, set, xrange=[50,150], background=0,color=-1

      oplot,xx, set, color=200
      print, string([ex,slpe,good,int,mean(set),stddev(set),xx],format='(f10.5)')
      oplot,xx, set, color=100
    endfor
    ;bestEX=0.5

    xyouts,0.2,0.5,'Best ex='+strtrim(string(bestEX,format='(f8.3)'),2),/norm,charsize=4,charthick=3,color=-100



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;        TRANSMISSION retrieve best LOW filter
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    bestEXold=-9999
    while (abs(bestEXold-bestEX) gt 0.02) do begin
      DELTAm=0.5
      if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then DELTAm=0.05 ;VOCUS
      Mrange=[0,50]
      Wrange=[0,50]
      Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
      Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
      field=fltarr(dim1,dim2)
      for ML=0,dim1-1 do begin
        for WL=0,dim2-1 do begin
          masslow=min(Mrange)+deltam*ML
          widthlow=min(Wrange)+deltam*WL
          if(tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(59,bestex,10,2,1000,10) gt 0.98) then begin
            NC=calcNC(bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/low)
            essen =fltarr(22)
            for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
            if(essen[1] gt sensitivities[1]) then xx42=essen[1]/sensitivities[1] else xx42=sensitivities[1]/essen[1]
            if(essen[2] gt sensitivities[2]) then xx45=essen[2]/sensitivities[2] else xx45=sensitivities[2]/essen[2]
            if(essen[3] gt sensitivities[3]) then xx59=essen[3]/sensitivities[3] else xx59=sensitivities[3]/essen[3]
            if(essen[7] gt sensitivities[7]) then xx71=essen[7]/sensitivities[7] else xx71=sensitivities[7]/essen[7]
            if(essen[8] gt sensitivities[8]) then xx73=essen[8]/sensitivities[8] else xx73=sensitivities[8]/essen[8]
            field[ML,WL]=mean([xx42,xx45,xx59,xx71,xx73])
          endif else field[ML,WL]=9999
        endfor
      endfor
      field=1/field
      maxi=max(field,/nan)
      field[where(field lt 0.98*maxi)]=field[where(field lt 0.98*maxi)]*0.5
      field[where(field lt 0.99*maxi)]=field[where(field lt 0.99*maxi)]*0.5
      field[where(field lt 0.995*maxi)]=field[where(field lt 0.995*maxi)]*0.5
      field[where(field gt 0.998*maxi)]=1
      window,26, xsize = dim1, ysize=dim2
      loadct,20
      tvscl, field
      WidthLow=0
      while (max(where(field[*,WidthLow] eq 1)) lt -0.5) do WidthLow=WidthLow+1
      MassLow=where(field[*,WidthLow] eq 1) & Masslow=Masslow[0]
      masslow=min(Mrange)+deltam*masslow
      widthlow=min(Wrange)+deltam*widthlow
      print, [Masslow,widthlow,MassHigh,Widthhigh]

      stoppi=0
      bestEXold=bestEX
      addi=0
      increase_prev=-1
      while(stoppi eq 0) do begin
        increase=0
        NC=calcNC(bestEX+addi, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/high)
        essen =fltarr(22)
        for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
        if(essen[20]+essen[21] gt sensitivities[20]) then increase=increase+1
        if(essen[18]+essen[19] gt sensitivities[18]) then increase=increase+1
        if(essen[10] gt sensitivities[10]) then increase=increase+1
        if(essen[11] gt sensitivities[11]) then increase=increase+1
        if(essen[12]+essen[13] gt sensitivities[12]) then increase=increase+1
        if(essen[14] gt sensitivities[14]) then increase=increase+1
        if(increase ge 1.5) then  addi=addi+0.01
        if(increase le 0.5) then  addi=addi-0.01
        if(increase gt 0.5 and increase lt 1.5)  then   if(increase_prev gt increase)  then stoppi=1 else addi=addi-0.01
        if(increase_prev eq 0 and increase gt 1)  then   stoppi=1
        increase_prev=increase
      endwhile
      bestEX=bestEX+addi
    endwhile

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;        TRANSMISSION retrieve best HIGH filter
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    DELTAm=0.5
    Mrange=[150,600]
    Wrange=[30,300]
    Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
    Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
    field=fltarr(dim1,dim2)
    for MH=0,dim1-1 do begin
      for WH=0,dim2-1 do begin
        MASShigh=max(Mrange)-deltam*MH
        WIDTHhigh=min(Wrange)+deltam*WH
        if(tr(137,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(137,bestex,10,2,1000,10) gt 0.98) then begin

          NC=calcNC(bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/high)
          essen =fltarr(22)
          for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
          essen121= essen[11]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen133= essen[14]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then essen133= essen[12]+essen[13]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen297= essen[18]+essen[19]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen371= essen[20]+essen[21]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          sensitivity121=sensitivities[11]
          sensitivity133=sensitivities[14]
          if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then sensitivity133=sensitivities[12]
          sensitivity297=sensitivities[18]
          sensitivity371=sensitivities[20]

          prim19= mean(countsBG[indgen(10)+ADD40,28])/4
          prim37= mean(countsBG[indgen(10)+ADD40,29])/4
          if(WH eq 0 and MH eq 0) then begin
            if(mean(essen121) gt mean(essen133)) then begin
              essen_H1=essen121
              sensitivity_H1=sensitivity121
              HH1=1
            endif else begin
              essen_H1=essen133
              sensitivity_H1=sensitivity133
              HH1=2
            endelse
            if(mean(essen297) gt mean(essen371)*5) then begin
              essen_H2=essen297
              sensitivity_H2=sensitivity297
              HH2=1
            endif else begin
              essen_H2=essen371
              sensitivity_H2=sensitivity371
              HH2=2
            endelse
          endif

          if(HH2 eq 1) then begin
            essen_H2=essen297
            sensitivity_H2=sensitivity297
            essen_H3=essen297
            sensitivity_H3=sensitivity297
          endif else begin
            essen_H2=essen371
            sensitivity_H2=sensitivity371
            essen_H3=essen297
            sensitivity_H3=sensitivity297
          endelse
          if(HH1 eq 1) then begin
            essen_H1=essen121
            sensitivity_H1=sensitivity121
          endif else begin
            essen_H1=essen133
            sensitivity_H1=sensitivity133
          endelse




          if(essen_H1 gt sensitivity_H1) then xx_H1=essen_H1/sensitivity_H1 else xx_H1=sensitivity_H1/essen_H1
          if(essen_H2 gt sensitivity_H2) then xx_H2=essen_H2/sensitivity_H2 else xx_H2=sensitivity_H2/essen_H2
          if(essen_H3 gt sensitivity_H3) then xx_H3=essen_H3/sensitivity_H3 else xx_H3=sensitivity_H3/essen_H3
          if(xx_H1 lt 0.9) then begin
            print, 'hahha'
          endif
          if(xx_H2 lt 0.9) then begin
            print, 'hahha'
          endif


          sett=[max([xx_H1,0.9],/nan),max([xx_H2,0.9],/nan),max([xx_H3,0.9],/nan)]
          if(min(sett) eq 0.9) then begin
            sett=0.9
          endif else sett=max(sett)
          field[dim1-1-MH,WH]=sett
        endif else field[dim1-1-MH,WH]=9999

      endfor
    endfor
    field=1/field
    field[where(field gt 1)]=0
    maxi=max(field,/nan)
    window,31, xsize = dim1, ysize=dim2
    loadct,20
    tvscl, field
    indi=where(field eq maxi)
    MassHigh=max(indi mod dim1)
    Widthhigh=max((indi-MassHigh)/dim1)
    MASShigh=min(Mrange)+deltam*MASShigh
    WIDTHhigh=min(Wrange)+deltam*WIDTHhigh

    MMLL[pp]=Masslow
    WWLL[pp]=widthlow
    MMHH[pp]=MassHigh
    WWHH[pp]=Widthhigh
    exex[pp]=bestEX



  endfor
  Masslow=MMLL[0]
  widthlow=WWLL[0]
  MassHigh=MMHH[0]
  Widthhigh=WWHH[0]
  bestEX=exex[0]
  Add40=0





  print, [Masslow,widthlow,MassHigh,Widthhigh]
  print,''
  MasslowOLD=Masslow
  widthlowOLD=widthlow
  MassHighOLD=MassHigh
  WidthhighOLD=Widthhigh
  MasslowOLD2=Masslow
  widthlowOLD2=widthlow
  MassHighOLD2=MassHigh
  WidthhighOLD2=Widthhigh




  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  CompARRtranse=CompARR
  for i=0,max(d(compounds))-1 do if (mTOz[i] ne -1) then CompARRtranse[i,*]=CompARR[i,*]/tr(mTOz[i],bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  PrimTR=CompARRtranse[29,*]+CompARRtranse[28,*]
  TotSigTR=CompARRtranse[0,*]
  for i=1,21 do  TotSigTR=TotSigTR+CompARRtranse[i,*]
  CompCUBtranse=CompCUB
  for i=0,max(d(timsSHORT))-1 do CompCUBtranse[i,*,*]=CompARRtranse[*,indgen(ceil(15*step))-ceil(5*step)+timsShort[i]]
  countsTR=total(compCUBtranse[*,*,[indgen(round(8*step))+round(4*step)]],3)*timestep; counts over 4s integration period
  countsBGTR=(round(8.0*step)/ceil(5*step))*total(compCUBtranse[*,*,[indgen(ceil(3*step))+floor(1*step),indgen(round(2*step))+round(12*step+0.01)]],3)*timestep



  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;              END TRANSMISSION
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;










  ;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;; Xr
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  resultis=[0,0,0]
  print, '           XR   |     stdev XR'

  XRdata=fltarr(22,2)


  oldold=1 ; old version based on Truman's work
  if (oldold eq 1) then begin
    for j=0,22 do begin
      XRall=0
      for p=0,9 do begin
        XR=0
        for k=0,50 do begin
          counter=0
          classs=0
          if (k eq 0) then XR=0.0
          if (k eq 1) then XR=0.01
          if (k gt 1.5) then begin
            if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then XR=XRpre+(XRpre-XRprepre)*slopeprepre/(slopeprepre-slopepre)
            if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then begin
              XR=XRprepre+(XRpre-XRprepre)/2
              class=1
            endif
            if(classs eq 1) then counter=counter+1
            if(counter eq 1 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then increment=-0.1 else increment=0.1
            if(counter gt 1.5 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then increment=increment *(-0.1)
            if(counter gt 0.5) then  XR=XRpre+increment
          endif
          NCs=0
          CRs=0
          for i=0,4 do begin

            m19=countsBGTR[p+10*i,28]
            m37=countsBGTR[p+10*i,29]
            cntss=countsTR[p+10*i,j]
            if(j eq 4) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 5) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 6) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 12) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
            if(j eq 13) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
            if(j eq 16) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
            if(j eq 17) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
            if(j eq 18) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
            if(j eq 19) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
            if(j eq 20) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
            if(j eq 21) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]

            NCs=[NCs,cntss/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
            CRs=[CRs,100*m37/(m19+m37)]
          endfor
          CRs=CRs[1:*]
          NCs=NCs[1:*]
          CRs=CRs[[0,3,4]];only N2
          NCs=NCs[[0,3,4]];only N2

          fitp=linfit(CRs,NCs)
          if (k eq 0) then begin
            slopePre=fitp[1]
            XRpre=XR
          endif
          XRprepre=XRpre
          XRpre=XR
          slopePrepre=slopePre
          slopePre=fitp[1]
        endfor
        XRall=[XRall,XR]

      endfor
      XRall=XRall[1:*]
      print,[compounds[j], string([mean(XRall),stddev(XRall)],format='(F12.2)')]
      if(j lt 21.5) then XRdata[j,*]=[mean(XRall),stddev(XRall)]
    endfor
  endif

  if (oldold eq 0) then begin
    for j=0,22 do begin
      pN2_1=0
      pN2_2=0
      pAIR=0
      pN2_AIR=0
      pAIR_N2_1=0
      pAIR_N2_2=0
      XRall=0

      for xxx=0,100 do begin
        XR=-1.5+float(xxx)/10.0
        NCsall=[0,0,0,0,0]
        for p=0,9 do begin
          NCs=0
          for i=0,4 do begin
            m19=countsBGTR[p+10*i,28]
            m37=countsBGTR[p+10*i,29]
            cntss=countsTR[p+10*i,j]
            if(j eq 4 or j eq 5 or j eq 6) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 12 or j eq 13) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
            if(j eq 16 or j eq 17) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
            if(j eq 18 or j eq 19) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
            if(j eq 20 or j eq 21) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
            NCs=[NCs,cntss/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
          endfor
          NCs=NCs[1:*]
          NCsall=[[NCsall],[NCs]]
        endfor
        NCsall= NCsall[*,1:*]

        pvalue=TM_test(NCsall[0,*],NCsall[3,*])
        pN2_1=[pN2_1, pvalue[1]]
        pvalue=TM_test(NCsall[4,*],NCsall[3,*])
        pN2_2=[pN2_2, pvalue[1]]
        pvalue=TM_test(NCsall[1,*],NCsall[3,*])
        pN2_AIR=[pN2_AIR, pvalue[1]]


        pvalue=TM_test(NCsall[1,*],NCsall[2,*])
        pAIR=[pAIR, pvalue[1]]
        pvalue=TM_test(NCsall[0,*],NCsall[2,*])
        pAIR_N2_1=[pAIR_N2_1, pvalue[1]]
        pvalue=TM_test(NCsall[4,*],NCsall[2,*])
        pAIR_N2_2=[pAIR_N2_2, pvalue[1]]
        XRall=[XRall,XR]
      endfor
      pN2_1=pN2_1[1:*]
      pN2_2=pN2_2[1:*]
      pN2_AIR=pN2_AIR[1:*]
      pAIR=pAIR[1:*]
      pAIR_N2_1=pAIR_N2_1[1:*]
      pAIR_N2_2=pAIR_N2_2[1:*]


      XRall=XRall[1:*]
      !P.MULTI = [0,1,1]
      WINDOW, 4, xsize=750,ysize=500

      loadct,5

      plot, XRall,pN2_1,color=0,background=-1,  yrange=[0,1]
      oplot,XRall, pN2_1, color=40, thick=1
      oplot,XRall, pN2_AIR, color=20, thick=1
      oplot,XRall, pAIR_N2_1, color=109, thick=1
      oplot,XRall, pAIR_N2_2, color=150, thick=1
      oplot,XRall, pN2_2, color=50, thick=3
      oplot,XRall, pAIR, color=111, thick=1

      xyouts, 0,0.9, compounds[j],color=0, charthick=2
      resultis=[[resultis],[XRall[where(pN2_2 eq max(pN2_2))],XRall[where(pN2_1 eq max(pN2_1))], XRall[where(pAIR eq max(pAIR))]]]

      print, 'haha'
    endfor
    print, resultis

    print, 'haha'
  endif

















  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;    SENS file
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;







  print, ''


  S_set3=[0,0,0,0,0]
  S_set2=[0,0,0,0,0]
  S_set3TR=[0,0,0,0,0]
  S_set2TR=[0,0,0,0,0]
  S_set=starttim
  Serr_set=starttim
  sensitivitiesCALC=fltarr(22)
  ncpsPERppbTR=fltarr(22,5)
  ncpsPERppbTRxr=fltarr(22,5)
  cpsPERppbRAW=fltarr(22,5)
  KINSPECS=fltarr(20,5)

  for j=0,22 do begin
    essen=fltarr(max(d(timsSHORT)))
    essen3=fltarr(max(d(timsSHORT)))
    essenTR=fltarr(max(d(timsSHORT)))
    essen3TR=fltarr(max(d(timsSHORT)))

    i2=0
    for i=0,max(d(timsSHORT))-1 do begin

      en1=1e-6*VMRppm[j]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
      factor1=tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
      factor2=tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
      primi= (countsBG[i,28]*factor1+countsBG[i,29]*factor2)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      if(j eq 9) then   primi= (countsBG[i,28]*factor1+0*countsBG[i,29]*factor2)/4; divide by 4
      if(j eq 14) then   primi= (countsBG[i,28]*factor1+0*countsBG[i,29]*factor2)/4; divide by 4
      if(j eq 15) then   primi= (countsBG[i,28]*factor1+0*countsBG[i,29]*factor2)/4; divide by 4



      C=counts[i,j]-countsBG[i,j] ; total signal of an injection (independent of integration interval). Unit is 'counts'.
      NC=C*1e6/primi ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
      Fmol=(Flow)/(60.0*1000.0*22.4) ; unit is mol/s
      es=NC*Fmol*1e-9/en1  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      es3=C*Fmol*1e-9/en1  ; UNIT cps/ppb
      essen[i2]= es
      essen3[i2]= es3

      if(j lt 21.5) then XR1=XRdata[j,0] else XR1=1
      if (XR1 lt-50 or XR1 gt 50) then XR1=1
      primiTR= (countsBGTR[i,28]+countsBGTR[i,29])/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      if(j eq 9) then    primiTR= (countsBGTR[i,28]+1*countsBGTR[i,29])/4; divide by 4
      if(j eq 14) then    primiTR= (countsBGTR[i,28]+1*countsBGTR[i,29])/4; divide by 4
      if(j eq 15) then    primiTR= (countsBGTR[i,28]+1*countsBGTR[i,29])/4; divide by 4
      primiTRxr= (countsBGTR[i,28]+XR1*countsBGTR[i,29])/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      CTR=countsTR[i,j]-countsBGTR[i,j] ; total signal of an injection (independent of integration interval). Unit is 'counts'.
      NCTR=CTR*1e6/primiTR ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
      NCTRxr=CTR*1e6/primiTRxr ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
      esTR=NCTR*Fmol*1e-9/en1  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      es3TR=NCTRxr*Fmol*1e-9/en1  ;UNIT ncps/ppb  (1E-9 to normalize to ppb) Xr corrected
      essenTR[i2]= esTR
      essen3TR[i2]= es3TR

      i2=i2+1

    endfor
    Sset2=[mean(essen[0:9])]
    Sset3=[mean(essen3[0:9])]
    Sset2TR=[mean(essenTR[0:9])]
    Sset3TR=[mean(essen3TR[0:9])]
    for k=1,4 do Sset2=[Sset2, [mean(essen[10*k+0:10*k+9])]]
    for k=1,4 do Sset3=[Sset3, [mean(essen3[10*k+0:10*k+9])]]
    for k=1,4 do Sset2TR=[Sset2TR, [mean(essenTR[10*k+0:10*k+9])]]
    for k=1,4 do Sset3TR=[Sset3TR, [mean(essen3TR[10*k+0:10*k+9])]]
    ;  print,[compounds[j], string(Sset2TR,format='(F12.2)'), string(Sset2,format='(F12.2)'),string(Sset3,format='(F12.2)')]
    S_set2=[[S_set2],[Sset2]]
    S_set=[S_set,[mean(essen)]]
    Serr_set=[Serr_set,stddev(essen)]
    if(j lt 21.5) then begin
      sensitivitiesCALC[j]=Sset2TR[0+ADD40/10]
      ncpsPERppbTR[j,*]=Sset2TR
      ncpsPERppbTRxr[j,*]=Sset3TR
      cpsPERppbRAW[j,*]=Sset3
    endif
  endfor

  sig19=fltarr(max(d(timsSHORT)))
  sig37=fltarr(max(d(timsSHORT)))
  sig19at59=fltarr(max(d(timsSHORT)))
  sig37at59=fltarr(max(d(timsSHORT)))
  r37to19=fltarr(max(d(timsSHORT)))
  r32to19=fltarr(max(d(timsSHORT)))
  BENZ78to79=fltarr(max(d(timsSHORT)))
  TMB120to121=fltarr(max(d(timsSHORT)))
  XYL106to107=fltarr(max(d(timsSHORT)))

  sigTTd=fltarr(max(d(timsSHORT)))
  sigppd=fltarr(max(d(timsSHORT)))
  sigUUd=fltarr(max(d(timsSHORT)))
  sigUUdx=fltarr(max(d(timsSHORT)))

  for i=0,max(d(timsSHORT))-1 do begin
    sig19[i]=countsBG[i,28]/4
    sig37[i]=countsBG[i,29]/4
    sig19at59[i]=countsBGTR[i,28]/4
    sig37at59[i]=countsBGTR[i,29]/4
    r37to19[i]=countsBGTR[i,29]/countsBGTR[i,28]
    r32to19[i]=countsBGTR[i,57]/countsBGTR[i,28]
    BENZ78to79[i]=countsTR[i,56]/countsTR[i,9]
    TMB120to121[i]=countsTR[i,58]/countsTR[i,11]
    XYL106to107[i]=countsTR[i,59]/countsTR[i,10]
    sigTTd[i]=counts[i,i_Tdrift]/4+273.15
    sigppd[i]=counts[i,i_pdrift]/4
    sigUUd[i]=counts[i,i_udrift]/4
    sigUUdx[i]=counts[i,i_udx]/4

  endfor

  Set19=[mean(sig19[0:9])]
  Set37=[mean(sig37[0:9])]
  Set19at59=[mean(sig19at59[0:9])]
  Set37at59=[mean(sig37at59[0:9])]
  Set37to19=[mean(r37to19[0:9])]
  Set32to19=[mean(r32to19[0:9])]
  Set78to79=[mean(BENZ78to79[0:9])]
  Set120to121=[mean(TMB120to121[0:9])]
  Set106to107=[mean(XYL106to107[0:9])]
  SetTTd=[mean(sigTTd[0:9])]
  Setppd=[mean(sigppd[0:9])]
  SetUUd=[mean(sigUUd[0:9])]
  SetUUdx=[mean(sigUUdx[0:9])]
  for k=1,4 do   Set19=[Set19, [mean(sig19[10*k+0:10*k+9])]]
  for k=1,4 do   Set37=[Set37, [mean(sig37[10*k+0:10*k+9])]]
  for k=1,4 do   Set19at59=[Set19at59, [mean(sig19at59[10*k+0:10*k+9])]]
  for k=1,4 do   Set37at59=[Set37at59, [mean(sig37at59[10*k+0:10*k+9])]]
  for k=1,4 do   Set37to19=[Set37to19, [mean(r37to19[10*k+0:10*k+9])]]
  for k=1,4 do   Set32to19=[Set32to19, [mean(r32to19[10*k+0:10*k+9])]]
  for k=1,4 do   Set78to79=[Set78to79, [mean(BENZ78to79[10*k+0:10*k+9])]]
  for k=1,4 do   Set120to121=[Set120to121, [mean(TMB120to121[10*k+0:10*k+9])]]
  for k=1,4 do   Set106to107=[Set106to107, [mean(XYL106to107[10*k+0:10*k+9])]]
  for k=1,4 do   SetTTd=[SetTTd, [mean(sigTTd[10*k+0:10*k+9])]]
  for k=1,4 do   Setppd=[Setppd, [mean(sigppd[10*k+0:10*k+9])]]
  for k=1,4 do   SetUUd=[SetUUd, [mean(sigUUd[10*k+0:10*k+9])]]
  for k=1,4 do   SetUUdx=[SetUUdx, [mean(sigUUdx[10*k+0:10*k+9])]]
  SetEEd=(SetUUd+SetUUdx)/d_d
  Setttreact=(d_d*Setppd*273.15)/(SetEEd*SetTTd*2.7*1013.25)
  if(strlen(ComputerID) eq 0 ) then Setttreact=Setttreact*0.003/Setttreact ; harvard
  SetEoverN=(1e17*22400*1013.25*SetTTd*SetEEd)/(6.022E23*Setppd*273.15)
  KINSPECS[0,*]=set19
  KINSPECS[1,*]=Set37
  KINSPECS[2,*]=Set19at59
  KINSPECS[3,*]=Set37at59
  KINSPECS[4,*]=Set37to19
  KINSPECS[5,*]=Set32to19
  KINSPECS[6,*]=Set78to79
  KINSPECS[7,*]=Set120to121
  KINSPECS[8,*]=Set106to107
  KINSPECS[9,*]=SetTTd
  KINSPECS[10,*]=Setppd
  KINSPECS[11,*]=SetUUd
  KINSPECS[12,*]=SetUUdx
  KINSPECS[13,*]=SetEEd
  KINSPECS[14,*]=Setttreact
  KINSPECS[15,*]=SetEoverN

  print,''
  print, set19
  print, Set37
  print, Set19at59
  print, Set37at59
  print,''
  print, Set37to19
  print,''
  print, Set32to19
  print, Set78to79
  print, Set120to121
  print, Set106to107
  print,''
  print, SetTTd
  print, Setppd
  print, SetUUd
  print, SetUUdx
  print, SetEEd
  print, Setttreact
  print, SetEoverN

  ;;;; save data
  names=['sig19','sig37','sig19TR','sig37TR','R37/19TR',    'R32/19TR','R78/79TR','R120/121TR','R106/107TR','Tdrift',    'pdrift','Udrift','Udx','Efield','treact',    'EoverN','','','','', $
    'nS_33','nS_42','nS_45','nS_59','nS_87',    'nS_69','nS_41','nS_71','nS_73','nS_79',    'nS_107','nS_121','nS_137','nS_81','nS_133',    'nS_181','nS_223','nS_207','nS_297','nS_281',    'nS_371','nS_355',$
    'nSxr_33','nSxr_42','nSxr_45','nSxr_59','nSxr_87',    'nSxr_69','nSxr_41','nSxr_71','nSxr_73','nSxr_79',    'nSxr_107','nSxr_121','nSxr_137','nSxr_81','nSxr_133',    'nSxr_181','nSxr_223','nSxr_207','nSxr_297','nSxr_281',    'nSxr_371','nSxr_355',$
    'rawS_33','rawS_42','rawS_45','rawS_59','rawS_87',    'rawS_69','rawS_41','rawS_71','rawS_73','rawS_79',    'rawS_107','rawS_121','rawS_137','rawS_81','rawS_133',    'rawS_181','rawS_223','rawS_207','rawS_297','rawS_281',    'rawS_371','rawS_355']
  dataAA=[KINSPECS, ncpsPERppbTR, ncpsPERppbTRxr,cpsPERppbRAW]

  dataAA=[transpose(names),transpose(string(dataAA))]
  makecsv, path2+'SENS '+PTRid+'_'+Datumzeit+'.csv',dataAA




  mames=(['rangeClusterRatio','tr_mLOW_bestex','tr_wLOW','tr_mHIGH','tr_wHIGH',compounds[0:21]])
  dataAA=([transpose([min(Set37to19[[0,3,4]]),max(Set37to19[[0,3,4]])]),transpose([masslow,bestEX]),transpose([widthlow,0]),transpose([masshigh,0]),transpose([widthhigh,0]),[XRdata]])

  dataAA=[transpose(mames),transpose(string(dataAA))]
  makecsv, path2+'XRdat '+PTRid+'_'+Datumzeit+'.csv',dataAA

  ;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; FIGURE TRANSMISSION
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  WINDOW, 5, xsize=1150,ysize=500
  !P.MULTI = [0,2,1]
  !Y.oMARGIN = [2,1]
  !X.oMARGIN = [5,5]
  !Y.MARGIN = [2,1]
  !x.MARGIN = [5,0]

  DEVICE, DECOMPOSED = 0


  ;plot transe
  loadct,5

  plot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),color=0,ytitle="transmission",xtitle="m/Q",background=-1,charsize=2, thick =2, charthick=2

  loadct,13

  oplot,indgen(399)+1,(indgen(399)+1)^bestEX/(59)^bestEX
  oplot,indgen(399)+1,tr(indgen(399)+1, bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/(indgen(399)+1)^bestEX,color=60



  mmm=[33,42,45,59,69,71,73,79,107,121,137,133,181,223,297,371]
  tansen=tr(mmm,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  ;tansen=tansen/tansen
  sense=sensitivities[[0,1,2,3,5,7,8,9,10,11,12,14,15,17,19,21]]

  NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40)
  essen=fltarr(22)
  for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
  senseCALC=[essen[0],essen[1],essen[2],essen[3],total(essen[4:6]),$
    essen[7],essen[8],essen[9],essen[10],essen[11],$
    total(essen[12:13]),essen[14],essen[15],total(essen[16:17]),$
    total(essen[18:19]),total(essen[20:21])]


  For i=0,3  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
  For i=4,11  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=60
  For i=12,15  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
  oplot, [mmm[10],mmm[10]], [0, tansen[10]*senseCALC[10]/sense[10]], thick=3, color=-1 ; plot m137 in red
  loadct,5

  xyouts,0.55,0.80,/normal,PTRid, color=0, charthick =3, charsize=2
  xyouts,0.55,0.72,/normal,Datumzeit, color=0, charthick =3, charsize=2
  xyouts,0.55,0.61,/normal,'Transmission parameters:  ', color=0, charthick =2, charsize=2
  xyouts,0.55,0.53,/norm,'ex: '+strtrim(string(bestEX,Format='(F8.2)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.45,/norm,'mLOW: '+strtrim(string(MASSlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.40,/norm,'wLOW: '+strtrim(string(WIDTHlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.32,/norm,'mHIGH: '+strtrim(string(MASShigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.27,/norm,'wHIGH: '+strtrim(string(WIDTHhigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2

  xyouts,0.55,0.19,/norm,'F37/F19: '+strtrim(string(Set37to19[ADD40],Format='(F8.3)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.14,/norm,'E/N: '+strtrim(string(SetEoverN[ADD40],Format='(I8)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.09,/norm,'Pd: '+strtrim(string(Setppd[ADD40],Format='(F8.2)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.04,/norm,'t_react: '+strtrim(string(1e6*Setttreact[ADD40],Format='(I8)'),2), color=0,charsize=2, charthick=2




  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then   write_jpeg, path2+'TRANS '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  WDELETE, 5


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; FIGURE TRANSMISSION
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  WINDOW, 7, xsize=1400,ysize=900
  !P.MULTI = [0,3,2]
  !Y.oMARGIN = [4,4]
  !X.oMARGIN = [8,4]
  !Y.MARGIN = [3,1]
  !x.MARGIN = [1,3]

  DEVICE, DECOMPOSED = 0
  cols=[110,50,70,175,160]
  transis=fltarr(5,399)
  for pp=0,4 do transis[pp,*]=tr(indgen(399)+1,exex[pp], MMLL[pp],WWLL[pp],MMHH[pp],WWHH[pp],/norm)

  for pp=0,4 do begin

    ADD40=pp*10

    Masslow=MMLL[pp]
    widthlow=WWLL[pp]
    MassHigh=MMHH[pp]
    Widthhigh=WWHH[pp]
    bestEX=exex[pp]

    ;plot transe
    loadct,5

    plot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),yrange=[0,max(transis)],color=0,background=-1,charsize=2, thick =2, charthick=2
    oplot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),color=cols[pp], thick =4

    loadct,13

    oplot,indgen(399)+1,(indgen(399)+1)^bestEX/(59)^bestEX
    oplot,indgen(399)+1,tr(indgen(399)+1, bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/(indgen(399)+1)^bestEX,color=60



    mmm=[33,42,45,59,69,71,73,79,107,121,137,133,181,223,297,371]
    tansen=tr(mmm,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
    ;tansen=tansen/tansen
    sense=sensitivities[[0,1,2,3,5,7,8,9,10,11,12,14,15,17,19,21]]

    NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40)
    essen=fltarr(22)
    for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
    senseCALC=[essen[0],essen[1],essen[2],essen[3],total(essen[4:6]),$
      essen[7],essen[8],essen[9],essen[10],essen[11],$
      total(essen[12:13]),essen[14],essen[15],total(essen[16:17]),$
      total(essen[18:19]),total(essen[20:21])]


    For i=0,3  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
    For i=4,11  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=60
    For i=12,15  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
    oplot, [mmm[10],mmm[10]], [0, tansen[10]*senseCALC[10]/sense[10]], thick=3, color=-1 ; plot m137 in red
    loadct,5

    xyouts,20,0.9*max([2,max(transis)]),'F37/F19: '+strtrim(string(Set37to19[pp],Format='(F8.3)'),2), color=0,charsize=1.5, charthick=2


  endfor

  plot, indgen(399)+1, transis[0,*],yrange=[0,max(transis)],color=0,background=-1,charsize=2, thick =2, charthick=2
  for pp=0,4 do oplot, indgen(399)+1, transis[pp,*],color=cols[pp], thick =3
  xyouts,0.72,0.26,/normal,'N2 dry', color=110,charsize=2,charthick=3
  xyouts,0.72,0.225,/normal,'air dry', color=50,charsize=2,charthick=3
  xyouts,0.72,0.19,/normal,'air wet', color=70,charsize=2,charthick=3
  xyouts,0.72,0.155,/normal,'N2 wet', color=175,charsize=2,charthick=3
  xyouts,0.72,0.12,/normal,'N2 dry', color=160,charsize=2,charthick=3

  xyouts,0.82,0.18,/norm,'E/N: '+strtrim(string(SetEoverN[0],Format='(I8)'),2), color=0,charsize=1.5, charthick=2
  xyouts,0.82,0.155,/norm,'Pd: '+strtrim(string(Setppd[0],Format='(F8.2)'),2), color=0,charsize=1.5, charthick=2
  xyouts,0.82,0.13,/norm,'t_react: '+strtrim(string(1e6*Setttreact[0],Format='(I8)'),2), color=0,charsize=1.5, charthick=2

  xyouts,0.30,0.97,/normal,PTRid+' '+Datumzeit, color=0, charthick =3, charsize=2
  xyouts,0.48,0.03,/normal,'m/Q', color=0, charthick =3, charsize=2
  xyouts,0.03,0.3,/normal,'transmission efficiency', orientation=90,color=0, charthick =3, charsize=2

  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then   write_jpeg, path2+'allTRANS '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  WDELETE, 7
  ADD40=0

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; FIGURE basic parameters
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  WINDOW, 4, xsize=1150,ysize=700
  !P.MULTI = [0,1,3]
  !Y.MARGIN = [3,1]
  !x.oMARGIN = [8,8]
  DEVICE, DECOMPOSED = 0
  loadct,5
  plot,reltime,TotSIG,xstyle=1,yrange=[0,1.1*max([I19+I37,TotSIG])],ystyle=1,color=0,ytitle="raw signal [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  oplot, reltime,smooth( I19+I37,5),thick =2, color=185
  xyouts,0.4,0.920,/normal,'Autodetection of            and            of injections', color=0
  xyouts,0.5,0.920,/normal,'START', color=110
  xyouts,0.58,0.920,/normal,'END', color=175
  xyouts,0.11,0.887,/normal,'Primary ions: I19+I37', color=178, charthick =2, charsize=1.5
  xyouts,0.11,0.860,/normal,'Product ions: sum of compounds in standard', color=0, charthick =2, charsize=1.5
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max([I19+I37,TotSIG]),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max([I19+I37,TotSIG]),1e14], color=175
  loadct,6
  faktor3=max(TotSIG,/nan)/max(data,/nan)
  oplot,reltime,data*faktor3,color=126
  ; oplot,reltime,data,color=126,thick =1.5
  xyouts,0.11,0.833,/normal,'Single compound: '+Datastr+' (x '+strtrim(string(faktor3,format='(F10.1)'),2)+')', color=105, charthick =2, charsize=1.5
  loadct,5
  tr19=tr(19,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  tr37=tr(37,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  tr32=tr(32,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  plot,reltime, smooth(primTR+TotSIGTR,5),yrange=[0,max(primTR+TotSIGTR)],xstyle=1,ystyle=1,color=0,ytitle="(transmission) corrected signal [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  oplot,reltime, smooth(primTR+TotSIGTR,5),thick =2,color=126
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max(primTR+TotSIGTR),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max(primTR+TotSIGTR),1e14], color=175
  oplot, reltime, smooth(TotSIGTR,5),thick =2, color=0
  oplot, reltime,smooth( I19,5)/tr19,thick =2, color=35
  oplot, reltime, smooth(I37,5)/tr37,thick =2, color=50
  oplot, reltime, smooth(I32,5)/tr32*10,thick =2, color=109

  xyouts,0.11,0.60,/normal,'Total signal:Primary+product ions', color=126, charthick =2, charsize=1.5
  xyouts,0.11,0.57,/normal,'Product ions', color=0, charthick =2, charsize=1.5
  xyouts,0.11,0.54,/normal,'I19', color=35, charthick =2, charsize=1.5
  xyouts,0.11,0.51,/normal,'I37', color=50, charthick =2, charsize=1.5
  xyouts,0.11,0.48,/normal,'I32 (x10)', color=109, charthick =2, charsize=1.5

  mmmax=max([smooth( (I37*tr19)/(I19*tr37),5),smooth( (I32*tr19)/(I19*tr32),5)])
  plot,reltime, smooth( (I37*tr19)/(I19*tr37),5),yrange=[0,mmmax],xstyle=1,ystyle=1,color=0,ytitle="ion ratios",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max(smooth( (I37*tr19)/(I19*tr37),5)),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max(smooth( (I37*tr19)/(I19*tr37),5)),1e14], color=175

  oplot,reltime, smooth( (I32*tr19)/(I19*tr32),5),color=109, thick =1.5;, charthick=2
  xyouts,0.11,0.25,/normal,'I37 / I19 (transmission corrected)', color=0, charthick =2, charsize=1.5
  xyouts,0.11,0.22,/normal,'I32 / I19 (transmission corrected)', color=109, charthick =2, charsize=1.5

  xyouts,0.97,0.9,/normal,orientation=-90,PTRid+'  '+Datumzeit, color=0, charthick =3, charsize=2

  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then  write_jpeg, path2+'SEQ '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; FIGURE  Fast injections
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  WINDOW, 6, xsize=1600,ysize=800
  !P.MULTI = [0,8,3]
  ;  !x.oMARGIN=[]
  !Y.oMARGIN = [5,5]
  !x.oMARGIN = [10,10]
  !Y.MARGIN = [3,1]
  !x.MARGIN = [3,1]
  DEVICE, DECOMPOSED = 0
  loadct,5
  for j=0,21 do begin
    yrange=range(compCUB[*,j,*]/1000)
    cols=[intarr(10)+110,intarr(10)+50,intarr(10)+70,intarr(10)+175,intarr(10)+160,$
      0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    plot,timestep*(indgen(15*step)-5*step),compCUB[0,j,*]/1000,xstyle=1,ystyle=1,yrange=yrange,color=0,background=-1,charsize=2, thick =2;, charthick=2
    cnts=0
    for i=0,max(d(timsSHORT))-1 do begin
      oplot,timestep*(indgen(15*step)-5*step),compCUB[i,j,*]/1000, color=cols[i], thick=1
      cnts=[cnts, counts[i,j]-countsBG[i,j]]
    endfor
    cnts=cnts[1:*]
    set=[mean(cnts[0:9]),100*stddev(cnts[0:9])/mean(cnts[0:9])]
    for k=1,4 do set=[set, [mean(cnts[10*k+0:10*k+9]),100*stddev(cnts[10*k+0:10*k+9])/mean(cnts[10*k+0:10*k+9])]]
    ;print,[ mean(set[[0,2,4,6,8]]),mean(set[[1,3,5,7,9]]),  stddev(set[[1,3,5,7,9]])]
    xyouts,-2,max(yrange)*0.9,compounds[j],color=0,charsize=1.5,charthick=1.5
    xyouts,-2,max(yrange)*0.8,string(VMRppm[j]*1000*dil,format='(F5.1)'),color=0,charsize=1.5,charthick=1.5
    xyouts,2,max(yrange)*0.8,string(set[1],format='(F4.1)')+'%',color=110,charthick=2
    xyouts,2,max(yrange)*0.7,string(set[3],format='(F4.1)')+'%',color=50,charthick=2
    xyouts,2,max(yrange)*0.6,string(set[5],format='(F4.1)')+'%',color=70,charthick=2
    xyouts,2,max(yrange)*0.5,string(set[7],format='(F4.1)')+'%',color=175,charthick=2
    xyouts,2,max(yrange)*0.4,string(set[9],format='(F4.1)')+'%',color=160,charthick=2
  endfor
  xyouts,0.85,0.21,/normal,PTRid,color=1,charsize=1.5,charthick=2
  datum=strmid(datumzeit,0,strpos(datumzeit,'-'))
  xyouts,0.85,0.18,/normal,Datum,color=1,charsize=1.5,charthick=2
  Zeit=strmid(datumzeit,1+strpos(datumzeit,'-'),1000)
  xyouts,0.85,0.15,/normal,Zeit,color=1,charsize=1.5,charthick=2
  xyouts,0.76,0.25,/normal,'N2 dry', color=110,charsize=1.5,charthick=1.5
  xyouts,0.76,0.225,/normal,'air dry', color=50,charsize=1.5,charthick=1.5
  xyouts,0.76,0.20,/normal,'air wet', color=70,charsize=1.5,charthick=1.5
  xyouts,0.76,0.175,/normal,'N2 wet', color=175,charsize=1.5,charthick=1.5
  xyouts,0.76,0.15,/normal,'N2 dry', color=160,charsize=1.5,charthick=1.5

  xyouts,0.4,0.05,/normal,'time in seconds', color=1,charsize=1.5,charthick=1.5
  xyouts,0.04,0.43,/normal,'signal in kcps',orientation=90, color=1,charsize=1.5,charthick=1.5

  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then  write_jpeg, path2+'INJ '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  WDELETE, 6
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  print, 'end'
  return, create_struct('Fptr', [1,1,1], 'S_nam', ['time', compounds[0:21]], 'S_val',S_set[0:22], 'Serr_val',Serr_set[0:22])
end







function ActrisProtocol_nov_2018, path,name,ProtData,masses, ProtEngData , engnames, computerID
 
  helpi=1
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    helpi=0
    CATCH, /CANCEL
  ENDIF


  if (helpi eq 1) then begin
    file_id=H5f_open(name)
    n_attr=H5A_GET_NUM_ATTRS(file_id)
    ComputerID='nix'
    for j=0,n_attr-1 do if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(file_id,j)),'Computer ID') gt -0.5) then  ComputerID=H5A_read( H5A_OPEN_IDX(file_id,j))
    H5f_close, file_id
  endif else ComputerID='QMS_LSCE'



  T_FC=31
  Fcal=200
  Fplus=0
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  Fcal=2000 ; VOCUS  PTR-TOF
  if(strlen(ComputerID) eq 0 ) then begin
    Fcal=2000
    Fplus=1500 ;Harvard
  endif
  Flow=float(Fcal)*273/298+Fplus+9.6

  Dil=(9.6*273/(273+T_FC))/Flow
  T_loop=273+100

  ; if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 and abs(min(ProtEngData[*,0])-3186.4) lt 0.2) then  masses=[masses[1:*],9999] ; Juelich PTR-TOF

  Path2=path+'STD_PROT/'
  mmist=file_info(path2)
  if (mmist.directory eq 0) then begin
    FILE_MKDIR, path2
  endif
  starttim=min(ProtEngData[*,0])
  reltime=(ProtEngData[*,0]-min(ProtEngData[*,0]))*24*60
  hilfi=strmid(strmid(path2,strpos(path2,'\')+1,1000),1+strpos(strmid(path2,strpos(path2,'\')+1,1000),'\'))
  PTRid=strmid(hilfi,0,strpos(hilfi,'\') )
  Datumzeit=t09str(ProtEngData[0])

  ; convert cps to counts
  timestep=max(reltime)*60/max(d(reltime))
  ;ProtData=ProtData*timestep


  I19=ProtData[where(abs(masses-19.017) eq min(abs(masses-19.017)) ),*]
  I21=ProtData[where(abs(masses-21.022) eq min(abs(masses-21.022)) ),*]
  I37=ProtData[where(abs(masses-37.028) eq min(abs(masses-37.028)) ),*]
  I38=ProtData[where(abs(masses-38.033) eq min(abs(masses-38.033)) ),*]
  I39=ProtData[where(abs(masses-39.033) eq min(abs(masses-39.033)) ),*]
  I34=ProtData[where(abs(masses-33.994) eq min(abs(masses-33.994)) ),*]
  I32=ProtData[where(abs(masses-31.989) eq min(abs(masses-31.989)) ),*]
  I32[where(I32 gt 6000)]=I34[where(I32 gt 6000)]*242

  if( max(I19) gt 5000) then I19=I21*487
  I37[where(I37 lt I38 *645)]=I38[where(I37 lt I38 *645)]*645
  Prim=reform(I19+I37)


  F37=I37/prim
  F32=I34*242/prim

 Pdrift=ProtEngData[*,where(strpos(engnames,'p-Drift') gt -0.5)] & Pdrift=Pdrift[*,0]

  H2Oscc=ProtEngData[*,where(strpos(engnames,'H2O scc')  gt -0.5 or strpos(engnames,'H2O[scc')  gt -0.5)] & H2Oscc=H2Oscc[*,0]
  Udrift=ProtEngData[*,where(strpos(engnames,'Udrift') gt -0.5)] & Udrift=Udrift[*,0]
  Udx=ProtEngData[*,where(strpos(engnames,'Udx') gt -0.5)] & Udx=Udx[*,0]
  FCinlet=ProtEngData[*,where(strpos(engnames,'FCinlet') gt -0.5)] & FCinlet=FCinlet[*,0]
  Tdrift=ProtEngData[*,where(strpos(engnames,'T-Drift') gt -0.5 )] & Tdrift=Tdrift[*,0]
  if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 ) then  Tdrift=ProtEngData[*,-1]+60   ; Juelich PTR-TOF
  PC=ProtEngData[*,where(strpos(engnames,'PC mba') gt -0.5 or strpos(engnames,'PC[mba')  gt -0.5)] & PC=PC[*,0]

  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  begin  ; VOCUS  PTR-TOF
    Pdrift=ProtEngData[*,where(strpos(engnames,'SSQ pressure monitor [mbar]') gt -0.5)] & Pdrift=Pdrift[*,0]
    Tdrift=ProtEngData[*,where(strpos(engnames,'TOF temp monitor') gt -0.5 )]
    Udrift=ProtEngData[*,where(strpos(engnames,'Spare 1 monitor [V]') gt -0.5)] & Udrift=Udrift[*,0]-25
  endif   ; VOCUS  PTR-TOF
  if(strlen(ComputerID) eq 0 ) then begin ;PTR3
    Tdrift=ProtEngData[*,where(strpos(engnames,'TPS body temp monitor') gt -0.5)] & Pdrift=Pdrift[*,0]
    Pdrift=ProtEngData[*,where(strpos(engnames,'REAC   sensor: APR/CMR') gt -0.5)] & Pdrift=Pdrift[*,0]
  endif

  D5_355=ProtData[where(abs(masses-355.07) eq min(abs(masses-355.07)) ),*]*1.67
  D5_371=ProtData[where(abs(masses-371.102) eq min(abs(masses-371.102)) ),*]*1.69
  if( min(abs(masses-371.102)) gt 1) then  D5_371= D5_371/1000
  if( min(abs(masses-355.07)) gt 1) then  D5_355= D5_355/1000
  D4_297=ProtData[where(abs(masses-297.083) eq min(abs(masses-297.083)) ),*]*1.52
  D4_281=ProtData[where(abs(masses-281.052) eq min(abs(masses-281.052)) ),*]*1.51
  D3_223=ProtData[where(abs(masses-223.064) eq min(abs(masses-223.064)) ),*]*1.37
  D3_207=ProtData[where(abs(masses-207.033) eq min(abs(masses-207.033)) ),*]*1.36
  benzCl3_181=ProtData[where(abs(masses-180.938) eq min(abs(masses-180.938)) ),*]*2.48
  benzF3_133=ProtData[where(abs(masses-133.026) eq min(abs(masses-133.026)) ),*]*1.07
  Pin_137=ProtData[where(abs(masses-137.132) eq min(abs(masses-137.132)) ),*]*1.12
  Pin_81=ProtData[where(abs(masses-81.07) eq min(abs(masses-81.07)) ),*]*1.07
  TMB_121=ProtData[where(abs(masses-121.101) eq min(abs(masses-121.101)) ),*]*1.10
  XYL_107=ProtData[where(abs(masses-107.086) eq min(abs(masses-107.086)) ),*]*1.09
  BEN_79=ProtData[where(abs(masses-79.054) eq min(abs(masses-79.054)) ),*]*1.07
  MEK_73=ProtData[where(abs(masses-73.065) eq min(abs(masses-73.065)) ),*]*1.05
  MVK_71=ProtData[where(abs(masses-71.049) eq min(abs(masses-71.049)) ),*]*1.05
  MBO_87=ProtData[where(abs(masses-87.080) eq min(abs(masses-87.080)) ),*]*1.06
  MBO_69=ProtData[where(abs(masses-69.070) eq min(abs(masses-69.070)) ),*]*1.06
  MBO_41=ProtData[where(abs(masses-41.039) eq min(abs(masses-41.039)) ),*]*1.03
  ACE_59=ProtData[where(abs(masses-59.049) eq min(abs(masses-59.049)) ),*]*1.03
  ACETAL_45=ProtData[where(abs(masses-45.033) eq min(abs(masses-45.033)) ),*]*1.02
  CH3CN_42=ProtData[where(abs(masses-42.034) eq min(abs(masses-42.034)) ),*]*1.02
  METH_33=ProtData[where(abs(masses-33.033) eq min(abs(masses-33.033)) ),*]*1.01
  BEN_78=ProtData[where(abs(masses-78.047) eq min(abs(masses-78.047)) ),*]*1.07
  if( min(abs(masses-78.047)) gt 1) then  BEN_78= BEN_78/1000
  TMB_120=ProtData[where(abs(masses-120.094) eq min(abs(masses-120.094)) ),*]*1.10
  if( min(abs(masses-120.094)) gt 1) then  TMB_120= TMB_120/1000
  XYL_106=ProtData[where(abs(masses-106.079) eq min(abs(masses-106.079)) ),*]*1.09
  if( min(abs(masses-106.079)) gt 1) then  XYL_106= XYL_106/1000

  ;correlation to correct delay

  Bestcor= correlate(ACE_59,D5_371)
  timeshift=0
  for i=1,50 do begin
    shiftcor= correlate(ACE_59,[D5_371[i:*],intarr(i)])
    if( shiftcor gt bestcor) then timeshift=i
    if( shiftcor gt bestcor) then bestcor=shiftcor
  endfor
  if(timeshift gt 0.5) then begin
    Print, 'D5 data shifted by '+string(timeshift)+' points'
    D5_355=transpose([D5_355[timeshift:*], fltarr(timeshift)])
    D5_371=transpose([D5_371[timeshift:*], fltarr(timeshift)])
  endif

  TotSIG=    METH_33 +    CH3CN_42 +    Acetal_45 +     Ace_59 +    MBO_87 +     MBO_69 +      MBO_41 +    MVK_71 +    MEK_73 +    Ben_79 +$
    Xyl_107 +    TMB_121 +     Pin_137 +       Pin_81 +   benzF3_133 + benzCl3_181 +  D3_223 +    D3_207 +    D4_297 +    D4_281 +$
    D5_371 +     D5_355


  D5_358iso=ProtData[where(abs(masses-358.073) eq min(abs(masses-358.073)) ),*]/0.0358
  D5_374iso=ProtData[where(abs(masses-374.105) eq min(abs(masses-374.105)) ),*]/0.0370
  D4_299iso=ProtData[where(abs(masses-299.086) eq min(abs(masses-299.086)) ),*]/0.1178
  D4_283iso=ProtData[where(abs(masses-283.055) eq min(abs(masses-283.055)) ),*]/0.1170
  D3_225iso=ProtData[where(abs(masses-225.067) eq min(abs(masses-225.067)) ),*]/0.0923
  D3_209iso=ProtData[where(abs(masses-209.036) eq min(abs(masses-209.036)) ),*]/0.0916
  benzCl3_182iso=ProtData[where(abs(masses-181.941) eq min(abs(masses-181.941)) ),*]/0.0267
  benzF3_134iso=ProtData[where(abs(masses-134.029) eq min(abs(masses-134.029)) ),*]/0.0612
  Pin_138iso=ProtData[where(abs(masses-138.135) eq min(abs(masses-138.135)) ),*]/0.0987
  Pin_82iso=ProtData[where(abs(masses-82.073) eq min(abs(masses-82.073)) ),*]/0.0617
  TMB_122iso=ProtData[where(abs(masses-122.104) eq min(abs(masses-122.104)) ),*]/0.0896
  XYL_108iso=ProtData[where(abs(masses-108.089) eq min(abs(masses-108.089)) ),*]/0.0804
  BEN_80iso=ProtData[where(abs(masses-80.057) eq min(abs(masses-80.057)) ),*]/0.0615
  MEK_74iso=ProtData[where(abs(masses-74.068) eq min(abs(masses-74.068)) ),*]/0.0426
  MVK_72iso=ProtData[where(abs(masses-72.052) eq min(abs(masses-72.052)) ),*]/0.0424
  MBO_88iso=ProtData[where(abs(masses-88.083) eq min(abs(masses-88.083)) ),*]/0.0526
  MBO_70iso=ProtData[where(abs(masses-70.073) eq min(abs(masses-70.073)) ),*]/0.0522
  MBO_42iso=ProtData[where(abs(masses-42.042) eq min(abs(masses-42.042)) ),*]/0.0320
  ACE_60iso=ProtData[where(abs(masses-60.052) eq min(abs(masses-60.052)) ),*]/0.0325
  ACETAL_46iso=ProtData[where(abs(masses-46.036) eq min(abs(masses-46.036)) ),*]/0.0220
  CH3CN_43iso=ProtData[where(abs(masses-43.037) eq min(abs(masses-43.037)) ),*]/0.0251
  METH_34iso=ProtData[where(abs(masses-34.036) eq min(abs(masses-34.036)) ),*]/0.0116

  MBO_42iso=MBO_42iso*0.000001
  METH_34iso=METH_34iso*0.00001
  TotSIGiso=    METH_34iso +    CH3CN_43iso +    Acetal_46iso +     Ace_60iso +    MBO_88iso +     MBO_70iso +      MBO_42iso +    MVK_72iso +    MEK_74iso +    Ben_80iso +$
    Xyl_108iso +    TMB_122iso +     Pin_138iso +       Pin_82iso +   benzF3_134iso + benzCl3_182iso +  D3_225iso +    D3_209iso +    D4_299iso +    D4_283iso +$
    D5_374iso +     D5_358iso




  mTOz=[33,42,45,59,87 ,    69 , 41,71 ,73 , 79 ,    107, 121, 137,81 ,133 ,    181, 223,207, 297,281 ,$
    371 ,355,-1,-1,-1,    -1,-1 ,-1,19,37,     39,34,43,46,60, 88,70, 42,72,74 ,$
    80, 108,122,138,82,134 ,182, 225,209, 299, 283, 374, 358,-1,-1,-1,78,32,120,106 ]
  compounds=['METH_33',   'CH3CN_42',   'Acetal_45',    'Ace_59',   'MBO_87',    'ISO/MBO_69',     'ISO/MBO_41',   'MVK_71',   'MEK_73',   'Ben_79',$
    'Xyl_107',   'TMB_121',    'MT_137',      'MT_81',   'benzF3_133','benzCl3_181','D3_223',   'D3_207',   'D4_297',   'D4_281',$
    'D5_371',    'D5_355',     'TotSIG',       'FCinlet',  'reltime',   'TotSIGiso',  'prim',     'Tdrift',   'I19',      'I37',$
    'I39', 'METH_34iso','CH3CN_43iso','Acetal_46iso','Ace_60iso','MBO_88iso',' MBO_70iso',' MBO_42iso','MVK_72iso','MEK_74iso','Ben_80iso',$
    'Xyl_108iso','TMB_122iso','Pin_138iso','Pin_82iso','benzF3_134iso','benzCl3_182iso','D3_225iso','D3_209iso','D4_299iso',' D4_283iso',$
    'D5_374iso','D5_358iso','Udx','pdrift','Udrift','BEN_78','I32','TMB_120','XYL_106']
  isotopecor=[1.01,1.02,1.02,1.03,1.06,1.06,1.03,1.05,1.05,1.07,1.09,1.1,1.12,1.07,1.07,2.48,1.37,1.36,1.52,1.51,1.69,1.67,1,1,1,1,1,1]

  RRK=[2.2,2.5+0.9, 3.03,  3.25, 2.68,  2.68, 2.68, 3.53, 3.25, 1.97, 2.31,  2.4,  2.45, 2.45,   2.46*1.0,  2.88,  2.59,  2.59,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
  RRK=[2.2,2.6+0.5, 3.03,  3.25, 2.68,         2.68, 2.68, 3.53, 3.25, 1.97,       2.31,  2.4,  2.45, 2.45,   2.46*1.1,        2.88,  2.59,  2.59,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
  RRK=[2.2/1.3,2.6+0.5, 3.03,  3.25, 2.68/1.45,         2.68/1.45, 2.68/1.45, 3.53/1.3, 3.25, 1.97,       2.31,  2.4,  2.45/1.2, 2.45/1.2,   2.46,        2.88/1.2,  2.59/1.2,  2.59/1.2,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9


  VMRppmNPL=[1.019,1.020,1.001,0.983,0.996,0.996,0.996,0.961,1.009,1.025,0.998,1.001,0.989,0.989,1.047,0,0,0,0.901,0.901,1.051,1.051,4,0,0,0,0,0]
  VMRppmAR=[1.011,1.01,1.111,0.967,0.998,0.998,0.998,0.937,1.017,1.006,0.983,0.989,0.983,0.983,1.032,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]
  VMRppmAR=[1.011,1.01,  0.6 ,0.967,0.998,0.998,0.998,0.55 ,1.017,1.006,0.983,0.989,0.983,0.983,1.2  ,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]

  CompARR=[METH_33, CH3CN_42, ACETAL_45, ACE_59, MBO_87 ,$
    MBO_69 , MBO_41,MVK_71 ,MEK_73 ,BEN_79 ,$
    XYL_107, TMB_121, Pin_137,Pin_81 ,benzF3_133 ,$
    benzCl3_181, D3_223, D3_207, D4_297,D4_281 ,$
    D5_371 ,D5_355, TotSIG, transpose((FCinlet-FCinlet)+Flow), transpose(reltime),$
    TotSIGiso,transpose(prim) ,transpose(Tdrift),I19,I37,$
    I39,METH_34iso,CH3CN_43iso,Acetal_46iso,Ace_60iso, MBO_88iso,MBO_70iso, MBO_42iso,MVK_72iso,MEK_74iso ,$
    Ben_80iso, Xyl_108iso,TMB_122iso,Pin_138iso,Pin_82iso,benzF3_134iso ,benzCl3_182iso, D3_225iso,D3_209iso, D4_299iso, D4_283iso,$
    D5_374iso, D5_358iso ,transpose(Udx),transpose(pdrift),transpose(Udrift),BEN_78,I32,TMB_120,XYL_106]

  i_Tdrift=27
  i_Udx=53
  i_pdrift=54
  i_Udrift=55


  ;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;    Find Injections
  ;;;;;;;;;;;;;;;;;;;;;;;;;;

  LongDUR=10
  tims=0
  timmax=0
  timend=0
  sigmax=0
  SearchStart=1
  SearchEnd=0

  data=ACE_59
  dataSTR='ACE_59'
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 and abs(min(ProtEngData[*,0])-3184.484) lt 0.2) then  data=MEK_73 ; VOCUS Calib 20 sep
  if(strpos(ComputerID,'50b4c522-8345-4094-bb5d-683484b5253e') gt -0.5 and abs(min(ProtEngData[*,0])-3190.6) lt 0.2) then  data=benzF3_133 ; UHEL Calib 26 sep
  if(strlen(ComputerID) eq 0 ) then  data=CH3CN_42 ; Harvard
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 and abs(min(ProtEngData[*,0])-3184.484) lt 0.2) then  dataSTR='MEK_73' ; VOCUS Calib 20 sep
  if(strpos(ComputerID,'50b4c522-8345-4094-bb5d-683484b5253e') gt -0.5 and abs(min(ProtEngData[*,0])-3190.6) lt 0.2) then  dataSTR='benzF3_133' ; UHEL Calib 26 sep

  if(strlen(ComputerID) eq 0 ) then  dataSTR='CH3CN_42' ; Harvard


  mini=quantile(data,0.1)
  midi=quantile(data,0.4)
  i30s=ceil(0.5*max(d(data))/max(reltime))
  faktor2=2
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  faktor2=3 ; VOCUS  PTR-TOF
  step=1
  ; step=0.5
  if(strlen(ComputerID) eq 0 ) then step=5
  print, [mini,midi,max(d(data)),step, faktor2, i30s]
  for i=3,max(d(data))-2 do begin
    if( SearchStart eq 1) then if(abs(data[i]-mini)/abs(data[i-2*step]-mini) gt 3) then if(data[i]gt faktor2*midi) then   begin
      tims=[tims,i]
      ; print, abs(data[i]-mini)/abs(data[i-1]-mini)
      istart=i
      mini=min([data[i-1*step],data[i-2*step],data[i-3*step] ])
      i=i+1+step-1
      SearchStart=0
      SearchEnd=1

    endif
    if(i gt i30s) then mininew=min(data[lindgen(i30s)+i-i30s])
    faktor=1.0
    if(strpos(ComputerID,'a5607e09-ea6a-4dc2-8b59-43e174eb06af') gt -0.5 and abs(min(ProtEngData[*,0])-3188.457) lt 0.2) then  faktor=1.3 ; Lancaster Calib 24 sep  PTR-TOF

    if(i gt i30s) then  if(mininew lt midi*faktor) then mini = mininew
    if( SearchEnd eq 1) then  if(abs(data[i-1*step]-mini)/abs(data[i]-mini) gt 1.5) then  if(data[i-1*step] gt midi ) then   begin
      ;  print, [i,abs(data[i-1]-mini)/abs(data[i]-mini)-1.5,data[i-1] - midi]
      timend=[timend,i]
      sigmax=[sigmax,max(data[istart:i])/midi]
      helpi=where((data[istart:i]) eq max(data[istart:i]))
      timmax=[timmax,istart+helpi[0]]
      ;   print, [i-istart,i,1.0*i/120,abs(data[istart]-mini)/abs(data[istart-1]-mini),data[istart],midi ,data[i-1] ,abs(data[i-1]-mini)/abs(data[i]-mini) ]
      i=i+1
      istart=istart+1
      ;   print, [i-istart,i, 1.0*i/120,abs(data[istart]-mini)/abs(data[istart-1]-mini),data[istart] ,midi,data[i-1] ,abs(data[i-1]-mini)/abs(data[i]-mini) ]
      ;    print, ''

      SearchStart=1
      SearchEnd=0

    endif
    ;i=i+step-1
  endfor


  tims=tims[1:*]
  timend=timend[1:*]
  sigmax=sigmax[1:*]
  timmax=timmax[1:*]

  ;fix:
  if(max(d(tims))-1 eq max(d(timend))) then timend=[timend,max(tims)+3]
  if(max(d(tims))-1 eq max(d(timend))) then sigmax=[sigmax,data[max(tims)+3]]
  if(max(d(tims))-1 eq max(d(timend))) then timmax=[timmax,max(tims)+1]

  injectiontimes=reltime[tims]
  injectiontimesEND=reltime[timend]

  duration=(injectiontimesEND-injectiontimes)*60  ; in seconds

  ;;;
  ; clean
  ;;;

  timsold=tims
  durationold=duration
  injectiontimesold=injectiontimes
  injectiontimesENDold=injectiontimesEND

  if(duration[0] lt LongDUR) then if(injectiontimes[1]*60-6 gt injectiontimesEND[0]*60) then begin
    tims[0]=-9999
    timend[0]=-9999
    injectiontimes[0]=-9999
    injectiontimesEND[0]=-9999
    duration[0]=-9999
  endif

  for i=1, max(d(tims))-2 do begin
    if(duration[i-1] lt LongDUR) then if(injectiontimesEND[i-1]*60+6 lt injectiontimes[i]*60) then  if(duration[i] lt LongDUR) then if(injectiontimes[i+1]*60-6 gt injectiontimesEND[i]*60) then begin

      tims[i]=-9999

      timend[i]=-9999
      injectiontimes[i]=-9999
      injectiontimesEND[i]=-9999
      duration[i]=-9999
    endif
  endfor


  if(duration[max(d(tims))-1] lt LongDUR) then if(injectiontimesEND[max(d(tims))-2]*60+6 lt injectiontimes[max(d(tims))-1]*60) then begin
    tims[max(d(tims))-1]=-9999
    timend[max(d(tims))-1]=-9999
    injectiontimes[max(d(tims))-1]=-9999
    injectiontimesEND[max(d(tims))-1]=-9999
    duration[max(d(tims))-1]=-9999
  endif


  ; clean short injections
  Shortsig=quantile(sigmax[where(duration lt LongDUR)],0.6)
  intex=where(duration lt LongDUR and sigmax lt Shortsig/5)
  if(max(intex) gt -0.5) then  begin
    tims[intex]=-9999
    timend[intex]=-9999
    injectiontimes[intex]=-9999
    injectiontimesEND[intex]=-9999
    duration[intex]=-9999
  endif
  ;  print, [transpose(string(timsold,format='(F8.1)')),transpose(string(durationold,format='(F8.1)')),transpose(string(injectiontimesold*60,format='(F8.1)')),transpose(string(injectiontimesENDold*60,format='(F8.1)')),transpose(string(tims,format='(F8.1)')),transpose(string(duration,format='(F8.1)')),transpose(string(injectiontimes*60,format='(F8.1)')),transpose(string(injectiontimesEND*60,format='(F8.1)')),transpose(string(sigmax,format='(F8.1)'))]




  tims=tims[where(tims gt -9999)]
  sigmax=sigmax[where(timend gt -9999)]
  timmax=timmax[where(timend gt -9999)]

  timend=timend[where(timend gt -9999)]
  injectiontimes=injectiontimes[where(injectiontimes gt -9999)]
  injectiontimesEND=injectiontimesEND[where(injectiontimesEND gt -9999)]
  duration=duration[where(duration gt -9999)]

  PREVdistance=[-9999,-60.0*(injectiontimes[0:max(d(tims))-2]-injectiontimes[1:*])]
  NEXTdistance=[60.0*(injectiontimes[1:*]-injectiontimes[0:max(d(tims))-2]),-9999]
  if(duration[0] gt LongDUR) then sequence=100 else sequence = 1
  for i=1,max(d(tims))-1 do if(duration[i] le LongDUR) then if (abs(PREVdistance[i]) lt 8.5) then if (sequence[i-1] lt 99) then sequence=[sequence,sequence[i-1]+1] else sequence=[sequence,1] else sequence=[sequence,1] else sequence=[sequence,100]
  for i=0, max(d(tims))-1 do if(sequence[i] eq 10) then for j=0,9 do sequence[i-j]=10

  ; clean long injections
  Longsig=max(sigmax[where(sequence eq 100)])
  intex=where(sequence eq 100 and sigmax lt Longsig/10)
  if(max(intex) gt -0.5) then sequence[intex]=-9999




  if( max(where(sequence ne 10 and sequence ne 100  )) gt -0.5) then begin
    sequence[where(sequence ne 10 and sequence ne 100  )]=-9999
    tims=tims[where(sequence gt -9999)]
    timend=timend[where(sequence gt -9999)]
    injectiontimes=injectiontimes[where(sequence gt -9999)]
    injectiontimesEND=injectiontimesEND[where(sequence gt -9999)]
    duration=duration[where(sequence gt -9999)]
    sigmax=sigmax[where(sequence gt -9999)]
    timmax=timmax[where(sequence gt -9999)]
    sequence=sequence[where(sequence gt -9999)]

  endif


  injectSHORT=injectiontimes[where(duration lt 4)]
  injectSHORTend=injectiontimesEND[where(duration lt 4)]
  timsSHORT=tims[where(duration lt 4)]
  timsSHORTend=timend[where(duration lt 4)]

  injectLONG=injectiontimes[where(duration gt 4)]
  injectLONGend=injectiontimesEND[where(duration gt 4)]
  timsLONG=tims[where(duration gt 4)]
  timsLONGend=timend[where(duration gt 4)]



  CompCUB=dblarr(max(d(injectSHORT)),max(d(compounds)),15*step) ; 12 injections, 23 ions, 15 cycles
  for i=0,max(d(timsSHORT))-1 do CompCUB[i,*,*]=CompARR[*,indgen(15*step)-5*step+timsShort[i]]
  ;  counts=total(compCUB[*,*,step*[4,5,6,7,8,9,10,11]],3)
  ;countsBG=8*total(compCUB[*,*,step*[1,2,3,12,13]],3)/5

  counts=total(compCUB[*,*,[indgen(8*step)+4*step]],3)*timestep; counts over 4s integration period
  countsBG=(8.0/5)*total(compCUB[*,*,[indgen(3*step)+1*step,indgen(2*step)+12*step]],3)*timestep


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;; S
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;   Cylinder: CC502781
  ;Cylinder Test Date: 02/14
  ;Valve: Ceodeux 14/686691 SS CGA350
  ;Cylinder Pressure: 2000 psi @ 22 °C
  ;Analysis Date: April 12, 2016
  ;Multi-component calibration mix
  ;Compound CAS# Concentration (ppb) Uncertainty
  ;
  ;Acetaldehyde 75-07-0         1111 ±5%
  ;Methanol 67-56-1        1011 ±5%
  ;Acetone 67-64-1 967 ±5%
  ;Acetonitrile 75-05-8 1010 ±5%
  ;Methyl Vinyl Ketone 78-94-4 937 ±5%
  ;Methyl Ethyl Ketone 78-93-3 1017 ±5%
  ;2-Methyl-3-Buten-2-ol 115-18-4 998 ±5%
  ;Benzene 71-43-2 1006 ±5%
  ;1,2,3-Trifluorobenzene 367-23-7 1032 ±5%
  ;Hexamethylcyclotrisiloxane (D3) 541-05-9 992 ±5%
  ;m-Xylene 108-38-3 983 ±5%
  ;alpha-Pinene 80-56-8 983 ±5%
  ;Octamethylcyclotetrasiloxane (D4) 556-67-2 995 ±5%
  ;1,3,5-Trimethylbenzene 108-67-8 989 ±5%
  ;Decamethylcyclopentasiloxane (D5) 541-02-6 995 ±5%
  ;1,2,4-Trichlorobenzene 120-82-1 995 ±5%

  if(min(ProtEngData[*,0]) lt 3186.0 or min(ProtEngData[*,0]) gt 3194.0 ) then VMRppm=VMRppmAR

  ;propane 0.981 0.015
  ;ethanol 0.965 0.024
  ;
  ;methanol 1.019 0.031
  ;acetonitrile 1.020 0.031
  ;acetaldehyde 1.001 0.030
  ;acetone 0.983 0.020
  ;isoprene 0.996 0.020
  ;3-buten-2-one (MVK) 0.961 0.029
  ;butan-2-one (MEK) 1.009 0.030
  ;benzene 1.025 0.015
  ;m-xylene 0.998 0.025
  ;1,2,4-TMB 1.001 0.025
  ;1,2,4-trifluorobenzene 1.047 0.052
  ;3-carene 0.989 0.025
  ;D4-siloxane 0.901 0.045
  ;D5-siloxane 1.051 0.053

  if(min(ProtEngData[*,0]) ge 3186.0  and min(ProtEngData[*,0]) le 3194.0 ) then VMRppm=VMRppmNPL


  VMRppm[where(VMRppm eq 0)]=1e5








  essen=fltarr(10)
  essen42=fltarr(10)
  prim19=fltarr(10)
  prim37=fltarr(10)
  i2=0
  en=fltarr(22)
  for i=0,21 do  en[i]=1e-6*VMRppm[i]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en42=1e-6*VMRppm[1]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en59=1e-6*VMRppm[3]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol

  Fmol=(Flow)/(60.0*1000.0*22.4) ; unit is mol/s
  ;  faccct=1.0
  ;  if(strlen(ComputerID) eq 0 ) then faccct=20.0 ; harvard
  d_d=9.6
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  d_d=10; estimated based on E/N of 160 Td, VOCUS  PTR-TOF
  p_d=mean(counts[indgen(10),i_pdrift]/4)
  E_d=(mean(counts[indgen(10),i_udrift]/4)+mean(counts[indgen(10),i_udx]/4))/d_d
  T_d=mean(counts[indgen(10),i_Tdrift]/4)+273.15
  t_react=(d_d*p_d*273.15)/(E_d*T_d*2.7*1013.25)
  if(strlen(ComputerID) eq 0 ) then t_react=0.003 ; harvard

  sensitivity42=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[1]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission
  sensitivity59=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[3]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission

  sensitivities=fltarr(22)
  for i=0,21 do sensitivities[i]=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[i]/1013.25)


  ADD40=0
  if(strmatch(strtrim(strmid(name,strpos(name,'\',/reverse_search)+1,1000),2),'2017.09.20-13h21m39s_calib_rupert_1s.h5') eq 1) then ADD40=40

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;        TRANSMISSION retrieve nitial best EX
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 
    MASSlow=10
    WIDTHlow=2
    MASShigh=1000
    WIDTHhigh=10
    ex=0.5

    window,28, xsize = 500, ysize=400
    !P.MULTI = [0,1,1]
    loadct,20



    DELTAex=0.01
    EXrange=[0,2]
    field=fltarr(201)
    scoreee=1e10
    bestEX=0.5

    NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/medium)
    essen=fltarr(22)
    for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
    xx=[59,69,71,73,79,107,121,133,137,223,297,355]
    set=[essen[3]/sensitivities[3],(essen[5]+essen[6])/sensitivities[5],essen[7]/sensitivities[7],essen[8]/sensitivities[8],essen[9]/sensitivities[9], $
      essen[10]/sensitivities[10],essen[11]/sensitivities[11],essen[14]/sensitivities[14],(essen[12]+essen[13])/sensitivities[12]]
    if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then begin ;VOCUS
      set1=set[[0,2,3,5,6,8]]
      xx=xx[[0,2,3,5,6,8]]
      fiiil=where(set1 ne max(set1[1:5]) and set1 ne min(set1[1:5]))
    endif else begin
      set1=set[[0,1,2,3,4,5,6,7,8]]
      xx=xx[[0,1,2,3,4,5,6,7,8]]
      fiiil=where(set1 ne max(set1[1:8]) and set1 ne min(set1[1:8]))
    endelse



    for dEX=0,200 do begin
      ex=DELTAex*dEX
      NC=calcNC(ex, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/medium)
      essen=fltarr(22)
      for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
      cols=[10,10,10,10,10,   100,100,100,100,100,   175,175,175,175,175, 250,250,250,250,250,250,250,250,250]
      xx=[59,69,71,73,79,107,121,133,137,223,297,355]
      set=[essen[3]/sensitivities[3],(essen[5]+essen[6])/sensitivities[5],essen[7]/sensitivities[7],essen[8]/sensitivities[8],essen[9]/sensitivities[9], $
        essen[10]/sensitivities[10],essen[11]/sensitivities[11],essen[14]/sensitivities[14],(essen[12]+essen[13])/sensitivities[12]]
      if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then begin ;VOCUS
        set1=set[[0,2,3,5,6,8]]
        xx=xx[[0,2,3,5,6,8]]
      endif else begin
        set1=set[[0,1,2,3,4,5,6,7,8]]
        xx=xx[[0,1,2,3,4,5,6,7,8]]
      endelse

      set=set1[fiiil]
      xx=xx[fiiil]
      set=set/max(set)
      slpe=linfit(xx,set, YFIT=fitti)
      good=mean(abs(set-fitti))
      int=slpe[0]
      slpe=1000*abs(slpe[1])

      slpe=abs(max(set[where(xx lt 74)])-max(set[where(xx gt 120)]))
      if(slpe lt scoreee) then begin
        scoreee=slpe
        bestEX=ex
      endif
      if (dEX eq 0) then  plot,xx, set, xrange=[50,150], background=0,color=-1

    oplot,xx, set, color=200
      print, string([ex,slpe,good,int,mean(set),stddev(set),xx],format='(f10.5)')
      oplot,xx, set, color=100
    endfor
    ;bestEX=0.5

   xyouts,0.2,0.5,'Best ex='+strtrim(string(bestEX,format='(f8.3)'),2),/norm,charsize=4,charthick=3,color=-100



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;        TRANSMISSION retrieve best LOW filter
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    bestEXold=-9999
    while (abs(bestEXold-bestEX) gt 0.02) do begin
              DELTAm=0.5
              if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then DELTAm=0.05 ;VOCUS
              Mrange=[0,50]
              Wrange=[0,50]
              Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
              Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
              field=fltarr(dim1,dim2)
              for ML=0,dim1-1 do begin
                      for WL=0,dim2-1 do begin
                              masslow=min(Mrange)+deltam*ML
                              widthlow=min(Wrange)+deltam*WL
                              if(tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(59,bestex,10,2,1000,10) gt 0.98) then begin
                                      NC=calcNC(bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/low)
                                      essen =fltarr(22)
                                      for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
                                      if(essen[1] gt sensitivities[1]) then xx42=essen[1]/sensitivities[1] else xx42=sensitivities[1]/essen[1]
                                      if(essen[2] gt sensitivities[2]) then xx45=essen[2]/sensitivities[2] else xx45=sensitivities[2]/essen[2]
                                      if(essen[3] gt sensitivities[3]) then xx59=essen[3]/sensitivities[3] else xx59=sensitivities[3]/essen[3]
                                      if(essen[7] gt sensitivities[7]) then xx71=essen[7]/sensitivities[7] else xx71=sensitivities[7]/essen[7]
                                      if(essen[8] gt sensitivities[8]) then xx73=essen[8]/sensitivities[8] else xx73=sensitivities[8]/essen[8]
                                      field[ML,WL]=mean([xx42,xx45,xx59,xx71,xx73])
                              endif else field[ML,WL]=9999
                      endfor
               endfor
               field=1/field
               maxi=max(field,/nan)
               field[where(field lt 0.98*maxi)]=field[where(field lt 0.98*maxi)]*0.5
               field[where(field lt 0.99*maxi)]=field[where(field lt 0.99*maxi)]*0.5
               field[where(field lt 0.995*maxi)]=field[where(field lt 0.995*maxi)]*0.5
               field[where(field gt 0.998*maxi)]=1
               window,26, xsize = dim1, ysize=dim2
               loadct,20
               tvscl, field
               WidthLow=0
               while (max(where(field[*,WidthLow] eq 1)) lt -0.5) do WidthLow=WidthLow+1
               MassLow=where(field[*,WidthLow] eq 1) & Masslow=Masslow[0]
               masslow=min(Mrange)+deltam*masslow
               widthlow=min(Wrange)+deltam*widthlow
               print, [Masslow,widthlow,MassHigh,Widthhigh]
               
               if (abs(bestEXold-bestEX) gt 0.02) then stoppi=1 else stoppi=0
               stoppi=0
               bestEXold=bestEX
               addi=0
               increase_prev=-1
               while(stoppi eq 0) do begin
                      increase=0
                      NC=calcNC(bestEX+addi, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/high)
                      essen =fltarr(22)
                      for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
                      if(essen[20]+essen[21] gt sensitivities[20]) then increase=increase+1
                      if(essen[18]+essen[19] gt sensitivities[18]) then increase=increase+1
                      if(essen[10] gt sensitivities[10]) then increase=increase+1
                      if(essen[11] gt sensitivities[11]) then increase=increase+1
                      if(essen[12]+essen[13] gt sensitivities[12]) then increase=increase+1
                      if(essen[14] gt sensitivities[14]) then increase=increase+1
                      if(increase ge 1.5) then  addi=addi+0.01 
                      if(increase le 0.5) then  addi=addi-0.01
                      if(increase gt 0.5 and increase lt 1.5)  then   if(increase_prev gt increase)  then stoppi=1 else addi=addi-0.01
                      if(increase_prev eq 0 and increase gt 1)  then   stoppi=1
                      increase_prev=increase
              endwhile
              bestEX=bestEX+addi
    endwhile

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;        TRANSMISSION retrieve best HIGH filter
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    DELTAm=0.5
    Mrange=[150,600]
    Wrange=[30,300]
    Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
    Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
    field=fltarr(dim1,dim2)
    for MH=0,dim1-1 do begin
      for WH=0,dim2-1 do begin
        MASShigh=max(Mrange)-deltam*MH
        WIDTHhigh=min(Wrange)+deltam*WH
        if(tr(137,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(137,bestex,10,2,1000,10) gt 0.98) then begin

          NC=calcNC(bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/high)
          essen =fltarr(22)
          for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
          essen121= essen[11]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen133= essen[14]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then essen133= essen[12]+essen[13]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen297= essen[18]+essen[19]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen371= essen[20]+essen[21]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          sensitivity121=sensitivities[11]
          sensitivity133=sensitivities[14]
          if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then sensitivity133=sensitivities[12]
          sensitivity297=sensitivities[18]
          sensitivity371=sensitivities[20]

          prim19= mean(countsBG[indgen(10)+ADD40,28])/4
          prim37= mean(countsBG[indgen(10)+ADD40,29])/4
          if(WH eq 0 and MH eq 0) then begin
            if(mean(essen121) gt mean(essen133)) then begin
              essen_H1=essen121
              sensitivity_H1=sensitivity121
              HH1=1
            endif else begin
              essen_H1=essen133
              sensitivity_H1=sensitivity133
              HH1=2
            endelse
            if(mean(essen297) gt mean(essen371)*5) then begin
              essen_H2=essen297
              sensitivity_H2=sensitivity297
              HH2=1
            endif else begin
              essen_H2=essen371
              sensitivity_H2=sensitivity371
              HH2=2
            endelse
          endif

          if(HH2 eq 1) then begin
            essen_H2=essen297
            sensitivity_H2=sensitivity297
            essen_H3=essen297
            sensitivity_H3=sensitivity297
        endif else begin
            essen_H2=essen371
            sensitivity_H2=sensitivity371
            essen_H3=essen297
            sensitivity_H3=sensitivity297
        endelse
          if(HH1 eq 1) then begin
            essen_H1=essen121
            sensitivity_H1=sensitivity121
          endif else begin
            essen_H1=essen133
            sensitivity_H1=sensitivity133
          endelse




          if(essen_H1 gt sensitivity_H1) then xx_H1=essen_H1/sensitivity_H1 else xx_H1=sensitivity_H1/essen_H1
          if(essen_H2 gt sensitivity_H2) then xx_H2=essen_H2/sensitivity_H2 else xx_H2=sensitivity_H2/essen_H2
          if(essen_H3 gt sensitivity_H3) then xx_H3=essen_H3/sensitivity_H3 else xx_H3=sensitivity_H3/essen_H3
          if(xx_H1 lt 0.9) then begin
            print, 'hahha'
          endif
          if(xx_H2 lt 0.9) then begin
            print, 'hahha'
          endif


          sett=[max([xx_H1,0.9],/nan),max([xx_H2,0.9],/nan),max([xx_H3,0.9],/nan)]
          if(min(sett) eq 0.9) then begin
            sett=0.9
          endif else sett=max(sett)
          field[dim1-1-MH,WH]=sett
        endif else field[dim1-1-MH,WH]=9999

      endfor
    endfor
    field=1/field
    field[where(field gt 1)]=0
    maxi=max(field,/nan)
    window,31, xsize = dim1, ysize=dim2
    loadct,20
    tvscl, field
    indi=where(field eq maxi)
    MassHigh=max(indi mod dim1)
    Widthhigh=max((indi-MassHigh)/dim1)
    MASShigh=min(Mrange)+deltam*MASShigh
    WIDTHhigh=min(Wrange)+deltam*WIDTHhigh



    print, [Masslow,widthlow,MassHigh,Widthhigh]
    print,''
    MasslowOLD=Masslow
    widthlowOLD=widthlow
    MassHighOLD=MassHigh
    WidthhighOLD=Widthhigh
    MasslowOLD2=Masslow
    widthlowOLD2=widthlow
    MassHighOLD2=MassHigh
    WidthhighOLD2=Widthhigh

 
  

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;              END TRANSMISSION
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



  WINDOW, 5, xsize=1150,ysize=500
  !P.MULTI = [0,2,1]
  !Y.oMARGIN = [2,1]
  !X.oMARGIN = [5,5]
  !Y.MARGIN = [2,1]
  !x.MARGIN = [5,0]

   DEVICE, DECOMPOSED = 0


  ;plot transe
  loadct,5

  plot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),color=0,ytitle="transmission",xtitle="m/z",background=-1,charsize=2, thick =2, charthick=2

  loadct,13

  oplot,indgen(399)+1,(indgen(399)+1)^bestEX/(59)^bestEX
  oplot,indgen(399)+1,tr(indgen(399)+1, bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/(indgen(399)+1)^bestEX,color=60



  mmm=[33,42,45,59,69,71,73,79,107,121,137,133,181,223,297,371]
  tansen=tr(mmm,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  ;tansen=tansen/tansen
  sense=sensitivities[[0,1,2,3,5,7,8,9,10,11,12,14,15,17,19,21]]

  NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40)
  essen=fltarr(22)
  for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
  senseCALC=[essen[0],essen[1],essen[2],essen[3],total(essen[4:6]),$
    essen[7],essen[8],essen[9],essen[10],essen[11],$
    total(essen[12:13]),essen[14],essen[15],total(essen[16:17]),$
    total(essen[18:19]),total(essen[20:21])]


  For i=0,3  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
  For i=4,11  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=60
  For i=12,15  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
  oplot, [mmm[10],mmm[10]], [0, tansen[10]*senseCALC[10]/sense[10]], thick=3, color=-1 ; plot m137 in red 
  loadct,5

  xyouts,0.55,0.80,/normal,PTRid, color=0, charthick =3, charsize=2
  xyouts,0.55,0.72,/normal,Datumzeit, color=0, charthick =3, charsize=2
  xyouts,0.55,0.61,/normal,'Transmission parameters:  ', color=0, charthick =2, charsize=2
  xyouts,0.55,0.53,/norm,'ex: '+strtrim(string(bestEX,Format='(F8.2)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.45,/norm,'mLOW: '+strtrim(string(MASSlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.40,/norm,'wLOW: '+strtrim(string(WIDTHlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.32,/norm,'mHIGH: '+strtrim(string(MASShigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.27,/norm,'wHIGH: '+strtrim(string(WIDTHhigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2



  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then   write_jpeg, path2+'TRANS '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  WDELETE, 5

  print, ''


  CompARRtranse=CompARR
  for i=0,max(d(compounds))-1 do if (mTOz[i] ne -1) then CompARRtranse[i,*]=CompARR[i,*]/tr(mTOz[i],bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  PrimTR=CompARRtranse[29,*]+CompARRtranse[28,*]
  TotSigTR=CompARRtranse[0,*]
  for i=1,21 do  TotSigTR=TotSigTR+CompARRtranse[i,*]
  CompCUBtranse=CompCUB
  for i=0,max(d(timsSHORT))-1 do CompCUBtranse[i,*,*]=CompARRtranse[*,indgen(15*step)-5*step+timsShort[i]]
  countsTR=total(compCUBtranse[*,*,[indgen(8*step)+4*step]],3)*timestep; counts over 4s integration period
  countsBGTR=(8.0/5)*total(compCUBtranse[*,*,[indgen(3*step)+1*step,indgen(2*step)+12*step]],3)*timestep

  S_set3=[0,0,0,0,0]
  S_set2=[0,0,0,0,0]
  S_set3TR=[0,0,0,0,0]
  S_set2TR=[0,0,0,0,0]
  S_set=starttim
  Serr_set=starttim
  sensitivitiesCALC=fltarr(22)
  ncpsPERppbTR=fltarr(22,5)
  ncpsPERppbTR59=fltarr(22,5)
  cpsPERppbRAW=fltarr(22,5)
  KINSPECS=fltarr(20,5)

  for j=0,22 do begin
    essen=fltarr(max(d(timsSHORT)))
    essen3=fltarr(max(d(timsSHORT)))
    essenTR=fltarr(max(d(timsSHORT)))
    essen3TR=fltarr(max(d(timsSHORT)))

    i2=0
    for i=0,max(d(timsSHORT))-1 do begin
     
      en=1e-6*VMRppm[j]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
      factor1=tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
      factor2=tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
      primi= (countsBG[i,28]*factor1+countsBG[i,29]*factor2)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      C=counts[i,j]-countsBG[i,j] ; total signal of an injection (independent of integration interval). Unit is 'counts'.
      NC=C*1e6/primi ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
     Fmol=(Flow)/(60.0*1000.0*22.4) ; unit is mol/s
      es=NC*Fmol*1e-9/en  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      es3=C*Fmol*1e-9/en  ; UNIT cps/ppb
      essen[i2]= es
      essen3[i2]= es3
  
      
      primiTR= (countsBGTR[i,28]+countsBGTR[i,29])/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      CTR=countsTR[i,j]-countsBGTR[i,j] ; total signal of an injection (independent of integration interval). Unit is 'counts'.
      NCTR=CTR*1e6/primiTR ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
      esTR=NCTR*Fmol*1e-9/en  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      es3TR=CTR*Fmol*1e-9/en  ; UNIT cps/ppb
      essenTR[i2]= esTR
      essen3TR[i2]= es3TR

      i2=i2+1
      
    endfor
    Sset2=[mean(essen[0:9])]
    Sset3=[mean(essen3[0:9])]
    Sset2TR=[mean(essenTR[0:9])]
    Sset3TR=[mean(essen3TR[0:9])]
    for k=1,4 do Sset2=[Sset2, [mean(essen[10*k+0:10*k+9])]]
    for k=1,4 do Sset3=[Sset3, [mean(essen3[10*k+0:10*k+9])]]
    for k=1,4 do Sset2TR=[Sset2TR, [mean(essenTR[10*k+0:10*k+9])]]
    for k=1,4 do Sset3TR=[Sset3TR, [mean(essen3TR[10*k+0:10*k+9])]]
    ;  print,[compounds[j], string(Sset2TR,format='(F12.2)'), string(Sset2,format='(F12.2)'),string(Sset3,format='(F12.2)')]
    S_set2=[[S_set2],[Sset2]]
    S_set=[S_set,[mean(essen)]]
    Serr_set=[Serr_set,stddev(essen)]
    if(j lt 21.5) then begin
      sensitivitiesCALC[j]=Sset2TR[0+ADD40/10]
      ncpsPERppbTR[j,*]=Sset2TR
      ncpsPERppbTR59[j,*]=Sset2
      cpsPERppbRAW[j,*]=Sset3
    endif
  endfor

  sig19=fltarr(max(d(timsSHORT)))
  sig37=fltarr(max(d(timsSHORT)))
  sig19at59=fltarr(max(d(timsSHORT)))
  sig37at59=fltarr(max(d(timsSHORT)))
  r37to19=fltarr(max(d(timsSHORT)))
  r32to19=fltarr(max(d(timsSHORT)))
  BENZ78to79=fltarr(max(d(timsSHORT)))
  TMB120to121=fltarr(max(d(timsSHORT)))
  XYL106to107=fltarr(max(d(timsSHORT)))

  sigTTd=fltarr(max(d(timsSHORT)))
  sigppd=fltarr(max(d(timsSHORT)))
  sigUUd=fltarr(max(d(timsSHORT)))
  sigUUdx=fltarr(max(d(timsSHORT)))

  for i=0,max(d(timsSHORT))-1 do begin
    sig19[i]=countsBG[i,28]/4
    sig37[i]=countsBG[i,29]/4
    sig19at59[i]=countsBGTR[i,28]/4
    sig37at59[i]=countsBGTR[i,29]/4
    r37to19[i]=countsBGTR[i,29]/countsBGTR[i,28]
    r32to19[i]=countsBGTR[i,57]/countsBGTR[i,28]
    BENZ78to79[i]=countsTR[i,56]/countsTR[i,9]
    TMB120to121[i]=countsTR[i,58]/countsTR[i,11]
    XYL106to107[i]=countsTR[i,59]/countsTR[i,10]
    sigTTd[i]=counts[i,i_Tdrift]/4+273.15
    sigppd[i]=counts[i,i_pdrift]/4
    sigUUd[i]=counts[i,i_udrift]/4
    sigUUdx[i]=counts[i,i_udx]/4

  endfor

  Set19=[mean(sig19[0:9])]
  Set37=[mean(sig37[0:9])]
  Set19at59=[mean(sig19at59[0:9])]
  Set37at59=[mean(sig37at59[0:9])]
  Set37to19=[mean(r37to19[0:9])]
  Set32to19=[mean(r32to19[0:9])]
  Set78to79=[mean(BENZ78to79[0:9])]
  Set120to121=[mean(TMB120to121[0:9])]
  Set106to107=[mean(XYL106to107[0:9])]
  SetTTd=[mean(sigTTd[0:9])]
  Setppd=[mean(sigppd[0:9])]
  SetUUd=[mean(sigUUd[0:9])]
  SetUUdx=[mean(sigUUdx[0:9])]
  for k=1,4 do   Set19=[Set19, [mean(sig19[10*k+0:10*k+9])]]
  for k=1,4 do   Set37=[Set37, [mean(sig37[10*k+0:10*k+9])]]
  for k=1,4 do   Set19at59=[Set19at59, [mean(sig19at59[10*k+0:10*k+9])]]
  for k=1,4 do   Set37at59=[Set37at59, [mean(sig37at59[10*k+0:10*k+9])]]
  for k=1,4 do   Set37to19=[Set37to19, [mean(r37to19[10*k+0:10*k+9])]]
  for k=1,4 do   Set32to19=[Set32to19, [mean(r32to19[10*k+0:10*k+9])]]
  for k=1,4 do   Set78to79=[Set78to79, [mean(BENZ78to79[10*k+0:10*k+9])]]
  for k=1,4 do   Set120to121=[Set120to121, [mean(TMB120to121[10*k+0:10*k+9])]]
  for k=1,4 do   Set106to107=[Set106to107, [mean(XYL106to107[10*k+0:10*k+9])]]
  for k=1,4 do   SetTTd=[SetTTd, [mean(sigTTd[10*k+0:10*k+9])]]
  for k=1,4 do   Setppd=[Setppd, [mean(sigppd[10*k+0:10*k+9])]]
  for k=1,4 do   SetUUd=[SetUUd, [mean(sigUUd[10*k+0:10*k+9])]]
  for k=1,4 do   SetUUdx=[SetUUdx, [mean(sigUUdx[10*k+0:10*k+9])]]
  SetEEd=(SetUUd+SetUUdx)/d_d
  Setttreact=(d_d*Setppd*273.15)/(SetEEd*SetTTd*2.7*1013.25)
  if(strlen(ComputerID) eq 0 ) then Setttreact=Setttreact*0.003/Setttreact ; harvard
  SetEoverN=(1e17*22400*1013.25*SetTTd*SetEEd)/(6.022E23*Setppd*273.15)
  KINSPECS[0,*]=set19
  KINSPECS[1,*]=Set37
  KINSPECS[2,*]=Set19at59
  KINSPECS[3,*]=Set37at59
  KINSPECS[4,*]=Set37to19
  KINSPECS[5,*]=Set32to19
  KINSPECS[6,*]=Set78to79
  KINSPECS[7,*]=Set120to121
  KINSPECS[8,*]=Set106to107
  KINSPECS[9,*]=SetTTd
  KINSPECS[10,*]=Setppd
  KINSPECS[11,*]=SetUUd
  KINSPECS[12,*]=SetUUdx
  KINSPECS[13,*]=SetEEd
  KINSPECS[14,*]=Setttreact
  KINSPECS[15,*]=SetEoverN

  print,''
  print, set19
  print, Set37
  print, Set19at59
  print, Set37at59
  print,''
  print, Set37to19
  print,''
  print, Set32to19
  print, Set78to79
  print, Set120to121
  print, Set106to107
  print,''
  print, SetTTd
  print, Setppd
  print, SetUUd
  print, SetUUdx
  print, SetEEd
  print, Setttreact
  print, SetEoverN
  names=['sig19','sig37','sig19TR','sig37TR','R37/17TR',    'R32/19TR','R78/79TR','R120/121TR','R106/107TR','Tdrift',    'pdrift','Udrift','Udx','Efield','treact',    'EoverN','','','','', $
    'nS_33','nS_42','nS_45','nS_59','nS_87',    'nS_69','nS_41','nS_71','nS_73','nS_79',    'nS_107','nS_121','nS_137','nS_81','nS_133',    'nS_181','nS_223','nS_207','nS_297','nS_281',    'nS_371','nS_355',$
    'n59S_33','n59S_42','n59S_45','n59S_59','n59S_87',    'n59S_69','n59S_41','n59S_71','n59S_73','n59S_79',    'n59S_107','n59S_121','n59S_137','n59S_81','n59S_133',    'n59S_181','n59S_223','n59S_207','n59S_297','n59S_281',    'n59S_371','n59S_355',$
    'rawS_33','rawS_42','rawS_45','rawS_59','rawS_87',    'rawS_69','rawS_41','rawS_71','rawS_73','rawS_79',    'rawS_107','rawS_121','rawS_137','rawS_81','rawS_133',    'rawS_181','rawS_223','rawS_207','rawS_297','rawS_281',    'rawS_371','rawS_355']
  dataAA=[KINSPECS, ncpsPERppbTR, ncpsPERppbTR59,cpsPERppbRAW]

  dataAA=[transpose(names),transpose(string(dataAA))]
  makecsv, path2+'SENS '+PTRid+'_'+Datumzeit+'.csv',dataAA


  WINDOW, 4, xsize=1150,ysize=700
  !P.MULTI = [0,1,3]
  !Y.MARGIN = [3,1]
  !x.oMARGIN = [8,8]
  DEVICE, DECOMPOSED = 0
  loadct,5

  plot,reltime,TotSIG,xstyle=1,yrange=[0,1.1*max([I19+I37,TotSIG])],ystyle=1,color=0,ytitle="raw signal [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  oplot, reltime,smooth( I19+I37,5),thick =2, color=185

  xyouts,0.4,0.920,/normal,'Autodetection of            and            of injections', color=0
  xyouts,0.5,0.920,/normal,'START', color=110
  xyouts,0.58,0.920,/normal,'END', color=175
  xyouts,0.11,0.887,/normal,'Primary ions: I19+I37', color=178, charthick =2, charsize=1.5
  xyouts,0.11,0.860,/normal,'Product ions: sum of compounds in standard', color=0, charthick =2, charsize=1.5
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max([I19+I37,TotSIG]),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max([I19+I37,TotSIG]),1e14], color=175
  loadct,6
  faktor3=max(TotSIG,/nan)/max(data,/nan)
  oplot,reltime,data*faktor3,color=126
  ; oplot,reltime,data,color=126,thick =1.5
  xyouts,0.11,0.833,/normal,'Single compound: '+Datastr+' (x '+strtrim(string(faktor3,format='(F10.1)'),2)+')', color=105, charthick =2, charsize=1.5

  loadct,5
  tr19=tr(19,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  tr37=tr(37,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  tr32=tr(32,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  plot,reltime, smooth(primTR+TotSIGTR,5),yrange=[0,max(primTR+TotSIGTR)],xstyle=1,ystyle=1,color=0,ytitle="(transmission) corrected signal [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  oplot,reltime, smooth(primTR+TotSIGTR,5),thick =2,color=126
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max(primTR+TotSIGTR),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max(primTR+TotSIGTR),1e14], color=175
  oplot, reltime, smooth(TotSIGTR,5),thick =2, color=0
  oplot, reltime,smooth( I19,5)/tr19,thick =2, color=35
  oplot, reltime, smooth(I37,5)/tr37,thick =2, color=50
  oplot, reltime, smooth(I32,5)/tr32*10,thick =2, color=109

  xyouts,0.11,0.60,/normal,'Total signal:Primary+product ions', color=126, charthick =2, charsize=1.5
  xyouts,0.11,0.57,/normal,'Product ions', color=0, charthick =2, charsize=1.5
  xyouts,0.11,0.54,/normal,'I19', color=35, charthick =2, charsize=1.5
  xyouts,0.11,0.51,/normal,'I37', color=50, charthick =2, charsize=1.5
  xyouts,0.11,0.48,/normal,'I32 (x10)', color=109, charthick =2, charsize=1.5

  mmmax=max([smooth( (I37*tr19)/(I19*tr37),5),smooth( (I32*tr19)/(I19*tr32),5)])
  plot,reltime, smooth( (I37*tr19)/(I19*tr37),5),yrange=[0,mmmax],xstyle=1,ystyle=1,color=0,ytitle="ion ratios",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max(smooth( (I37*tr19)/(I19*tr37),5)),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max(smooth( (I37*tr19)/(I19*tr37),5)),1e14], color=175

  oplot,reltime, smooth( (I32*tr19)/(I19*tr32),5),color=109, thick =1.5;, charthick=2
  xyouts,0.11,0.25,/normal,'I37 / I19 (transmission corrected)', color=0, charthick =2, charsize=1.5
  xyouts,0.11,0.22,/normal,'I32 / I19 (transmission corrected)', color=109, charthick =2, charsize=1.5

  xyouts,0.97,0.9,/normal,orientation=-90,PTRid+'  '+Datumzeit, color=0, charthick =3, charsize=2

  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then  write_jpeg, path2+'SEQ '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1




;;;;;;;;;;;;;; old transeplot stuff
  mmm=[33,42,45,59,69,71,73,79,107,121,137,133,181,223,297,371]
  tansen=tr(mmm,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  sense=sensitivities[[0,1,2,3,5,7,8,9,10,11,12,14,15,17,19,21]]
  senseCALC=[sensitivitiesCALC[0],sensitivitiesCALC[1],sensitivitiesCALC[2],sensitivitiesCALC[3],total(sensitivitiesCALC[4:6]),$
    sensitivitiesCALC[7],sensitivitiesCALC[8],sensitivitiesCALC[9],sensitivitiesCALC[10],sensitivitiesCALC[11],$
    total(sensitivitiesCALC[12:13]),sensitivitiesCALC[14],sensitivitiesCALC[15],total(sensitivitiesCALC[16:17]),$
    total(sensitivitiesCALC[18:19]),total(sensitivitiesCALC[20:21])]


  ID=8

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;    Dynamic mixing
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  if (max(d(injectLONG)) gt 000.5) then begin
    CompCUBlong=dblarr(max(d(injectLONG)),max(d(compounds)),200) ; 12 injections, 23 ions, 15 cycles
    for i=0,max(d(timsLONG))-1 do CompCUBlong[i,*,*]=CompARR[*,indgen(200)-5+timsLONG[i]]


    CompCUBTR=dblarr(max(d(injectLONG)),10,200) ; 12 injections, 23 ions, 15 cycles
    for i=0,max(d(timsLONG))-1 do CompCUBTR[i,0,*]=TotSigTR[indgen(200)-5+timsLONG[i]]
    for i=0,max(d(timsLONG))-1 do CompCUBTR[i,1,*]=PrimTR[indgen(200)-5+timsLONG[i]]

    ;quality
    PULS=fltarr(max(d(timsLONG)))
    ZERO=fltarr(max(d(timsLONG)))
    PULStr=fltarr(max(d(timsLONG)))
    ZEROtr=fltarr(max(d(timsLONG)))

    for i=0,max(d(timsLONG))-1 do begin
      sigPULS=0
      sigPULStr=0
      strtPULS=-1
      endPULS=-1

      sigZERO=0
      sigZEROtr=0
      strtZERO=-1
      endZERO=-1

      for j=0,100 do begin
        if( CompCUBlong[i,22,j] gt max(CompCUBlong[i,22,0:100])*0.9) then begin
          if(strtPULS eq -1) then strtPULS=j
          if(endPULS eq -1) then begin
            sigPULS=sigPULS+CompCUBlong[i,22,j]+CompCUBlong[i,26,j]
            sigPULStr=sigPULStr+CompCUBTR[i,0,j]+CompCUBTR[i,1,j]
          endif
        endif else if(strtPULS ne -1) then if(endPULS eq -1) then endPULS=j

        if (endPULS ne -1 and CompCUBlong[i,22,j] lt max(CompCUBlong[i,22,0:100])*0.05) then begin
          if(strtZERO eq -1) then strtZERO=j
          if(strtZERO gt 1 and endZERO eq -1) then if(j-strtZERO ge (endPULS-strtPULS)) then begin
            endZERO=j
          endif
          if(endZERO eq -1) then begin
            sigZERO=sigZERO+CompCUBlong[i,22,j]+CompCUBlong[i,26,j]
            sigZEROtr=sigZEROtr+CompCUBTR[i,0,j]+CompCUBTR[i,1,j]
          endif
        endif else if(strtZERO ne -1) then if(endZERO eq -1) then endZERO=j

      endfor

      PULS[i]=sigPULS/(endPULS-strtPULS)
      PULStr[i]=sigPULStr/(endPULS-strtPULS)
      ZERO[i]=sigZERO/(endZERO-strtZERO)
      ZEROtr[i]=sigZEROtr/(endZERO-strtZERO)
    endfor

   smoo=0
      cols=[0,25,45,75,110,140,160,190,220,240,254]
    for i=0,max(d(injectLONG))-1 do begin



      sigPULS=0
      sigPULStr=0
      strtPULS=-1
      endPULS=-1

      sigZERO=0
      sigZEROtr=0
      strtZERO=-1
      endZERO=-1

      for j=0,100 do begin
        if( CompCUBlong[i,22,j] gt max(CompCUBlong[i,22,0:100])*0.9) then begin
          if(strtPULS eq -1) then strtPULS=j
          if(endPULS eq -1) then begin
            sigPULS=sigPULS+CompCUBlong[i,22,j]+CompCUBlong[i,26,j]
            sigPULStr=sigPULStr+CompCUBTR[i,0,j]+CompCUBTR[i,1,j]
          endif
        endif else if(strtPULS ne -1) then if(endPULS eq -1) then endPULS=j

        if (endPULS ne -1 and CompCUBlong[i,22,j] lt max(CompCUBlong[i,22,0:100])*0.05) then begin
          if(strtZERO eq -1) then strtZERO=j
          if(strtZERO gt 1 and endZERO eq -1) then if(j-strtZERO ge (endPULS-strtPULS)) then begin
            endZERO=j
          endif
          if(endZERO eq -1) then begin
            sigZERO=sigZERO+CompCUBlong[i,22,j]+CompCUBlong[i,26,j]
            sigZEROtr=sigZEROtr+CompCUBTR[i,0,j]+CompCUBTR[i,1,j]
          endif
        endif else if(strtZERO ne -1) then if(endZERO eq -1) then endZERO=j

      endfor

      sigPULS=sigPULS/(endPULS-strtPULS)
      sigPULStr=sigPULStr/(endPULS-strtPULS)
      sigZERO=sigZERO/(endZERO-strtZERO)
      sigZEROtr=sigZEROtr/(endZERO-strtZERO)
    endfor
    cols=[0,25,45,75,110,140,160,190,220,240,254]
 
  endif



  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;   Fast injections
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  WINDOW, 6, xsize=1600,ysize=800
  !P.MULTI = [0,8,3]
  ;  !x.oMARGIN=[]
  !Y.oMARGIN = [5,5]
  !x.oMARGIN = [10,10]
  !Y.MARGIN = [3,1]
  !x.MARGIN = [3,1]
  DEVICE, DECOMPOSED = 0
  loadct,5
  for j=0,21 do begin
    yrange=range(compCUB[*,j,*]/1000)
    cols=[intarr(10)+110,intarr(10)+50,intarr(10)+70,intarr(10)+175,intarr(10)+160,$
      0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    plot,timestep*(indgen(15*step)-5*step),compCUB[0,j,*]/1000,xstyle=1,ystyle=1,yrange=yrange,color=0,background=-1,charsize=2, thick =2;, charthick=2
    cnts=0
    for i=0,max(d(timsSHORT))-1 do begin
      oplot,timestep*(indgen(15*step)-5*step),compCUB[i,j,*]/1000, color=cols[i], thick=1
      cnts=[cnts, counts[i,j]-countsBG[i,j]]
    endfor
    cnts=cnts[1:*]
    set=[mean(cnts[0:9]),100*stddev(cnts[0:9])/mean(cnts[0:9])]
    for k=1,4 do set=[set, [mean(cnts[10*k+0:10*k+9]),100*stddev(cnts[10*k+0:10*k+9])/mean(cnts[10*k+0:10*k+9])]]
    ;print,[ mean(set[[0,2,4,6,8]]),mean(set[[1,3,5,7,9]]),  stddev(set[[1,3,5,7,9]])]
    xyouts,-2,max(yrange)*0.9,compounds[j],color=0,charsize=1.5,charthick=1.5
    xyouts,-2,max(yrange)*0.8,string(VMRppm[j]*1000*dil,format='(F5.1)'),color=0,charsize=1.5,charthick=1.5
    xyouts,2,max(yrange)*0.8,string(set[1],format='(F4.1)')+'%',color=110,charthick=2
    xyouts,2,max(yrange)*0.7,string(set[3],format='(F4.1)')+'%',color=50,charthick=2
    xyouts,2,max(yrange)*0.6,string(set[5],format='(F4.1)')+'%',color=70,charthick=2
    xyouts,2,max(yrange)*0.5,string(set[7],format='(F4.1)')+'%',color=175,charthick=2
    xyouts,2,max(yrange)*0.4,string(set[9],format='(F4.1)')+'%',color=160,charthick=2
  endfor
  xyouts,0.85,0.21,/normal,PTRid,color=1,charsize=1.5,charthick=2
  datum=strmid(datumzeit,0,strpos(datumzeit,'-'))
  xyouts,0.85,0.18,/normal,Datum,color=1,charsize=1.5,charthick=2
  Zeit=strmid(datumzeit,1+strpos(datumzeit,'-'),1000)
  xyouts,0.85,0.15,/normal,Zeit,color=1,charsize=1.5,charthick=2
  xyouts,0.76,0.25,/normal,'N2 dry', color=110,charsize=1.5,charthick=1.5
  xyouts,0.76,0.225,/normal,'air dry', color=50,charsize=1.5,charthick=1.5
  xyouts,0.76,0.20,/normal,'air wet', color=70,charsize=1.5,charthick=1.5
  xyouts,0.76,0.175,/normal,'N2 wet', color=175,charsize=1.5,charthick=1.5
  xyouts,0.76,0.15,/normal,'N2 dry', color=160,charsize=1.5,charthick=1.5

  xyouts,0.4,0.05,/normal,'time in seconds', color=1,charsize=1.5,charthick=1.5
  xyouts,0.04,0.43,/normal,'signal in kcps',orientation=90, color=1,charsize=1.5,charthick=1.5

  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then  write_jpeg, path2+'INJ '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  WDELETE, 6
  ;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;; Xr
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  resultis=[0,0,0]
  print, '           XR   |     stdev XR'

  XRdata=fltarr(22,2)


  oldold=1 ; old version based on Truman's work
  if (oldold eq 1) then begin
    for j=0,22 do begin
      XRall=0
      for p=0,9 do begin
        XR=0
        for k=0,50 do begin
          counter=0
          classs=0
          if (k eq 0) then XR=0.0
          if (k eq 1) then XR=0.01
          if (k gt 1.5) then begin
            if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then XR=XRpre+(XRpre-XRprepre)*slopeprepre/(slopeprepre-slopepre)
            if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then begin
              XR=XRprepre+(XRpre-XRprepre)/2
              class=1
            endif
            if(classs eq 1) then counter=counter+1
            if(counter eq 1 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then increment=-0.1 else increment=0.1
            if(counter gt 1.5 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then increment=increment *(-0.1)
            if(counter gt 0.5) then  XR=XRpre+increment
          endif
          NCs=0
          CRs=0
          for i=0,4 do begin

            m19=countsBGTR[p+10*i,28]
            m37=countsBGTR[p+10*i,29]
            cntss=countsTR[p+10*i,j]
            if(j eq 4) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 5) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 6) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 12) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
            if(j eq 13) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
            if(j eq 16) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
            if(j eq 17) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
            if(j eq 18) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
            if(j eq 19) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
            if(j eq 20) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
            if(j eq 21) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]

            NCs=[NCs,cntss/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
            CRs=[CRs,100*m37/(m19+m37)]
          endfor
          CRs=CRs[1:*]
          NCs=NCs[1:*]
          CRs=CRs[[0,3,4]];only N2
          NCs=NCs[[0,3,4]];only N2

          fitp=linfit(CRs,NCs)
          if (k eq 0) then begin
            slopePre=fitp[1]
            XRpre=XR
          endif
          XRprepre=XRpre
          XRpre=XR
          slopePrepre=slopePre
          slopePre=fitp[1]
        endfor
        XRall=[XRall,XR]

      endfor
      XRall=XRall[1:*]
      print,[compounds[j], string([mean(XRall),stddev(XRall)],format='(F12.2)')]
      if(j lt 21.5) then XRdata[j,*]=[mean(XRall),stddev(XRall)]
    endfor
  endif

  if (oldold eq 0) then begin

    for j=0,22 do begin
      pN2_1=0
      pN2_2=0
      pAIR=0
      pN2_AIR=0
      pAIR_N2_1=0
      pAIR_N2_2=0
      XRall=0

      for xxx=0,100 do begin
        XR=-1.5+float(xxx)/10.0
        NCsall=[0,0,0,0,0]
        for p=0,9 do begin
          NCs=0
          for i=0,4 do begin
            m19=countsBGTR[p+10*i,28]
            m37=countsBGTR[p+10*i,29]
            cntss=countsTR[p+10*i,j]
            if(j eq 4 or j eq 5 or j eq 6) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 12 or j eq 13) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
            if(j eq 16 or j eq 17) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
            if(j eq 18 or j eq 19) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
            if(j eq 20 or j eq 21) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
            NCs=[NCs,cntss/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
          endfor
          NCs=NCs[1:*]
          NCsall=[[NCsall],[NCs]]
        endfor
        NCsall= NCsall[*,1:*]

        pvalue=TM_test(NCsall[0,*],NCsall[3,*])
        pN2_1=[pN2_1, pvalue[1]]
        pvalue=TM_test(NCsall[4,*],NCsall[3,*])
        pN2_2=[pN2_2, pvalue[1]]
        pvalue=TM_test(NCsall[1,*],NCsall[3,*])
        pN2_AIR=[pN2_AIR, pvalue[1]]


        pvalue=TM_test(NCsall[1,*],NCsall[2,*])
        pAIR=[pAIR, pvalue[1]]
        pvalue=TM_test(NCsall[0,*],NCsall[2,*])
        pAIR_N2_1=[pAIR_N2_1, pvalue[1]]
        pvalue=TM_test(NCsall[4,*],NCsall[2,*])
        pAIR_N2_2=[pAIR_N2_2, pvalue[1]]
        XRall=[XRall,XR]
      endfor
      pN2_1=pN2_1[1:*]
      pN2_2=pN2_2[1:*]
      pN2_AIR=pN2_AIR[1:*]
      pAIR=pAIR[1:*]
      pAIR_N2_1=pAIR_N2_1[1:*]
      pAIR_N2_2=pAIR_N2_2[1:*]


      XRall=XRall[1:*]
      !P.MULTI = [0,1,1]
      WINDOW, 4, xsize=750,ysize=500

      loadct,5

      plot, XRall,pN2_1,color=0,background=-1,  yrange=[0,1]
      oplot,XRall, pN2_1, color=40, thick=1
      oplot,XRall, pN2_AIR, color=20, thick=1
      oplot,XRall, pAIR_N2_1, color=109, thick=1
      oplot,XRall, pAIR_N2_2, color=150, thick=1
      oplot,XRall, pN2_2, color=50, thick=3
      oplot,XRall, pAIR, color=111, thick=1

      xyouts, 0,0.9, compounds[j],color=0, charthick=2
      resultis=[[resultis],[XRall[where(pN2_2 eq max(pN2_2))],XRall[where(pN2_1 eq max(pN2_1))], XRall[where(pAIR eq max(pAIR))]]]

      print, 'haha'
    endfor
    print, resultis

    print, 'haha'
  endif








  mames=(['rangeClusterRatio','tr_mLOW_bestex','tr_wLOW','tr_mHIGH','tr_wHIGH',compounds[0:21]])
  dataAA=([transpose([min(Set37to19[[0,3,4]]),max(Set37to19[[0,3,4]])]),transpose([masslow,bestEX]),transpose([widthlow,0]),transpose([masshigh,0]),transpose([widthhigh,0]),[XRdata]])

  dataAA=[transpose(mames),transpose(string(dataAA))]
  makecsv, path2+'XRdat '+PTRid+'_'+Datumzeit+'.csv',dataAA



  print, 'end'
  return, create_struct('Fptr', [1,1,1], 'S_nam', ['time', compounds[0:21]], 'S_val',S_set[0:22], 'Serr_val',Serr_set[0:22])
end




function ActrisProtocol_oct_2018, path,name,ProtData,masses, ProtEngData , engnames, computerID
  CalculateTransmission=1

  helpi=1
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    helpi=0
    CATCH, /CANCEL
  ENDIF


  if (helpi eq 1) then begin
    file_id=H5f_open(name)
    n_attr=H5A_GET_NUM_ATTRS(file_id)
    ComputerID='nix'
    for j=0,n_attr-1 do if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(file_id,j)),'Computer ID') gt -0.5) then  ComputerID=H5A_read( H5A_OPEN_IDX(file_id,j))
    H5f_close, file_id
  endif else ComputerID='QMS_LSCE'



  T_FC=31
  Fcal=200
  Fplus=0
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  Fcal=2000 ; VOCUS  PTR-TOF
  if(strlen(ComputerID) eq 0 ) then begin
    Fcal=2000
    Fplus=1500 ;Harvard
  endif
  Flow=float(Fcal)*273/298+Fplus+9.6

  Dil=(9.6*273/(273+T_FC))/Flow
  T_loop=273+100

  ; if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 and abs(min(ProtEngData[*,0])-3186.4) lt 0.2) then  masses=[masses[1:*],9999] ; Juelich PTR-TOF

  Path2=path+'STD_PROT/'
  mmist=file_info(path2)
  if (mmist.directory eq 0) then begin
    FILE_MKDIR, path2
  endif
  starttim=min(ProtEngData[*,0])
  reltime=(ProtEngData[*,0]-min(ProtEngData[*,0]))*24*60
  hilfi=strmid(strmid(path2,strpos(path2,'\')+1,1000),1+strpos(strmid(path2,strpos(path2,'\')+1,1000),'\'))
  PTRid=strmid(hilfi,0,strpos(hilfi,'\') )
  Datumzeit=t09str(ProtEngData[0])

  ; convert cps to counts
  timestep=max(reltime)*60/max(d(reltime))
  ;ProtData=ProtData*timestep


  I19=ProtData[where(abs(masses-19.017) eq min(abs(masses-19.017)) ),*]
  I21=ProtData[where(abs(masses-21.022) eq min(abs(masses-21.022)) ),*]
  I37=ProtData[where(abs(masses-37.028) eq min(abs(masses-37.028)) ),*]
  I38=ProtData[where(abs(masses-38.033) eq min(abs(masses-38.033)) ),*]
  I39=ProtData[where(abs(masses-39.033) eq min(abs(masses-39.033)) ),*]
  I34=ProtData[where(abs(masses-33.994) eq min(abs(masses-33.994)) ),*]
  I32=ProtData[where(abs(masses-31.989) eq min(abs(masses-31.989)) ),*]
  I32[where(I32 gt 6000)]=I34[where(I32 gt 6000)]*242

  if( max(I19) gt 5000) then I19=I21*487
  I37[where(I37 lt I38 *645)]=I38[where(I37 lt I38 *645)]*645
  Prim=reform(I19+I37)


  F37=I37/prim
  F32=I34*242/prim




  Pdrift=ProtEngData[*,where(strpos(engnames,'p-Drift') gt -0.5)] & Pdrift=Pdrift[*,0]

  H2Oscc=ProtEngData[*,where(strpos(engnames,'H2O scc')  gt -0.5 or strpos(engnames,'H2O[scc')  gt -0.5)] & H2Oscc=H2Oscc[*,0]
  Udrift=ProtEngData[*,where(strpos(engnames,'Udrift') gt -0.5)] & Udrift=Udrift[*,0]
  Udx=ProtEngData[*,where(strpos(engnames,'Udx') gt -0.5)] & Udx=Udx[*,0]
  FCinlet=ProtEngData[*,where(strpos(engnames,'FCinlet') gt -0.5)] & FCinlet=FCinlet[*,0]
  Tdrift=ProtEngData[*,where(strpos(engnames,'T-Drift') gt -0.5 )] & Tdrift=Tdrift[*,0]
  if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 ) then  Tdrift=ProtEngData[*,-1]+60   ; Juelich PTR-TOF
  PC=ProtEngData[*,where(strpos(engnames,'PC mba') gt -0.5 or strpos(engnames,'PC[mba')  gt -0.5)] & PC=PC[*,0]

  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  begin  ; VOCUS  PTR-TOF
    Pdrift=ProtEngData[*,where(strpos(engnames,'SSQ pressure monitor [mbar]') gt -0.5)] & Pdrift=Pdrift[*,0]
    Tdrift=ProtEngData[*,where(strpos(engnames,'TOF temp monitor') gt -0.5 )]
    Udrift=ProtEngData[*,where(strpos(engnames,'Spare 1 monitor [V]') gt -0.5)] & Udrift=Udrift[*,0]-25
  endif   ; VOCUS  PTR-TOF
  if(strlen(ComputerID) eq 0 ) then begin ;PTR3
    Tdrift=ProtEngData[*,where(strpos(engnames,'TPS body temp monitor') gt -0.5)] & Pdrift=Pdrift[*,0]
    Pdrift=ProtEngData[*,where(strpos(engnames,'REAC   sensor: APR/CMR') gt -0.5)] & Pdrift=Pdrift[*,0]
  endif

  D5_355=ProtData[where(abs(masses-355.07) eq min(abs(masses-355.07)) ),*]*1.67
  D5_371=ProtData[where(abs(masses-371.102) eq min(abs(masses-371.102)) ),*]*1.69
  if( min(abs(masses-371.102)) gt 1) then  D5_371= D5_371/1000
  if( min(abs(masses-355.07)) gt 1) then  D5_355= D5_355/1000
  D4_297=ProtData[where(abs(masses-297.083) eq min(abs(masses-297.083)) ),*]*1.52
  D4_281=ProtData[where(abs(masses-281.052) eq min(abs(masses-281.052)) ),*]*1.51
  D3_223=ProtData[where(abs(masses-223.064) eq min(abs(masses-223.064)) ),*]*1.37
  D3_207=ProtData[where(abs(masses-207.033) eq min(abs(masses-207.033)) ),*]*1.36
  benzCl3_181=ProtData[where(abs(masses-180.938) eq min(abs(masses-180.938)) ),*]*2.48
  benzF3_133=ProtData[where(abs(masses-133.026) eq min(abs(masses-133.026)) ),*]*1.07
  Pin_137=ProtData[where(abs(masses-137.132) eq min(abs(masses-137.132)) ),*]*1.12
  Pin_81=ProtData[where(abs(masses-81.07) eq min(abs(masses-81.07)) ),*]*1.07
  TMB_121=ProtData[where(abs(masses-121.101) eq min(abs(masses-121.101)) ),*]*1.10
  XYL_107=ProtData[where(abs(masses-107.086) eq min(abs(masses-107.086)) ),*]*1.09
  BEN_79=ProtData[where(abs(masses-79.054) eq min(abs(masses-79.054)) ),*]*1.07
  MEK_73=ProtData[where(abs(masses-73.065) eq min(abs(masses-73.065)) ),*]*1.05
  MVK_71=ProtData[where(abs(masses-71.049) eq min(abs(masses-71.049)) ),*]*1.05
  MBO_87=ProtData[where(abs(masses-87.080) eq min(abs(masses-87.080)) ),*]*1.06
  MBO_69=ProtData[where(abs(masses-69.070) eq min(abs(masses-69.070)) ),*]*1.06
  MBO_41=ProtData[where(abs(masses-41.039) eq min(abs(masses-41.039)) ),*]*1.03
  ACE_59=ProtData[where(abs(masses-59.049) eq min(abs(masses-59.049)) ),*]*1.03
  ACETAL_45=ProtData[where(abs(masses-45.033) eq min(abs(masses-45.033)) ),*]*1.02
  CH3CN_42=ProtData[where(abs(masses-42.034) eq min(abs(masses-42.034)) ),*]*1.02
  METH_33=ProtData[where(abs(masses-33.033) eq min(abs(masses-33.033)) ),*]*1.01
  BEN_78=ProtData[where(abs(masses-78.047) eq min(abs(masses-78.047)) ),*]*1.07
  if( min(abs(masses-78.047)) gt 1) then  BEN_78= BEN_78/1000
  TMB_120=ProtData[where(abs(masses-120.094) eq min(abs(masses-120.094)) ),*]*1.10
  if( min(abs(masses-120.094)) gt 1) then  TMB_120= TMB_120/1000
  XYL_106=ProtData[where(abs(masses-106.079) eq min(abs(masses-106.079)) ),*]*1.09
  if( min(abs(masses-106.079)) gt 1) then  XYL_106= XYL_106/1000

  ;correlation to correct delay

  Bestcor= correlate(ACE_59,D5_371)
  timeshift=0
  for i=1,50 do begin
    shiftcor= correlate(ACE_59,[D5_371[i:*],intarr(i)])
    if( shiftcor gt bestcor) then timeshift=i
    if( shiftcor gt bestcor) then bestcor=shiftcor
  endfor
  if(timeshift gt 0.5) then begin
    Print, 'D5 data shifted by '+string(timeshift)+' points'
    D5_355=transpose([D5_355[timeshift:*], fltarr(timeshift)])
    D5_371=transpose([D5_371[timeshift:*], fltarr(timeshift)])
  endif

  TotSIG=    METH_33 +    CH3CN_42 +    Acetal_45 +     Ace_59 +    MBO_87 +     MBO_69 +      MBO_41 +    MVK_71 +    MEK_73 +    Ben_79 +$
    Xyl_107 +    TMB_121 +     Pin_137 +       Pin_81 +   benzF3_133 + benzCl3_181 +  D3_223 +    D3_207 +    D4_297 +    D4_281 +$
    D5_371 +     D5_355

 
  D5_358iso=ProtData[where(abs(masses-358.073) eq min(abs(masses-358.073)) ),*]/0.0358
  D5_374iso=ProtData[where(abs(masses-374.105) eq min(abs(masses-374.105)) ),*]/0.0370
  D4_299iso=ProtData[where(abs(masses-299.086) eq min(abs(masses-299.086)) ),*]/0.1178
  D4_283iso=ProtData[where(abs(masses-283.055) eq min(abs(masses-283.055)) ),*]/0.1170
  D3_225iso=ProtData[where(abs(masses-225.067) eq min(abs(masses-225.067)) ),*]/0.0923
  D3_209iso=ProtData[where(abs(masses-209.036) eq min(abs(masses-209.036)) ),*]/0.0916
  benzCl3_182iso=ProtData[where(abs(masses-181.941) eq min(abs(masses-181.941)) ),*]/0.0267
  benzF3_134iso=ProtData[where(abs(masses-134.029) eq min(abs(masses-134.029)) ),*]/0.0612
  Pin_138iso=ProtData[where(abs(masses-138.135) eq min(abs(masses-138.135)) ),*]/0.0987
  Pin_82iso=ProtData[where(abs(masses-82.073) eq min(abs(masses-82.073)) ),*]/0.0617
  TMB_122iso=ProtData[where(abs(masses-122.104) eq min(abs(masses-122.104)) ),*]/0.0896
  XYL_108iso=ProtData[where(abs(masses-108.089) eq min(abs(masses-108.089)) ),*]/0.0804
  BEN_80iso=ProtData[where(abs(masses-80.057) eq min(abs(masses-80.057)) ),*]/0.0615
  MEK_74iso=ProtData[where(abs(masses-74.068) eq min(abs(masses-74.068)) ),*]/0.0426
  MVK_72iso=ProtData[where(abs(masses-72.052) eq min(abs(masses-72.052)) ),*]/0.0424
  MBO_88iso=ProtData[where(abs(masses-88.083) eq min(abs(masses-88.083)) ),*]/0.0526
  MBO_70iso=ProtData[where(abs(masses-70.073) eq min(abs(masses-70.073)) ),*]/0.0522
  MBO_42iso=ProtData[where(abs(masses-42.042) eq min(abs(masses-42.042)) ),*]/0.0320
  ACE_60iso=ProtData[where(abs(masses-60.052) eq min(abs(masses-60.052)) ),*]/0.0325
  ACETAL_46iso=ProtData[where(abs(masses-46.036) eq min(abs(masses-46.036)) ),*]/0.0220
  CH3CN_43iso=ProtData[where(abs(masses-43.037) eq min(abs(masses-43.037)) ),*]/0.0251
  METH_34iso=ProtData[where(abs(masses-34.036) eq min(abs(masses-34.036)) ),*]/0.0116

  MBO_42iso=MBO_42iso*0.000001
  METH_34iso=METH_34iso*0.00001
  TotSIGiso=    METH_34iso +    CH3CN_43iso +    Acetal_46iso +     Ace_60iso +    MBO_88iso +     MBO_70iso +      MBO_42iso +    MVK_72iso +    MEK_74iso +    Ben_80iso +$
    Xyl_108iso +    TMB_122iso +     Pin_138iso +       Pin_82iso +   benzF3_134iso + benzCl3_182iso +  D3_225iso +    D3_209iso +    D4_299iso +    D4_283iso +$
    D5_374iso +     D5_358iso




  mTOz=[33,42,45,59,87 ,    69 , 41,71 ,73 , 79 ,    107, 121, 137,81 ,133 ,    181, 223,207, 297,281 ,$
    371 ,355,-1,-1,-1,    -1,-1 ,-1,19,37,     39,34,43,46,60, 88,70, 42,72,74 ,$
    80, 108,122,138,82,134 ,182, 225,209, 299, 283, 374, 358,-1,-1,-1,78,32,120,106 ]
  compounds=['METH_33',   'CH3CN_42',   'Acetal_45',    'Ace_59',   'MBO_87',    'ISO/MBO_69',     'ISO/MBO_41',   'MVK_71',   'MEK_73',   'Ben_79',$
    'Xyl_107',   'TMB_121',    'MT_137',      'MT_81',   'benzF3_133','benzCl3_181','D3_223',   'D3_207',   'D4_297',   'D4_281',$
    'D5_371',    'D5_355',     'TotSIG',       'FCinlet',  'reltime',   'TotSIGiso',  'prim',     'Tdrift',   'I19',      'I37',$
    'I39', 'METH_34iso','CH3CN_43iso','Acetal_46iso','Ace_60iso','MBO_88iso',' MBO_70iso',' MBO_42iso','MVK_72iso','MEK_74iso','Ben_80iso',$
    'Xyl_108iso','TMB_122iso','Pin_138iso','Pin_82iso','benzF3_134iso','benzCl3_182iso','D3_225iso','D3_209iso','D4_299iso',' D4_283iso',$
    'D5_374iso','D5_358iso','Udx','pdrift','Udrift','BEN_78','I32','TMB_120','XYL_106']
  isotopecor=[1.01,1.02,1.02,1.03,1.06,1.06,1.03,1.05,1.05,1.07,1.09,1.1,1.12,1.07,1.07,2.48,1.37,1.36,1.52,1.51,1.69,1.67,1,1,1,1,1,1]

  RRK=[2.2,2.5+0.9, 3.03,  3.25, 2.68,  2.68, 2.68, 3.53, 3.25, 1.97, 2.31,  2.4,  2.45, 2.45,   2.46*1.0,  2.88,  2.59,  2.59,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
  RRK=[2.2,2.6+0.5, 3.03,  3.25, 2.68,         2.68, 2.68, 3.53, 3.25, 1.97,       2.31,  2.4,  2.45, 2.45,   2.46*1.1,        2.88,  2.59,  2.59,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
 RRK=[2.2/1.3,2.6+0.5, 3.03,  3.25, 2.68/1.45,         2.68/1.45, 2.68/1.45, 3.53/1.3, 3.25, 1.97,       2.31,  2.4,  2.45/1.2, 2.45/1.2,   2.46,        2.88/1.2,  2.59/1.2,  2.59/1.2,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9

 
  VMRppmNPL=[1.019,1.020,1.001,0.983,0.996,0.996,0.996,0.961,1.009,1.025,0.998,1.001,0.989,0.989,1.047,0,0,0,0.901,0.901,1.051,1.051,4,0,0,0,0,0]
  VMRppmAR=[1.011,1.01,1.111,0.967,0.998,0.998,0.998,0.937,1.017,1.006,0.983,0.989,0.983,0.983,1.032,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]
  VMRppmAR=[1.011,1.01,  0.6 ,0.967,0.998,0.998,0.998,0.55 ,1.017,1.006,0.983,0.989,0.983,0.983,1.2  ,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]

  CompARR=[METH_33, CH3CN_42, ACETAL_45, ACE_59, MBO_87 ,$
    MBO_69 , MBO_41,MVK_71 ,MEK_73 ,BEN_79 ,$
    XYL_107, TMB_121, Pin_137,Pin_81 ,benzF3_133 ,$
    benzCl3_181, D3_223, D3_207, D4_297,D4_281 ,$
    D5_371 ,D5_355, TotSIG, transpose((FCinlet-FCinlet)+Flow), transpose(reltime),$
    TotSIGiso,transpose(prim) ,transpose(Tdrift),I19,I37,$
    I39,METH_34iso,CH3CN_43iso,Acetal_46iso,Ace_60iso, MBO_88iso,MBO_70iso, MBO_42iso,MVK_72iso,MEK_74iso ,$
    Ben_80iso, Xyl_108iso,TMB_122iso,Pin_138iso,Pin_82iso,benzF3_134iso ,benzCl3_182iso, D3_225iso,D3_209iso, D4_299iso, D4_283iso,$
    D5_374iso, D5_358iso ,transpose(Udx),transpose(pdrift),transpose(Udrift),BEN_78,I32,TMB_120,XYL_106]

  i_Tdrift=27
  i_Udx=53
  i_pdrift=54
  i_Udrift=55


;;;;;;;;;;;;;;;;;;;;;;;;;;
;;    Find Injections
;;;;;;;;;;;;;;;;;;;;;;;;;;

  LongDUR=10
  tims=0
  timmax=0
  timend=0
  sigmax=0
  SearchStart=1
  SearchEnd=0

  data=ACE_59
  dataSTR='ACE_59'
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 and abs(min(ProtEngData[*,0])-3184.484) lt 0.2) then  data=MEK_73 ; VOCUS Calib 20 sep
  if(strpos(ComputerID,'50b4c522-8345-4094-bb5d-683484b5253e') gt -0.5 and abs(min(ProtEngData[*,0])-3190.6) lt 0.2) then  data=benzF3_133 ; UHEL Calib 26 sep
  if(strlen(ComputerID) eq 0 ) then  data=CH3CN_42 ; Harvard
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 and abs(min(ProtEngData[*,0])-3184.484) lt 0.2) then  dataSTR='MEK_73' ; VOCUS Calib 20 sep
  if(strpos(ComputerID,'50b4c522-8345-4094-bb5d-683484b5253e') gt -0.5 and abs(min(ProtEngData[*,0])-3190.6) lt 0.2) then  dataSTR='benzF3_133' ; UHEL Calib 26 sep

  if(strlen(ComputerID) eq 0 ) then  dataSTR='CH3CN_42' ; Harvard


  mini=quantile(data,0.1)
  midi=quantile(data,0.4)
  i30s=ceil(0.5*max(d(data))/max(reltime))
  faktor2=2
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  faktor2=3 ; VOCUS  PTR-TOF
  step=1
 ; step=0.5
  if(strlen(ComputerID) eq 0 ) then step=5
  print, [mini,midi,max(d(data)),step, faktor2, i30s]
  for i=3,max(d(data))-2 do begin
    if( SearchStart eq 1) then if(abs(data[i]-mini)/abs(data[i-2*step]-mini) gt 3) then if(data[i]gt faktor2*midi) then   begin
      tims=[tims,i]
      ; print, abs(data[i]-mini)/abs(data[i-1]-mini)
      istart=i
      mini=min([data[i-1*step],data[i-2*step],data[i-3*step] ])
      i=i+1+step-1
      SearchStart=0
      SearchEnd=1

    endif
    if(i gt i30s) then mininew=min(data[lindgen(i30s)+i-i30s])
    faktor=1.0
    if(strpos(ComputerID,'a5607e09-ea6a-4dc2-8b59-43e174eb06af') gt -0.5 and abs(min(ProtEngData[*,0])-3188.457) lt 0.2) then  faktor=1.3 ; Lancaster Calib 24 sep  PTR-TOF

    if(i gt i30s) then  if(mininew lt midi*faktor) then mini = mininew
    if( SearchEnd eq 1) then  if(abs(data[i-1*step]-mini)/abs(data[i]-mini) gt 1.5) then  if(data[i-1*step] gt midi ) then   begin
      ;  print, [i,abs(data[i-1]-mini)/abs(data[i]-mini)-1.5,data[i-1] - midi]
      timend=[timend,i]
      sigmax=[sigmax,max(data[istart:i])/midi]
      helpi=where((data[istart:i]) eq max(data[istart:i]))
      timmax=[timmax,istart+helpi[0]]
      ;   print, [i-istart,i,1.0*i/120,abs(data[istart]-mini)/abs(data[istart-1]-mini),data[istart],midi ,data[i-1] ,abs(data[i-1]-mini)/abs(data[i]-mini) ]
      i=i+1
      istart=istart+1
      ;   print, [i-istart,i, 1.0*i/120,abs(data[istart]-mini)/abs(data[istart-1]-mini),data[istart] ,midi,data[i-1] ,abs(data[i-1]-mini)/abs(data[i]-mini) ]
      ;    print, ''

      SearchStart=1
      SearchEnd=0

    endif
    ;i=i+step-1
  endfor


  tims=tims[1:*]
  timend=timend[1:*]
  sigmax=sigmax[1:*]
  timmax=timmax[1:*]

  ;fix:
  if(max(d(tims))-1 eq max(d(timend))) then timend=[timend,max(tims)+3]
  if(max(d(tims))-1 eq max(d(timend))) then sigmax=[sigmax,data[max(tims)+3]]
  if(max(d(tims))-1 eq max(d(timend))) then timmax=[timmax,max(tims)+1]

  injectiontimes=reltime[tims]
  injectiontimesEND=reltime[timend]

  duration=(injectiontimesEND-injectiontimes)*60  ; in seconds

  ;;;
  ; clean
  ;;;

  timsold=tims
  durationold=duration
  injectiontimesold=injectiontimes
  injectiontimesENDold=injectiontimesEND

  if(duration[0] lt LongDUR) then if(injectiontimes[1]*60-6 gt injectiontimesEND[0]*60) then begin
    tims[0]=-9999
    timend[0]=-9999
    injectiontimes[0]=-9999
    injectiontimesEND[0]=-9999
    duration[0]=-9999
  endif

  for i=1, max(d(tims))-2 do begin
    if(duration[i-1] lt LongDUR) then if(injectiontimesEND[i-1]*60+6 lt injectiontimes[i]*60) then  if(duration[i] lt LongDUR) then if(injectiontimes[i+1]*60-6 gt injectiontimesEND[i]*60) then begin

      tims[i]=-9999

      timend[i]=-9999
      injectiontimes[i]=-9999
      injectiontimesEND[i]=-9999
      duration[i]=-9999
    endif
  endfor


  if(duration[max(d(tims))-1] lt LongDUR) then if(injectiontimesEND[max(d(tims))-2]*60+6 lt injectiontimes[max(d(tims))-1]*60) then begin
    tims[max(d(tims))-1]=-9999
    timend[max(d(tims))-1]=-9999
    injectiontimes[max(d(tims))-1]=-9999
    injectiontimesEND[max(d(tims))-1]=-9999
    duration[max(d(tims))-1]=-9999
  endif


  ; clean short injections
  Shortsig=quantile(sigmax[where(duration lt LongDUR)],0.6)
  intex=where(duration lt LongDUR and sigmax lt Shortsig/5)
  if(max(intex) gt -0.5) then  begin
    tims[intex]=-9999
    timend[intex]=-9999
    injectiontimes[intex]=-9999
    injectiontimesEND[intex]=-9999
    duration[intex]=-9999
  endif
  ;  print, [transpose(string(timsold,format='(F8.1)')),transpose(string(durationold,format='(F8.1)')),transpose(string(injectiontimesold*60,format='(F8.1)')),transpose(string(injectiontimesENDold*60,format='(F8.1)')),transpose(string(tims,format='(F8.1)')),transpose(string(duration,format='(F8.1)')),transpose(string(injectiontimes*60,format='(F8.1)')),transpose(string(injectiontimesEND*60,format='(F8.1)')),transpose(string(sigmax,format='(F8.1)'))]




  tims=tims[where(tims gt -9999)]
  sigmax=sigmax[where(timend gt -9999)]
  timmax=timmax[where(timend gt -9999)]

  timend=timend[where(timend gt -9999)]
  injectiontimes=injectiontimes[where(injectiontimes gt -9999)]
  injectiontimesEND=injectiontimesEND[where(injectiontimesEND gt -9999)]
  duration=duration[where(duration gt -9999)]

  PREVdistance=[-9999,-60.0*(injectiontimes[0:max(d(tims))-2]-injectiontimes[1:*])]
  NEXTdistance=[60.0*(injectiontimes[1:*]-injectiontimes[0:max(d(tims))-2]),-9999]
  if(duration[0] gt LongDUR) then sequence=100 else sequence = 1
  for i=1,max(d(tims))-1 do if(duration[i] le LongDUR) then if (abs(PREVdistance[i]) lt 8.5) then if (sequence[i-1] lt 99) then sequence=[sequence,sequence[i-1]+1] else sequence=[sequence,1] else sequence=[sequence,1] else sequence=[sequence,100]
  for i=0, max(d(tims))-1 do if(sequence[i] eq 10) then for j=0,9 do sequence[i-j]=10

  ; clean long injections
  Longsig=max(sigmax[where(sequence eq 100)])
  intex=where(sequence eq 100 and sigmax lt Longsig/10)
  if(max(intex) gt -0.5) then sequence[intex]=-9999




  if( max(where(sequence ne 10 and sequence ne 100  )) gt -0.5) then begin
    sequence[where(sequence ne 10 and sequence ne 100  )]=-9999
    tims=tims[where(sequence gt -9999)]
    timend=timend[where(sequence gt -9999)]
    injectiontimes=injectiontimes[where(sequence gt -9999)]
    injectiontimesEND=injectiontimesEND[where(sequence gt -9999)]
    duration=duration[where(sequence gt -9999)]
    sigmax=sigmax[where(sequence gt -9999)]
    timmax=timmax[where(sequence gt -9999)]
    sequence=sequence[where(sequence gt -9999)]

  endif


  injectSHORT=injectiontimes[where(duration lt 4)]
  injectSHORTend=injectiontimesEND[where(duration lt 4)]
  timsSHORT=tims[where(duration lt 4)]
  timsSHORTend=timend[where(duration lt 4)]

  injectLONG=injectiontimes[where(duration gt 4)]
  injectLONGend=injectiontimesEND[where(duration gt 4)]
  timsLONG=tims[where(duration gt 4)]
  timsLONGend=timend[where(duration gt 4)]



  CompCUB=dblarr(max(d(injectSHORT)),max(d(compounds)),15*step) ; 12 injections, 23 ions, 15 cycles
  for i=0,max(d(timsSHORT))-1 do CompCUB[i,*,*]=CompARR[*,indgen(15*step)-5*step+timsShort[i]]
  ;  counts=total(compCUB[*,*,step*[4,5,6,7,8,9,10,11]],3)
  ;countsBG=8*total(compCUB[*,*,step*[1,2,3,12,13]],3)/5

  counts=total(compCUB[*,*,[indgen(8*step)+4*step]],3)*timestep; counts over 4s integration period
  countsBG=(8.0/5)*total(compCUB[*,*,[indgen(3*step)+1*step,indgen(2*step)+12*step]],3)*timestep


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;; S
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;   Cylinder: CC502781
  ;Cylinder Test Date: 02/14
  ;Valve: Ceodeux 14/686691 SS CGA350
  ;Cylinder Pressure: 2000 psi @ 22 °C
  ;Analysis Date: April 12, 2016
  ;Multi-component calibration mix
  ;Compound CAS# Concentration (ppb) Uncertainty
  ;
  ;Acetaldehyde 75-07-0         1111 ±5%
  ;Methanol 67-56-1        1011 ±5%
  ;Acetone 67-64-1 967 ±5%
  ;Acetonitrile 75-05-8 1010 ±5%
  ;Methyl Vinyl Ketone 78-94-4 937 ±5%
  ;Methyl Ethyl Ketone 78-93-3 1017 ±5%
  ;2-Methyl-3-Buten-2-ol 115-18-4 998 ±5%
  ;Benzene 71-43-2 1006 ±5%
  ;1,2,3-Trifluorobenzene 367-23-7 1032 ±5%
  ;Hexamethylcyclotrisiloxane (D3) 541-05-9 992 ±5%
  ;m-Xylene 108-38-3 983 ±5%
  ;alpha-Pinene 80-56-8 983 ±5%
  ;Octamethylcyclotetrasiloxane (D4) 556-67-2 995 ±5%
  ;1,3,5-Trimethylbenzene 108-67-8 989 ±5%
  ;Decamethylcyclopentasiloxane (D5) 541-02-6 995 ±5%
  ;1,2,4-Trichlorobenzene 120-82-1 995 ±5%

  if(min(ProtEngData[*,0]) lt 3186.0 or min(ProtEngData[*,0]) gt 3194.0 ) then VMRppm=VMRppmAR

  ;propane 0.981 0.015
  ;ethanol 0.965 0.024
  ;
  ;methanol 1.019 0.031
  ;acetonitrile 1.020 0.031
  ;acetaldehyde 1.001 0.030
  ;acetone 0.983 0.020
  ;isoprene 0.996 0.020
  ;3-buten-2-one (MVK) 0.961 0.029
  ;butan-2-one (MEK) 1.009 0.030
  ;benzene 1.025 0.015
  ;m-xylene 0.998 0.025
  ;1,2,4-TMB 1.001 0.025
  ;1,2,4-trifluorobenzene 1.047 0.052
  ;3-carene 0.989 0.025
  ;D4-siloxane 0.901 0.045
  ;D5-siloxane 1.051 0.053

  if(min(ProtEngData[*,0]) ge 3186.0  and min(ProtEngData[*,0]) le 3194.0 ) then VMRppm=VMRppmNPL


  VMRppm[where(VMRppm eq 0)]=1e5








  essen=fltarr(10)
  essen42=fltarr(10)
  prim19=fltarr(10)
  prim37=fltarr(10)
  i2=0
  en=fltarr(22)
  for i=0,21 do  en[i]=1e-6*VMRppm[i]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en42=1e-6*VMRppm[1]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en59=1e-6*VMRppm[3]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  
    Fmol=(Flow)/(60.0*1000.0*22.4) ; unit is mol/s
  ;  faccct=1.0
  ;  if(strlen(ComputerID) eq 0 ) then faccct=20.0 ; harvard
  d_d=9.6
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  d_d=10; estimated based on E/N of 160 Td, VOCUS  PTR-TOF
  p_d=mean(counts[indgen(10),i_pdrift]/4)
  E_d=(mean(counts[indgen(10),i_udrift]/4)+mean(counts[indgen(10),i_udx]/4))/d_d
  T_d=mean(counts[indgen(10),i_Tdrift]/4)+273.15
  t_react=(d_d*p_d*273.15)/(E_d*T_d*2.7*1013.25)
  if(strlen(ComputerID) eq 0 ) then t_react=0.003 ; harvard
  
  sensitivity42=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[1]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission
  sensitivity59=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[3]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission
 
  sensitivities=fltarr(22)
  for i=0,21 do sensitivities[i]=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[i]/1013.25)


ADD40=0
if(strmatch(strtrim(strmid(name,strpos(name,'\',/reverse_search)+1,1000),2),'2017.09.20-13h21m39s_calib_rupert_1s.h5') eq 1) then ADD40=40

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        TRANSMISSION retrieve best EX
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  MASSlow=10
  WIDTHlow=2
  MASShigh=1000
  WIDTHhigh=10
  ex=0.5




if(ComputerID eq 'nix') then begin ;TOF1000 UU
  MASSlow=17.9
  WIDTHlow=43.5
  MASShigh=450
  WIDTHhigh=298
  ex=0.33
  bestEX=0.33
  if( ProtEngData[0] lt 3186) then begin
    MASSlow=4.9
    WIDTHlow=-5
    MASShigh=558
    WIDTHhigh=146
    ex=0.82
    bestEX=0.82
  endif
endif

if(ComputerID eq '64db5058-a18e-4b09-ab32-f7cecac8afa4') then begin ;TOF8000 FZJ
  MASSlow=8
  WIDTHlow=3
  MASShigh=346.9
  WIDTHhigh=31
  ex=0.53
  bestEX=0.53
endif

if(ComputerID eq '50b4c522-8345-4094-bb5d-683484b5253e') then begin ;TOF8000 UHEL
  MASSlow=35.9
  WIDTHlow=44.6
  MASShigh=196
  WIDTHhigh=56
  ex=0.35
  bestEX=0.35
endif



if(CalculateTransmission eq 1) then begin
  
  
  MASSlow=10
  WIDTHlow=2
  MASShigh=1000
  WIDTHhigh=10
  ex=0.5

  window,28, xsize = 500, ysize=400
  !P.MULTI = [0,1,1]
  loadct,20



  DELTAex=0.01
  EXrange=[0,2]
  field=fltarr(201)
  scoreee=1e10
  bestEX=0.5
  
  NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/medium)
  essen=fltarr(22)
  for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
  xx=[59,69,71,73,79,107,121,133,137,223,297,355]
 set=[essen[3]/sensitivities[3],(essen[5]+essen[6])/sensitivities[5],essen[7]/sensitivities[7],essen[8]/sensitivities[8],essen[9]/sensitivities[9], $
    essen[10]/sensitivities[10],essen[11]/sensitivities[11],essen[14]/sensitivities[14],(essen[12]+essen[13])/sensitivities[12]]
  if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then begin ;VOCUS
    set1=set[[0,2,3,5,6,8]]
    xx=xx[[0,2,3,5,6,8]]
    fiiil=where(set1 ne max(set1[1:5]) and set1 ne min(set1[1:5]))
  endif else begin
    set1=set[[0,1,2,3,4,5,6,7,8]]
    xx=xx[[0,1,2,3,4,5,6,7,8]]
    fiiil2=where(set1 ne max(set1[1:8]+9999) and set1 ne min(set1[1:8])-9999)
    fiiil=where(set1 ne max(set1[1:8]) and set1 ne min(set1[1:8]))
  endelse

  
  
  for dEX=0,200 do begin
            ex=DELTAex*dEX
            NC=calcNC(ex, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/medium)
            essen=fltarr(22)
            for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i] 
            cols=[10,10,10,10,10,   100,100,100,100,100,   175,175,175,175,175, 250,250,250,250,250,250,250,250,250]
           xx=[59,69,71,73,79,107,121,133,137,223,297,355]
 set=[essen[3]/sensitivities[3],(essen[5]+essen[6])/sensitivities[5],essen[7]/sensitivities[7],essen[8]/sensitivities[8],essen[9]/sensitivities[9], $
    essen[10]/sensitivities[10],essen[11]/sensitivities[11],essen[14]/sensitivities[14],(essen[12]+essen[13])/sensitivities[12]]
  if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then begin ;VOCUS
    set1=set[[0,2,3,5,6,8]]
    xx=xx[[0,2,3,5,6,8]]
  endif else begin
    set1=set[[0,1,2,3,4,5,6,7,8]]
    xx=xx[[0,1,2,3,4,5,6,7,8]]
  endelse

            set=set1[fiiil]
            xx=xx[fiiil]
            set=set/max(set)
            slpe=linfit(xx,set, YFIT=fitti) 
            good=mean(abs(set-fitti))
            int=slpe[0]
            slpe=1000*abs(slpe[1]) 
            
            slpe=abs(max(set[where(xx lt 74)])-max(set[where(xx gt 120)]))
            if(slpe lt scoreee) then begin
                  scoreee=slpe
                  bestEX=ex
            endif
            if (dEX eq 0) then  plot,xx, set, xrange=[50,150], background=0,color=-1
          
          set=set1[fiiil2]
              xx=xx[fiiil2]
            set=set/max(set)
            slpe2=linfit(xx,set, YFIT=fitti2)
            good2=mean(abs(set-fitti2))
     
            int2=slpe2[0]
            slpe2=1000*abs(slpe2[1])

            slpe2=abs(max(set[where(xx lt 74)])-max(set[where(xx gt 120)]))
          
          
            oplot,xx, set, color=200
            print, string([ex,slpe,good,slpe2,good2,int,mean(set),stddev(set),xx],format='(f10.5)')
            oplot,xx, set, color=100
    endfor
;bestEX=0.5








  xyouts,0.2,0.5,'Best ex='+strtrim(string(bestEX,format='(f8.3)'),2),/norm,charsize=4,charthick=3,color=-100



  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;        TRANSMISSION retrieve best LOW filter
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  MASSlow=10
  WIDTHlow=2
  MASShigh=1000
  WIDTHhigh=10
 
  DELTAm=0.5
  Mrange=[0,50]
  Wrange=[0,50]
  Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
  Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
  field=fltarr(dim1,dim2)
  for ML=0,dim1-1 do begin
    for WL=0,dim2-1 do begin
      
      
      masslow=min(Mrange)+deltam*ML
      widthlow=min(Wrange)+deltam*WL
      
      
      if(tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(59,bestex,10,2,1000,10) gt 0.98) then begin

;      factor1=tr(59,bestEX,masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)
 ;     factor2=tr(59,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)
  ;    factor142=tr(42,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)
   ;   factor242=tr(42,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)
    ;  primi= (mean(countsBG[indgen(10)+ADD40,28])*factor1+mean(countsBG[indgen(10)+ADD40,29])*factor2)/4; divide by 4 because mean(countsBG is based on 4s integration. Unit is cps.
     ; primi42= (mean(countsBG[indgen(10)+ADD40,28])*factor142+mean(countsBG[indgen(10)+ADD40,29])*factor242)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      ;C59=mean(counts[indgen(10)+ADD40,3])-mean(countsBG[indgen(10)+ADD40,3]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
 ;     C42=mean(counts[indgen(10)+ADD40,1])-mean(countsBG[indgen(10)+ADD40,1]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
  ;    NC59=C59*1e6/primi ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
   ;   NC42=C42*1e6/primi42 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
     
      NC=calcNC(bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/low)
      essen =fltarr(22)
      for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
  
     
     
     ; essen= NC59*Fmol*1e-9/en59  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      ;essen42= NC42*Fmol*1e-9/en42  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
   ;  prim19= mean(countsBG[indgen(10)+ADD40,28])/4
   ;  prim37= mean(countsBG[indgen(10)+ADD40,29])/4
   
   if(essen[1] gt sensitivities[1]) then xx42=essen[1]/sensitivities[1] else xx42=sensitivities[1]/essen[1]
   if(essen[2] gt sensitivities[2]) then xx45=essen[2]/sensitivities[2] else xx45=sensitivities[2]/essen[2]
    if(essen[3] gt sensitivities[3]) then xx59=essen[3]/sensitivities[3] else xx59=sensitivities[3]/essen[3]
    if(essen[7] gt sensitivities[7]) then xx71=essen[7]/sensitivities[7] else xx71=sensitivities[7]/essen[7]
    if(essen[8] gt sensitivities[8]) then xx73=essen[8]/sensitivities[8] else xx73=sensitivities[8]/essen[8]
      field[ML,WL]=mean([xx42,xx45,xx59,xx71,xx73])
      endif else field[ML,WL]=9999
    endfor
  endfor
  field=1/field
  maxi=max(field,/nan)
  field[where(field lt 0.98*maxi)]=field[where(field lt 0.98*maxi)]*0.5
  field[where(field lt 0.99*maxi)]=field[where(field lt 0.99*maxi)]*0.5
  field[where(field lt 0.995*maxi)]=field[where(field lt 0.995*maxi)]*0.5
  field[where(field gt 0.998*maxi)]=1
  ; for i=1,7 do  field[*,-1+50*i]=0.6
  ; for i=1,13 do  field[-1+50*i,*]=0.6
  window,26, xsize = dim1, ysize=dim2
  loadct,20
  tvscl, field
  WidthLow=0
  while (max(where(field[*,WidthLow] eq 1)) lt -0.5) do WidthLow=WidthLow+1
  MassLow=where(field[*,WidthLow] eq 1) & Masslow=Masslow[0]
  masslow=min(Mrange)+deltam*masslow
  widthlow=min(Wrange)+deltam*widthlow
  print, [Masslow,widthlow,MassHigh,Widthhigh]
  
  
  
  
  
  
  
  counter=0
  addi=0
  
  while(counter eq 0) do begin
    increase=0
    NC=calcNC(bestEX+addi, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/high)
    essen =fltarr(22)
    for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
    essen297= essen[18]+essen[19]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
    essen371= essen[20]+essen[21]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
    sensitivity297=sensitivities[18]
    sensitivity371=sensitivities[20]
    if(mean(essen297) gt mean(essen371)*5) then begin
      essen_H2=essen297
      sensitivity_H2=sensitivity297
      HH2=1
    endif else begin
      essen_H2=essen371
      sensitivity_H2=sensitivity371
      HH2=2
    endelse

    if(HH2 eq 1) then begin
      essen_H2=essen297
      sensitivity_H2=sensitivity297
    endif else begin
      essen_H2=essen371
      sensitivity_H2=sensitivity371
    endelse
    if(essen_H2 gt sensitivity_H2) then increase=10
    if(essen[10] gt sensitivities[10]) then increase=increase+1
    if(essen[11] gt sensitivities[11]) then increase=increase+1
    if(essen[12]+essen[13] gt sensitivities[12]) then increase=increase+1
    if(essen[14] gt sensitivities[14]) then increase=increase+1


    if(increase gt 1.5) then  addi=addi+0.01 else  counter=1

  endwhile

bestEX=bestEX+addi
  
  
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;        TRANSMISSION retrieve best HIGH filter
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 





  
  DELTAm=0.5
  Mrange=[150,600]
  Wrange=[30,300]
  Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
  Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
  field=fltarr(dim1,dim2)
  for MH=0,dim1-1 do begin
    for WH=0,dim2-1 do begin
      MASShigh=max(Mrange)-deltam*MH
      WIDTHhigh=min(Wrange)+deltam*WH
      if(tr(137,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(137,bestex,10,2,1000,10) gt 0.98) then begin
      
      NC=calcNC(bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40,/high)
      essen =fltarr(22)
      for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
      essen121= essen[11]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      essen133= essen[14]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then essen133= essen[12]+essen[13]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      essen297= essen[18]+essen[19]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      essen371= essen[20]+essen[21]  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      sensitivity121=sensitivities[11]
      sensitivity133=sensitivities[14]
      if(ComputerID eq '2197a787-6c47-4c78-88d1-28fb6598bcc2') then sensitivity133=sensitivities[12]
      sensitivity297=sensitivities[18]
      sensitivity371=sensitivities[20]
      
      prim19= mean(countsBG[indgen(10)+ADD40,28])/4
      prim37= mean(countsBG[indgen(10)+ADD40,29])/4
       if(WH eq 0 and MH eq 0) then begin
        if(mean(essen121) gt mean(essen133)) then begin
          essen_H1=essen121
          sensitivity_H1=sensitivity121
          HH1=1
        endif else begin
          essen_H1=essen133
          sensitivity_H1=sensitivity133
          HH1=2
        endelse
        if(mean(essen297) gt mean(essen371)*5) then begin
          essen_H2=essen297
          sensitivity_H2=sensitivity297
          HH2=1
        endif else begin
          essen_H2=essen371
          sensitivity_H2=sensitivity371
          HH2=2
        endelse
      endif

      if(HH2 eq 1) then begin
        essen_H2=essen297
        sensitivity_H2=sensitivity297
      endif else begin
        essen_H2=essen371
        sensitivity_H2=sensitivity371
      endelse
      if(HH1 eq 1) then begin
        essen_H1=essen121
        sensitivity_H1=sensitivity121
      endif else begin
        essen_H1=essen133
        sensitivity_H1=sensitivity133
      endelse




      if(essen_H1 gt sensitivity_H1) then xx_H1=essen_H1/sensitivity_H1 else xx_H1=sensitivity_H1/essen_H1
      if(essen_H2 gt sensitivity_H2) then xx_H2=essen_H2/sensitivity_H2 else xx_H2=sensitivity_H2/essen_H2
if(xx_H1 lt 0.9) then begin
  print, 'hahha'
  endif
  if(xx_H2 lt 0.9) then begin
    print, 'hahha'
  endif
 

      sett=[max([xx_H1,0.9],/nan),max([xx_H2,0.9],/nan)]
      if(min(sett) eq 0.9) then begin 
        sett=0.9 
        endif else sett=max(sett)
      field[dim1-1-MH,WH]=sett
      endif else field[dim1-1-MH,WH]=9999

    endfor
  endfor
  field=1/field
  field[where(field gt 1)]=0
  maxi=max(field,/nan)
  ;    field=sqrt(field)^2
  ;field[where(field lt 0.98*maxi)]=field[where(field lt 0.98*maxi)]*0.5
  ;field[where(field lt 0.99*maxi)]=field[where(field lt 0.99*maxi)]*0.5
  ;field[where(field lt 0.995*maxi)]=field[where(field lt 0.995*maxi)]*0.5
;  field[where(field gt 0.998*maxi)]=1
  ;field[where(field lt 0.998*maxi)]=0.998*maxi
  window,31, xsize = dim1, ysize=dim2
  loadct,20
  tvscl, field
   indi=where(field eq maxi)
  MassHigh=max(indi mod dim1)
  Widthhigh=max((indi-MassHigh)/dim1)
  MASShigh=min(Mrange)+deltam*MASShigh
  WIDTHhigh=min(Wrange)+deltam*WIDTHhigh



  print, [Masslow,widthlow,MassHigh,Widthhigh]
  print,''
  MasslowOLD=Masslow
  widthlowOLD=widthlow
  MassHighOLD=MassHigh
  WidthhighOLD=Widthhigh
  MasslowOLD2=Masslow
  widthlowOLD2=widthlow
  MassHighOLD2=MassHigh
  WidthhighOLD2=Widthhigh
 
  ;Masslow=MasslowOLD2
;  widthlow=widthlowOLD2
  ;MassHigh=MassHighOLD2
 ; Widthhigh=WidthhighOLD2


;  print, 'MASSlow | WIDTHlow | MASShigh | WIDTHhigh | bestEX | sensitivity59 | T_d | p_d | udrift | udx'
 ; print, [MASSlow,WIDTHlow,MASShigh,WIDTHhigh,bestEX,sensitivity59,T_d,p_d,mean(counts[indgen(10)+ADD40,i_udrift]/4), mean(counts[indgen(10)+ADD40,i_udx]/4)]
;  print,['m19', string((prim19),format='(F12.2)')]
  ;print,['m37', string((prim37),format='(F12.2)')]
  ;print,['m37/m19', string(100*(prim37)/(prim19),format='(F12.1)')+'%']
  ;print,['m19 @ tr 59', string((prim19)*factor1,format='(E13.2)')]
  ;print,['m37 @ tr 59', string((prim37)*factor2,format='(E12.2)')]
  ;print,['m37/m19 @ tr 59', string(100*(prim37)*factor2/((prim19)*factor1),format='(F12.2)')+'%']
  ;print,[compounds[3], string((essen),format='(F12.2)')]
  ;print,['Tr59/Tr19', string(((prim19)*factor1)/((prim19)),format='(F12.2)')]
endif

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;              END TRANSMISSION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



WINDOW, 5, xsize=1150,ysize=500
!P.MULTI = [0,2,1]
DEVICE, DECOMPOSED = 0


;plot transe
loadct,5

plot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),color=0,ytitle="transmission",xtitle="m/z",background=-1,charsize=2, thick =2, charthick=2

loadct,13

oplot,indgen(399)+1,(indgen(399)+1)^bestEX/(59)^bestEX
oplot,indgen(399)+1,tr(indgen(399)+1, bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/(indgen(399)+1)^bestEX,color=60



mmm=[33,42,45,59,69,71,73,79,107,121,137,133,181,223,297,371]
tansen=tr(mmm,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
;tansen=tansen/tansen
sense=sensitivities[[0,1,2,3,5,7,8,9,10,11,12,14,15,17,19,21]]

  NC=calcNC(bestEX, masslow,widthlow,MASShigh,WIDTHhigh,counts,countsBG,ADD40)
  essen=fltarr(22)
  for i=0,21 do essen[i]=NC[i]*Fmol*1e-9/en[i]
  senseCALC=[essen[0],essen[1],essen[2],essen[3],total(essen[4:6]),$
    essen[7],essen[8],essen[9],essen[10],essen[11],$
    total(essen[12:13]),essen[14],essen[15],total(essen[16:17]),$
    total(essen[18:19]),total(essen[20:21])]


For i=0,15  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=60
i=1 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
i=3 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
i=9 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
i=11 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
i=14 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
i=15 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
loadct,5

xyouts,0.52,0.92,/normal,PTRid+'  '+Datumzeit, color=0, charthick =3, charsize=2
xyouts,0.55,0.81,/normal,'Transmission parameters:  ', color=0, charthick =2, charsize=2
xyouts,0.55,0.73,/norm,'ex: '+strtrim(string(bestEX,Format='(F8.2)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.65,/norm,'mLOW: '+strtrim(string(MASSlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.60,/norm,'wLOW: '+strtrim(string(WIDTHlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.52,/norm,'mHIGH: '+strtrim(string(MASShigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.47,/norm,'wHIGH: '+strtrim(string(WIDTHhigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2



ErrCode=0
CATCH, Error_status
IF Error_status NE 0 THEN BEGIN
  ErrCode=1
  if(ErrCode eq 1) then begin
    PRINT, 'Error index: ', Error_status
    PRINT, 'Error message: ', !ERROR_STATE.MSG
    PRINT, 'WRITE_JPG not possible (disabled) :-((('
    CATCH, /CANCEL
  endif
ENDIF
if (ErrCode eq 0) then   write_jpeg, path2+'TRANS '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
WDELETE, 5





























  print, ''


  CompARRtranse=CompARR
  for i=0,max(d(compounds))-1 do if (mTOz[i] ne -1) then CompARRtranse[i,*]=CompARR[i,*]/tr(mTOz[i],bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  PrimTR=CompARRtranse[29,*]+CompARRtranse[28,*]
  TotSigTR=CompARRtranse[0,*]
  for i=1,21 do  TotSigTR=TotSigTR+CompARRtranse[i,*]
  CompCUBtranse=CompCUB
  for i=0,max(d(timsSHORT))-1 do CompCUBtranse[i,*,*]=CompARRtranse[*,indgen(15*step)-5*step+timsShort[i]]
  countsTR=total(compCUBtranse[*,*,[indgen(8*step)+4*step]],3)*timestep; counts over 4s integration period
  countsBGTR=(8.0/5)*total(compCUBtranse[*,*,[indgen(3*step)+1*step,indgen(2*step)+12*step]],3)*timestep







  S_set3=[0,0,0,0,0]
  S_set2=[0,0,0,0,0]
  S_set3TR=[0,0,0,0,0]
  S_set2TR=[0,0,0,0,0]
  S_set=starttim
  Serr_set=starttim
  sensitivitiesCALC=fltarr(22)
  ncpsPERppbTR=fltarr(22,5)
  ncpsPERppbTR59=fltarr(22,5)
  cpsPERppbRAW=fltarr(22,5)
  KINSPECS=fltarr(20,5)

  for j=0,22 do begin
    essen=fltarr(max(d(timsSHORT)))
    essen3=fltarr(max(d(timsSHORT)))
    essenTR=fltarr(max(d(timsSHORT)))
    essen3TR=fltarr(max(d(timsSHORT)))

    i2=0
    for i=0,max(d(timsSHORT))-1 do begin
      en=1e-6*VMRppm[j]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
      factor1=tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
      factor2=tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
      primi= (countsBG[i,28]*factor1+countsBG[i,29]*factor2)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      primiTR= (countsBGTR[i,28]+countsBGTR[i,29])/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
      C=counts[i,j]-countsBG[i,j] ; total signal of an injection (independent of integration interval). Unit is 'counts'.
      CTR=countsTR[i,j]-countsBGTR[i,j] ; total signal of an injection (independent of integration interval). Unit is 'counts'.
      NC=C*1e6/primi ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
      NCTR=CTR*1e6/primiTR ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
      Fmol=(Flow)/(60.0*1000.0*22.4) ; unit is mol/s
      es=NC*Fmol*1e-9/en  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      es3=C*Fmol*1e-9/en  ; UNIT cps/ppb
      esTR=NCTR*Fmol*1e-9/en  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
      es3TR=CTR*Fmol*1e-9/en  ; UNIT cps/ppb
      essen[i2]= es
      essen3[i2]= es3
      essenTR[i2]= esTR
      essen3TR[i2]= es3TR
      i2=i2+1
    endfor
    Sset=[mean(essen[0:9]/isotopecor[j]),100*stddev(essen[0:9])/mean(essen[0:9])]
    for k=1,4 do Sset=[Sset, [mean(essen[10*k+0:10*k+9]/isotopecor[j]),100*stddev(essen[10*k+0:10*k+9])/mean(essen[10*k+0:10*k+9])]]
    Sset2=[mean(essen[0:9]/isotopecor[j])]
    for k=1,4 do Sset2=[Sset2, [mean(essen[10*k+0:10*k+9]/isotopecor[j])]]
    Sset2=[mean(essen[0:9])]
    Sset3=[mean(essen3[0:9])]
    Sset2TR=[mean(essenTR[0:9])]
    Sset3TR=[mean(essen3TR[0:9])]
    for k=1,4 do Sset2=[Sset2, [mean(essen[10*k+0:10*k+9])]]
    for k=1,4 do Sset3=[Sset3, [mean(essen3[10*k+0:10*k+9])]]
    for k=1,4 do Sset2TR=[Sset2TR, [mean(essenTR[10*k+0:10*k+9])]]
    for k=1,4 do Sset3TR=[Sset3TR, [mean(essen3TR[10*k+0:10*k+9])]]
    ;  print,[compounds[j], string(Sset2TR,format='(F12.2)'), string(Sset2,format='(F12.2)'),string(Sset3,format='(F12.2)')]
    S_set2=[[S_set2],[Sset2]]
    S_set=[S_set,[mean(essen)]]
    Serr_set=[Serr_set,stddev(essen)]
    if(j lt 21.5) then begin
      sensitivitiesCALC[j]=Sset2TR[0+ADD40/10]
      ncpsPERppbTR[j,*]=Sset2TR
      ncpsPERppbTR59[j,*]=Sset2
      cpsPERppbRAW[j,*]=Sset3
      if( j eq 15 ) then begin

        print, sset3

      endif
    endif
  endfor

  sig19=fltarr(max(d(timsSHORT)))
  sig37=fltarr(max(d(timsSHORT)))
  sig19at59=fltarr(max(d(timsSHORT)))
  sig37at59=fltarr(max(d(timsSHORT)))
  r37to19=fltarr(max(d(timsSHORT)))
  r32to19=fltarr(max(d(timsSHORT)))
  BENZ78to79=fltarr(max(d(timsSHORT)))
  TMB120to121=fltarr(max(d(timsSHORT)))
  XYL106to107=fltarr(max(d(timsSHORT)))

  sigTTd=fltarr(max(d(timsSHORT)))
  sigppd=fltarr(max(d(timsSHORT)))
  sigUUd=fltarr(max(d(timsSHORT)))
  sigUUdx=fltarr(max(d(timsSHORT)))

  for i=0,max(d(timsSHORT))-1 do begin
    sig19[i]=countsBG[i,28]/4
    sig37[i]=countsBG[i,29]/4
    sig19at59[i]=countsBGTR[i,28]/4
    sig37at59[i]=countsBGTR[i,29]/4
    r37to19[i]=countsBGTR[i,29]/countsBGTR[i,28]
    r32to19[i]=countsBGTR[i,57]/countsBGTR[i,28]
    BENZ78to79[i]=countsTR[i,56]/countsTR[i,9]
    TMB120to121[i]=countsTR[i,58]/countsTR[i,11]
    XYL106to107[i]=countsTR[i,59]/countsTR[i,10]
    sigTTd[i]=counts[i,i_Tdrift]/4+273.15
    sigppd[i]=counts[i,i_pdrift]/4
    sigUUd[i]=counts[i,i_udrift]/4
    sigUUdx[i]=counts[i,i_udx]/4

  endfor

  Set19=[mean(sig19[0:9])]
  Set37=[mean(sig37[0:9])]
  Set19at59=[mean(sig19at59[0:9])]
  Set37at59=[mean(sig37at59[0:9])]
  Set37to19=[mean(r37to19[0:9])]
  Set32to19=[mean(r32to19[0:9])]
  Set78to79=[mean(BENZ78to79[0:9])]
  Set120to121=[mean(TMB120to121[0:9])]
  Set106to107=[mean(XYL106to107[0:9])]
  SetTTd=[mean(sigTTd[0:9])]
  Setppd=[mean(sigppd[0:9])]
  SetUUd=[mean(sigUUd[0:9])]
  SetUUdx=[mean(sigUUdx[0:9])]
  for k=1,4 do   Set19=[Set19, [mean(sig19[10*k+0:10*k+9])]]
  for k=1,4 do   Set37=[Set37, [mean(sig37[10*k+0:10*k+9])]]
  for k=1,4 do   Set19at59=[Set19at59, [mean(sig19at59[10*k+0:10*k+9])]]
  for k=1,4 do   Set37at59=[Set37at59, [mean(sig37at59[10*k+0:10*k+9])]]
  for k=1,4 do   Set37to19=[Set37to19, [mean(r37to19[10*k+0:10*k+9])]]
  for k=1,4 do   Set32to19=[Set32to19, [mean(r32to19[10*k+0:10*k+9])]]
  for k=1,4 do   Set78to79=[Set78to79, [mean(BENZ78to79[10*k+0:10*k+9])]]
  for k=1,4 do   Set120to121=[Set120to121, [mean(TMB120to121[10*k+0:10*k+9])]]
  for k=1,4 do   Set106to107=[Set106to107, [mean(XYL106to107[10*k+0:10*k+9])]]
  for k=1,4 do   SetTTd=[SetTTd, [mean(sigTTd[10*k+0:10*k+9])]]
  for k=1,4 do   Setppd=[Setppd, [mean(sigppd[10*k+0:10*k+9])]]
  for k=1,4 do   SetUUd=[SetUUd, [mean(sigUUd[10*k+0:10*k+9])]]
  for k=1,4 do   SetUUdx=[SetUUdx, [mean(sigUUdx[10*k+0:10*k+9])]]
  SetEEd=(SetUUd+SetUUdx)/d_d
  Setttreact=(d_d*Setppd*273.15)/(SetEEd*SetTTd*2.7*1013.25)
  if(strlen(ComputerID) eq 0 ) then Setttreact=Setttreact*0.003/Setttreact ; harvard
  SetEoverN=(1e17*22400*1013.25*SetTTd*SetEEd)/(6.022E23*Setppd*273.15)
  KINSPECS[0,*]=set19
  KINSPECS[1,*]=Set37
  KINSPECS[2,*]=Set19at59
  KINSPECS[3,*]=Set37at59
  KINSPECS[4,*]=Set37to19
  KINSPECS[5,*]=Set32to19
  KINSPECS[6,*]=Set78to79
  KINSPECS[7,*]=Set120to121
  KINSPECS[8,*]=Set106to107
  KINSPECS[9,*]=SetTTd
  KINSPECS[10,*]=Setppd
  KINSPECS[11,*]=SetUUd
  KINSPECS[12,*]=SetUUdx
  KINSPECS[13,*]=SetEEd
  KINSPECS[14,*]=Setttreact
  KINSPECS[15,*]=SetEoverN

  print,''
  print, set19
  print, Set37
  print, Set19at59
  print, Set37at59
  print,''
  print, Set37to19
  print,''
  print, Set32to19
  print, Set78to79
  print, Set120to121
  print, Set106to107
  print,''
  print, SetTTd
  print, Setppd
  print, SetUUd
  print, SetUUdx
  print, SetEEd
  print, Setttreact
  print, SetEoverN
  names=['sig19','sig37','sig19TR','sig37TR','R37/17TR',    'R32/19TR','R78/79TR','R120/121TR','R106/107TR','Tdrift',    'pdrift','Udrift','Udx','Efield','treact',    'EoverN','','','','', $
    'nS_33','nS_42','nS_45','nS_59','nS_87',    'nS_69','nS_41','nS_71','nS_73','nS_79',    'nS_107','nS_121','nS_137','nS_81','nS_133',    'nS_181','nS_223','nS_207','nS_297','nS_281',    'nS_371','nS_355',$
    'n59S_33','n59S_42','n59S_45','n59S_59','n59S_87',    'n59S_69','n59S_41','n59S_71','n59S_73','n59S_79',    'n59S_107','n59S_121','n59S_137','n59S_81','n59S_133',    'n59S_181','n59S_223','n59S_207','n59S_297','n59S_281',    'n59S_371','n59S_355',$
    'rawS_33','rawS_42','rawS_45','rawS_59','rawS_87',    'rawS_69','rawS_41','rawS_71','rawS_73','rawS_79',    'rawS_107','rawS_121','rawS_137','rawS_81','rawS_133',    'rawS_181','rawS_223','rawS_207','rawS_297','rawS_281',    'rawS_371','rawS_355']
  dataAA=[KINSPECS, ncpsPERppbTR, ncpsPERppbTR59,cpsPERppbRAW]

  dataAA=[transpose(names),transpose(string(dataAA))]
  makecsv, path2+'SENS '+PTRid+'_'+Datumzeit+'.csv',dataAA


  WINDOW, 4, xsize=1150,ysize=700
  !P.MULTI = [0,1,3]
  !Y.MARGIN = [3,1]
  !x.oMARGIN = [8,8]
  DEVICE, DECOMPOSED = 0
  loadct,5

  plot,reltime,TotSIG,xstyle=1,yrange=[0,1.1*max([I19+I37,TotSIG])],ystyle=1,color=0,ytitle="raw signal [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  oplot, reltime,smooth( I19+I37,5),thick =2, color=185

  xyouts,0.4,0.920,/normal,'Autodetection of            and            of injections', color=0
  xyouts,0.5,0.920,/normal,'START', color=110
  xyouts,0.58,0.920,/normal,'END', color=175
  xyouts,0.11,0.887,/normal,'Primary ions: I19+I37', color=178, charthick =2, charsize=1.5
  xyouts,0.11,0.860,/normal,'Product ions: sum of compounds in standard', color=0, charthick =2, charsize=1.5
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max([I19+I37,TotSIG]),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max([I19+I37,TotSIG]),1e14], color=175
  loadct,6
  faktor3=max(TotSIG,/nan)/max(data,/nan)
  oplot,reltime,data*faktor3,color=126
  ; oplot,reltime,data,color=126,thick =1.5
  xyouts,0.11,0.833,/normal,'Single compound: '+Datastr+' (x '+strtrim(string(faktor3,format='(F10.1)'),2)+')', color=105, charthick =2, charsize=1.5

  loadct,5
  tr19=tr(19,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  tr37=tr(37,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  tr32=tr(32,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  plot,reltime, smooth(primTR+TotSIGTR,5),yrange=[0,max(primTR+TotSIGTR)],xstyle=1,ystyle=1,color=0,ytitle="(transmission) corrected signal [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  oplot,reltime, smooth(primTR+TotSIGTR,5),thick =2,color=126
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max(primTR+TotSIGTR),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max(primTR+TotSIGTR),1e14], color=175
  oplot, reltime, smooth(TotSIGTR,5),thick =2, color=0
  oplot, reltime,smooth( I19,5)/tr19,thick =2, color=35
  oplot, reltime, smooth(I37,5)/tr37,thick =2, color=50
  oplot, reltime, smooth(I32,5)/tr32*10,thick =2, color=109

  xyouts,0.11,0.60,/normal,'Total signal:Primary+product ions', color=126, charthick =2, charsize=1.5
  xyouts,0.11,0.57,/normal,'Product ions', color=0, charthick =2, charsize=1.5
  xyouts,0.11,0.54,/normal,'I19', color=35, charthick =2, charsize=1.5
  xyouts,0.11,0.51,/normal,'I37', color=50, charthick =2, charsize=1.5
  xyouts,0.11,0.48,/normal,'I32 (x10)', color=109, charthick =2, charsize=1.5

  mmmax=max([smooth( (I37*tr19)/(I19*tr37),5),smooth( (I32*tr19)/(I19*tr32),5)])
  plot,reltime, smooth( (I37*tr19)/(I19*tr37),5),yrange=[0,mmmax],xstyle=1,ystyle=1,color=0,ytitle="ion ratios",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max(smooth( (I37*tr19)/(I19*tr37),5)),1e14], color=110
  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max(smooth( (I37*tr19)/(I19*tr37),5)),1e14], color=175

  oplot,reltime, smooth( (I32*tr19)/(I19*tr32),5),color=109, thick =1.5;, charthick=2
  xyouts,0.11,0.25,/normal,'I37 / I19 (transmission corrected)', color=0, charthick =2, charsize=1.5
  xyouts,0.11,0.22,/normal,'I32 / I19 (transmission corrected)', color=109, charthick =2, charsize=1.5

  xyouts,0.97,0.9,/normal,orientation=-90,PTRid+'  '+Datumzeit, color=0, charthick =3, charsize=2

  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then  write_jpeg, path2+'SEQ '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1







  WINDOW, 5, xsize=1150,ysize=500
  !P.MULTI = [0,2,1]
  DEVICE, DECOMPOSED = 0


  ;plot transe
  loadct,5

  plot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),color=0,ytitle="transmission",xtitle="m/z",background=-1,charsize=2, thick =2, charthick=2

  loadct,13

  oplot,indgen(399)+1,(indgen(399)+1)^bestEX/(59)^bestEX
  oplot,indgen(399)+1,tr(indgen(399)+1, bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/(indgen(399)+1)^bestEX,color=60



  mmm=[33,42,45,59,69,71,73,79,107,121,137,133,181,223,297,371]
  tansen=tr(mmm,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
  sense=sensitivities[[0,1,2,3,5,7,8,9,10,11,12,14,15,17,19,21]]
  senseCALC=[sensitivitiesCALC[0],sensitivitiesCALC[1],sensitivitiesCALC[2],sensitivitiesCALC[3],total(sensitivitiesCALC[4:6]),$
    sensitivitiesCALC[7],sensitivitiesCALC[8],sensitivitiesCALC[9],sensitivitiesCALC[10],sensitivitiesCALC[11],$
    total(sensitivitiesCALC[12:13]),sensitivitiesCALC[14],sensitivitiesCALC[15],total(sensitivitiesCALC[16:17]),$
    total(sensitivitiesCALC[18:19]),total(sensitivitiesCALC[20:21])]



  For i=0,15  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=60
  i=1 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
  i=3 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
  i=9 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
  i=11 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
  i=14 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
  i=15 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
  loadct,5

  xyouts,0.52,0.92,/normal,PTRid+'  '+Datumzeit, color=0, charthick =3, charsize=2
  xyouts,0.55,0.81,/normal,'Transmission parameters:  ', color=0, charthick =2, charsize=2
  xyouts,0.55,0.73,/norm,'ex: '+strtrim(string(bestEX,Format='(F8.2)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.65,/norm,'mLOW: '+strtrim(string(MASSlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.60,/norm,'wLOW: '+strtrim(string(WIDTHlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.52,/norm,'mHIGH: '+strtrim(string(MASShigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
  xyouts,0.55,0.47,/norm,'wHIGH: '+strtrim(string(WIDTHhigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2

  ID=8

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;    Dynamic mixing
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  if (max(d(injectLONG)) gt 000.5) then begin
    CompCUBlong=dblarr(max(d(injectLONG)),max(d(compounds)),200) ; 12 injections, 23 ions, 15 cycles
    for i=0,max(d(timsLONG))-1 do CompCUBlong[i,*,*]=CompARR[*,indgen(200)-5+timsLONG[i]]


    CompCUBTR=dblarr(max(d(injectLONG)),10,200) ; 12 injections, 23 ions, 15 cycles
    for i=0,max(d(timsLONG))-1 do CompCUBTR[i,0,*]=TotSigTR[indgen(200)-5+timsLONG[i]]
    for i=0,max(d(timsLONG))-1 do CompCUBTR[i,1,*]=PrimTR[indgen(200)-5+timsLONG[i]]

    ;quality
    PULS=fltarr(max(d(timsLONG)))
    ZERO=fltarr(max(d(timsLONG)))
    PULStr=fltarr(max(d(timsLONG)))
    ZEROtr=fltarr(max(d(timsLONG)))

    for i=0,max(d(timsLONG))-1 do begin
      sigPULS=0
      sigPULStr=0
      strtPULS=-1
      endPULS=-1

      sigZERO=0
      sigZEROtr=0
      strtZERO=-1
      endZERO=-1

      for j=0,100 do begin
        if( CompCUBlong[i,22,j] gt max(CompCUBlong[i,22,0:100])*0.9) then begin
          if(strtPULS eq -1) then strtPULS=j
          if(endPULS eq -1) then begin
            sigPULS=sigPULS+CompCUBlong[i,22,j]+CompCUBlong[i,26,j]
            sigPULStr=sigPULStr+CompCUBTR[i,0,j]+CompCUBTR[i,1,j]
          endif
        endif else if(strtPULS ne -1) then if(endPULS eq -1) then endPULS=j

        if (endPULS ne -1 and CompCUBlong[i,22,j] lt max(CompCUBlong[i,22,0:100])*0.05) then begin
          if(strtZERO eq -1) then strtZERO=j
          if(strtZERO gt 1 and endZERO eq -1) then if(j-strtZERO ge (endPULS-strtPULS)) then begin
            endZERO=j
          endif
          if(endZERO eq -1) then begin
            sigZERO=sigZERO+CompCUBlong[i,22,j]+CompCUBlong[i,26,j]
            sigZEROtr=sigZEROtr+CompCUBTR[i,0,j]+CompCUBTR[i,1,j]
          endif
        endif else if(strtZERO ne -1) then if(endZERO eq -1) then endZERO=j

      endfor

      PULS[i]=sigPULS/(endPULS-strtPULS)
      PULStr[i]=sigPULStr/(endPULS-strtPULS)
      ZERO[i]=sigZERO/(endZERO-strtZERO)
      ZEROtr[i]=sigZEROtr/(endZERO-strtZERO)
    endfor


    loadct,5

    smoo=0
    ; plot,reltime[0:199],smooth(CompCUBlong[0,22,*]+CompCUBlong[0,26,*],smoo),xstyle=1,xrange=[0,1],yrange=[0,max([CompCUBlong[*,22,*]+CompCUBlong[*,26,*],CompCUBTR[*,0,*]+CompCUBTR[*,1,*]])],ystyle=1,color=0,ytitle="intensity [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =2, charthick=2

    loadct,13
    cols=[0,25,45,75,110,140,160,190,220,240,254]
    for i=0,max(d(injectLONG))-1 do begin



      sigPULS=0
      sigPULStr=0
      strtPULS=-1
      endPULS=-1

      sigZERO=0
      sigZEROtr=0
      strtZERO=-1
      endZERO=-1

      for j=0,100 do begin
        if( CompCUBlong[i,22,j] gt max(CompCUBlong[i,22,0:100])*0.9) then begin
          if(strtPULS eq -1) then strtPULS=j
          if(endPULS eq -1) then begin
            sigPULS=sigPULS+CompCUBlong[i,22,j]+CompCUBlong[i,26,j]
            sigPULStr=sigPULStr+CompCUBTR[i,0,j]+CompCUBTR[i,1,j]
          endif
        endif else if(strtPULS ne -1) then if(endPULS eq -1) then endPULS=j

        if (endPULS ne -1 and CompCUBlong[i,22,j] lt max(CompCUBlong[i,22,0:100])*0.05) then begin
          if(strtZERO eq -1) then strtZERO=j
          if(strtZERO gt 1 and endZERO eq -1) then if(j-strtZERO ge (endPULS-strtPULS)) then begin
            endZERO=j
          endif
          if(endZERO eq -1) then begin
            sigZERO=sigZERO+CompCUBlong[i,22,j]+CompCUBlong[i,26,j]
            sigZEROtr=sigZEROtr+CompCUBTR[i,0,j]+CompCUBTR[i,1,j]
          endif
        endif else if(strtZERO ne -1) then if(endZERO eq -1) then endZERO=j

      endfor

      sigPULS=sigPULS/(endPULS-strtPULS)
      sigPULStr=sigPULStr/(endPULS-strtPULS)
      sigZERO=sigZERO/(endZERO-strtZERO)
      sigZEROtr=sigZEROtr/(endZERO-strtZERO)





      ; oplot,reltime[0:199],smooth(CompCUBlong[i,26,*],smoo),color=cols[i+1] , thick =2

      ;oplot,reltime[0:199],smooth(CompCUBlong[i,22,*],smoo),color=cols[i+1] , thick =3
      ;oplot,reltime[0:199],smooth(CompCUBlong[i,25,*],smoo),color=cols[i+1] , thick =1
      ;oplot,reltime[0:199],smooth(CompCUBlong[i,22,*]+CompCUBlong[i,26,*],smoo),color=-1, thick =4
      ;oplot, [reltime[strtPULS],reltime[endPULS]],[1,1]*sigPULS,color=220, thick =4
      ;oplot, [reltime[strtZERO],reltime[endZERO]],[1,1]*sigZERO,color=220, thick =4
      ; oplot,reltime[0:199],smooth(CompCUBTR[i,0,*]+CompCUBTR[i,1,*],smoo),color=160, thick =4
      ;oplot, [reltime[strtPULS],reltime[endPULS]],[1,1]*sigPULStr,color=130, thick =4
      ;oplot, [reltime[strtZERO],reltime[endZERO]],[1,1]*sigZEROtr,color=130, thick =4



    endfor
    ;xyouts,0.75,0.50,/normal,'prim +prod RAW', color=-1, charthick =2, charsize=1.5
    ; xyouts,0.75,0.47,/normal,'prim +prod TR', color=160, charthick =2, charsize=1.5


    ;  plot,smooth(CompCUBlong[0,ID,*],smoo),smooth(CompCUBlong[0,ID+31,*],smoo),xstyle=1,psym=4,xrange=[1,max(CompCUBlong[*,ID,*])],yrange=[1,max(CompCUBlong[*,ID+31,*])],ystyle=1,color=0,ytitle="isotope signal [cps]",xtitle="parent signal [cps]",background=-1,charsize=2, thick =2, charthick=2
    ; oplot, [1,10000000],[1,10000000],color=0
    loadct,13
    cols=[0,25,45,75,110,140,160,190,220,240,254]
    for i=0,max(d(injectLONG))-1 do begin

      ; oplot,smooth(CompCUBlong[i,ID,*],smoo),smooth(CompCUBlong[i,ID+31,*],smoo),color=cols[i+1] ,psym=4, thick =2
    endfor
    ;oplot, [1,10000000],[1,16000000],color=0, thick=2
    ;xyouts,0.65,0.90,/normal,compounds[ID], color=1, charthick =2, charsize=1.5

  endif



  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then   write_jpeg, path2+'TRANS '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  WDELETE, 5



  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;   Fast injections
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  WINDOW, 6, xsize=1350,ysize=700
  !P.MULTI = [0,8,3]
  ;  !x.oMARGIN=[]
  !Y.MARGIN = [3,1]
  !x.MARGIN = [3,1]
  DEVICE, DECOMPOSED = 0
  loadct,5
  for j=0,21 do begin
    yrange=range(compCUB[*,j,*])
    cols=[intarr(10)+110,intarr(10)+50,intarr(10)+70,intarr(10)+175,intarr(10)+160,$
      0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    if(j gt 15.5) then titti="time in seconds" else titti=''
    if( j eq 0 or j eq 8 or j eq 16) then ytitti='cps' else   ytitti=''
    plot,timestep*(indgen(15*step)-5*step),compCUB[0,j,*],xstyle=1,ystyle=1,yrange=yrange,color=0,xtitle=titti,ytitle=ytitti,background=-1,charsize=2, thick =1;, charthick=2
    cnts=0
    for i=0,max(d(timsSHORT))-1 do begin
      oplot,timestep*(indgen(15*step)-5*step),compCUB[i,j,*], color=cols[i], thick=1
      cnts=[cnts, counts[i,j]-countsBG[i,j]]
    endfor
    cnts=cnts[1:*]
    set=[mean(cnts[0:9]),100*stddev(cnts[0:9])/mean(cnts[0:9])]
    for k=1,4 do set=[set, [mean(cnts[10*k+0:10*k+9]),100*stddev(cnts[10*k+0:10*k+9])/mean(cnts[10*k+0:10*k+9])]]
    ;print,[ mean(set[[0,2,4,6,8]]),mean(set[[1,3,5,7,9]]),  stddev(set[[1,3,5,7,9]])]
    xyouts,-2,max(yrange)*0.9,compounds[j],color=0,charsize=1.5,charthick=1.5
    xyouts,-2,max(yrange)*0.8,string(VMRppm[j]*1000*dil,format='(F5.1)'),color=0,charsize=1.5,charthick=1.5
    xyouts,2,max(yrange)*0.8,string(set[1],format='(F4.1)')+'%',color=110,charthick=1.2
    xyouts,2,max(yrange)*0.7,string(set[3],format='(F4.1)')+'%',color=50,charthick=1.2
    xyouts,2,max(yrange)*0.6,string(set[5],format='(F4.1)')+'%',color=70,charthick=1.2
    xyouts,2,max(yrange)*0.5,string(set[7],format='(F4.1)')+'%',color=175,charthick=1.2
    xyouts,2,max(yrange)*0.4,string(set[9],format='(F4.1)')+'%',color=160,charthick=1.2
  endfor
  xyouts,0.85,0.21,/normal,PTRid,color=1,charsize=1.5,charthick=2
  datum=strmid(datumzeit,0,strpos(datumzeit,'-'))
  xyouts,0.85,0.18,/normal,Datum,color=1,charsize=1.5,charthick=2
  Zeit=strmid(datumzeit,1+strpos(datumzeit,'-'),1000)
  xyouts,0.85,0.15,/normal,Zeit,color=1,charsize=1.5,charthick=2
  xyouts,0.76,0.25,/normal,'N2 dry', color=110,charsize=1.5,charthick=1.5
  xyouts,0.76,0.225,/normal,'air dry', color=50,charsize=1.5,charthick=1.5
  xyouts,0.76,0.20,/normal,'air wet', color=70,charsize=1.5,charthick=1.5
  xyouts,0.76,0.175,/normal,'N2 wet', color=175,charsize=1.5,charthick=1.5
  xyouts,0.76,0.15,/normal,'N2 dry', color=160,charsize=1.5,charthick=1.5


  ErrCode=0
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
    ErrCode=1
    if(ErrCode eq 1) then begin
      PRINT, 'Error index: ', Error_status
      PRINT, 'Error message: ', !ERROR_STATE.MSG
      PRINT, 'WRITE_JPG not possible (disabled) :-((('
      CATCH, /CANCEL
    endif
  ENDIF
  if (ErrCode eq 0) then  write_jpeg, path2+'INJ '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
  WDELETE, 6
  ;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;; Xr
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  resultis=[0,0,0]
  print, '           XR   |     stdev XR'

  XRdata=fltarr(22,2)


  oldold=1 ; old version based on Truman's work
  if (oldold eq 1) then begin
    for j=0,22 do begin
      XRall=0
      for p=0,9 do begin
        XR=0
        for k=0,50 do begin
          counter=0
          classs=0
          if (k eq 0) then XR=0.0
          if (k eq 1) then XR=0.01
          if (k gt 1.5) then begin
            if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then XR=XRpre+(XRpre-XRprepre)*slopeprepre/(slopeprepre-slopepre)
            if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then begin
              XR=XRprepre+(XRpre-XRprepre)/2
              class=1
            endif
            if(classs eq 1) then counter=counter+1
            if(counter eq 1 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then increment=-0.1 else increment=0.1
            if(counter gt 1.5 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then increment=increment *(-0.1)
            if(counter gt 0.5) then  XR=XRpre+increment
          endif
          NCs=0
          CRs=0
          for i=0,4 do begin

            m19=countsBGTR[p+10*i,28]
            m37=countsBGTR[p+10*i,29]
            cntss=countsTR[p+10*i,j]
            if(j eq 4) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 5) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 6) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 12) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
            if(j eq 13) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
            if(j eq 16) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
            if(j eq 17) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
            if(j eq 18) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
            if(j eq 19) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
            if(j eq 20) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
            if(j eq 21) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]

            NCs=[NCs,cntss/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
            CRs=[CRs,100*m37/(m19+m37)]
          endfor
          CRs=CRs[1:*]
          NCs=NCs[1:*]
          CRs=CRs[[0,3,4]];only N2
          NCs=NCs[[0,3,4]];only N2

          fitp=linfit(CRs,NCs)
          if (k eq 0) then begin
            slopePre=fitp[1]
            XRpre=XR
          endif
          XRprepre=XRpre
          XRpre=XR
          slopePrepre=slopePre
          slopePre=fitp[1]
        endfor
        XRall=[XRall,XR]

      endfor
      XRall=XRall[1:*]
      print,[compounds[j], string([mean(XRall),stddev(XRall)],format='(F12.2)')]
      if(j lt 21.5) then XRdata[j,*]=[mean(XRall),stddev(XRall)]
    endfor
  endif

  if (oldold eq 0) then begin

    for j=0,22 do begin
      pN2_1=0
      pN2_2=0
      pAIR=0
      pN2_AIR=0
      pAIR_N2_1=0
      pAIR_N2_2=0
      XRall=0

      for xxx=0,100 do begin
        XR=-1.5+float(xxx)/10.0
        NCsall=[0,0,0,0,0]
        for p=0,9 do begin
          NCs=0
          for i=0,4 do begin
            m19=countsBGTR[p+10*i,28]
            m37=countsBGTR[p+10*i,29]
            cntss=countsTR[p+10*i,j]
            if(j eq 4 or j eq 5 or j eq 6) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
            if(j eq 12 or j eq 13) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
            if(j eq 16 or j eq 17) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
            if(j eq 18 or j eq 19) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
            if(j eq 20 or j eq 21) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
            NCs=[NCs,cntss/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
          endfor
          NCs=NCs[1:*]
          NCsall=[[NCsall],[NCs]]
        endfor
        NCsall= NCsall[*,1:*]

        pvalue=TM_test(NCsall[0,*],NCsall[3,*])
        pN2_1=[pN2_1, pvalue[1]]
        pvalue=TM_test(NCsall[4,*],NCsall[3,*])
        pN2_2=[pN2_2, pvalue[1]]
        pvalue=TM_test(NCsall[1,*],NCsall[3,*])
        pN2_AIR=[pN2_AIR, pvalue[1]]


        pvalue=TM_test(NCsall[1,*],NCsall[2,*])
        pAIR=[pAIR, pvalue[1]]
        pvalue=TM_test(NCsall[0,*],NCsall[2,*])
        pAIR_N2_1=[pAIR_N2_1, pvalue[1]]
        pvalue=TM_test(NCsall[4,*],NCsall[2,*])
        pAIR_N2_2=[pAIR_N2_2, pvalue[1]]
        XRall=[XRall,XR]
      endfor
      pN2_1=pN2_1[1:*]
      pN2_2=pN2_2[1:*]
      pN2_AIR=pN2_AIR[1:*]
      pAIR=pAIR[1:*]
      pAIR_N2_1=pAIR_N2_1[1:*]
      pAIR_N2_2=pAIR_N2_2[1:*]


      XRall=XRall[1:*]
      !P.MULTI = [0,1,1]
      WINDOW, 4, xsize=750,ysize=500

      loadct,5

      plot, XRall,pN2_1,color=0,background=-1,  yrange=[0,1]
      oplot,XRall, pN2_1, color=40, thick=1
      oplot,XRall, pN2_AIR, color=20, thick=1
      oplot,XRall, pAIR_N2_1, color=109, thick=1
      oplot,XRall, pAIR_N2_2, color=150, thick=1
      oplot,XRall, pN2_2, color=50, thick=3
      oplot,XRall, pAIR, color=111, thick=1

      xyouts, 0,0.9, compounds[j],color=0, charthick=2
      resultis=[[resultis],[XRall[where(pN2_2 eq max(pN2_2))],XRall[where(pN2_1 eq max(pN2_1))], XRall[where(pAIR eq max(pAIR))]]]

      print, 'haha'
    endfor
    print, resultis

    print, 'haha'
  endif








  mames=(['rangeClusterRatio','tr_mLOW_bestex','tr_wLOW','tr_mHIGH','tr_wHIGH',compounds[0:21]])
  dataAA=([transpose([min(Set37to19[[0,3,4]]),max(Set37to19[[0,3,4]])]),transpose([masslow,bestEX]),transpose([widthlow,0]),transpose([masshigh,0]),transpose([widthhigh,0]),[XRdata]])

  dataAA=[transpose(mames),transpose(string(dataAA))]
  makecsv, path2+'XRdat '+PTRid+'_'+Datumzeit+'.csv',dataAA



  print, 'end'
  return, create_struct('Fptr', [1,1,1], 'S_nam', ['time', compounds[0:21]], 'S_val',S_set[0:22], 'Serr_val',Serr_set[0:22])
end



function ActrisProtocol_03_2018, path,name,ProtData,masses, ProtEngData , engnames, computerID
   
   
  helpi=1
  CATCH, Error_status
  IF Error_status NE 0 THEN BEGIN
      helpi=0   
   CATCH, /CANCEL

  ENDIF
 
   
 if (helpi eq 1) then begin  
  file_id=H5f_open(name)
  n_attr=H5A_GET_NUM_ATTRS(file_id)
       ComputerID='nix'
       for j=0,n_attr-1 do if(strpos(H5A_GET_NAME( H5A_OPEN_IDX(file_id,j)),'Computer ID') gt -0.5) then  ComputerID=H5A_read( H5A_OPEN_IDX(file_id,j))
 H5f_close, file_id 
 endif else ComputerID='QMS_LSCE'
 
 
    
    T_FC=31
    
     Fcal=200
     Fplus=0
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  Fcal=2000 ; VOCUS  PTR-TOF
  if(strlen(ComputerID) eq 0 ) then begin 
   Fcal=2000 
  Fplus=1500 ;Harvard 
  endif
   Flow=float(Fcal)*273/298+Fplus+9.6
  
    Dil=(9.6*273/(273+T_FC))/Flow
    T_loop=273+100



MASSlow=40
WIDTHlow=20
MASShigh=30000
WIDTHhigh=150
 

  ; if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 and abs(min(ProtEngData[*,0])-3186.4) lt 0.2) then  masses=[masses[1:*],9999] ; Juelich PTR-TOF
    
    Path2=path+'STD_PROT/'
    mmist=file_info(path2)
    if (mmist.directory eq 0) then begin 
            FILE_MKDIR, path2
            FILE_MKDIR, path2+'transmission'
            FILE_MKDIR, path2+'PTR_Flow'
            FILE_MKDIR, path2+'Humidity Factor'
            FILE_MKDIR, path2+'Sensitivity'
            FILE_MKDIR, path2+'H2Oleak'
            FILE_MKDIR, path2+'EoverN ret'
            FILE_MKDIR, path2+'ClusterRatio ret'
            FILE_MKDIR, path2+'O2plus_Fraction'
    endif
    starttim=min(ProtEngData[*,0])
    reltime=(ProtEngData[*,0]-min(ProtEngData[*,0]))*24*60
  hilfi=strmid(strmid(path2,strpos(path2,'\')+1,1000),1+strpos(strmid(path2,strpos(path2,'\')+1,1000),'\'))
  PTRid=strmid(hilfi,0,strpos(hilfi,'\') )
  Datumzeit=t09str(ProtEngData[0])  

; convert cps to counts
timestep=max(reltime)*60/max(d(reltime))
;ProtData=ProtData*timestep


    I19=ProtData[where(abs(masses-19.017) eq min(abs(masses-19.017)) ),*]
    I21=ProtData[where(abs(masses-21.022) eq min(abs(masses-21.022)) ),*]
    I37=ProtData[where(abs(masses-37.028) eq min(abs(masses-37.028)) ),*]
    I38=ProtData[where(abs(masses-38.033) eq min(abs(masses-38.033)) ),*]
    I39=ProtData[where(abs(masses-39.033) eq min(abs(masses-39.033)) ),*]
    I34=ProtData[where(abs(masses-33.994) eq min(abs(masses-33.994)) ),*]
    I32=ProtData[where(abs(masses-31.989) eq min(abs(masses-31.989)) ),*]
    I32[where(I32 gt 6000)]=I34[where(I32 gt 6000)]*242    
    
    if( max(I19) gt 5000) then I19=I21*487
    I37[where(I37 lt I38 *645)]=I38[where(I37 lt I38 *645)]*645
     Prim=reform(I19+I37)
   
    
    F37=I37/prim
    F32=I34*242/prim
    
    
    
    
   Pdrift=ProtEngData[*,where(strpos(engnames,'p-Drift') gt -0.5)] & Pdrift=Pdrift[*,0]
   
   H2Oscc=ProtEngData[*,where(strpos(engnames,'H2O scc')  gt -0.5 or strpos(engnames,'H2O[scc')  gt -0.5)] & H2Oscc=H2Oscc[*,0]
   Udrift=ProtEngData[*,where(strpos(engnames,'Udrift') gt -0.5)] & Udrift=Udrift[*,0]
   Udx=ProtEngData[*,where(strpos(engnames,'Udx') gt -0.5)] & Udx=Udx[*,0]
   FCinlet=ProtEngData[*,where(strpos(engnames,'FCinlet') gt -0.5)] & FCinlet=FCinlet[*,0]
   Tdrift=ProtEngData[*,where(strpos(engnames,'T-Drift') gt -0.5 )] & Tdrift=Tdrift[*,0]
   if(strpos(ComputerID,'64db5058-a18e-4b09-ab32-f7cecac8afa4') gt -0.5 ) then  Tdrift=ProtEngData[*,-1]+60   ; Juelich PTR-TOF
   ;Valve1=ProtEngData[*,where(strpos(engnames,'Valve1') gt -0.5)] & Valve1=Valve1[*,0]
   ;Valve2=ProtEngData[*,where(strpos(engnames,'Valve2') gt -0.5)] & Valve2=Valve2[*,0]
   ;FC1=ProtEngData[*,where(strpos(engnames,'FC1') gt -0.5)] & FC1=FC1[*,0]
   PC=ProtEngData[*,where(strpos(engnames,'PC mba') gt -0.5 or strpos(engnames,'PC[mba')  gt -0.5)] & PC=PC[*,0]
 
 if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  begin  ; VOCUS  PTR-TOF
  Pdrift=ProtEngData[*,where(strpos(engnames,'SSQ pressure monitor [mbar]') gt -0.5)] & Pdrift=Pdrift[*,0]
  Tdrift=ProtEngData[*,where(strpos(engnames,'TOF temp monitor') gt -0.5 )] 
 Udrift=ProtEngData[*,where(strpos(engnames,'Spare 1 monitor [V]') gt -0.5)] & Udrift=Udrift[*,0]-25
  
 
 
 endif   ; VOCUS  PTR-TOF
  if(strlen(ComputerID) eq 0 ) then begin ;PTR3
  
    Tdrift=ProtEngData[*,where(strpos(engnames,'TPS body temp monitor') gt -0.5)] & Pdrift=Pdrift[*,0]
    Pdrift=ProtEngData[*,where(strpos(engnames,'REAC   sensor: APR/CMR') gt -0.5)] & Pdrift=Pdrift[*,0]
  
  
  endif
 




    D5_355=ProtData[where(abs(masses-355.07) eq min(abs(masses-355.07)) ),*]*1.67
    D5_371=ProtData[where(abs(masses-371.102) eq min(abs(masses-371.102)) ),*]*1.69
   if( min(abs(masses-371.102)) gt 1) then  D5_371= D5_371/1000
   if( min(abs(masses-355.07)) gt 1) then  D5_355= D5_355/1000
    D4_297=ProtData[where(abs(masses-297.083) eq min(abs(masses-297.083)) ),*]*1.52
    D4_281=ProtData[where(abs(masses-281.052) eq min(abs(masses-281.052)) ),*]*1.51
    D3_223=ProtData[where(abs(masses-223.064) eq min(abs(masses-223.064)) ),*]*1.37
    D3_207=ProtData[where(abs(masses-207.033) eq min(abs(masses-207.033)) ),*]*1.36
    benzCl3_181=ProtData[where(abs(masses-180.938) eq min(abs(masses-180.938)) ),*]*2.48
    benzF3_133=ProtData[where(abs(masses-133.026) eq min(abs(masses-133.026)) ),*]*1.07
    Pin_137=ProtData[where(abs(masses-137.132) eq min(abs(masses-137.132)) ),*]*1.12
    Pin_81=ProtData[where(abs(masses-81.07) eq min(abs(masses-81.07)) ),*]*1.07
    TMB_121=ProtData[where(abs(masses-121.101) eq min(abs(masses-121.101)) ),*]*1.10
    XYL_107=ProtData[where(abs(masses-107.086) eq min(abs(masses-107.086)) ),*]*1.09
    BEN_79=ProtData[where(abs(masses-79.054) eq min(abs(masses-79.054)) ),*]*1.07
    MEK_73=ProtData[where(abs(masses-73.065) eq min(abs(masses-73.065)) ),*]*1.05
    MVK_71=ProtData[where(abs(masses-71.049) eq min(abs(masses-71.049)) ),*]*1.05
    MBO_87=ProtData[where(abs(masses-87.080) eq min(abs(masses-87.080)) ),*]*1.06
    MBO_69=ProtData[where(abs(masses-69.070) eq min(abs(masses-69.070)) ),*]*1.06
    MBO_41=ProtData[where(abs(masses-41.039) eq min(abs(masses-41.039)) ),*]*1.03
    ACE_59=ProtData[where(abs(masses-59.049) eq min(abs(masses-59.049)) ),*]*1.03
    ACETAL_45=ProtData[where(abs(masses-45.033) eq min(abs(masses-45.033)) ),*]*1.02
    CH3CN_42=ProtData[where(abs(masses-42.034) eq min(abs(masses-42.034)) ),*]*1.02
    METH_33=ProtData[where(abs(masses-33.033) eq min(abs(masses-33.033)) ),*]*1.01
    BEN_78=ProtData[where(abs(masses-78.047) eq min(abs(masses-78.047)) ),*]*1.07
    if( min(abs(masses-78.047)) gt 1) then  BEN_78= BEN_78/1000
    TMB_120=ProtData[where(abs(masses-120.094) eq min(abs(masses-120.094)) ),*]*1.10
    if( min(abs(masses-120.094)) gt 1) then  TMB_120= TMB_120/1000
    XYL_106=ProtData[where(abs(masses-106.079) eq min(abs(masses-106.079)) ),*]*1.09
    if( min(abs(masses-106.079)) gt 1) then  XYL_106= XYL_106/1000
 
    ;correlation to correct delay 
    
    Bestcor= correlate(ACE_59,D5_371)
    timeshift=0
    for i=1,50 do begin
            shiftcor= correlate(ACE_59,[D5_371[i:*],intarr(i)])
            if( shiftcor gt bestcor) then timeshift=i
            if( shiftcor gt bestcor) then bestcor=shiftcor
    endfor
    if(timeshift gt 0.5) then begin
            Print, 'D5 data shifted by '+string(timeshift)+' points'
            D5_355=transpose([D5_355[timeshift:*], fltarr(timeshift)])
            D5_371=transpose([D5_371[timeshift:*], fltarr(timeshift)])
    endif
    
   TotSIG=    METH_33 +    CH3CN_42 +    Acetal_45 +     Ace_59 +    MBO_87 +     MBO_69 +      MBO_41 +    MVK_71 +    MEK_73 +    Ben_79 +$
              Xyl_107 +    TMB_121 +     Pin_137 +       Pin_81 +   benzF3_133 + benzCl3_181 +  D3_223 +    D3_207 +    D4_297 +    D4_281 +$
              D5_371 +     D5_355
   TotSIGbig=D5_355+D4_281+D3_223+D3_207
   
 
   D5_358iso=ProtData[where(abs(masses-358.073) eq min(abs(masses-358.073)) ),*]/0.0358
    D5_374iso=ProtData[where(abs(masses-374.105) eq min(abs(masses-374.105)) ),*]/0.0370
    D4_299iso=ProtData[where(abs(masses-299.086) eq min(abs(masses-299.086)) ),*]/0.1178
    D4_283iso=ProtData[where(abs(masses-283.055) eq min(abs(masses-283.055)) ),*]/0.1170
    D3_225iso=ProtData[where(abs(masses-225.067) eq min(abs(masses-225.067)) ),*]/0.0923
    D3_209iso=ProtData[where(abs(masses-209.036) eq min(abs(masses-209.036)) ),*]/0.0916
    benzCl3_182iso=ProtData[where(abs(masses-181.941) eq min(abs(masses-181.941)) ),*]/0.0267
    benzF3_134iso=ProtData[where(abs(masses-134.029) eq min(abs(masses-134.029)) ),*]/0.0612
    Pin_138iso=ProtData[where(abs(masses-138.135) eq min(abs(masses-138.135)) ),*]/0.0987
    Pin_82iso=ProtData[where(abs(masses-82.073) eq min(abs(masses-82.073)) ),*]/0.0617
    TMB_122iso=ProtData[where(abs(masses-122.104) eq min(abs(masses-122.104)) ),*]/0.0896
    XYL_108iso=ProtData[where(abs(masses-108.089) eq min(abs(masses-108.089)) ),*]/0.0804
    BEN_80iso=ProtData[where(abs(masses-80.057) eq min(abs(masses-80.057)) ),*]/0.0615
    MEK_74iso=ProtData[where(abs(masses-74.068) eq min(abs(masses-74.068)) ),*]/0.0426
    MVK_72iso=ProtData[where(abs(masses-72.052) eq min(abs(masses-72.052)) ),*]/0.0424
    MBO_88iso=ProtData[where(abs(masses-88.083) eq min(abs(masses-88.083)) ),*]/0.0526
    MBO_70iso=ProtData[where(abs(masses-70.073) eq min(abs(masses-70.073)) ),*]/0.0522
    MBO_42iso=ProtData[where(abs(masses-42.042) eq min(abs(masses-42.042)) ),*]/0.0320
    ACE_60iso=ProtData[where(abs(masses-60.052) eq min(abs(masses-60.052)) ),*]/0.0325
    ACETAL_46iso=ProtData[where(abs(masses-46.036) eq min(abs(masses-46.036)) ),*]/0.0220
    CH3CN_43iso=ProtData[where(abs(masses-43.037) eq min(abs(masses-43.037)) ),*]/0.0251
    METH_34iso=ProtData[where(abs(masses-34.036) eq min(abs(masses-34.036)) ),*]/0.0116
    
    MBO_42iso=MBO_42iso*0.000001
    METH_34iso=METH_34iso*0.00001
   TotSIGiso=    METH_34iso +    CH3CN_43iso +    Acetal_46iso +     Ace_60iso +    MBO_88iso +     MBO_70iso +      MBO_42iso +    MVK_72iso +    MEK_74iso +    Ben_80iso +$
              Xyl_108iso +    TMB_122iso +     Pin_138iso +       Pin_82iso +   benzF3_134iso + benzCl3_182iso +  D3_225iso +    D3_209iso +    D4_299iso +    D4_283iso +$
              D5_374iso +     D5_358iso
  
  
  

  mTOz=[33,42,45,59,87 ,    69 , 41,71 ,73 , 79 ,    107, 121, 137,81 ,133 ,    181, 223,207, 297,281 ,$
        371 ,355,-1,-1,-1,    -1,-1 ,-1,19,37,     39,34,43,46,60, 88,70, 42,72,74 ,$
             80, 108,122,138,82,134 ,182, 225,209, 299, 283, 374, 358,-1,-1,-1,78,32,120,106 ]
  compounds=['METH_33',   'CH3CN_42',   'Acetal_45',    'Ace_59',   'MBO_87',    'ISO/MBO_69',     'ISO/MBO_41',   'MVK_71',   'MEK_73',   'Ben_79',$
             'Xyl_107',   'TMB_121',    'MT_137',      'MT_81',   'benzF3_133','benzCl3_181','D3_223',   'D3_207',   'D4_297',   'D4_281',$
             'D5_371',    'D5_355',     'TotSIG',       'FCinlet',  'reltime',   'TotSIGiso',  'prim',     'Tdrift',   'I19',      'I37',$
             'I39', 'METH_34iso','CH3CN_43iso','Acetal_46iso','Ace_60iso','MBO_88iso',' MBO_70iso',' MBO_42iso','MVK_72iso','MEK_74iso','Ben_80iso',$
              'Xyl_108iso','TMB_122iso','Pin_138iso','Pin_82iso','benzF3_134iso','benzCl3_182iso','D3_225iso','D3_209iso','D4_299iso',' D4_283iso',$
              'D5_374iso','D5_358iso','Udx','pdrift','Udrift','BEN_78','I32','TMB_120','XYL_106']
   isotopecor=[1.01,1.02,1.02,1.03,1.06,1.06,1.03,1.05,1.05,1.07,1.09,1.1,1.12,1.07,1.07,2.48,1.37,1.36,1.52,1.51,1.69,1.67,1,1,1,1,1,1]
  
  RRK=[2.2,2.5+0.9, 3.03,  3.25, 2.68,  2.68, 2.68, 3.53, 3.25, 1.97, 2.31,  2.4,  2.45, 2.45,   2.46*1.0,  2.88,  2.59,  2.59,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
 RRK=[2.2,2.6+0.5, 3.03,  3.25, 2.68,         2.68, 2.68, 3.53, 3.25, 1.97,       2.31,  2.4,  2.45, 2.45,   2.46*1.1,        2.88,  2.59,  2.59,  2.99,  2.99,  3.39,  3.39*1.0,   3]*1e-9
 VMRppmNPL=[1.019,1.020,1.001,0.983,0.996,0.996,0.996,0.961,1.009,1.025,0.998,1.001,0.989,0.989,1.047,0,0,0,0.901,0.901,1.051,1.051,4,0,0,0,0,0]
 VMRppmAR=[1.011,1.01,1.111,0.967,0.998,0.998,0.998,0.937,1.017,1.006,0.983,0.989,0.983,0.983,1.032,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]
VMRppmAR=[1.011,1.01,  0.6 ,0.967,0.998,0.998,0.998,0.937,1.017,1.006,0.983,0.989,0.983,0.983,1.032,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]
   
   CompARR=[METH_33, CH3CN_42, ACETAL_45, ACE_59, MBO_87 ,$
            MBO_69 , MBO_41,MVK_71 ,MEK_73 ,BEN_79 ,$
            XYL_107, TMB_121, Pin_137,Pin_81 ,benzF3_133 ,$
            benzCl3_181, D3_223, D3_207, D4_297,D4_281 ,$
            D5_371 ,D5_355, TotSIG, transpose((FCinlet-FCinlet)+Flow), transpose(reltime),$
            TotSIGiso,transpose(prim) ,transpose(Tdrift),I19,I37,$
            I39,METH_34iso,CH3CN_43iso,Acetal_46iso,Ace_60iso, MBO_88iso,MBO_70iso, MBO_42iso,MVK_72iso,MEK_74iso ,$
             Ben_80iso, Xyl_108iso,TMB_122iso,Pin_138iso,Pin_82iso,benzF3_134iso ,benzCl3_182iso, D3_225iso,D3_209iso, D4_299iso, D4_283iso,$
              D5_374iso, D5_358iso ,transpose(Udx),transpose(pdrift),transpose(Udrift),BEN_78,I32,TMB_120,XYL_106]
 
 i_Tdrift=27
 i_Udx=53
 i_pdrift=54
 i_Udrift=55
 
LongDUR=10
tims=0
timmax=0
timend=0
sigmax=0
SearchStart=1
SearchEnd=0

  data=ACE_59  
  dataSTR='ACE_59' 
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 and abs(min(ProtEngData[*,0])-3184.484) lt 0.2) then  data=MEK_73 ; VOCUS Calib 20 sep  
  if(strpos(ComputerID,'50b4c522-8345-4094-bb5d-683484b5253e') gt -0.5 and abs(min(ProtEngData[*,0])-3190.6) lt 0.2) then  data=benzF3_133 ; UHEL Calib 26 sep  
  if(strlen(ComputerID) eq 0 ) then  data=CH3CN_42 ; Harvard 
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 and abs(min(ProtEngData[*,0])-3184.484) lt 0.2) then  dataSTR='MEK_73' ; VOCUS Calib 20 sep  
  if(strpos(ComputerID,'50b4c522-8345-4094-bb5d-683484b5253e') gt -0.5 and abs(min(ProtEngData[*,0])-3190.6) lt 0.2) then  dataSTR='benzF3_133' ; UHEL Calib 26 sep  
 
  if(strlen(ComputerID) eq 0 ) then  dataSTR='CH3CN_42' ; Harvard 
  

mini=quantile(data,0.1)
midi=quantile(data,0.4)
i30s=ceil(0.5*max(d(data))/max(reltime))
faktor2=2
if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  faktor2=3 ; VOCUS  PTR-TOF
step=1
 ;step=0.5
if(strlen(ComputerID) eq 0 ) then step=5  
for i=3,max(d(data))-2 do begin
        if( SearchStart eq 1) then if(abs(data[i]-mini)/abs(data[i-2*step]-mini) gt 3) then if(data[i]gt faktor2*midi) then   begin 
                tims=[tims,i]
               ; print, abs(data[i]-mini)/abs(data[i-1]-mini) 
                istart=i
                mini=min([data[i-1*step],data[i-2*step],data[i-3*step] ])
                i=i+1+step-1
                SearchStart=0
                SearchEnd=1
               
        endif
        if(i gt i30s) then mininew=min(data[lindgen(i30s)+i-i30s])
        faktor=1.0
        if(strpos(ComputerID,'a5607e09-ea6a-4dc2-8b59-43e174eb06af') gt -0.5 and abs(min(ProtEngData[*,0])-3188.457) lt 0.2) then  faktor=1.3 ; Lancaster Calib 24 sep  PTR-TOF
      
        if(i gt i30s) then  if(mininew lt midi*faktor) then mini = mininew       
        if( SearchEnd eq 1) then  if(abs(data[i-1*step]-mini)/abs(data[i]-mini) gt 1.5) then  if(data[i-1*step] gt midi ) then   begin
             ;  print, [i,abs(data[i-1]-mini)/abs(data[i]-mini)-1.5,data[i-1] - midi]
                timend=[timend,i]
                sigmax=[sigmax,max(data[istart:i])/midi]
                helpi=where((data[istart:i]) eq max(data[istart:i]))
                timmax=[timmax,istart+helpi[0]]
              ;   print, [i-istart,i,1.0*i/120,abs(data[istart]-mini)/abs(data[istart-1]-mini),data[istart],midi ,data[i-1] ,abs(data[i-1]-mini)/abs(data[i]-mini) ]
                i=i+1
                istart=istart+1
             ;   print, [i-istart,i, 1.0*i/120,abs(data[istart]-mini)/abs(data[istart-1]-mini),data[istart] ,midi,data[i-1] ,abs(data[i-1]-mini)/abs(data[i]-mini) ]
             ;    print, ''  
              
                 SearchStart=1
                SearchEnd=0
                
        endif
         ;i=i+step-1
endfor


tims=tims[1:*]
timend=timend[1:*]
sigmax=sigmax[1:*]
timmax=timmax[1:*]

;fix:
if(max(d(tims))-1 eq max(d(timend))) then timend=[timend,max(tims)+3]
if(max(d(tims))-1 eq max(d(timend))) then sigmax=[sigmax,data[max(tims)+3]]
if(max(d(tims))-1 eq max(d(timend))) then timmax=[timmax,max(tims)+1]

  injectiontimes=reltime[tims]                
 injectiontimesEND=reltime[timend]   
 
 duration=(injectiontimesEND-injectiontimes)*60  ; in seconds
 
 ;;;
 ; clean
 ;;;
 
timsold=tims
durationold=duration
injectiontimesold=injectiontimes
injectiontimesENDold=injectiontimesEND

 if(duration[0] lt LongDUR) then if(injectiontimes[1]*60-6 gt injectiontimesEND[0]*60) then begin
          tims[0]=-9999
          timend[0]=-9999
          injectiontimes[0]=-9999
          injectiontimesEND[0]=-9999
          duration[0]=-9999
 endif
 
 for i=1, max(d(tims))-2 do begin
  if(duration[i-1] lt LongDUR) then if(injectiontimesEND[i-1]*60+6 lt injectiontimes[i]*60) then  if(duration[i] lt LongDUR) then if(injectiontimes[i+1]*60-6 gt injectiontimesEND[i]*60) then begin
  
          tims[i]=-9999
           
          timend[i]=-9999
          injectiontimes[i]=-9999
          injectiontimesEND[i]=-9999
          duration[i]=-9999
  endif
 endfor
  
 
 if(duration[max(d(tims))-1] lt LongDUR) then if(injectiontimesEND[max(d(tims))-2]*60+6 lt injectiontimes[max(d(tims))-1]*60) then begin
          tims[max(d(tims))-1]=-9999
          timend[max(d(tims))-1]=-9999
          injectiontimes[max(d(tims))-1]=-9999
          injectiontimesEND[max(d(tims))-1]=-9999
          duration[max(d(tims))-1]=-9999
 endif
 
 
 ; clean short injections
Shortsig=quantile(sigmax[where(duration lt LongDUR)],0.6)
intex=where(duration lt LongDUR and sigmax lt Shortsig/5)
if(max(intex) gt -0.5) then  begin
          tims[intex]=-9999
          timend[intex]=-9999
          injectiontimes[intex]=-9999
          injectiontimesEND[intex]=-9999
          duration[intex]=-9999
 endif
  ;  print, [transpose(string(timsold,format='(F8.1)')),transpose(string(durationold,format='(F8.1)')),transpose(string(injectiontimesold*60,format='(F8.1)')),transpose(string(injectiontimesENDold*60,format='(F8.1)')),transpose(string(tims,format='(F8.1)')),transpose(string(duration,format='(F8.1)')),transpose(string(injectiontimes*60,format='(F8.1)')),transpose(string(injectiontimesEND*60,format='(F8.1)')),transpose(string(sigmax,format='(F8.1)'))]
 
 
 
 
  tims=tims[where(tims gt -9999)]
   sigmax=sigmax[where(timend gt -9999)]
timmax=timmax[where(timend gt -9999)]

  timend=timend[where(timend gt -9999)]
   injectiontimes=injectiontimes[where(injectiontimes gt -9999)]
  injectiontimesEND=injectiontimesEND[where(injectiontimesEND gt -9999)]
  duration=duration[where(duration gt -9999)]
  
  PREVdistance=[-9999,-60.0*(injectiontimes[0:max(d(tims))-2]-injectiontimes[1:*])]
  NEXTdistance=[60.0*(injectiontimes[1:*]-injectiontimes[0:max(d(tims))-2]),-9999]
 if(duration[0] gt LongDUR) then sequence=100 else sequence = 1
 for i=1,max(d(tims))-1 do if(duration[i] le LongDUR) then if (abs(PREVdistance[i]) lt 8.5) then if (sequence[i-1] lt 99) then sequence=[sequence,sequence[i-1]+1] else sequence=[sequence,1] else sequence=[sequence,1] else sequence=[sequence,100]
 for i=0, max(d(tims))-1 do if(sequence[i] eq 10) then for j=0,9 do sequence[i-j]=10

; clean long injections
  Longsig=max(sigmax[where(sequence eq 100)])
intex=where(sequence eq 100 and sigmax lt Longsig/10)
if(max(intex) gt -0.5) then sequence[intex]=-9999




 if( max(where(sequence ne 10 and sequence ne 100  )) gt -0.5) then begin
sequence[where(sequence ne 10 and sequence ne 100  )]=-9999
  tims=tims[where(sequence gt -9999)]
  timend=timend[where(sequence gt -9999)]
  injectiontimes=injectiontimes[where(sequence gt -9999)]
  injectiontimesEND=injectiontimesEND[where(sequence gt -9999)]
  duration=duration[where(sequence gt -9999)]
  sigmax=sigmax[where(sequence gt -9999)]
 timmax=timmax[where(sequence gt -9999)]
  sequence=sequence[where(sequence gt -9999)]
  
endif
 
 
 injectSHORT=injectiontimes[where(duration lt 4)]
 injectSHORTend=injectiontimesEND[where(duration lt 4)]
  timsSHORT=tims[where(duration lt 4)]
  timsSHORTend=timend[where(duration lt 4)]
  
   injectLONG=injectiontimes[where(duration gt 4)]
 injectLONGend=injectiontimesEND[where(duration gt 4)]
  timsLONG=tims[where(duration gt 4)]
  timsLONGend=timend[where(duration gt 4)]
  
   
               
CompCUB=dblarr(max(d(injectSHORT)),max(d(compounds)),15*step) ; 12 injections, 23 ions, 15 cycles
for i=0,max(d(timsSHORT))-1 do CompCUB[i,*,*]=CompARR[*,indgen(15*step)-5*step+timsShort[i]]
;  counts=total(compCUB[*,*,step*[4,5,6,7,8,9,10,11]],3)
 ;countsBG=8*total(compCUB[*,*,step*[1,2,3,12,13]],3)/5
 
  counts=total(compCUB[*,*,[indgen(8*step)+4*step]],3)*timestep; counts over 4s integration period
 countsBG=(8.0/5)*total(compCUB[*,*,[indgen(3*step)+1*step,indgen(2*step)+12*step]],3)*timestep


 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;; S
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   Cylinder: CC502781
;Cylinder Test Date: 02/14
;Valve: Ceodeux 14/686691 SS CGA350
;Cylinder Pressure: 2000 psi @ 22 °C
;Analysis Date: April 12, 2016
;Multi-component calibration mix
;Compound CAS# Concentration (ppb) Uncertainty
;
;Acetaldehyde 75-07-0         1111 ±5%
;Methanol 67-56-1        1011 ±5%
;Acetone 67-64-1 967 ±5%
;Acetonitrile 75-05-8 1010 ±5%
;Methyl Vinyl Ketone 78-94-4 937 ±5%
;Methyl Ethyl Ketone 78-93-3 1017 ±5%
;2-Methyl-3-Buten-2-ol 115-18-4 998 ±5%
;Benzene 71-43-2 1006 ±5%
;1,2,3-Trifluorobenzene 367-23-7 1032 ±5%
;Hexamethylcyclotrisiloxane (D3) 541-05-9 992 ±5%
;m-Xylene 108-38-3 983 ±5%
;alpha-Pinene 80-56-8 983 ±5%
;Octamethylcyclotetrasiloxane (D4) 556-67-2 995 ±5%
;1,3,5-Trimethylbenzene 108-67-8 989 ±5%
;Decamethylcyclopentasiloxane (D5) 541-02-6 995 ±5%
;1,2,4-Trichlorobenzene 120-82-1 995 ±5% 

if(min(ProtEngData[*,0]) lt 3186.0 or min(ProtEngData[*,0]) gt 3194.0 ) then VMRppm=VMRppmAR
   
;propane 0.981 0.015
;ethanol 0.965 0.024
;
;methanol 1.019 0.031
;acetonitrile 1.020 0.031
;acetaldehyde 1.001 0.030
;acetone 0.983 0.020
;isoprene 0.996 0.020
;3-buten-2-one (MVK) 0.961 0.029
;butan-2-one (MEK) 1.009 0.030
;benzene 1.025 0.015
;m-xylene 0.998 0.025
;1,2,4-TMB 1.001 0.025
;1,2,4-trifluorobenzene 1.047 0.052
;3-carene 0.989 0.025
;D4-siloxane 0.901 0.045
;D5-siloxane 1.051 0.053

if(min(ProtEngData[*,0]) ge 3186.0  and min(ProtEngData[*,0]) le 3194.0 ) then VMRppm=VMRppmNPL
 

VMRppm[where(VMRppm eq 0)]=1e5



 

 
 
 
  essen=fltarr(10)
  essen42=fltarr(10)
  prim19=fltarr(10)
  prim37=fltarr(10)
  i2=0
  en=1e-6*VMRppm[3]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en42=1e-6*VMRppm[1]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en59=1e-6*VMRppm[3]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en73=1e-6*VMRppm[8]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en79=1e-6*VMRppm[9]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en107=1e-6*VMRppm[10]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en121=1e-6*VMRppm[11]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en133=1e-6*VMRppm[14]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en207=1e-6*VMRppm[17]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en223=1e-6*VMRppm[16]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en281=1e-6*VMRppm[19]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en297=1e-6*VMRppm[18]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en355=1e-6*VMRppm[21]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  en371=1e-6*VMRppm[20]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
  Fmol=(Flow)/(60.0*1000.0*22.4) ; unit is mol/s
;  faccct=1.0
 ;  if(strlen(ComputerID) eq 0 ) then faccct=20.0 ; harvard
  d_d=9.6
  if(strpos(ComputerID,'2197a787-6c47-4c78-88d1-28fb6598bcc2') gt -0.5 ) then  d_d=10; estimated based on E/N of 160 Td, VOCUS  PTR-TOF
  p_d=mean(counts[indgen(10),i_pdrift]/4)
  E_d=(mean(counts[indgen(10),i_udrift]/4)+mean(counts[indgen(10),i_udx]/4))/d_d
  T_d=mean(counts[indgen(10),i_Tdrift]/4)+273.15
  t_react=(d_d*p_d*273.15)/(E_d*T_d*2.7*1013.25)
  if(strlen(ComputerID) eq 0 ) then t_react=0.003 ; harvard
  sensitivity=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[3]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission 
  sensitivity42=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[1]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission 
  sensitivity59=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[3]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission 
  sensitivity73=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[8]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission 
  sensitivity79=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[9]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission 
  sensitivity107=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[10]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission 
  sensitivity121=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[11]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission 
  sensitivity133=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[14]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission 
  sensitivity223=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[16]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission 
  sensitivity297=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[18]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission 
  sensitivity371=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[20]/1013.25) ;ncps/ppb based on 1e6 primary ions and unity transmission 
  
  sensitivities=fltarr(22)
  
  for i=0,21 do sensitivities[i]=1.0E-9*1.0E6*(t_react*p_d/T_d)*(2.7E19*273.15*RRK[i]/1013.25)
  
  
  MASSlow=10
  WIDTHlow=2
   MASShigh=1000
 WIDTHhigh=10
  ex=0.5
  
           window,28, xsize = 500, ysize=400
            !P.MULTI = [0,1,1] 
  loadct,20
 
  
  
  DELTAex=0.01
  EXrange=[0,2]
  field=fltarr(201)
  scoreee=0
  bestEX=0.5
  for dEX=0,200 do begin
          ex=DELTAex*dEX
          factor159=tr(59,ex,masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor259=tr(59,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor173=tr(73,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor273=tr(73,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor179=tr(79,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor279=tr(79,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor1107=tr(107,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor2107=tr(107,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor1121=tr(121,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor2121=tr(121,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor1133=tr(133,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor2133=tr(133,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor1223=tr(223,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor2223=tr(223,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor1297=tr(297,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor2297=tr(297,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,ex, masslow,widthlow,MASShigh,WIDTHhigh)
           factor1371=tr(371,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          factor2371=tr(371,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          
           f355=tr(371,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(355,ex, masslow,widthlow,MASShigh,WIDTHhigh)
           f281=tr(297,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(281,ex, masslow,widthlow,MASShigh,WIDTHhigh)
           f207=tr(223,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(207,ex, masslow,widthlow,MASShigh,WIDTHhigh)
       
          
          
          primi59= (mean(countsBG[indgen(10),28])*factor159+mean(countsBG[indgen(10),29])*factor259)/4; divide by 4 because mean(countsBG is based on 4s integration. Unit is cps.
          primi73= (mean(countsBG[indgen(10),28])*factor173+mean(countsBG[indgen(10),29])*factor273)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
          primi79= (mean(countsBG[indgen(10),28])*factor179+mean(countsBG[indgen(10),29])*factor279)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
          primi107= (mean(countsBG[indgen(10),28])*factor1107+mean(countsBG[indgen(10),29])*factor2107)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
          primi121= (mean(countsBG[indgen(10),28])*factor1121+mean(countsBG[indgen(10),29])*factor2121)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
          primi133= (mean(countsBG[indgen(10),28])*factor1133+mean(countsBG[indgen(10),29])*factor2133)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
          primi223= (mean(countsBG[indgen(10),28])*factor1223+mean(countsBG[indgen(10),29])*factor2223)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
          primi297= (mean(countsBG[indgen(10),28])*factor1297+mean(countsBG[indgen(10),29])*factor2297)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
          primi371= (mean(countsBG[indgen(10),28])*factor1371+mean(countsBG[indgen(10),29])*factor2371)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
          C59=mean(counts[indgen(10),3])-mean(countsBG[indgen(10),3]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
          C73=mean(counts[indgen(10),8])-mean(countsBG[indgen(10),8]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
          C79=mean(counts[indgen(10),9])-mean(countsBG[indgen(10),9]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
          C107=mean(counts[indgen(10),10])-mean(countsBG[indgen(10),10]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
          C121=mean(counts[indgen(10),11])-mean(countsBG[indgen(10),11]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
          C133=mean(counts[indgen(10),14])-mean(countsBG[indgen(10),14]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
          C223=(mean(counts[indgen(10),16])+f207*mean(counts[indgen(10),17]))-(mean(countsBG[indgen(10),16])+f207*mean(countsBG[indgen(10),17])) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
          C297=(mean(counts[indgen(10),18])+f281*mean(counts[indgen(10),19]))-(mean(countsBG[indgen(10),18])+f281*mean(countsBG[indgen(10),19])) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
          C371=(mean(counts[indgen(10),20])+f355*mean(counts[indgen(10),21]))-(mean(countsBG[indgen(10),20])+f355*mean(countsBG[indgen(10),21])) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
          NC59=C59*1e6/primi59 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
          NC73=C73*1e6/primi73 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
          NC79=C79*1e6/primi79 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
          NC107=C107*1e6/primi107 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
          NC121=C121*1e6/primi121 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
          NC133=C133*1e6/primi133 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
          NC223=C223*1e6/primi223 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
          NC297=C297*1e6/primi297 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
          NC371=C371*1e6/primi371 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
          essen59= NC59*Fmol*1e-9/en59  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen73= NC73*Fmol*1e-9/en73  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen79= NC79*Fmol*1e-9/en79  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen107= NC107*Fmol*1e-9/en107  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen121= NC121*Fmol*1e-9/en121  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen133= NC133*Fmol*1e-9/en133  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen223= NC223*Fmol*1e-9/en223  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen297= NC297*Fmol*1e-9/en297  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen371= NC371*Fmol*1e-9/en371  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
         xx=[59,73,79,107,121,133,223,297,355]
         cols=[10,10,10,10,10,   100,100,100,100,100,   175,175,175,175,175, 250,250,250,250,250,250,250,250,250]
       
               f73=tr(59,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(73,ex, masslow,widthlow,MASShigh,WIDTHhigh)
              f79=tr(59,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(79,ex, masslow,widthlow,MASShigh,WIDTHhigh)
             f107=tr(59,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(107,ex, masslow,widthlow,MASShigh,WIDTHhigh)
             f121=tr(59,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(121,ex, masslow,widthlow,MASShigh,WIDTHhigh)
             f133=tr(59,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(133,ex, masslow,widthlow,MASShigh,WIDTHhigh)
             f223=tr(59,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(223,ex, masslow,widthlow,MASShigh,WIDTHhigh)
             f297=tr(59,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(297,ex, masslow,widthlow,MASShigh,WIDTHhigh)
             f371=tr(59,ex, masslow,widthlow,MASShigh,WIDTHhigh)/tr(371,ex, masslow,widthlow,MASShigh,WIDTHhigh)
          
          f73=1.0 &  f79=1.0 &  f107=1.0 &  f121=1.0 &  f133=1.0 &  f223=1.0 &  f297=1.0 &  f371=1.0 & 
               
          set=[essen59/sensitivity59,f73*essen73/sensitivity73,f79*essen79/sensitivity79,f107*essen107/sensitivity107,f121*essen121/sensitivity121,$
          f133*essen133/sensitivity133,f223*essen223/sensitivity223,f297*essen297/sensitivity297,f371*essen371/sensitivity371]
          set=set/max(set)
 if(total(set[0:5]) gt scoreee) then begin
  scoreee=total(set[0:5])
  bestEX=ex
  endif
          if (dEX eq 0) then begin
           plot,xx, set, xrange=[0,400], background=0,color=-1 
           oplot,xx, set, color=100
           
           endif else oplot,xx, set, color=100
         if(total(set) gt 7) then oplot,xx, set, color=-1
         
          print, string([ex,total(set[0:5]),set],format='(F8.2)')
  endfor
 
  xyouts,0.5,0.5,bestEX,/norm,charsize=4,charthick=3,color=-100
  
  
  MASSlow=50
  WIDTHlow=20
   MASShigh=600
 WIDTHhigh=100
 
  MASSlow=10
  WIDTHlow=2
   MASShigh=1000
 WIDTHhigh=10
  
  
  DELTAm=1
  Mrange=[0,50]
  Wrange=[0,50]
  Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
  Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
  field=fltarr(dim1,dim2)
  for ML=0,dim1-1 do begin
  for WL=0,dim2-1 do begin
          masslow=min(Mrange)+deltam*ML
          widthlow=min(Wrange)+deltam*WL
          factor1=tr(59,bestEX,masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)
          factor2=tr(59,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)
          factor142=tr(42,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)
          factor242=tr(42,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)
          primi= (mean(countsBG[indgen(10),28])*factor1+mean(countsBG[indgen(10),29])*factor2)/4; divide by 4 because mean(countsBG is based on 4s integration. Unit is cps.
          primi42= (mean(countsBG[indgen(10),28])*factor142+mean(countsBG[indgen(10),29])*factor242)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
          C59=mean(counts[indgen(10),3])-mean(countsBG[indgen(10),3]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
          C42=mean(counts[indgen(10),1])-mean(countsBG[indgen(10),1]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
          NC59=C59*1e6/primi ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
          NC42=C42*1e6/primi42 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
          essen= NC59*Fmol*1e-9/en  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          essen42= NC42*Fmol*1e-9/en42  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
          prim19= mean(countsBG[indgen(10),28])/4
          prim37= mean(countsBG[indgen(10),29])/4
          if(essen gt sensitivity) then xx59=essen/sensitivity else xx59=sensitivity/essen 
          if(essen42 gt sensitivity42) then xx42=essen42/sensitivity42 else xx42=sensitivity42/essen42 
          field[ML,WL]=max([xx42,xx59])
 endfor
 endfor
 field=1/field
 maxi=max(field,/nan)
 field[where(field lt 0.98*maxi)]=field[where(field lt 0.98*maxi)]*0.5      
 field[where(field lt 0.99*maxi)]=field[where(field lt 0.99*maxi)]*0.5      
 field[where(field lt 0.995*maxi)]=field[where(field lt 0.995*maxi)]*0.5      
 field[where(field gt 0.998*maxi)]=1       
; for i=1,7 do  field[*,-1+50*i]=0.6            
; for i=1,13 do  field[-1+50*i,*]=0.6   
  window,26, xsize = dim1, ysize=dim2
  loadct,20
  tvscl, field
  WidthLow=0
  while (max(where(field[*,WidthLow] eq 1)) lt -0.5) do WidthLow=WidthLow+1
  MassLow=where(field[*,WidthLow] eq 1) & Masslow=Masslow[0]
  masslow=min(Mrange)+deltam*masslow
  widthlow=min(Wrange)+deltam*widthlow
  print, [Masslow,widthlow,MassHigh,Widthhigh]
  DELTAm=2
  Mrange=[150,600]
  Wrange=[30,300]
  Dim1=ceil((max(Mrange)-min(Mrange))/DELTAm)
  Dim2=ceil((max(Wrange)-min(Wrange))/DELTAm)
  field=fltarr(dim1,dim2)
  for MH=0,dim1-1 do begin
  for WH=0,dim2-1 do begin
                    MASShigh=max(Mrange)-deltam*MH
                    WIDTHhigh=min(Wrange)+deltam*WH
                    factor1_121=tr(121,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                    factor2_121=tr(121,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                    factor1_133=tr(133,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                    factor2_133=tr(133,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                    factor1_281=tr(281,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                    factor2_281=tr(281,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                    factor1_297=tr(297,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                    factor2_297=tr(297,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                    factor1_355=tr(355,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                    factor2_355=tr(355,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                    factor1_371=tr(371,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                    factor2_371=tr(371,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                    primi121= (mean(countsBG[indgen(10),28])*factor1_121+mean(countsBG[indgen(10),29])*factor2_121)/4; divide by 4 because mean(countsBG is based on 4s integration. Unit is cps.
                    primi133= (mean(countsBG[indgen(10),28])*factor1_133+mean(countsBG[indgen(10),29])*factor2_133)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
                    primi281= (mean(countsBG[indgen(10),28])*factor1_281+mean(countsBG[indgen(10),29])*factor2_281)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
                    primi297= (mean(countsBG[indgen(10),28])*factor1_297+mean(countsBG[indgen(10),29])*factor2_297)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
                    primi355= (mean(countsBG[indgen(10),28])*factor1_355+mean(countsBG[indgen(10),29])*factor2_355)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
                    primi371= (mean(countsBG[indgen(10),28])*factor1_371+mean(countsBG[indgen(10),29])*factor2_371)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
                    C121=mean(counts[indgen(10),11])-mean(countsBG[indgen(10),11]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
                    C133=mean(counts[indgen(10),14])-mean(countsBG[indgen(10),14]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
                    C281=mean(counts[indgen(10),19])-mean(countsBG[indgen(10),19]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
                    C297=mean(counts[indgen(10),18])-mean(countsBG[indgen(10),18]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
                    C355=mean(counts[indgen(10),21])-mean(countsBG[indgen(10),21]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
                    C371=mean(counts[indgen(10),20])-mean(countsBG[indgen(10),20]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
                    NC121=C121*1e6/primi121 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
                    NC133=C133*1e6/primi133 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
                    NC281=C281*1e6/primi281 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
                    NC297=C297*1e6/primi297 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
                    NC355=C355*1e6/primi355 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
                    NC371=C371*1e6/primi371 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
                    essen121= NC121*Fmol*1e-9/en121  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
                    essen133= NC133*Fmol*1e-9/en133  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
                    essen281= NC281*Fmol*1e-9/en281  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
                    essen297= NC297*Fmol*1e-9/en297  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
                    essen355= NC355*Fmol*1e-9/en355  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
                    essen371= NC371*Fmol*1e-9/en371  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
                    prim19= mean(countsBG[indgen(10),28])/4
                    prim37= mean(countsBG[indgen(10),29])/4
                    essen297=essen297+essen281
                    essen371=essen371+essen355
                    if(WH eq 0 and MH eq 0) then begin
                    if(mean(essen121) gt mean(essen133)) then begin
                      essen_H1=essen121 
                      sensitivity_H1=sensitivity121 
                      HH1=1
                   endif else begin
                      essen_H1=essen133
                      sensitivity_H1=sensitivity133 
                      HH1=2
                   endelse
                   if(mean(essen297) gt mean(essen371)*5) then begin
                      essen_H2=essen297 
                      sensitivity_H2=sensitivity297 
                      HH2=1
                   endif else begin
                      essen_H2=essen371
                      sensitivity_H2=sensitivity371 
                      HH2=2
                      endelse
              endif
              
              if(HH2 eq 1) then begin
                      essen_H2=essen297 
                      sensitivity_H2=sensitivity297 
              endif else begin
                      essen_H2=essen371
                      sensitivity_H2=sensitivity371 
              endelse
              if(HH1 eq 1) then begin
                      essen_H1=essen121 
                      sensitivity_H1=sensitivity121 
              endif else begin
                      essen_H1=essen133
                      sensitivity_H1=sensitivity133 
               endelse
            
              
        
     
           if(essen_H1 gt sensitivity_H1) then xx_H1=essen_H1/sensitivity_H1 else xx_H1=sensitivity_H1/essen_H1 
           if(essen_H2 gt sensitivity_H2) then xx_H2=essen_H2/sensitivity_H2 else xx_H2=sensitivity_H2/essen_H2 
           
           
           sett=[max([xx_H1,0.9],/nan),max([xx_H2,0.9],/nan)]
           if(min(sett) eq 0.9) then sett=0.9 else sett=max(sett)
            field[dim1-1-MH,WH]=sett
      
 
 endfor
 endfor
 field=1/field
 field[where(field gt 1)]=0
 maxi=max(field,/nan)
 ;    field=sqrt(field)^2
 field[where(field lt 0.98*maxi)]=field[where(field lt 0.98*maxi)]*0.5      
 field[where(field lt 0.99*maxi)]=field[where(field lt 0.99*maxi)]*0.5      
 field[where(field lt 0.995*maxi)]=field[where(field lt 0.995*maxi)]*0.5      
 field[where(field gt 0.998*maxi)]=1        
  window,31, xsize = dim1, ysize=dim2
  loadct,20
  tvscl, field
  MassHigh=0
 while (max(where(field[MassHigh,*] eq 1)) lt -0.5) do MassHigh=MassHigh+1 ;lowest mass
 Widthhigh=where(field[MassHigh,*] eq 1) & Widthhigh=Widthhigh[ max(d(widthhigh))-1]  ; largest width
 
 MASShigh=min(Mrange)+deltam*MASShigh
  WIDTHhigh=min(Wrange)+deltam*WIDTHhigh
 
 
 
print, [Masslow,widthlow,MassHigh,Widthhigh]
print,''
MasslowOLD=Masslow
widthlowOLD=widthlow
MassHighOLD=MassHigh
WidthhighOLD=Widthhigh
iter=0
condi=0
trendi=fltarr(3,60)
while (condi eq 0) do begin
        SML=Masslow-5
        SWL=widthlow-5
        field=fltarr(100,100)
        for ML=0,99 do begin
        for WL=0,99 do begin
                masslow=SML+0.1*ML
                widthlow=SWL+0.1*WL
                factor1=tr(59,bestEX,masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)
                factor2=tr(59,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)
                factor142=tr(42,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)/tr(19,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)
                factor242=tr(42,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)/tr(37,bestEX, masslow,widthlow,MASShigh,WIDTHhigh)
                primi= (mean(countsBG[indgen(10),28])*factor1+mean(countsBG[indgen(10),29])*factor2)/4; divide by 4 because mean(countsBG is based on 4s integration. Unit is cps.
                primi42= (mean(countsBG[indgen(10),28])*factor142+mean(countsBG[indgen(10),29])*factor242)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
                C59=mean(counts[indgen(10),3])-mean(countsBG[indgen(10),3]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
                C42=mean(counts[indgen(10),1])-mean(countsBG[indgen(10),1]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
                NC59=C59*1e6/primi ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
                NC42=C42*1e6/primi42 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
                essen= NC59*Fmol*1e-9/en  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
                essen42= NC42*Fmol*1e-9/en42  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
                prim19= mean(countsBG[indgen(10),28])/4
                prim37= mean(countsBG[indgen(10),29])/4
                if(essen gt sensitivity) then xx59=essen/sensitivity else xx59=sensitivity/essen 
                if(essen42 gt sensitivity42) then xx42=essen42/sensitivity42 else xx42=sensitivity42/essen42 
                field[ML,WL]=max([xx42,xx59])
        endfor
        endfor
        field=1/field
        maxi=max(field,/nan)
        if( field[50,50] ge maxi*0.98) then field[50,50]=1  else  field[where(field  eq maxi)]=1  
       if( max(field[50,50]) eq 1) then begin
              WidthLOW=SWL+0.1*50
              MassLOW=SML+0.1*50
       endif else begin
              WidthLow=0
              while (max(where(field[*,WidthLow] eq 1)) lt -0.5) do WidthLow=WidthLow+1
              MassLow=where(field[*,WidthLow] eq 1) & Masslow=Masslow[0]
              WidthLow=SWL+0.1*WidthLow
              MassLow=SML+0.1*MassLow
       endelse
       window,26, xsize = 100, ysize=100
       loadct,20
       tvscl, field
       SMH=MassHigh-5
       SWH=Widthhigh-5
       field=fltarr(100,100)
       for MH=0,99 do begin
       for WH=0,99 do begin
              MASShigh=SMH+0.1*MH
              WIDTHhigh=SWH+0.1*WH
              factor1_121=tr(121,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
              factor2_121=tr(121,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
              factor1_133=tr(133,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
              factor2_133=tr(133,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
              factor1_281=tr(281,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
              factor2_281=tr(281,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
              factor1_297=tr(297,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
              factor2_297=tr(297,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
              factor1_355=tr(355,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
              factor2_355=tr(355,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
              factor1_371=tr(371,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
              factor2_371=tr(371,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
              primi121= (mean(countsBG[indgen(10),28])*factor1_121+mean(countsBG[indgen(10),29])*factor2_121)/4; divide by 4 because mean(countsBG is based on 4s integration. Unit is cps.
              primi133= (mean(countsBG[indgen(10),28])*factor1_133+mean(countsBG[indgen(10),29])*factor2_133)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
              primi281= (mean(countsBG[indgen(10),28])*factor1_281+mean(countsBG[indgen(10),29])*factor2_281)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
              primi297= (mean(countsBG[indgen(10),28])*factor1_297+mean(countsBG[indgen(10),29])*factor2_297)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
              primi355= (mean(countsBG[indgen(10),28])*factor1_355+mean(countsBG[indgen(10),29])*factor2_355)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
              primi371= (mean(countsBG[indgen(10),28])*factor1_371+mean(countsBG[indgen(10),29])*factor2_371)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
              C121=mean(counts[indgen(10),11])-mean(countsBG[indgen(10),11]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
              C133=mean(counts[indgen(10),14])-mean(countsBG[indgen(10),14]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
              C281=mean(counts[indgen(10),19])-mean(countsBG[indgen(10),19]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
              C297=mean(counts[indgen(10),18])-mean(countsBG[indgen(10),18]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
              C355=mean(counts[indgen(10),21])-mean(countsBG[indgen(10),21]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
              C371=mean(counts[indgen(10),20])-mean(countsBG[indgen(10),20]) ; total signal of an injection (independent of integration interval). Unit is 'counts'.
              NC121=C121*1e6/primi121 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
              NC133=C133*1e6/primi133 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
              NC281=C281*1e6/primi281 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
              NC297=C297*1e6/primi297 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
              NC355=C355*1e6/primi355 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
              NC371=C371*1e6/primi371 ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
              essen121= NC121*Fmol*1e-9/en121  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
              essen133= NC133*Fmol*1e-9/en133  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
              essen281= NC281*Fmol*1e-9/en281  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
              essen297= NC297*Fmol*1e-9/en297  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
              essen355= NC355*Fmol*1e-9/en355  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
              essen371= NC371*Fmol*1e-9/en371  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
              prim19= mean(countsBG[indgen(10),28])/4
              prim37= mean(countsBG[indgen(10),29])/4
              essen297=essen297+essen281
              essen371=essen371+essen355
              if(HH2 eq 1) then begin
                      essen_H2=essen297 
                      sensitivity_H2=sensitivity297 
              endif else begin
                      essen_H2=essen371
                      sensitivity_H2=sensitivity371 
              endelse
              if(HH1 eq 1) then begin
                      essen_H1=essen121 
                      sensitivity_H1=sensitivity121 
              endif else begin
                      essen_H1=essen133
                      sensitivity_H1=sensitivity133 
               endelse
               if(essen_H1 gt sensitivity_H1) then xx_H1=essen_H1/sensitivity_H1 else xx_H1=sensitivity_H1/essen_H1 
               if(essen_H2 gt sensitivity_H2) then xx_H2=essen_H2/sensitivity_H2 else xx_H2=sensitivity_H2/essen_H2 
               sett=[max([xx_H1,0.9],/nan),max([xx_H2,0.9],/nan)]
               if(min(sett) eq 0.9) then sett=0.9 else sett=max(sett)
               field[MH,WH]=sett
       endfor
       endfor
       field=1/field
       field[where(field gt 1)]=0
       maxi=max(field,/nan)
       if( field[50,50] ge maxi*0.98) then field[50,50]=1  else  field[where(field  eq maxi)]=1  
       if( max(field[50,50]) eq 1) then begin
              Widthhigh=SWH+0.1*50
              MassHigh=SMH+0.1*50
       endif else begin
              MassHigh=99
              while (max(where(field[MassHigh,*] eq 1)) lt -0.5) do MassHigh=MassHigh-1
              Widthhigh=where(field[MassHigh,*] eq 1) & Widthhigh=Widthhigh[0]
              Widthhigh=SWH+0.1*Widthhigh
              MassHigh=SMH+0.1*MassHigh
       endelse
       window,27, xsize = 100, ysize=100
       loadct,20
       tvscl, field
       if(iter gt 5.5) then  sdsd=stddev(trendi[2,indgen(5)+iter-6]) else sdsd=10
       mmaaxx=max([xx42,xx59,xx_H1,xx_H2])
       print, [iter,Masslow,widthlow,MassHigh,Widthhigh, xx42,xx59,xx_H1,xx_H2,mmaaxx, mmaaxx-trendi[2,iter-1],sdsd,  (mmaaxx-trendi[2,iter-1])/sdsd] 
       if(max(abs([Masslow,widthlow,MassHigh,Widthhigh]-[MasslowOLD,widthlowOLD,MassHighOLD,WidthhighOLD])) lt 0.05) then condi=1
       if(iter ge 25) then condi=1
       if((mmaaxx-trendi[2,iter-1])/sdsd ge 5) then condi=1
       MasslowOLD=Masslow
       widthlowOLD=widthlow
       MassHighOLD=MassHigh
       WidthhighOLD=Widthhigh
       trendi[*,iter]=[ (mmaaxx-trendi[2,iter-1])/sdsd,mean([xx42,xx59,xx_H1,xx_H2]),max([xx42,xx59,xx_H1,xx_H2])]
       iter=iter+1
endwhile

 print, '          | N2 dry   |  AIR dry |  AIR wet |  N2 wet |  N2 dry   |'
print, [MASSlow,WIDTHlow,sensitivity,T_d,p_d,mean(counts[indgen(10),i_udrift]/4), mean(counts[indgen(10),i_udx]/4)]
 print,['m19', string((prim19),format='(F12.2)')]
print,['m37', string((prim37),format='(F12.2)')]
print,['m37/m19', string(100*(prim37)/(prim19),format='(F12.1)')+'%']
print,['m19 @ tr 59', string((prim19)*factor1,format='(E13.2)')]
print,['m37 @ tr 59', string((prim37)*factor2,format='(E12.2)')]
print,['m37/m19 @ tr 59', string(100*(prim37)*factor2/((prim19)*factor1),format='(F12.2)')+'%']
print,[compounds[3], string((essen),format='(F12.2)')]
print,['Tr59/Tr19', string(((prim19)*factor1)/((prim19)),format='(F12.2)')]

             
              
 
 
 
     print, ''              
 
 
   CompARRtranse=CompARR
  for i=0,max(d(compounds))-1 do if (mTOz[i] ne -1) then CompARRtranse[i,*]=CompARR[i,*]/tr(mTOz[i],bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
PrimTR=CompARRtranse[29,*]+CompARRtranse[28,*]
TotSigTR=CompARRtranse[0,*]
for i=1,21 do  TotSigTR=TotSigTR+CompARRtranse[i,*]
 CompCUBtranse=CompCUB
 for i=0,max(d(timsSHORT))-1 do CompCUBtranse[i,*,*]=CompARRtranse[*,indgen(15*step)-5*step+timsShort[i]]
   countsTR=total(compCUBtranse[*,*,[indgen(8*step)+4*step]],3)*timestep; counts over 4s integration period
 countsBGTR=(8.0/5)*total(compCUBtranse[*,*,[indgen(3*step)+1*step,indgen(2*step)+12*step]],3)*timestep
 
 
 
 
 
 
 
 S_set3=[0,0,0,0,0]
S_set2=[0,0,0,0,0]
 S_set3TR=[0,0,0,0,0]
S_set2TR=[0,0,0,0,0]
 S_set=starttim
 Serr_set=starttim
 sensitivitiesCALC=fltarr(22)
 ncpsPERppbTR=fltarr(22,5)
 ncpsPERppbTR59=fltarr(22,5)
 cpsPERppbRAW=fltarr(22,5)
 KINSPECS=fltarr(20,5)
 
 for j=0,22 do begin  
        essen=fltarr(max(d(timsSHORT)))
        essen3=fltarr(max(d(timsSHORT)))
        essenTR=fltarr(max(d(timsSHORT)))
        essen3TR=fltarr(max(d(timsSHORT)))
        
        i2=0
        for i=0,max(d(timsSHORT))-1 do begin  
                 en=1e-6*VMRppm[j]*(101325*250*1e-9)/(T_loop*8.314)  ; amount of substance in mol
                factor1=tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(19,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                factor2=tr(59,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/tr(37,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh)
                primi= (countsBG[i,28]*factor1+countsBG[i,29]*factor2)/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
                primiTR= (countsBGTR[i,28]+countsBGTR[i,29])/4; divide by 4 because countsBG is based on 4s integration. Unit is cps.
                C=counts[i,j]-countsBG[i,j] ; total signal of an injection (independent of integration interval). Unit is 'counts'.
                CTR=countsTR[i,j]-countsBGTR[i,j] ; total signal of an injection (independent of integration interval). Unit is 'counts'.
                NC=C*1e6/primi ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
                NCTR=CTR*1e6/primiTR ; the factor to normalise to a primary ion signal of 1E6 cps. Unit is 'counts'.
                Fmol=(Flow)/(60.0*1000.0*22.4) ; unit is mol/s
                es=NC*Fmol*1e-9/en  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
                es3=C*Fmol*1e-9/en  ; UNIT cps/ppb  
               esTR=NCTR*Fmol*1e-9/en  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
                es3TR=CTR*Fmol*1e-9/en  ; UNIT cps/ppb  
                essen[i2]= es
                essen3[i2]= es3
               essenTR[i2]= esTR
                essen3TR[i2]= es3TR
                 i2=i2+1
        endfor
   Sset=[mean(essen[0:9]/isotopecor[j]),100*stddev(essen[0:9])/mean(essen[0:9])]
   for k=1,4 do Sset=[Sset, [mean(essen[10*k+0:10*k+9]/isotopecor[j]),100*stddev(essen[10*k+0:10*k+9])/mean(essen[10*k+0:10*k+9])]]
   Sset2=[mean(essen[0:9]/isotopecor[j])]
   for k=1,4 do Sset2=[Sset2, [mean(essen[10*k+0:10*k+9]/isotopecor[j])]]
   Sset2=[mean(essen[0:9])]
   Sset3=[mean(essen3[0:9])]
   Sset2TR=[mean(essenTR[0:9])]
   Sset3TR=[mean(essen3TR[0:9])]
   for k=1,4 do Sset2=[Sset2, [mean(essen[10*k+0:10*k+9])]]
   for k=1,4 do Sset3=[Sset3, [mean(essen3[10*k+0:10*k+9])]]
   for k=1,4 do Sset2TR=[Sset2TR, [mean(essenTR[10*k+0:10*k+9])]]
   for k=1,4 do Sset3TR=[Sset3TR, [mean(essen3TR[10*k+0:10*k+9])]]
 ;  print,[compounds[j], string(Sset2TR,format='(F12.2)'), string(Sset2,format='(F12.2)'),string(Sset3,format='(F12.2)')]
   S_set2=[[S_set2],[Sset2]]
   S_set=[S_set,[mean(essen)]]
   Serr_set=[Serr_set,stddev(essen)]
   if(j lt 21.5) then begin 
          sensitivitiesCALC[j]=Sset2TR[0]
          ncpsPERppbTR[j,*]=Sset2TR
          ncpsPERppbTR59[j,*]=Sset2
          cpsPERppbRAW[j,*]=Sset3
      if( j eq 15 ) then begin
      
          print, sset3
          
         endif 
   endif
 endfor
 
       sig19=fltarr(max(d(timsSHORT)))
       sig37=fltarr(max(d(timsSHORT)))
      sig19at59=fltarr(max(d(timsSHORT)))
       sig37at59=fltarr(max(d(timsSHORT)))
       r37to19=fltarr(max(d(timsSHORT)))
        r32to19=fltarr(max(d(timsSHORT)))
        BENZ78to79=fltarr(max(d(timsSHORT)))
        TMB120to121=fltarr(max(d(timsSHORT)))
        XYL106to107=fltarr(max(d(timsSHORT)))
        
        sigTTd=fltarr(max(d(timsSHORT)))
        sigppd=fltarr(max(d(timsSHORT)))
        sigUUd=fltarr(max(d(timsSHORT)))
        sigUUdx=fltarr(max(d(timsSHORT)))
         
        for i=0,max(d(timsSHORT))-1 do begin  
        sig19[i]=countsBG[i,28]/4
        sig37[i]=countsBG[i,29]/4
        sig19at59[i]=countsBGTR[i,28]/4
        sig37at59[i]=countsBGTR[i,29]/4
        r37to19[i]=countsBGTR[i,29]/countsBGTR[i,28]
        r32to19[i]=countsBGTR[i,57]/countsBGTR[i,28]
        BENZ78to79[i]=countsTR[i,56]/countsTR[i,9]
        TMB120to121[i]=countsTR[i,58]/countsTR[i,11]
        XYL106to107[i]=countsTR[i,59]/countsTR[i,10]
        sigTTd[i]=counts[i,i_Tdrift]/4+273.15
        sigppd[i]=counts[i,i_pdrift]/4
        sigUUd[i]=counts[i,i_udrift]/4
        sigUUdx[i]=counts[i,i_udx]/4
        
         endfor
 
   Set19=[mean(sig19[0:9])]
   Set37=[mean(sig37[0:9])]
   Set19at59=[mean(sig19at59[0:9])]
   Set37at59=[mean(sig37at59[0:9])]
   Set37to19=[mean(r37to19[0:9])]
   Set32to19=[mean(r32to19[0:9])]
   Set78to79=[mean(BENZ78to79[0:9])]
   Set120to121=[mean(TMB120to121[0:9])]
   Set106to107=[mean(XYL106to107[0:9])]
   SetTTd=[mean(sigTTd[0:9])]
   Setppd=[mean(sigppd[0:9])]
   SetUUd=[mean(sigUUd[0:9])]
   SetUUdx=[mean(sigUUdx[0:9])]
   for k=1,4 do   Set19=[Set19, [mean(sig19[10*k+0:10*k+9])]]
   for k=1,4 do   Set37=[Set37, [mean(sig37[10*k+0:10*k+9])]]
  for k=1,4 do   Set19at59=[Set19at59, [mean(sig19at59[10*k+0:10*k+9])]]
  for k=1,4 do   Set37at59=[Set37at59, [mean(sig37at59[10*k+0:10*k+9])]]
  for k=1,4 do   Set37to19=[Set37to19, [mean(r37to19[10*k+0:10*k+9])]]
  for k=1,4 do   Set32to19=[Set32to19, [mean(r32to19[10*k+0:10*k+9])]]
   for k=1,4 do   Set78to79=[Set78to79, [mean(BENZ78to79[10*k+0:10*k+9])]]
   for k=1,4 do   Set120to121=[Set120to121, [mean(TMB120to121[10*k+0:10*k+9])]]
   for k=1,4 do   Set106to107=[Set106to107, [mean(XYL106to107[10*k+0:10*k+9])]]
 for k=1,4 do   SetTTd=[SetTTd, [mean(sigTTd[10*k+0:10*k+9])]]
 for k=1,4 do   Setppd=[Setppd, [mean(sigppd[10*k+0:10*k+9])]]
 for k=1,4 do   SetUUd=[SetUUd, [mean(sigUUd[10*k+0:10*k+9])]]
 for k=1,4 do   SetUUdx=[SetUUdx, [mean(sigUUdx[10*k+0:10*k+9])]]
 SetEEd=(SetUUd+SetUUdx)/d_d
 Setttreact=(d_d*Setppd*273.15)/(SetEEd*SetTTd*2.7*1013.25)
   if(strlen(ComputerID) eq 0 ) then Setttreact=Setttreact*0.003/Setttreact ; harvard
 SetEoverN=(1e17*22400*1013.25*SetTTd*SetEEd)/(6.022E23*Setppd*273.15)
 KINSPECS[0,*]=set19
  KINSPECS[1,*]=Set37
 KINSPECS[2,*]=Set19at59
 KINSPECS[3,*]=Set37at59
 KINSPECS[4,*]=Set37to19
 KINSPECS[5,*]=Set32to19
 KINSPECS[6,*]=Set78to79
KINSPECS[7,*]=Set120to121
KINSPECS[8,*]=Set106to107
 KINSPECS[9,*]=SetTTd
 KINSPECS[10,*]=Setppd
 KINSPECS[11,*]=SetUUd
 KINSPECS[12,*]=SetUUdx
 KINSPECS[13,*]=SetEEd
 KINSPECS[14,*]=Setttreact
 KINSPECS[15,*]=SetEoverN
 
 print,''
 print, set19
 print, Set37
 print, Set19at59
 print, Set37at59
 print,''
 print, Set37to19
 print,''
 print, Set32to19
 print, Set78to79
print, Set120to121 
print, Set106to107
print,''
 print, SetTTd
 print, Setppd
 print, SetUUd
 print, SetUUdx
 print, SetEEd
 print, Setttreact
 print, SetEoverN
 names=['sig19','sig37','sig19TR','sig37TR','R37/17TR',    'R32/19TR','R78/79TR','R120/121TR','R106/107TR','Tdrift',    'pdrift','Udrift','Udx','Efield','treact',    'EoverN','','','','', $
        'nS_33','nS_42','nS_45','nS_59','nS_87',    'nS_69','nS_41','nS_71','nS_73','nS_79',    'nS_107','nS_121','nS_137','nS_81','nS_133',    'nS_181','nS_223','nS_207','nS_297','nS_281',    'nS_371','nS_355',$
        'n59S_33','n59S_42','n59S_45','n59S_59','n59S_87',    'n59S_69','n59S_41','n59S_71','n59S_73','n59S_79',    'n59S_107','n59S_121','n59S_137','n59S_81','n59S_133',    'n59S_181','n59S_223','n59S_207','n59S_297','n59S_281',    'n59S_371','n59S_355',$
        'rawS_33','rawS_42','rawS_45','rawS_59','rawS_87',    'rawS_69','rawS_41','rawS_71','rawS_73','rawS_79',    'rawS_107','rawS_121','rawS_137','rawS_81','rawS_133',    'rawS_181','rawS_223','rawS_207','rawS_297','rawS_281',    'rawS_371','rawS_355']
       dataAA=[KINSPECS, ncpsPERppbTR, ncpsPERppbTR59,cpsPERppbRAW]
       
       dataAA=[transpose(names),transpose(string(dataAA))]
 makecsv, path2+'SENS '+PTRid+'_'+Datumzeit+'.csv',dataAA
 
 
 WINDOW, 4, xsize=1150,ysize=700
    !P.MULTI = [0,1,3] 
    !Y.MARGIN = [3,1]
    !x.oMARGIN = [8,8]
    DEVICE, DECOMPOSED = 0 
    loadct,5
    
    plot,reltime,TotSIG,xstyle=1,yrange=[0,1.1*max([I19+I37,TotSIG])],ystyle=1,color=0,ytitle="raw signal [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
    oplot, reltime,smooth( I19+I37,5),thick =2, color=185
 
    xyouts,0.4,0.920,/normal,'Autodetection of            and            of injections', color=0 
    xyouts,0.5,0.920,/normal,'START', color=110 
    xyouts,0.58,0.920,/normal,'END', color=175 
    xyouts,0.11,0.887,/normal,'Primary ions: I19+I37', color=178, charthick =2, charsize=1.5
    xyouts,0.11,0.860,/normal,'Product ions: sum of compounds in standard', color=0, charthick =2, charsize=1.5
    for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max([I19+I37,TotSIG]),1e14], color=110
    for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max([I19+I37,TotSIG]),1e14], color=175
    loadct,6
    faktor3=max(TotSIG,/nan)/max(data,/nan)
    oplot,reltime,data*faktor3,color=126
   ; oplot,reltime,data,color=126,thick =1.5
    xyouts,0.11,0.833,/normal,'Single compound: '+Datastr+' (x '+strtrim(string(faktor3,format='(F10.1)'),2)+')', color=105, charthick =2, charsize=1.5
 
    loadct,5
    tr19=tr(19,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
    tr37=tr(37,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
    tr32=tr(32,bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
    plot,reltime, smooth(primTR+TotSIGTR,5),yrange=[0,max(primTR+TotSIGTR)],xstyle=1,ystyle=1,color=0,ytitle="(transmission) corrected signal [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
    oplot,reltime, smooth(primTR+TotSIGTR,5),thick =2,color=126
     for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max(primTR+TotSIGTR),1e14], color=110
    for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max(primTR+TotSIGTR),1e14], color=175
   oplot, reltime, smooth(TotSIGTR,5),thick =2, color=0
     oplot, reltime,smooth( I19,5)/tr19,thick =2, color=35
    oplot, reltime, smooth(I37,5)/tr37,thick =2, color=50
    oplot, reltime, smooth(I32,5)/tr32*10,thick =2, color=109
  
    xyouts,0.11,0.60,/normal,'Total signal:Primary+product ions', color=126, charthick =2, charsize=1.5
   xyouts,0.11,0.57,/normal,'Product ions', color=0, charthick =2, charsize=1.5
     xyouts,0.11,0.54,/normal,'I19', color=35, charthick =2, charsize=1.5
    xyouts,0.11,0.51,/normal,'I37', color=50, charthick =2, charsize=1.5
    xyouts,0.11,0.48,/normal,'I32 (x10)', color=109, charthick =2, charsize=1.5
 
  mmmax=max([smooth( (I37*tr19)/(I19*tr37),5),smooth( (I32*tr19)/(I19*tr32),5)])
    plot,reltime, smooth( (I37*tr19)/(I19*tr37),5),yrange=[0,mmmax],xstyle=1,ystyle=1,color=0,ytitle="ion ratios",xtitle="relative time in minutes",background=-1,charsize=2, thick =1.5;, charthick=2
     for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0.9*max(smooth( (I37*tr19)/(I19*tr37),5)),1e14], color=110
    for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimesEND[i],[0.9*max(smooth( (I37*tr19)/(I19*tr37),5)),1e14], color=175

   oplot,reltime, smooth( (I32*tr19)/(I19*tr32),5),color=109, thick =1.5;, charthick=2
 xyouts,0.11,0.25,/normal,'I37 / I19 (transmission corrected)', color=0, charthick =2, charsize=1.5
    xyouts,0.11,0.22,/normal,'I32 / I19 (transmission corrected)', color=109, charthick =2, charsize=1.5
 
  xyouts,0.97,0.9,/normal,orientation=-90,PTRid+'  '+Datumzeit, color=0, charthick =3, charsize=2

ErrCode=0
CATCH, Error_status 
IF Error_status NE 0 THEN BEGIN 
      ErrCode=1 
      if(ErrCode eq 1) then begin
              PRINT, 'Error index: ', Error_status 
              PRINT, 'Error message: ', !ERROR_STATE.MSG 
              PRINT, 'WRITE_JPG not possible (disabled) :-((('
              CATCH, /CANCEL 
      endif
ENDIF 
if (ErrCode eq 0) then  write_jpeg, path2+'SEQ '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
 
 
 
 
 
 
  
WINDOW, 5, xsize=1150,ysize=500
 !P.MULTI = [0,2,1] 
 DEVICE, DECOMPOSED = 0 
 
 
 ;plot transe
 loadct,5
 
 plot, indgen(399)+1, tr(indgen(399)+1,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm),color=0,ytitle="transmission",xtitle="m/z",background=-1,charsize=2, thick =2, charthick=2
  
 loadct,13
 
   oplot,indgen(399)+1,(indgen(399)+1)^bestEX/(59)^bestEX
 oplot,indgen(399)+1,tr(indgen(399)+1, bestEX,MASSlow,WIDTHlow,MASShigh,WIDTHhigh)/(indgen(399)+1)^bestEX,color=60



mmm=[33,42,45,59,69,71,73,79,107,121,137,133,181,223,297,371]
tansen=tr(mmm,bestEX, MASSlow,WIDTHlow,MASShigh,WIDTHhigh,/norm)
sense=sensitivities[[0,1,2,3,5,7,8,9,10,11,12,14,15,17,19,21]]
senseCALC=[sensitivitiesCALC[0],sensitivitiesCALC[1],sensitivitiesCALC[2],sensitivitiesCALC[3],total(sensitivitiesCALC[4:6]),$
           sensitivitiesCALC[7],sensitivitiesCALC[8],sensitivitiesCALC[9],sensitivitiesCALC[10],sensitivitiesCALC[11],$
           total(sensitivitiesCALC[12:13]),sensitivitiesCALC[14],sensitivitiesCALC[15],total(sensitivitiesCALC[16:17]),$
           total(sensitivitiesCALC[18:19]),total(sensitivitiesCALC[20:21])]



For i=0,15  do oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=60
i=1 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
i=3 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
i=9 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
i=11 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=160
i=14 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
i=15 & oplot, [mmm[i],mmm[i]], [0, tansen[i]*senseCALC[i]/sense[i]], thick=3, color=-1
loadct,5
 
 xyouts,0.52,0.92,/normal,PTRid+'  '+Datumzeit, color=0, charthick =3, charsize=2
 xyouts,0.55,0.81,/normal,'Transmission parameters:  ', color=0, charthick =2, charsize=2
xyouts,0.55,0.73,/norm,'ex: '+strtrim(string(bestEX,Format='(F8.2)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.65,/norm,'mLOW: '+strtrim(string(MASSlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.60,/norm,'wLOW: '+strtrim(string(WIDTHlow,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.52,/norm,'mHIGH: '+strtrim(string(MASShigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2
xyouts,0.55,0.47,/norm,'wHIGH: '+strtrim(string(WIDTHhigh,Format='(F8.1)'),2), color=0,charsize=2, charthick=2

 ID=8
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;    Dynamic mixing
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 if (max(d(injectLONG)) gt 000.5) then begin
CompCUBlong=dblarr(max(d(injectLONG)),max(d(compounds)),200) ; 12 injections, 23 ions, 15 cycles
for i=0,max(d(timsLONG))-1 do CompCUBlong[i,*,*]=CompARR[*,indgen(200)-5+timsLONG[i]]
 

CompCUBTR=dblarr(max(d(injectLONG)),10,200) ; 12 injections, 23 ions, 15 cycles
for i=0,max(d(timsLONG))-1 do CompCUBTR[i,0,*]=TotSigTR[indgen(200)-5+timsLONG[i]]
for i=0,max(d(timsLONG))-1 do CompCUBTR[i,1,*]=PrimTR[indgen(200)-5+timsLONG[i]]

 ;quality
PULS=fltarr(max(d(timsLONG)))
ZERO=fltarr(max(d(timsLONG)))
PULStr=fltarr(max(d(timsLONG)))
ZEROtr=fltarr(max(d(timsLONG)))

 for i=0,max(d(timsLONG))-1 do begin
sigPULS=0
 sigPULStr=0
 strtPULS=-1
 endPULS=-1
 
 sigZERO=0
 sigZEROtr=0
 strtZERO=-1
 endZERO=-1
 
 for j=0,100 do begin
 if( CompCUBlong[i,22,j] gt max(CompCUBlong[i,22,0:100])*0.9) then begin
    if(strtPULS eq -1) then strtPULS=j
    if(endPULS eq -1) then begin 
            sigPULS=sigPULS+CompCUBlong[i,22,j]+CompCUBlong[i,26,j]
            sigPULStr=sigPULStr+CompCUBTR[i,0,j]+CompCUBTR[i,1,j]
    endif
 endif else if(strtPULS ne -1) then if(endPULS eq -1) then endPULS=j
 
 if (endPULS ne -1 and CompCUBlong[i,22,j] lt max(CompCUBlong[i,22,0:100])*0.05) then begin
    if(strtZERO eq -1) then strtZERO=j
    if(strtZERO gt 1 and endZERO eq -1) then if(j-strtZERO ge (endPULS-strtPULS)) then begin
    endZERO=j
  endif
    if(endZERO eq -1) then begin 
            sigZERO=sigZERO+CompCUBlong[i,22,j]+CompCUBlong[i,26,j]
            sigZEROtr=sigZEROtr+CompCUBTR[i,0,j]+CompCUBTR[i,1,j]
    endif
 endif else if(strtZERO ne -1) then if(endZERO eq -1) then endZERO=j

endfor

PULS[i]=sigPULS/(endPULS-strtPULS)
PULStr[i]=sigPULStr/(endPULS-strtPULS)
ZERO[i]=sigZERO/(endZERO-strtZERO)
ZEROtr[i]=sigZEROtr/(endZERO-strtZERO)
endfor 


 loadct,5
 
 smoo=0
 ; plot,reltime[0:199],smooth(CompCUBlong[0,22,*]+CompCUBlong[0,26,*],smoo),xstyle=1,xrange=[0,1],yrange=[0,max([CompCUBlong[*,22,*]+CompCUBlong[*,26,*],CompCUBTR[*,0,*]+CompCUBTR[*,1,*]])],ystyle=1,color=0,ytitle="intensity [cps]",xtitle="relative time in minutes",background=-1,charsize=2, thick =2, charthick=2
  
 loadct,13
 cols=[0,25,45,75,110,140,160,190,220,240,254]
 for i=0,max(d(injectLONG))-1 do begin
 
 
  
 sigPULS=0
 sigPULStr=0
 strtPULS=-1
 endPULS=-1
 
 sigZERO=0
 sigZEROtr=0
 strtZERO=-1
 endZERO=-1
 
 for j=0,100 do begin
 if( CompCUBlong[i,22,j] gt max(CompCUBlong[i,22,0:100])*0.9) then begin
    if(strtPULS eq -1) then strtPULS=j
    if(endPULS eq -1) then begin 
            sigPULS=sigPULS+CompCUBlong[i,22,j]+CompCUBlong[i,26,j]
            sigPULStr=sigPULStr+CompCUBTR[i,0,j]+CompCUBTR[i,1,j]
    endif
 endif else if(strtPULS ne -1) then if(endPULS eq -1) then endPULS=j
 
 if (endPULS ne -1 and CompCUBlong[i,22,j] lt max(CompCUBlong[i,22,0:100])*0.05) then begin
    if(strtZERO eq -1) then strtZERO=j
    if(strtZERO gt 1 and endZERO eq -1) then if(j-strtZERO ge (endPULS-strtPULS)) then begin
    endZERO=j
  endif
    if(endZERO eq -1) then begin 
            sigZERO=sigZERO+CompCUBlong[i,22,j]+CompCUBlong[i,26,j]
            sigZEROtr=sigZEROtr+CompCUBTR[i,0,j]+CompCUBTR[i,1,j]
    endif
 endif else if(strtZERO ne -1) then if(endZERO eq -1) then endZERO=j

endfor

sigPULS=sigPULS/(endPULS-strtPULS)
sigPULStr=sigPULStr/(endPULS-strtPULS)
sigZERO=sigZERO/(endZERO-strtZERO)
sigZEROtr=sigZEROtr/(endZERO-strtZERO)
 
 
 
 
 
; oplot,reltime[0:199],smooth(CompCUBlong[i,26,*],smoo),color=cols[i+1] , thick =2

 ;oplot,reltime[0:199],smooth(CompCUBlong[i,22,*],smoo),color=cols[i+1] , thick =3
 ;oplot,reltime[0:199],smooth(CompCUBlong[i,25,*],smoo),color=cols[i+1] , thick =1
 ;oplot,reltime[0:199],smooth(CompCUBlong[i,22,*]+CompCUBlong[i,26,*],smoo),color=-1, thick =4
;oplot, [reltime[strtPULS],reltime[endPULS]],[1,1]*sigPULS,color=220, thick =4
;oplot, [reltime[strtZERO],reltime[endZERO]],[1,1]*sigZERO,color=220, thick =4
; oplot,reltime[0:199],smooth(CompCUBTR[i,0,*]+CompCUBTR[i,1,*],smoo),color=160, thick =4
;oplot, [reltime[strtPULS],reltime[endPULS]],[1,1]*sigPULStr,color=130, thick =4
;oplot, [reltime[strtZERO],reltime[endZERO]],[1,1]*sigZEROtr,color=130, thick =4
 

 
 endfor
  ;xyouts,0.75,0.50,/normal,'prim +prod RAW', color=-1, charthick =2, charsize=1.5
 ; xyouts,0.75,0.47,/normal,'prim +prod TR', color=160, charthick =2, charsize=1.5
 
 
;  plot,smooth(CompCUBlong[0,ID,*],smoo),smooth(CompCUBlong[0,ID+31,*],smoo),xstyle=1,psym=4,xrange=[1,max(CompCUBlong[*,ID,*])],yrange=[1,max(CompCUBlong[*,ID+31,*])],ystyle=1,color=0,ytitle="isotope signal [cps]",xtitle="parent signal [cps]",background=-1,charsize=2, thick =2, charthick=2
; oplot, [1,10000000],[1,10000000],color=0
 loadct,13
 cols=[0,25,45,75,110,140,160,190,220,240,254]
 for i=0,max(d(injectLONG))-1 do begin

; oplot,smooth(CompCUBlong[i,ID,*],smoo),smooth(CompCUBlong[i,ID+31,*],smoo),color=cols[i+1] ,psym=4, thick =2
 endfor
 ;oplot, [1,10000000],[1,16000000],color=0, thick=2
  ;xyouts,0.65,0.90,/normal,compounds[ID], color=1, charthick =2, charsize=1.5
 
 endif



ErrCode=0
CATCH, Error_status 
IF Error_status NE 0 THEN BEGIN 
      ErrCode=1 
      if(ErrCode eq 1) then begin
              PRINT, 'Error index: ', Error_status 
              PRINT, 'Error message: ', !ERROR_STATE.MSG 
              PRINT, 'WRITE_JPG not possible (disabled) :-((('
              CATCH, /CANCEL 
      endif
ENDIF 
if (ErrCode eq 0) then   write_jpeg, path2+'TRANS '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
 WDELETE, 5
 
 
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;   Fast injections
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
  
    
    WINDOW, 6, xsize=1350,ysize=700
    !P.MULTI = [0,8,3] 
    ;  !x.oMARGIN=[]
    !Y.MARGIN = [3,1]
    !x.MARGIN = [3,1]
    DEVICE, DECOMPOSED = 0 
    loadct,5
    for j=0,21 do begin
            yrange=range(compCUB[*,j,*])
            cols=[intarr(10)+110,intarr(10)+50,intarr(10)+70,intarr(10)+175,intarr(10)+160,$
                0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            if(j gt 15.5) then titti="time in seconds" else titti=''  
            if( j eq 0 or j eq 8 or j eq 16) then ytitti='cps' else   ytitti=''
            plot,timestep*(indgen(15*step)-5*step),compCUB[0,j,*],xstyle=1,ystyle=1,yrange=yrange,color=0,xtitle=titti,ytitle=ytitti,background=-1,charsize=2, thick =1;, charthick=2
            cnts=0
            for i=0,max(d(timsSHORT))-1 do begin
                    oplot,timestep*(indgen(15*step)-5*step),compCUB[i,j,*], color=cols[i], thick=1
                    cnts=[cnts, counts[i,j]-countsBG[i,j]]
            endfor
            cnts=cnts[1:*]
            set=[mean(cnts[0:9]),100*stddev(cnts[0:9])/mean(cnts[0:9])]
            for k=1,4 do set=[set, [mean(cnts[10*k+0:10*k+9]),100*stddev(cnts[10*k+0:10*k+9])/mean(cnts[10*k+0:10*k+9])]]
            ;print,[ mean(set[[0,2,4,6,8]]),mean(set[[1,3,5,7,9]]),  stddev(set[[1,3,5,7,9]])]
            xyouts,-2,max(yrange)*0.9,compounds[j],color=0,charsize=1.5,charthick=1.5
            xyouts,-2,max(yrange)*0.8,string(VMRppm[j]*1000*dil,format='(F5.1)'),color=0,charsize=1.5,charthick=1.5
            xyouts,2,max(yrange)*0.8,string(set[1],format='(F4.1)')+'%',color=110,charthick=1.2
            xyouts,2,max(yrange)*0.7,string(set[3],format='(F4.1)')+'%',color=50,charthick=1.2
            xyouts,2,max(yrange)*0.6,string(set[5],format='(F4.1)')+'%',color=70,charthick=1.2
            xyouts,2,max(yrange)*0.5,string(set[7],format='(F4.1)')+'%',color=175,charthick=1.2
            xyouts,2,max(yrange)*0.4,string(set[9],format='(F4.1)')+'%',color=160,charthick=1.2
    endfor
xyouts,0.85,0.21,/normal,PTRid,color=1,charsize=1.5,charthick=2
datum=strmid(datumzeit,0,strpos(datumzeit,'-'))
xyouts,0.85,0.18,/normal,Datum,color=1,charsize=1.5,charthick=2
Zeit=strmid(datumzeit,1+strpos(datumzeit,'-'),1000)
xyouts,0.85,0.15,/normal,Zeit,color=1,charsize=1.5,charthick=2
 xyouts,0.76,0.25,/normal,'N2 dry', color=110,charsize=1.5,charthick=1.5
xyouts,0.76,0.225,/normal,'air dry', color=50,charsize=1.5,charthick=1.5
xyouts,0.76,0.20,/normal,'air wet', color=70,charsize=1.5,charthick=1.5
xyouts,0.76,0.175,/normal,'N2 wet', color=175,charsize=1.5,charthick=1.5
xyouts,0.76,0.15,/normal,'N2 dry', color=160,charsize=1.5,charthick=1.5
 
 
 ErrCode=0
CATCH, Error_status 
IF Error_status NE 0 THEN BEGIN 
      ErrCode=1 
      if(ErrCode eq 1) then begin
              PRINT, 'Error index: ', Error_status 
              PRINT, 'Error message: ', !ERROR_STATE.MSG 
              PRINT, 'WRITE_JPG not possible (disabled) :-((('
              CATCH, /CANCEL 
      endif
ENDIF 
if (ErrCode eq 0) then  write_jpeg, path2+'INJ '+PTRid+'_'+Datumzeit+'.jpg',tvrd(0,true=1), true=1
 WDELETE, 6
  ;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;; Xr
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
resultis=[0,0,0]
 print, '           XR   |     stdev XR'

XRdata=fltarr(22,2)


oldold=1 ; old version based on Truman's work
if (oldold eq 1) then begin
 for j=0,22 do begin  
      XRall=0
      for p=0,9 do begin
              XR=0
              for k=0,50 do begin 
                      counter=0
                      classs=0
                      if (k eq 0) then XR=0.0
                      if (k eq 1) then XR=0.01
                      if (k gt 1.5) then begin
                              if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then XR=XRpre+(XRpre-XRprepre)*slopeprepre/(slopeprepre-slopepre)
                              if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then begin 
                                      XR=XRprepre+(XRpre-XRprepre)/2
                                      class=1
                              endif
                              if(classs eq 1) then counter=counter+1
                              if(counter eq 1 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then increment=-0.1 else increment=0.1 
                              if(counter gt 1.5 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then increment=increment *(-0.1) 
                              if(counter gt 0.5) then  XR=XRpre+increment
                      endif
                      NCs=0
                      CRs=0
                      for i=0,4 do begin  
  
                              m19=countsBGTR[p+10*i,28]
                              m37=countsBGTR[p+10*i,29]
                              cntss=countsTR[p+10*i,j]
                        if(j eq 4) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
                       if(j eq 5) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
                       if(j eq 6) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
                       if(j eq 12) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
                       if(j eq 13) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
                      if(j eq 16) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
                       if(j eq 17) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
                    if(j eq 18) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
                       if(j eq 19) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
                    if(j eq 20) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
                       if(j eq 21) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
                           
                              NCs=[NCs,cntss/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
                              CRs=[CRs,100*m37/(m19+m37)]
                      endfor
                      CRs=CRs[1:*]
                      NCs=NCs[1:*]
                      CRs=CRs[[0,3,4]];only N2
                      NCs=NCs[[0,3,4]];only N2
                      
                      fitp=linfit(CRs,NCs)
                      if (k eq 0) then begin 
                              slopePre=fitp[1]
                              XRpre=XR
                      endif
                      XRprepre=XRpre
                      XRpre=XR
                      slopePrepre=slopePre
                      slopePre=fitp[1]
             endfor
             XRall=[XRall,XR]
             
     endfor   
     XRall=XRall[1:*]
     print,[compounds[j], string([mean(XRall),stddev(XRall)],format='(F12.2)')]
     if(j lt 21.5) then XRdata[j,*]=[mean(XRall),stddev(XRall)]
  endfor
endif  

if (oldold eq 0) then begin

  for j=0,22 do begin  
            pN2_1=0
            pN2_2=0
            pAIR=0
            pN2_AIR=0
            pAIR_N2_1=0
            pAIR_N2_2=0
            XRall=0
  
       for xxx=0,100 do begin
            XR=-1.5+float(xxx)/10.0
            NCsall=[0,0,0,0,0]
            for p=0,9 do begin
                    NCs=0
                    for i=0,4 do begin  
                            m19=countsBGTR[p+10*i,28]
                            m37=countsBGTR[p+10*i,29]
                            cntss=countsTR[p+10*i,j]
                            if(j eq 4 or j eq 5 or j eq 6) then    cntss=countsTR[p+10*i,4]+countsTR[p+10*i,5]+countsTR[p+10*i,6]
                            if(j eq 12 or j eq 13) then    cntss=countsTR[p+10*i,12]+countsTR[p+10*i,13]
                            if(j eq 16 or j eq 17) then    cntss=countsTR[p+10*i,16]+countsTR[p+10*i,17]
                            if(j eq 18 or j eq 19) then    cntss=countsTR[p+10*i,18]+countsTR[p+10*i,19]
                            if(j eq 20 or j eq 21) then    cntss=countsTR[p+10*i,20]+countsTR[p+10*i,21]
                            NCs=[NCs,cntss/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
                    endfor
                    NCs=NCs[1:*]
                    NCsall=[[NCsall],[NCs]]
            endfor  
            NCsall= NCsall[*,1:*] 
            
            pvalue=TM_test(NCsall[0,*],NCsall[3,*])
            pN2_1=[pN2_1, pvalue[1]]
            pvalue=TM_test(NCsall[4,*],NCsall[3,*])
            pN2_2=[pN2_2, pvalue[1]]
            pvalue=TM_test(NCsall[1,*],NCsall[3,*])
            pN2_AIR=[pN2_AIR, pvalue[1]]
            
            
            pvalue=TM_test(NCsall[1,*],NCsall[2,*])
            pAIR=[pAIR, pvalue[1]]
            pvalue=TM_test(NCsall[0,*],NCsall[2,*])
            pAIR_N2_1=[pAIR_N2_1, pvalue[1]]
            pvalue=TM_test(NCsall[4,*],NCsall[2,*])
            pAIR_N2_2=[pAIR_N2_2, pvalue[1]]
            XRall=[XRall,XR]
       endfor     
       pN2_1=pN2_1[1:*]
       pN2_2=pN2_2[1:*]
       pN2_AIR=pN2_AIR[1:*]
       pAIR=pAIR[1:*]
       pAIR_N2_1=pAIR_N2_1[1:*]
       pAIR_N2_2=pAIR_N2_2[1:*]
       
       
       XRall=XRall[1:*]
       !P.MULTI = [0,1,1] 
       WINDOW, 4, xsize=750,ysize=500
       
        loadct,5
      
       plot, XRall,pN2_1,color=0,background=-1,  yrange=[0,1]
       oplot,XRall, pN2_1, color=40, thick=1
       oplot,XRall, pN2_AIR, color=20, thick=1
       oplot,XRall, pAIR_N2_1, color=109, thick=1
       oplot,XRall, pAIR_N2_2, color=150, thick=1
       oplot,XRall, pN2_2, color=50, thick=3
       oplot,XRall, pAIR, color=111, thick=1
    
       xyouts, 0,0.9, compounds[j],color=0, charthick=2
       resultis=[[resultis],[XRall[where(pN2_2 eq max(pN2_2))],XRall[where(pN2_1 eq max(pN2_1))], XRall[where(pAIR eq max(pAIR))]]]
       
       print, 'haha'               
  endfor
print, resultis

print, 'haha'
endif






  
  
mames=(['rangeClusterRatio','tr_mLOW','tr_wLOW','tr_mHIGH','tr_wHIGH',compounds[0:21]])
     dataAA=([transpose([min(Set37to19[[0,3,4]]),max(Set37to19[[0,3,4]])]),transpose([masslow,0]),transpose([widthlow,0]),transpose([masshigh,0]),transpose([widthhigh,0]),[XRdata]])
       
       dataAA=[transpose(mames),transpose(string(dataAA))]
 makecsv, path2+'XRdat '+PTRid+'_'+Datumzeit+'.csv',dataAA
 


 print, 'end'
   return, create_struct('Fptr', [1,1,1], 'S_nam', ['time', compounds[0:21]], 'S_val',S_set[0:22], 'Serr_val',Serr_set[0:22])
end


function ActrisProtocol_old, path,ProtData,masses, ProtEngData , engnames
    
    Path2=path+'STD_PROT/'
    mmist=file_info(path2)
    if (mmist.directory eq 0) then begin 
            FILE_MKDIR, path2
            FILE_MKDIR, path2+'transmission'
            FILE_MKDIR, path2+'PTR_Flow'
            FILE_MKDIR, path2+'Humidity Factor'
            FILE_MKDIR, path2+'Sensitivity'
            FILE_MKDIR, path2+'H2Oleak'
            FILE_MKDIR, path2+'EoverN ret'
            FILE_MKDIR, path2+'ClusterRatio ret'
            FILE_MKDIR, path2+'O2plus_Fraction'
    endif
    starttim=min(ProtEngData[*,0])
    reltime=(ProtEngData[*,0]-min(ProtEngData[*,0]))*24*60

    I21=ProtData[where(abs(masses-21.022) eq min(abs(masses-21.022)) ),*]
    I37=ProtData[where(abs(masses-37.033) eq min(abs(masses-37.033)) ),*]
    I38=ProtData[where(abs(masses-38.025) eq min(abs(masses-38.025)) ),*]
    I39=ProtData[where(abs(masses-39.033) eq min(abs(masses-39.033)) ),*]
    I34=ProtData[where(abs(masses-33.994) eq min(abs(masses-33.994)) ),*]
    ;Prim=I21*500+I39*250
    Prim=reform(I21*487+I37)
    I19=I21*487
    F37=I38*1350/prim
    F32=I34*242/prim
    
   Pdrift=ProtEngData[*,where(strpos(engnames,'p-Drift') gt -0.5)] & Pdrift=Pdrift[*,0]
   H2Oscc=ProtEngData[*,where(strpos(engnames,'H2O scc') gt -0.5)] & H2Oscc=H2Oscc[*,0]
   Udrift=ProtEngData[*,where(strpos(engnames,'Udrift') gt -0.5)] & Udrift=Udrift[*,0]
   FCinlet=ProtEngData[*,where(strpos(engnames,'FCinlet') gt -0.5)] & FCinlet=FCinlet[*,0]
   Tdrift=ProtEngData[*,where(strpos(engnames,'T-Drift') gt -0.5)] & Tdrift=Tdrift[*,0]
   
   Valve1=ProtEngData[*,where(strpos(engnames,'Valve1') gt -0.5)] & Valve1=Valve1[*,0]
   Valve2=ProtEngData[*,where(strpos(engnames,'Valve2') gt -0.5)] & Valve2=Valve2[*,0]
   FC1=ProtEngData[*,where(strpos(engnames,'FC1') gt -0.5)] & FC1=FC1[*,0]
   PC=ProtEngData[*,where(strpos(engnames,'PC mba') gt -0.5)] & PC=PC[*,0]
  D5_355=ProtData[where(abs(masses-355.07) eq min(abs(masses-355.07)) ),*]*1.67


normD5=D5_355/prim
sinl= where(normD5 gt 0.001)
tims=sinl[0]
for i=1,max(d(sinl))-1 do  begin if(sinl[i-1]+1 eq sinl[i]) then begin
                if(normD5[sinl[i]] gt normD5[sinl[i-1]]) then tims[where(tims eq max(tims))]=sinl[i]
                endif else tims=[tims,sinl[i]]
                
 endfor              
 injectiontimes=reltime[tims]                


    D5_355=ProtData[where(abs(masses-355.07) eq min(abs(masses-355.07)) ),*]*1.67
    D5_371=ProtData[where(abs(masses-371.102) eq min(abs(masses-371.102)) ),*]*1.69
    D4_297=ProtData[where(abs(masses-297.083) eq min(abs(masses-297.083)) ),*]*1.52
    D4_281=ProtData[where(abs(masses-281.052) eq min(abs(masses-281.052)) ),*]*1.51
    D3_223=ProtData[where(abs(masses-223.064) eq min(abs(masses-223.064)) ),*]*1.37
    D3_207=ProtData[where(abs(masses-207.033) eq min(abs(masses-207.033)) ),*]*1.36
    benzCl3_181=ProtData[where(abs(masses-180.938) eq min(abs(masses-180.938)) ),*]*2.48
    benzF3_133=ProtData[where(abs(masses-133.026) eq min(abs(masses-133.026)) ),*]*1.07
    Pin_137=ProtData[where(abs(masses-137.132) eq min(abs(masses-137.132)) ),*]*1.12
    Pin_81=ProtData[where(abs(masses-81.07) eq min(abs(masses-81.07)) ),*]*1.07
    TMB_121=ProtData[where(abs(masses-121.101) eq min(abs(masses-121.101)) ),*]*1.10
    XYL_107=ProtData[where(abs(masses-107.086) eq min(abs(masses-107.086)) ),*]*1.09
    BEN_79=ProtData[where(abs(masses-79.054) eq min(abs(masses-79.054)) ),*]*1.07
    MEK_73=ProtData[where(abs(masses-73.065) eq min(abs(masses-73.065)) ),*]*1.05
    MVK_71=ProtData[where(abs(masses-71.049) eq min(abs(masses-71.049)) ),*]*1.05
    MBO_87=ProtData[where(abs(masses-87.080) eq min(abs(masses-87.080)) ),*]*1.06
    MBO_69=ProtData[where(abs(masses-69.070) eq min(abs(masses-69.070)) ),*]*1.06
    MBO_41=ProtData[where(abs(masses-41.039) eq min(abs(masses-41.039)) ),*]*1.03
    ACE_59=ProtData[where(abs(masses-59.049) eq min(abs(masses-59.049)) ),*]*1.03
    ACETAL_45=ProtData[where(abs(masses-45.033) eq min(abs(masses-45.033)) ),*]*1.02
    CH3CN_42=ProtData[where(abs(masses-42.034) eq min(abs(masses-42.034)) ),*]*1.02
    METH_33=ProtData[where(abs(masses-33.033) eq min(abs(masses-33.033)) ),*]*1.01
 isotopecor=[1.01,1.02,1.02,1.03,1.06,1.06,1.03,1.05,1.05,1.07,1.09,1.1,$
            1.12,1.07,1.07,2.48,1.37,1.36,1.52,1.51,1.69,1.67,1,1,1,1,1,1]
 
 
  TotSIG=D5_355+D5_371+D4_297+D4_281+D3_207+benzCl3_181+benzF3_133+Pin_137+Pin_81+TMB_121+XYL_107+ $
            BEN_79+MEK_73+MVK_71+MBO_87+MBO_69+MBO_41+ACE_59+ACETAL_45+CH3CN_42;+METH_33
  TotSIGbig=D5_355+D4_281+D3_223+D3_207
   
 compounds=['METH_33','CH3CN_42','Acetal_45','Ace_59','MBO_87','MBO_69','MBO_41','MVK_71','MEK_73','Ben_79','Xyl_107','TMB_121',$
            'Pin_137','Pin_81','benzF3_133','benzCl3_181','D3_223','D3_207','D4_297','D4_281','D5_371','D5_355','TotSIGbig','FCinlet','reltime','TotSIG','prim','Tdrift','I19','I37','I39']
    CompARR=[METH_33,CH3CN_42,ACETAL_45,ACE_59,MBO_87 ,MBO_69 , MBO_41,MVK_71 ,MEK_73 ,$
            BEN_79 , XYL_107, TMB_121, Pin_137,Pin_81 ,benzF3_133 , benzCl3_181, D3_223,$
            D3_207, D4_297,D4_281 , D5_371 ,D5_355, TotSIGbig, transpose(FCinlet), transpose(reltime),TotSIG,transpose(prim) ,transpose(Tdrift),I19,I37,I39 ]
CompCUB=dblarr(12,31,15) ; 12 injections, 23 ions, 15 cycles
for i=0,max(d(tims))-1 do CompCUB[i,*,*]=CompARR[*,indgen(15)-7+tims[i]]
    
    
WINDOW, 4, xsize=1150,ysize=700
 !P.MULTI = [0,1,3] 
 DEVICE, DECOMPOSED = 0 
 loadct,5
 plot,reltime,D5_355/prim,xstyle=1,ystyle=1,color=0,ytitle="normalized intensity",xtitle="relative time in minutes",background=-1,charsize=3, thick =2;, charthick=2
 oplot, reltime, (prim/(100*mean(prim))),thick =2, color=50
  xyouts,0.4,0.93,/normal,'D5 normalized: I355/(487*I21+I37)', color=0, charthick =2, charsize=1.5
 xyouts,0.4,0.90,/normal,'primary ions: 0.01*(487*I21+I37)/mean(487*I21+I37)', color=50, charthick =2, charsize=1.5
 ; injectiontimes=[0.27,0.741,1.212,1.683,2.154,2.625,4.97,5.42,5.79,6.20,6.65,7.12]


  for i=0,max(d(tims))-1 do oplot, [1,1]*injectiontimes[i],[0,100], color=110
 
   plot,reltime,(F32)/3,yrange=[0,0.1],xstyle=1,ystyle=1,color=0,ytitle="fraction of primary signal",xtitle="relative time in minutes",background=-1,charsize=3, thick =2;, charthick=2
  oplot, reltime, (I38*1350/prim),thick =2, color=130
  oplot, reltime, (I39*242/prim),thick =2, color=160
  oplot, reltime, (F32)/3,thick =2, color=0
  oplot, reltime, I37/prim,thick =2, color=110
  xyouts,0.4,0.6,/normal,'O2+ [/3]', color=0, charthick =2, charsize=1.5
 xyouts,0.4,0.57,/normal,'H2OH3O+based on I37', color=110, charthick =2, charsize=1.5
xyouts,0.4,0.54,/normal,'H2OH3O+based on I38', color=130, charthick =2, charsize=1.5
xyouts,0.4,0.51,/normal,'H2OH3O+based on I39', color=160, charthick =2, charsize=1.5
  plot,reltime,h2oscc,yrange=[0,7],xstyle=1,ystyle=1,color=0,ytitle="engineering data",xtitle="relative time in minutes",background=-1,charsize=3, thick =2;, charthick=2
  oplot, reltime, pdrift,thick =2, color=50
  oplot, reltime, FCinlet/10,thick =2, color=100
  oplot, reltime, Udrift/100,thick =2, color=110
  oplot, reltime, valve2,thick =2, color=150
  oplot, reltime, PC/100,thick =2, color=180
 xyouts,0.15,0.24,/normal,'Udrift/100', color=110, charthick =2, charsize=1.5
  xyouts,0.21,0.195,/normal,'FC_h2o', color=0, charthick =2, charsize=1.5
  xyouts,0.3,0.17,/normal,'pdrift', color=50, charthick =2, charsize=1.5
  xyouts,0.33,0.1,/normal,'FCinlet/10', color=100, charthick =2, charsize=1.5
xyouts,0.65,0.088,/normal,'Valve2', color=150, charthick =2, charsize=1.5  
  xyouts,0.75,0.125,/normal,'PC/100', color=180, charthick =2, charsize=1.5
   
   WINDOW, 5, xsize=800,ysize=700
 !P.MULTI = [0,1,1] 
 DEVICE, DECOMPOSED = 0 
 loadct,5
   injections=fltarr(31,12)
   injectionsTotSig=fltarr(31,12)
   
   for i=0,max(d(tims))-1 do  injections[*,i]=prim[indgen(31)-15+max(where(abs(reltime-injectiontimes[i]) eq min(abs(reltime-injectiontimes[i]))))]
  for i=0,max(d(tims))-1 do  injectionsTotSig[*,i]=TotSIG[indgen(31)-15+max(where(abs(reltime-injectiontimes[i]) eq min(abs(reltime-injectiontimes[i]))))]
  totprim=total(injections,2)
 TotSIG_2=total(injectionsTotSig,2)
   
    plot,indgen(31)-15,totprim,yrange=range([totprim+TotSIG_2,totprim]),xstyle=1,ystyle=1,color=0,ytitle="Cumulative intensity of 12 injections [cps] ",xtitle="time in seconds (injection at 0)",background=-1,charsize=2, thick =2;, charthick=2
   oplot, indgen(31)-15,totprim+TotSIG_2,color=110
   oplot, indgen(31)-15,totprim+TotSIG_2,color=110, psym=4
   oplot, indgen(31)-15,totprim,color=0, psym=4
xyouts,0.2,0.9,/normal,'Primry ions', color=0, charthick =2, charsize=1.5  
  xyouts,0.2,0.87,/normal,'Primary+product ions (15 compounds)', color=110, charthick =2, charsize=1.5
 
 
 
   WINDOW, 6, xsize=800,ysize=700
 !P.MULTI = [0,1,2] 
 DEVICE, DECOMPOSED = 0 
 loadct,5
yrange=range(compCUB[6:11,9,*])
    plot,indgen(15)-7,compCUB[6,9,*],xstyle=1,ystyle=1,color=0,ytitle="Cumulative intensity of 12 injections [cps] ",xtitle="time in seconds (injection at 0)",background=-1,charsize=2, thick =2;, charthick=2
cols=[0,0,0,0,0,0, 50,70,110,130,172,182]
 for i=max(d(tims))-6,max(d(tims))-1 do oplot,indgen(15)-7,compCUB[i,9,*], color=cols[i], thick=2
 
 
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;; F_PTR
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
 counts=total(compCUB[*,*,5:9],3)
 countsBG=total(compCUB[*,*,[0,1,2,3,4,10,11,12,13,14]],3)/2
 maxgap=max((compCUB[*,24,5:11]-compCUB[*,24,4:10])*60,dimension=2)
 counts[*,23]=counts[*,23]/5 ; FCinlet
counts[*,27]=counts[*,27]/5 ;Tdrift
 primi=mean(countsBG[6:11,26])
 ; pairs=[[6,8],[6,9],[7,8],[7,9],  [6,10],[6,11],[7,10],[7,11],  [8,10],[8,11],[9,10],[9,11]]
 pairs=[[max(d(tims))-6,max(d(tims))-4],[max(d(tims))-6,max(d(tims))-3],[max(d(tims))-5,max(d(tims))-4],[max(d(tims))-5,max(d(tims))-3],$
     [max(d(tims))-6,max(d(tims))-2],[max(d(tims))-6,max(d(tims))-1],[max(d(tims))-5,max(d(tims))-2],[max(d(tims))-5,max(d(tims))-1],$
     [max(d(tims))-4,max(d(tims))-2],[max(d(tims))-4,max(d(tims))-1],[max(d(tims))-3,max(d(tims))-2],[max(d(tims))-3,max(d(tims))-1]]
  Fptr_results=[0,0,0,0,0,0,0]
  comps=''
  for j=0,22 do begin
           acc1=abs(1-(2*(counts[max(d(tims))-6,j]-countsBG[max(d(tims))-6,j])/(counts[max(d(tims))-6,j]-countsBG[max(d(tims))-6,j]+counts[max(d(tims))-5,j]-countsBG[max(d(tims))-5,j])))
           acc2=abs(1-(2*(counts[max(d(tims))-4,j]-countsBG[max(d(tims))-4,j])/(counts[max(d(tims))-4,j]-countsBG[max(d(tims))-4,j]+counts[max(d(tims))-3,j]-countsBG[max(d(tims))-3,j])))
           acc3=abs(1-(2*(counts[max(d(tims))-2,j]-countsBG[max(d(tims))-2,j])/(counts[max(d(tims))-2,j]-countsBG[max(d(tims))-2,j]+counts[max(d(tims))-1,j]-countsBG[max(d(tims))-1,j])))
           Deltas=[[acc1,acc2],[acc1,acc2],[acc1,acc2],[acc1,acc2],  [acc1,acc3],[acc1,acc3],[acc1,acc3],[acc1,acc3],  [acc2,acc3],[acc2,acc3],[acc2,acc3],[acc2,acc3]]
           FPTR=0 
           DELT=0
           printres=0
            if (printres eq 1) then begin
                    print, ''
                    print, compounds[j]
                    print, j
                    print,'NC1      f1     NC2      f2     flow   err    maxgapP1 maxgapP2'
            endif
            For i=0,11 do begin
                    pair=pairs[*,i]
                    Delta=Deltas[*,i]
                    NC1=(counts[pair[0],j]-countsBG[pair[0],j])/primi
                    NC2=(counts[pair[1],j]-countsBG[pair[1],j])/primi
                    f1=counts[pair[0],23]
                    f2=counts[pair[1],23]
                    flow=(f1*NC1-f2*NC2)/(NC2-NC1)
                    err=abs((f1*NC1-f2*NC2)/(NC1-NC2))*abs(delta[0])+abs((f2*NC1-f1*NC1)/(NC2-NC1))*abs(delta[1])
                    FPTR=[Fptr,flow]
                    DELT=[DELT,err]
                    if (printres eq 1) then print, [NC1, f1, NC2, f2, flow,err,maxgap[pair[0]],maxgap[pair[1]]]
            endfor
            FPTR=FPTR[1:*]
            DELT=DELT[1:*]
            if(where([0,4,5,6,12,13,16,18,20] eq j) lt -0.5) then begin
                    Fptr_results=[[Fptr_results],[mean(Fptr),mean(DELT), median(Fptr),median(DELT), acc1,acc2,acc3]]
                    comps=[comps,compounds[j]]
           endif
   endfor  
   Fptr_results=Fptr_results[*,1:*]
   if (printres eq 1) then print,''
   if (printres eq 1) then print,[['compound      ','F_mean           ','Err_mean      ','F_med             ','Err_med        ','%accP1         ','%accP2            ','%accP3'], [transpose(comps[1:*]),string(Fptr_results)]]
   Mini=Fptr_results[0,0:12]
   Dmini=Fptr_results[1,0:12]
   Midi=Fptr_results[2,0:12]
   Dmidi=Fptr_results[3,0:12]
   Aa1=Fptr_results[4,0:12]
   Aa2=Fptr_results[5,0:12]
   Aa3=Fptr_results[6,0:12]
   for i=0,2 do begin
          Mini=Mini[where(mini ne min(mini) and mini ne max(mini))]
          DMini=DMini[where(Dmini ne min(Dmini) and Dmini ne max(Dmini))]
          Midi=Midi[where(midi ne min(midi) and mini ne max(midi))]
          DMidi=DMidi[where(Dmidi ne min(Dmidi) and Dmini ne max(Dmidi))]
          Aa1=Aa1[where(Aa1 ne min(Aa1) and Aa1 ne max(Aa1))]
          Aa2=Aa2[where(Aa2 ne min(Aa2) and Aa2 ne max(Aa2))]
          Aa3=Aa3[where(Aa3 ne min(Aa3) and Aa3 ne max(Aa3))]
   endfor
   if(stddev(Midi) lt stddev(mini)) then Fptr=mean(midi) else Fptr=mean(mini)
   if(stddev(Midi) lt stddev(mini)) then Fptr_stdev=stddev(midi) else Fptr_stdev=stddev(mini)
   Print, '' 
   Print, 'Actris Gas Standard Injection Processing' 
   Print, 'F_BIG_mea| CalcErr|  F_BIG_med| CalcErr|  Fptr| stdev| %_stdev| CalcErr_Mea| CalcErr_Med| %_peaks1 | %_peaks2 | %_peaks3' 
   print,[string(Fptr_results[0:3,13],format='(F8.2)'),string(Fptr,format='(F8.2)'),string(Fptr_stdev,format='(F8.2)'), $
      string(100*Fptr_stdev/Fptr,format='(F8.1)')+'%',string(mean(Dmini),format='(F8.2)'),string(mean(Dmidi),format='(F8.2)'),$
      string( (100*mean(Aa1)),format='(F8.1)')+'%', string((100*mean(Aa2)),format='(F8.1)')+'%', string((100*mean(Aa3)),format='(F8.1)')+'%']  


 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;; S
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   Cylinder: CC502781
;Cylinder Test Date: 02/14
;Valve: Ceodeux 14/686691 SS CGA350
;Cylinder Pressure: 2000 psi @ 22 °C
;Analysis Date: April 12, 2016
;Multi-component calibration mix
;Compound CAS# Concentration (ppb) Uncertainty
;
;Acetaldehyde 75-07-0         1111 ±5%
;Methanol 67-56-1        1011 ±5%
;Acetone 67-64-1 967 ±5%
;Acetonitrile 75-05-8 1010 ±5%
;Methyl Vinyl Ketone 78-94-4 937 ±5%
;Methyl Ethyl Ketone 78-93-3 1017 ±5%
;2-Methyl-3-Buten-2-ol 115-18-4 998 ±5%
;Benzene 71-43-2 1006 ±5%
;1,2,3-Trifluorobenzene 367-23-7 1032 ±5%
;Hexamethylcyclotrisiloxane (D3) 541-05-9 992 ±5%
;m-Xylene 108-38-3 983 ±5%
;alpha-Pinene 80-56-8 983 ±5%
;Octamethylcyclotetrasiloxane (D4) 556-67-2 995 ±5%
;1,3,5-Trimethylbenzene 108-67-8 989 ±5%
;Decamethylcyclopentasiloxane (D5) 541-02-6 995 ±5%
;1,2,4-Trichlorobenzene 120-82-1 995 ±5% 
 compounds=['METH_33','CH3CN_42','Acetal_45','Ace_59','MBO_87','MBO_69','MBO_41','MVK_71','MEK_73','Ben_79','Xyl_107','TMB_121',$
            'Pin_137','Pin_81','benzF3_133','benzCl3_181','D3_223','D3_207','D4_297','D4_281','D5_371','D5_355','TotSIGbig','FCinlet','reltime','TotSIG','prim','Tdrift']
 isotopecor=[1.01,1.02,1.02,1.03,1.06,1.06,1.03,1.05,1.05,1.07,1.09,1.1,1.12,1.07,1.07,2.48,1.37,1.36,1.52,1.51,1.69,1.67,1,1,1,1,1,1]
 VMRppm=[1.011,1.01,1.111,0.967,0.998,0.998,0.998,0.937,1.017,1.006,0.983,0.989,0.983,0.983,1.032,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]
 print, ''
 print, '           Sensitivity stdev  Sensitivity Isocor  stdev'
 S_set=starttim
 Serr_set=starttim
 S_set2=starttim
 Serr_set2=starttim
 for j=0,22 do begin  
        essen=fltarr(6)
        essen2=fltarr(6)
        i2=0
        for i=max(d(tims))-6,max(d(tims))-1 do begin  
                T_dr=counts[i,27]
                en=1e-6*VMRppm[j]*(101325*250*1e-9)/((T_dr+273.15)*8.314)
                F_in=counts[i,23]
                primi=countsBG[i,26]
                NC=counts[i,j]*1e6/primi ; the factor to normalise to a primary ion signal of 1E6
                Fmol=5*(Fptr+F_in)/(60.0*1000.0*22.4) ; factor 5 because integration over 35 seconds
               Fmol2=5*(18+F_in)/(60.0*1000.0*22.4)
                es=NC*Fmol*1e-9/en  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
                essen[i2]= es
                es2=NC*Fmol2*1e-9/en  ; UNIT ncps/ppb  (1E-9 to normalize to ppb)
                essen2[i2]= es2
                i2=i2+1
        endfor
      
        print,[compounds[j], string([mean(essen/isotopecor[j]), stddev(essen/isotopecor[j]), mean(essen),stddev(essen)],format='(F8.2)')]
S_set=[S_set,mean(essen)]
Serr_set=[Serr_set,stddev(essen)]
S_set2=[S_set2,mean(essen2)]
Serr_set2=[Serr_set2, stddev(essen2)]
 endfor

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;;;; Xr
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;

compounds=['METH_33','CH3CN_42','Acetal_45','Ace_59','MBO_87','MBO_69','MBO_41','MVK_71','MEK_73','Ben_79','Xyl_107','TMB_121',$
            'Pin_137','Pin_81','benzF3_133','benzCl3_181','D3_223','D3_207','D4_297','D4_281','D5_371','D5_355','TotSIGbig','FCinlet','reltime','TotSIG','prim','Tdrift']
 isotopecor=[1.01,1.02,1.02,1.03,1.06,1.06,1.03,1.05,1.05,1.07,1.09,1.1,1.12,1.07,1.07,2.48,1.37,1.36,1.52,1.51,1.69,1.67,1,1,1,1,1,1]
 VMRppm=[1.011,1.01,1.111,0.967,0.998,0.998,0.998,0.937,1.017,1.006,0.983,0.989,0.983,0.983,1.032,0.995,0.992,0.992,0.995,0.995,0.995,0.995,4,0,0,0,0,0]
 print, ''
 print, '           Sensitivity stdev  Sensitivity Isocor  stdev'
 for j=0,22 do begin  
       
    XR=0
       WINDOW, 7, xsize=800,ysize=700
    !P.MULTI = [0,1,1] 
    DEVICE, DECOMPOSED = 0 
    loadct,5
 
    for k=0,50 do begin 
            counter=0
            classs=0
            if (k eq 0) then XR=0.0
            if (k eq 1) then XR=0.01
            if (k gt 1.5) then begin
                    if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then XR=XRpre+(XRpre-XRprepre)*slopeprepre/(slopeprepre-slopepre)
                    if(classs eq 0 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then begin 
                            XR=XRprepre+(XRpre-XRprepre)/2
                            class=1
                    endif
                    if(classs eq 1) then counter=counter+1
                    if(counter eq 1 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre)eq 0) then increment=-0.1 else increment=0.1 
                    if(counter gt 1.5 and abs(slopeprepre)+abs(slopepre)-abs(slopeprepre+slopepre) ne 0) then increment=increment *(-0.1) 
                    if(counter gt 0.5) then  XR=XRpre+increment
            endif
            NCs=0
            CRs=0
            for i=1,5 do begin  
                    T_dr=counts[i,27]
                    en=1e-6*VMRppm[j]*(101325*250*1e-9)/((T_dr+273.15)*8.314)
                    F_in=counts[i,23]
                    m19=countsBG[i,28]
                    m37=countsBG[i,29]
                    NCs=[NCs,counts[i,j]/(m19+XR*m37)] ; the factor to normalise to a primary ion signal of 1E6
                    CRs=[CRs,100*m37/(m19+m37)]
            endfor
            CRs=CRs[1:*]
            NCs=NCs[1:*]
            fitp=linfit(CRs,NCs)
            if (k eq 0) then begin 
                    slopePre=fitp[1]
                    XRpre=XR
            endif
            XRprepre=XRpre
            XRpre=XR
            slopePrepre=slopePre
            slopePre=fitp[1]
           ; if (k eq 0) then  plot,CRs,NCs,psym=4,color=0,background=-1, thick=3
           ; if (k eq 0) then  oplot, [0,100], [0,100]*fitp[1]+fitp[0], color=50, thick=2
    endfor
    oplot,CRs,NCs,psym=4,color=110, thick=3
    oplot, [0,100], [0,100]*fitp[1]+fitp[0], color=110, thick=2
    xyouts,0.5,0.5,/normal,compounds[j]+'  '+string(xr), color=50, charsize=2, charthick=2
    
    
    
    print,[compounds[j], string([mean(essen/isotopecor[j]), stddev(essen/isotopecor[j]), mean(essen),stddev(essen)],format='(F8.2)')]

 endfor



 print, 'end'
   return, create_struct('Fptr', [starttim,Fptr,Fptr_stdev], 'S_nam', ['time', compounds[0:21]], 'S_val',S_set[0:22], 'Serr_val',Serr_set[0:22], 'S_val2',S_set2[0:22], 'Serr_val2',Serr_set2[0:22])
end


pro makeFloat, name, data 
data=reform(data)
    n_dim = size(data, /n_dimensions)
    dim =  size(data, /dimensions)
    ind=1
    for i=0,n_dim-1 do ind=ind*dim[i]
    openw, lun, name , /get_lun
    printf, lun, [n_dim,dim,reform(data,ind)],  FORMAT='(E17.9)'
    close, lun, /file
    free_lun, lun
  ; data=reform(data,dim,/overwrite)
end

function match, mass, lib, accur, narrow=narrow

if(size(accur,/type) eq 0) then accuracy=150 else accuracy=accur
if (keyword_set(narrow)) then accuracy=10 
;print, accuracy
res=4000
C=2*SQRT(2*ALOG(2)) 
sig=mass/(res*C)      
;m_range=1000*sig ; in mDa, i.e. 106 ppm

m_range=max([2, accuracy* mass/ 1000]) ;  in mDa, i.e. the larger of 2 mDa or 150 ppm (or 10 ppm with /narrow)

mass=max(mass)
match='no match'
type=''
deviation=min(abs(lib[0,*]-mass))
indi=where(abs(lib[0,*]-mass) eq deviation)



compos=lib[*,indi]
C=compos[1]+compos[2]
H=compos[3]
O=compos[4]+compos[5]+compos[6]
N=compos[7]+compos[8]



if (C eq 0) then type=[type,'inorg']

if (C ge 1) then type=[type,'org']
if (C ge 1 and O eq 0 and N eq 0) then type=[type,'HC']
if (C ge 1  and N ge 1) then type=[type,'orgN']
if (C ge 1  and N eq 1) then type=[type,'orgN1']
if (C ge 1  and N eq 2) then type=[type,'orgN2']
if (C ge 1   and O eq 0 and N ge 1) then type=[type,'NHC']
if (C ge 1   and O eq 1 and N ge 1) then type=[type,'NHCO']
if (C ge 1   and O eq 2 and N ge 1) then type=[type,'NHCO2']
if (C ge 1   and O eq 3 and N ge 1) then type=[type,'NHCO3']
if (C ge 1   and O eq 4 and N ge 1) then type=[type,'NHCO4']
if (C ge 1   and O eq 5 and N ge 1) then type=[type,'NHCO5']
if (C ge 1   and O eq 6 and N ge 1) then type=[type,'NHCO6']
if (C ge 1   and O eq 7 and N ge 1) then type=[type,'NHCO7']
if (C ge 1   and O eq 8 and N ge 1) then type=[type,'NHCO8']
if (C ge 1  and N eq 0) then type=[type,'orgNoN']
if (C ge 1 and O ge 1  and N eq 0) then type=[type,'orgO']
if (C ge 1 and O eq 1 and N eq 0) then type=[type,'HCO']
if (C ge 1 and O eq 2 and N eq 0) then type=[type,'HCO2']
if (C ge 1 and O eq 3 and N eq 0) then type=[type,'HCO3']
if (C ge 1 and O eq 4 and N eq 0) then type=[type,'HCO4']
if (C ge 1 and O eq 5 and N eq 0) then type=[type,'HCO5']
if (C ge 1 and O eq 6 and N eq 0) then type=[type,'HCO6']
if (C ge 1 and O eq 7 and N eq 0) then type=[type,'HCO7']
if (C ge 1 and O eq 8 and N eq 0) then type=[type,'HCO8']

if (deviation lt max([0.003,mass*20/1e6])) then match=formula(compos[0:18])

if (match eq 'no match') then type='not matched'


devi=1000*([lib[0,indi-4],lib[0,indi-3],lib[0,indi-2],lib[0,indi-1],lib[0,indi],lib[0,indi+1],lib[0,indi+2],lib[0,indi+3],lib[0,indi+4]]-mass)        



if (abs(deviation) lt 0.003 and C ge 1  and N eq 2) then begin
  inx=where(abs(devi) lt 3)
  alt3=0
  if(max(inx) ge 0) then for r=0,max(size(inx,/dimensions))-1 do begin
        compos=lib[*,indi+inx[r]-4]
        N=compos[7]+compos[8]
        if(N eq 0) then alt3=alt3+1
  endfor
  if (alt3 eq 0) then type=[type,'orgN2alt3']
endif

if (abs(deviation) lt 0.003 and C ge 1  and N eq 1) then begin
  inx=where(abs(devi) lt 3)
  alt3=0
  if(max(inx) ge 0) then for r=0,max(size(inx,/dimensions))-1 do begin
        compos=lib[*,indi+inx[r]-4]
        N=compos[7]+compos[8]
        if(N eq 0) then alt3=alt3+1
  endfor
  if (alt3 eq 0) then type=[type,'orgN1alt3']
endif


if (abs(deviation) lt 0.003 and C ge 1  and N ge 1) then begin
  inx=where(abs(devi) lt 3)
  alt3=0
  if(max(inx) ge 0) then for r=0,max(size(inx,/dimensions))-1 do begin
        compos=lib[*,indi+inx[r]-4]
        N=compos[7]+compos[8]
        if(N eq 0) then alt3=alt3+1
  endfor
  if (alt3 eq 0) then type=[type,'orgNalt3']
endif

if (abs(deviation) lt 0.003 and C ge 1  and N ge 1) then begin
  inx=where(abs(devi) lt 4)
  alt3=0
  if(max(inx) ge 0) then for r=0,max(size(inx,/dimensions))-1 do begin
        compos=lib[*,indi+inx[r]-4]
        N=compos[7]+compos[8]
        if(N eq 0) then alt3=alt3+1
  endfor
  if (alt3 eq 0) then type=[type,'orgNalt4']
endif

if (abs(deviation) lt 0.003 and C ge 1  and N ge 1) then begin
  inx=where(abs(devi) lt 5)
  alt3=0
  if(max(inx) ge 0) then for r=0,max(size(inx,/dimensions))-1 do begin
        compos=lib[*,indi+inx[r]-4]
        N=compos[7]+compos[8]
        if(N eq 0) then alt3=alt3+1
  endfor
  if (alt3 eq 0) then type=[type,'orgNalt5']
endif

candidates=''

if (max(size(where(abs(mass-lib[0,*]) lt m_range/1000),/dimensions)) gt 1) then $
candidates=[transpose(string(1000*(lib[0,where(abs(mass-lib[0,*]) lt m_range/1000)]-mass),format='(F8.3)')),formula(lib[*,where(abs(mass-lib[0,*]) lt  m_range/1000)])] else $
if (max(where(abs(mass-lib[0,*]) lt  m_range/1000)) gt -0.5) then candidates=[(string(1000*(lib[0,where(abs(mass-lib[0,*]) lt  m_range/1000)]-mass),format='(F8.3)')),formula(lib[*,where(abs(mass-lib[0,*]) lt  m_range/1000)])]  
;print, ''
;print,'candidates'
;print, candidates
;print,'__________'

s1=CREATE_STRUCT('formula',match,'devi',devi,'type',type,'candidates',candidates,'entry',compos)
return,s1
end


function multiples, vec
 res=[0,0]
 length=max(size(vec,/dimensions))


ii=long(0)

while (ii lt length) do begin
        counter=0
        if (ii lt length-1) then while (vec[ii+counter+1] eq vec[ii+counter]) do begin
                 counter=counter+1
                 if (ii+counter ge length-1) then break
        endwhile
        res=[[res],[vec[ii+counter],counter+1]]
        ii=ii+counter+1
endwhile
res=res[*,1:*]

return, transpose(res)
end



function PeakTable, masslist, resolution
 if (var_exists(resolution) lt -0.5) then resolution=4000
length=max(size(masslist,/dimensions))      
IntList=FltArr(length,6)
IntList[*,0]=masslist
 res=resolution
for i=0,length-1 do begin
        C=2*SQRT(2*ALOG(2)) 
        sig=IntList[i,0]/(res*C)              
        IntList[i,1]=IntList[i,0]-2*sig
        IntList[i,2]=IntList[i,0]+2*sig
        IntList[i,3]=sig
        if(i gt 0.5) then Down=IntList[i-1,0]*(1+2/(res*C)) else Down=0
        if(i lt length-1.5) then Up=IntList[i+1,0]*(1-2/(res*C)) else Up=100000
        if(Down gt IntList[i,1]) then begin
        
                overlap=Down-IntList[i,1]
         ;       print,'down',down, overlap*1000, IntList[i,0], IntList[i,1],IntList[i,0]-2*sig+overlap/2
                IntList[i,1]=IntList[i,0]-2*sig+overlap/2
                Intlist[i,4]=overlap/(2*sig)
                
        endif
        if(Up lt IntList[i,2]) then begin
                overlap=IntList[i,2]-Up
         ;          print,'up',up, overlap*1000, IntList[i,0], IntList[i,2],IntList[i,0]+2*sig-overlap/2
             
                IntList[i,2]=IntList[i,0]+2*sig-overlap/2
                Intlist[i,5]=overlap/(2*sig)
        endif
endfor
;print, transpose(intlist)
;intlist=intlist[where(intlist[*,2] gt 0.007+intlist[*,1]),*]

return, IntList
end


function ppm_bin, masslist, BinWidth_ppm

;create bin_scale
;bin-width is the bigger of 1mDa and the ppm-width
;i.e. BinWidth_ppm of 0.4 and below returns mDa bin scale
 
BinWidth_ppm=BinWidth_ppm/1e6

start=float(10)
startppm=min([2000,0.001*floor(1/BinWidth_ppm)])

f=where(masslist ge startppm) & if (max(f) gt -1) then m_ppm=masslist[f] else m_ppm=-1
f=where(masslist gt start and masslist lt startppm) & if (max(f) gt -1) then m_mDa=masslist[f] else m_mDa=-1


;ppm bins
if(max(m_ppm) gt -1) then begin 
        m_start=startppm*exp(BinWidth_ppm*double(lindgen(2e6)))
        m_end=[m_start[1:*],max(m_start)+1]
        filt=where(m_start lt 2000)
        m_start2=m_start[filt]
        m_end2=m_end[filt]

        length=max(size(m_start2,/dimensions))
        scores2=fltarr(length)
        I=floor(alog(m_ppm/startppm)/BinWidth_ppm)
        I=I[sort(I)]
        I2=multiples(I)
        scores2[I2[*,0]]=I2[*,1]
endif
;mDa bins

if(max(m_mDa) gt -1) then begin 
        mDa_bins=1000*(startppm-start)
        m_start=double(lindgen(mDa_bins))/1000+start
        m_end=[m_start[1:*],max(m_start)+0.001]

        length=max(size(m_start,/dimensions))
        scores=fltarr(length)
        I=floor((m_mDa-start)/0.001)
        I=I[sort(I)]
        I2=multiples(I)
        scores[I2[*,0]]=I2[*,1]
endif
if( max(m_mDa)eq -1) then begin
        m_start=m_start2 
        m_end=m_end2 
        scores=scores2
endif
if( max(m_mDa)gt -1 and max(m_ppm)gt -1 ) then begin
        m_start=[m_start,m_start2]
        m_end=[m_end,m_end2]
        scores=[scores,scores2]
endif

return, [[m_start],[m_end],[scores]]
end


function range, data
   Range=[min(data),max(data)]
  Return, Range
end


function ReadCsv, file, semicolon=semicolon, decimalcomma=decimalcomma, returnstring=returnstring

seperator=','
if (keyword_set(semicolon)) then  seperator=';'
mistt=systime(1)
info = File_Info(File)
if(info.exists eq 1) then begin
      OPENR, lun, file, /GET_LUN
      rows=FILE_LINES(file)
      data = STRARR(rows)
      READF, lun, data
      Free_Lun, lun
      
      cols=size(strsplit(data[rows-1],seperator, /EXTRACT),/dimensions)
      data2=fltarr(FILE_LINES(file),cols[0]) ;
      if (keyword_set(returnstring)) then   data2=strarr(FILE_LINES(file),cols[0])
      for i=0L,max(FILE_LINES(file))-1 do begin
              cols2=size(strsplit(data[i],seperator, /EXTRACT),/dimensions)  
               if cols2[0] eq cols[0] then begin
                  set=data[i]
                  if (keyword_set(decimalcomma)) then set=strjoin(strsplit(set,',',/extract),'.')
                  set=strsplit(set,seperator, /EXTRACT)
                data2[i,*]=set
                 endif
      endfor
endif else begin
data2=-9999
endelse
return, data2
end

function ReadCsvStr, file,long=long, semicolon=semicolon,variable=variable
  seperator=','
  if (keyword_set(semicolon)) then  seperator=';'

info = File_Info(File)
if(info.exists eq 1) then begin
      OPENR, lun, file, /GET_LUN
      rows=FILE_LINES(file)
      data = STRARR(rows)
      if (keyword_set(long)) then   READF,lun, data, format='(A200)' else   READF, lun, data, format='(A30)'
      Free_Lun, lun
  
      cols=max(size(strsplit(data[1],seperator, /EXTRACT),/dimensions))
   
   
    if (keyword_set(variable)) then begin
      data2=strarr(rows,cols[0]) ;
       for i=0L,rows-1 do begin
           ind=strsplit(data[i],seperator, length=len)
          data2[i,*]=strmid(data[i],ind,len)
       endfor
   
   endif else begin
      ind=strsplit(data[1],seperator, length=len)
      data2=strmid(data,ind,len)
      if(rows gt 1.5) then data2=transpose(data2)
   
    endelse
     
    
endif else begin
        data2=strarr(1)
        data2[0]='-9999'
endelse

return, data2
end




  function ReadIndexFile, indexfile
   
     info = File_Info(IndexFile)
     if(info.exists eq 1 and strpos(indexfile,'.ind') gt -0.5) then begin
      OPENR, lun, IndexFile, /GET_LUN
      rows=FILE_LINES(IndexFile)
      IndexPar = STRARR(rows)
      READF, lun, IndexPar;, format='(A30)'
      Free_Lun, lun
     
     row_index=where(stregex(IndexPar,'_Textt0=') gt -0.5) 
     line_index=stregex(IndexPar,'=') &  line_index=line_index[row_index]+1
     interval=strmid(IndexPar[row_index],line_index,99)
         
  
    VectorInd=strarr(16)
     CondInd=strarr(16)
     ValueInd=strarr(16)
     ifInd=strarr(16)
     elseInd=strarr(16)
      
     for i=1,16 do begin
            if (i lt 9.5) then ii=string(i,format='(I1)') else ii=string(i,format='(I2)')
            row_index=where(stregex(IndexPar,'_Tex'+ii+'=') gt -0.5) 
              line_index=stregex(IndexPar,'=') &  line_index=line_index[row_index]+1
              vectorInd[i-1]=strmid(IndexPar[row_index],line_index,99)
            row_index=where(stregex(IndexPar,'_Dropp'+ii+'=') gt -0.5) 
              line_index=stregex(IndexPar,'=') &  line_index=line_index[row_index]+1
              condInd[i-1]=strmid(IndexPar[row_index],line_index,99)
            row_index=where(stregex(IndexPar,'_Text'+ii+'=') gt -0.5) 
              line_index=stregex(IndexPar,'=') &  line_index=line_index[row_index]+1
              ValueInd[i-1]=strmid(IndexPar[row_index],line_index,99)
            row_index=where(stregex(IndexPar,'_Textt'+ii+'=') gt -0.5) 
              line_index=stregex(IndexPar,'=') &  line_index=line_index[row_index]+1
              ifInd[i-1]=strmid(IndexPar[row_index],line_index,99)
            row_index=where(stregex(IndexPar,'_Texttt'+ii+'=') gt -0.5) 
              line_index=stregex(IndexPar,'=') &  line_index=line_index[row_index]+1
              elseInd[i-1]=strmid(IndexPar[row_index],line_index,99)
     endfor
 
 IndValue=strarr(4)
 Values2add=strarr(4)
for i=15,18 do begin
            ii=string(i,format='(I2)')
             row_index=where(stregex(IndexPar,'_Dext'+ii+'=') gt -0.5) 
            line_index=stregex(IndexPar,'=') &  line_index=line_index[row_index]+1
            IndValue[i-15]=strmid(IndexPar[row_index],line_index,99)
         row_index=where(stregex(IndexPar,'_Dextt'+ii+'=') gt -0.5) 
            line_index=stregex(IndexPar,'=') &  line_index=line_index[row_index]+1
          Values2add[i-15]=strmid(IndexPar[row_index],line_index,9999)
   endfor           
            
       
       S1=create_struct('VectorInd',VectorInd,'CondInd',CondInd,'ValueInd',ValueInd,'ifInd',ifInd,'elseInd',elseInd,'IndValue',IndValue,'Values2add',Values2add,'interval',interval)
       
       
        
  endif else S1=create_struct('VectorInd',-9999)
  
  
  return, S1
END




function ReadFloat, file
mistt=systime(1)
 

info = File_Info(File)
if(info.exists eq 1) then begin
      rows=FILE_LINES(file)
     ; rows=rows-488*29
      data = strarr(rows)
      OPENR, lun, file, /GET_LUN
      READF , lun, data,  FORMAT='(A17)'
      Free_Lun, lun
      filt=where(data eq '          -NaN') & if(max(filt) gt -1) then data[filt]='-9.999000E+003'; old format'(E14.6)'
      filt=where(data eq '             -NaN') & if(max(filt) gt -1) then data[filt]='-9.999000000E+003'; 'new format'(E17.9)'
      data2=double(data)
      n_dim=data2[0]
      if(n_dim gt 0.5) then data2=reform(data2[n_dim+1:rows-1],data2[1:n_dim],/overwrite) else data2=data2[2]
endif else begin
data2=-9999
endelse
return, data2
end



Function ReArrange, Data
  mist=SIZE(Data, /DIMENSIONS)
  n_dims=SIZE(Data, /N_DIMENSIONS)
  mist3=1
  for i=1,n_dims-1 do mist3=mist3*mist[i]
  Data=Reform(data,mist[0],mist3,/overwrite)
  Return, Data
end


pro SaveImage, filename, dataset, colortable
; subroutine to save an 2D-array into a jpg-file colored by a 'colortable'
        dataset=bytscl(dataset)
        dim= size(dataset,/dimensions)
        if colortable gt -0.5 then begin
                DEVICE, DECOMPOSED = 0 
                
                
                loadct,colortable
                 window,24, xsize = dim[0], ysize=dim[1]
                tv, dataset
                ; WSET, 24
                write_jpeg, filename,tvrd(0,true=1), true=1
        endif else begin
        write_jpeg, filename, dataset
        endelse 
end

 
function starttimes, files, ID
  mist=SIZE(Files, /DIMENSIONS)
  n=strlen(ID)
  if(max(mist) gt 2) then files=transpose(files) 
  Year=strmid(Files,strpos(Files,ID)+n-2,4)
  Month=strmid(Files,strpos(Files,ID)+n+3,2)
  Day=strmid(Files,strpos(Files,ID)+n+6,2)
  Hour=strmid(Files,strpos(Files,ID)+n+9,2)
  Minute=strmid(Files,strpos(Files,ID)+n+12,2)
  Second=strmid(Files,strpos(Files,ID)+n+15,2)
  if(max(year) lt 0.1) then t09=0 else t09 = JULDAY(Month, Day, Year, Hour, Minute, Second)-Julday(1,1,2009,0,0,0) ;t09
  return, t09
end
 
 
function str2vec, str
NoNumber=max(STRCMP(max(str), ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'], 1, /FOLD_CASE))
 
 
     vec=float(strsplit(str,',',/extract))
     if( str eq '') then vec = -9999
     if( Nonumber eq 1) then vec = -9999
     
    return, vec
end


function t09, CreationTime ,format6=format6
    ;format1="MM/DD/YYYY, hh:mm:ss AM"
    ;format1b="DD/MM/YYYY hh:mm:ss" Preferred
    ;format1c="MM/DD/YYYY hh:mm:ss" If 1b makes no sense...
    ;format2="DD-Mmm-YY hh:mm:ss AM
    ;format3: 10/02/2015 13h 54m 29s
    ;format4: DD.MM.YYY hh:mm:ss
    
    ;format 5: YYYY.MM.DD-13h54m29s   ,the PTRwid format...
    
    ; format 6: 2017-09-24 12:06:14
    
    if(strpos(CreationTime,'/') gt -0.5 and strpos(CreationTime,'h') lt -0.5 ) then begin ;format1 and 1b
            hours=float(strmid(CreationTime,strpos(creationtime,':')-2,2))
            if(strpos(creationtime,'PM') gt -0.5) then hours=hours+12
            if(strpos(creationtime,'PM') gt -0.5 OR strpos(creationtime,'AM') gt -0.5) then if(hours eq 12 or hours eq 24) then hours=hours-12 
            minutes=float(strmid(CreationTime,strpos(creationtime,':',/reverse_search)-2,2))
            seconds=float(strmid(CreationTime,strpos(creationtime,':',/reverse_search)+1,2))
            year=float(strmid(CreationTime,strpos(creationtime,'/',/reverse_search)+1,4))
            hilf=strmid(CreationTime,strpos(creationtime,'/',/reverse_search)-2,2)
            if(strpos(hilf,'/') gt -0.5) then hilf=strmid(hilf,1,1)
            day=float(hilf)
            if(strpos(creationtime,'/') ge 2) then month=float(strmid(CreationTime,strpos(creationtime,'/')-2,2))else month=float(strmid(CreationTime,strpos(creationtime,'/')-1,1))
            if(strpos(creationtime,'PM') lt -0.5 AND strpos(creationtime,'AM') lt -0.5) then begin
            if( day le 12) then begin
            hilf=month
            month=day
            day=hilf
            endif
            endif
   
    endif
    if(strpos(CreationTime,'-') gt -0.5) then begin  ;format2="DD-Mmm-YY hh:mm:ss AM
             hours=float(strmid(CreationTime,strpos(creationtime,':')-2,2))
             if(strpos(creationtime,'PM') gt -0.5) then hours=hours+12
             if(hours eq 12 or hours eq 24) then hours=hours-12 
             minutes=float(strmid(CreationTime,strpos(creationtime,':',/reverse_search)-2,2))
             seconds=float(strmid(CreationTime,strpos(creationtime,':',/reverse_search)+1,2))
             year=float(strmid(CreationTime,strpos(creationtime,'-',/reverse_search)+1,2))+2000
             hilf=strmid(CreationTime,strpos(creationtime,'-',/reverse_search)-3,3)
             if(strpos(hilf,'-') gt -0.5) then hilf=strmid(hilf,1,1)
             month=float(strpos('JanFebMarAprMayJunJulAugSepOctNovDec',hilf)/3)+1
             if(strpos(creationtime,'-') ge 2) then day=float(strmid(CreationTime,strpos(creationtime,'-')-2,2))else day=float(strmid(CreationTime,strpos(creationtime,'-')-1,1))
    endif
    
    if(strpos(CreationTime,'/') gt -0.5 and strpos(CreationTime,'h') gt -0.5 ) then begin ;format3: 10/02/2015 13h 54m 29s
            hours=float(strmid(CreationTime,strpos(creationtime,'h')-2,2))
           ; if(strpos(creationtime,'PM') gt -0.5) then hours=hours+12
          ;  if(hours eq 12 or hours eq 24) then hours=hours-12 
            minutes=float(strmid(CreationTime,strpos(creationtime,'m')-2,2))
            seconds=float(strmid(CreationTime,strpos(creationtime,'s')-2,2))
            year=float(strmid(CreationTime,strpos(creationtime,'/',/reverse_search)+1,4))
            hilf=strmid(CreationTime,strpos(creationtime,'/',/reverse_search)-2,2)
            if(strpos(hilf,'/') gt -0.5) then hilf=strmid(hilf,1,1)
            month=float(hilf)
            if(strpos(creationtime,'/') ge 2) then day=float(strmid(CreationTime,strpos(creationtime,'/')-2,2))else day=float(strmid(CreationTime,strpos(creationtime,'/')-1,1))
    endif
    
    
      if(strpos(CreationTime,'.') gt -0.5) then begin  ;format4: DD.MM.YYY hh:mm:ss
             hours=float(strmid(CreationTime,strpos(creationtime,':')-2,2))
             if(strpos(creationtime,'PM') gt -0.5) then hours=hours+12
            ; if(hours eq 12 or hours eq 24) then hours=hours-12 
             minutes=float(strmid(CreationTime,strpos(creationtime,':',/reverse_search)-2,2))
             seconds=float(strmid(CreationTime,strpos(creationtime,':',/reverse_search)+1,2))
    
            year=float(strmid(CreationTime,strpos(creationtime,'.',/reverse_search)+1,4))
            hilf=strmid(CreationTime,strpos(creationtime,'.',/reverse_search)-2,2)
            if(strpos(hilf,'.') gt -0.5) then hilf=strmid(hilf,1,1)
            month=float(hilf)
            if(strpos(creationtime,'.') ge 2) then day=float(strmid(CreationTime,strpos(creationtime,'.')-2,2))else day=float(strmid(CreationTime,strpos(creationtime,'.')-1,1))
           
    
    
    
           
           
         ;    year=float(strmid(CreationTime,strpos(creationtime,'.',/reverse_search)+1,2))+2000
          ;   hilf=strmid(CreationTime,strpos(creationtime,'.',/reverse_search)-3,3)
          ;   if(strpos(hilf,'-') gt -0.5) then hilf=strmid(hilf,1,1)
          ;   month=float(strpos('JanFebMarAprMayJunJulAugSepOctNovDec',hilf)/3)+1
          ;   if(strpos(creationtime,'-') ge 2) then day=float(strmid(CreationTime,strpos(creationtime,'-')-2,2))else day=float(strmid(CreationTime,strpos(creationtime,'-')-1,1))
    endif
    
 
 
    if( strpos(creationtime,'.') eq 4) then begin
    
    year=float(strmid(creationtime,0,4))
    month=float(strmid(creationtime,5,2))
    day=float(strmid(creationtime,8,2))
    hours=float(strmid(creationtime,11,2))
    minutes=float(strmid(creationtime,14,2))
    seconds=float(strmid(creationtime,17,2))
    
    endif
    
    if (keyword_set(format6)) then begin ; format 6: 2017-09-24 12:06:14
      hours=float(strmid(CreationTime,strpos(creationtime,':')-2,2))
      minutes=float(strmid(CreationTime,strpos(creationtime,':',/reverse_search)-2,2))
      seconds=float(strmid(CreationTime,strpos(creationtime,':',/reverse_search)+1,2))
      day=float(strmid(CreationTime,strpos(creationtime,'-',/reverse_search)+1,2))
      month=float(strmid(CreationTime,strpos(creationtime,'-',/reverse_search)-2,2))
      year=float(strmid(CreationTime,strpos(creationtime,'-',/reverse_search)-7,4))

    endif

  
 
    t09 = JULDAY(Month, Day, Year, Hours, Minutes, Seconds)-Julday(1,1,2009,0,0,0)
  
    
    return, max(t09)
end

function t09str, date
  n=max(SIZE(date, /DIMENSIONS))
  
  if(n le 1) then begin
        caldat, date+Julday(1,1,2009,0,0,0),month,day,year,hour,minute,second
        t09=date
  endif else begin
        dt=[0,0,0,0,0,0]
        for i=0,n-1 do dt[i]=date[i]
        year=dt[0]
        month=dt[1]
        day=dt[2]
        hour=dt[3]
        minute=dt[4]
        second=dt[5]
        t09 = JULDAY(Month, Day, Year, Hour, Minute, Second)-Julday(1,1,2009,0,0,0) ;t09
   endelse
  time1=string(Year,format='(I4.4)')+'.'+string(Month,format='(I2.2)')+'.'+string(Day,format='(I2.2)')+'-'+string(Hour,format='(I2.2)')+'h'+string(Minute,format='(I2.2)')+'m'+string(second,format='(I2.2)')+'s'
        
   return, time1
end




function testSCALE, masses,lib,instrument, ions, devs
        ppm=20.0
        scor=0.0
        scorppm=0.0
        accuracy=0.0
        LowDa=0.0015
        if(strpos(instrument,'TOF1000') eq 0) then ppm=100.0
        if(strpos(instrument,'TOF8000') eq 0) then ppm=20.0
        if(strpos(instrument,'VOCUS') eq 0) then ppm=20.0
       if(strpos(instrument,'TOF1000') eq 0) then LowDa=0.0075
        if(strpos(instrument,'TOF8000') eq 0) then LowDa=0.0015
        if(strpos(instrument,'VOCUS') eq 0) then LowDa=0.0015

      
        
        
        
       ; masses=m2t(peaktimes,a,t0,ex,SampInt)
        length=max(size(masses,/dimensions))
        deviation=lib[where(abs(lib-masses[0]) eq min(abs(lib-masses[0])))]-masses[0]
      
         MatchLow=0
        if(min(abs(masses-21.0221)) lt LowDa) then MatchLow=MatchLow+1
        if(min(abs(masses-59.0491)) lt LowDa) then MatchLow=MatchLow+1
        if(min(abs(masses-30.994)) lt LowDa) then MatchLow=MatchLow+1
        if(min(abs(masses-33.9935)) lt LowDa) then MatchLow=MatchLow+1
        if(min(abs(masses-47.9966)) lt LowDa) then MatchLow=MatchLow+1
        if(MatchLow lt 1.5) then deviation=9999
       
   
       
       
       
  
        if(deviation lt 9999) then begin
        
        
      
      
      
                split=[masses[0],120.6,250.6,max(masses)]
                for sss=0,2 do begin
                        massi=masses[where(masses gt split[sss] and masses le split[sss+1])]
                        length=max(size(massi,/dimensions))
                        libi=lib[where(lib gt split[sss] and lib le split[sss+1])]
                        for i=0,length-1 do deviation=[deviation,libi[where(abs(libi-massi[i]) eq min(abs(libi-massi[i])))]-massi[i]]
                        if(sss eq 0) then devi120=deviation
                 endfor
         
     
      
      
      
     ;  for i=1,length-1 do deviation=[deviation,lib[where(abs(lib-masses[i]) eq min(abs(lib-masses[i])))]-masses[i]]
     
     
     endif
     
     
     
     
       filter=where( abs(deviation) lt 0.002)
        filter2=where( abs(deviation) lt 0.010)
       filterppm=where( 1e6*abs(deviation)/masses lt ppm)
      
       if(max(filter) gt -0.5) then  scor=float(max(size(masses[filter],/dimensions)))+float(max(size(masses[filter2],/dimensions)))/1000
       if(max(filterppm) gt -0.5) then  scorppm=float(max(size(masses[filterppm],/dimensions)))+0.2- mean(1e6*abs(deviation[filterppm])/masses[filterppm])/100
     
        if(max(filter) gt -0.5) then  accuracy=total(deviation[filter])/scor
        
      if(ions[0] gt 0) then if(min(abs(masses- ions[0])) gt devs[0]) then scor=scor/3
      if(ions[0] gt 0) then if(min(abs(masses- ions[0])) gt devs[0]) then scorppm=scorppm/3
      if(ions[1] gt 0) then if(min(abs(masses- ions[1])) gt devs[1]) then scor=scor/3
      if(ions[1] gt 0) then if(min(abs(masses- ions[1])) gt devs[1]) then scorppm=scorppm/3
      if(ions[2] gt 0) then if(min(abs(masses- ions[2]))gt devs[2]) then scor=scor/3
      if(ions[2] gt 0) then if(min(abs(masses- ions[2])) gt devs[2]) then scorppm=scorppm/3

 s1=create_struct('scor',scor,'scorppm',scorppm,'accuracy',accuracy, 'deviation',deviation,'masses',masses)
 return, s1
 end    
  

function testSCALE2, massesAll,lib,instrument,ions, devs



  ppm=20.001
  if(strpos(instrument,'TOF1000') eq 0) then ppm=100.0
  if(strpos(instrument,'TOF8000') eq 0) then ppm=20.0
  if(strpos(instrument,'VOCUS') eq 0) then ppm=20.0
  if(strpos(instrument,'TOF1000') eq 0) then LowDa=0.0075
  if(strpos(instrument,'TOF8000') eq 0) then LowDa=0.0015
  if(strpos(instrument,'VOCUS') eq 0) then LowDa=0.0015


  scor=0.00001
  scor120=0.00001
  rat120=1.00001
 ; massesAll=m2t(peaktimes,a,t0,ex,SampInt,/time)
  massesAll=massesAll[where(massesAll gt 20)]
  

  ; reject masses of wich the mass defect is outside the range of the lib compounds
  filter=where((massesAll-floor(massesAll+0.3)) gt massesAll*0.9/800-0.25 )
  if(max(filter) gt 0) then massesAll=massesAll[filter] else massesAll=[20,40,60,80,100]
  filter=where((massesAll-floor(massesAll+0.3)) lt massesAll*0.9/800+0.025 )
  if(max(filter) gt 0) then massesAll=massesAll[filter] else massesAll=[20,40,60,80,100]





  if(max(where(2*floor(floor(lib+0.4)/2) eq floor(lib+0.4) and lib gt 50)) lt -0.5)then begin ; remove even masses if mode is H3O+
    filter2=where(massesAll gt 33.9 and massesAll lt 34.1)  ;add m34,and m48 (isotopes of O2 and NO2)
    if(max(filter2) gt 0) then m34=massesAll[filter2]
    filter2=where(massesAll gt 47.9 and massesAll lt 48.1)
    if(max(filter2) gt 0) then m48=massesAll[filter2]
    filter=where(2*floor(floor(massesAll+0.4)/2) ne floor(massesAll+0.4));selects odd masses
    if(max(filter) gt 0) then massesAll=massesAll[filter] else massesAll=[20,40,60,80,100]
    if(var_exists(m34) gt -0.5) then massesAll=[massesAll,m34]
    if(var_exists(m48) gt -0.5) then massesAll=[massesAll,m48]
  endif



  length=max(size(massesAll,/dimensions))

  if (length gt 3000) then begin
    filter=where((massesAll gt  50 and massesAll lt  65) or $
      (massesAll gt 100 and massesAll lt 115) or $
      (massesAll gt 150 and massesAll lt 165) or $
      (massesAll gt 200 and massesAll lt 215) or $
      (massesAll gt 250 and massesAll lt 265) or $
      (massesAll gt 300 and massesAll lt 315) or $
      (massesAll gt 350 and massesAll lt 365) or $
      (massesAll gt 400 and massesAll lt 415))
    ; filter=where((massesAll gt  330 and massesAll lt  350) or (massesAll gt  106 and massesAll lt  116) or (massesAll gt  190 and massesAll lt  210))

    masses=massesAll[filter]
  endif else masses=massesAll



  deviation=min(abs(lib-masses[0]))
  if (deviation lt  ppm*1e-6*masses[0]) then scor=scor+1
  devi=0.00001
  MatchLow=0
  if(min(abs(massesAll-21.0221)) lt LowDa) then MatchLow=MatchLow+1
  if(min(abs(massesAll-59.0491)) lt LowDa) then MatchLow=MatchLow+1
  if(min(abs(massesAll-30.994)) lt LowDa) then MatchLow=MatchLow+1
  if(min(abs(massesAll-33.9935)) lt LowDa) then MatchLow=MatchLow+1
  if(min(abs(massesAll-47.9966)) lt LowDa) then MatchLow=MatchLow+1
  if(MatchLow lt 1.5) then deviation=9999




  length=max(size(masses,/dimensions))




  if(deviation lt 9999) then begin
    split=[20.6,120.6,250.6,max(masses)]
    for sss=0,2 do begin
      massi=masses[where(masses gt split[sss] and masses le split[sss+1])]
      length=max(size(massi,/dimensions))
      libi=lib[where(lib gt split[sss] and lib le split[sss+1])]
      for i=0,length-1 do begin
        deviation=min(abs(libi-massi[i]))
        if (deviation lt   ppm*1e-6*massi[i] or deviation lt 0.0015) then begin
          scor=scor+1
          devi =devi+1e4*deviation/massi[i]
        endif
      endfor
      if(sss eq 0) then scor120=scor
      if(sss eq 0) then rat120=scor/length
      if(sss eq 0) then devi120=devi
    endfor

  endif
  if (scor gt 0.5) then scor=scor+0.2-devi/scor
  if (scor120 gt 0.5) then scor120=scor120+0.2-devi120/scor120

  if(ions[0] gt 0) then if(min(abs(massesAll- ions[0] )) gt devs[0]) then scor=scor/3
  if(ions[0]  gt 0) then if(min(abs(massesAll- ions[0] )) gt devs[0]) then scor120=scor120/3
  if(ions[1] gt 0) then if(min(abs(massesAll- ions[1] )) gt devs[1]) then scor=scor/3
  if(ions[1] gt 0) then if(min(abs(massesAll- ions[1] )) gt devs[1]) then scor120=scor120/3
  if(ions[2]  gt 0) then if(min(abs(massesAll- ions[2] )) gt devs[2]) then scor=scor/3
  if(ions[2] gt 0) then if(min(abs(massesAll- ions[2] )) gt devs[2]) then scor120=scor120/3
if(rat120 lt 0.35) then begin
  scor=0.001
  scor120=0.001
  endif





  s1=create_struct('scor',scor,'scor120',scor120, 'masses',masses,'rat120',rat120)
  return, s1
end
 

function testSCALE3, masses,lib,instrument
       
       m21=masses[where(abs(masses-21.022) eq min(abs(masses-21.022)))]
       m30=masses[where(abs(masses-29.997) eq min(abs(masses-29.997)))]
       m32=masses[where(abs(masses-31.989) eq min(abs(masses-31.989)))]
       m39=masses[where(abs(masses-39.033) eq min(abs(masses-39.033)))]

       
        masses=[m21,m30,m32,m39,masses[where(masses gt 40 and masses lt 250)]]
        length=max(size(masses,/dimensions))
       
             deviation=lib[where(abs(lib-masses[0]) eq min(abs(lib-masses[0])))]-masses[0]
       for i=1,length-1 do deviation=[deviation,lib[where(abs(lib-masses[i]) eq min(abs(lib-masses[i])))]-masses[i]]
  
   ppm=50
     if(strpos(instrument,'TOF1000') eq 0) then ppm=200
    if(strpos(instrument,'TOF8000') eq 0) then ppm=50
    if(strpos(instrument,'VOCUS') eq 0) then ppm=50
 
       
         filterppm=where( 1e6*abs(deviation)/masses lt ppm)
      
       if(max(filterppm) gt 0) then  scorppm=float(max(size(masses[filterppm],/dimensions)))+0.2- mean(1e6*abs(deviation[filterppm])/masses[filterppm])/100
     
        
    ;return, 1000*median(deviation
    if(var_exists(scorppm) eq -1) then scorppm=0
    
  ;  if (scorppm gt 10) then begin
    stats=quantile(abs(masses-round(masses)),[0.3,0.5,0.7])
 ;      print, [stats, total(stats)]
    ;  print, ''
      
 ;   endif
   return, 1000-scorppm
   ;return, median(abs(masses-round(masses)))*4000; factor 4000 to normalize to 1000 (random distribution should yield 0.25)
end    


function var_exists,variable
        value=-1
        help, variable, output=dummy
        if(STRPOS( dummy[0], 'Undefined' ) lt -0.5) then value=1
        return, value
end
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;
;;;;;;;
;;;;;;;                   Other routines
;;;;;;;
;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


PRO ____________other_routines
 end
 
pro kml, compound_name, startTIME, endTIME
data=readcsv('D:/Pamarcmip/polar 5/test13.csv',/returnstring)

 filt=where(float(data[*,0]) gt float(startTIME) and float(data[*,0]) lt float(endTIME))
data2=float(data[filt,*])
lon=data2[*,1]
lat=data2[*,2]
alt=data2[*,3]
VMR=data2[*,where(data[0,*] eq compound_name)]
cols=['64000000','64060055','640D00AA','641300F5','641461FF','641485FF','6414BAFF','6414E7FF','6414F0B3','6414F009','64A7F9A0']
cols=['64000000','64580007','6485000B','64BA000F','64E70013','649E2C6B','645D50B0','643466DC','641C73F6','641435FF','641404FF']
sep=quantile(vmr,0.05+indgen(11)/11.0)
dims=d(data2)

klmfile=strarr(8+14*dims[0])

klmfile[0]='<?xml version="1.0" encoding="UTF-8"?>'
klmfile[1]='<kml xmlns="http://www.opengis.net/kml/2.2">'
klmfile[2]='  <Document>'
klmfile[3]=' <Folder>'
klmfile[4]='      <name>Trail</name>'
klmfile[5+14*dims[0]]='    </Folder>'
klmfile[6+14*dims[0]]='  </Document>'
klmfile[7+14*dims[0]]='</kml>'
for i=0,max(dims[0])-2 do begin
  colind= min(where(vmr[i] le sep))
  if(colind eq -1) then colind=10
  colstr=cols[colind]
  coostr=strtrim(string(lon[i],format='(F14.6)'),2)+','+strtrim(string(lat[i],format='(F14.6)'),2)+','+strtrim(string(10.0*alt[i],format='(F14.3)'),2)+' '+strtrim(string(lon[i+1],format='(F14.6)'),2)+','+strtrim(string(lat[i+1],format='(F14.6)'),2)+','+strtrim(string(10.0*alt[i+1],format='(F14.3)'),2)
klmfile[5+i*14]='  <Placemark>'
klmfile[6+i*14]='        <Style>'
klmfile[7+i*14]='          <LineStyle>'
klmfile[8+i*14]='            <color>'+colstr+'</color>'
klmfile[9+i*14]='            <width>3</width>'
klmfile[10+i*14]='          </LineStyle>'
klmfile[11+i*14]='       </Style>'
klmfile[12+i*14]='        <MultiGeometry>'
klmfile[13+i*14]='          <LineString>'
klmfile[14+i*14]='            <altitudeMode>absolute</altitudeMode>'
klmfile[15+i*14]='            <coordinates>'+coostr+'</coordinates>'
klmfile[16+i*14]='          </LineString>'
klmfile[17+i*14]='        </MultiGeometry>'
klmfile[18+i*14]='      </Placemark>'

endfor

print, transpose(klmfile)
print, 'haha'
end
    
function quantile_int, x, p, type
   ;;
   ;; The workhorse routine. The following is the relevant
   ;; documentation of the quantile function from R - note that this
   ;; is not here to explain functionality but to give background
   ;; information about the possible types of quantiles that can be
   ;; calculated. 
   ;;
   ;; quantile                package:stats                R Documentation
   ;; Sample Quantiles
   ;;
   ;; Description:
   ;;
   ;;     The generic function 'quantile' produces sample quantiles
   ;;     corresponding to the given probabilities. The smallest observation
   ;;     corresponds to a probability of 0 and the largest to a probability
   ;;     of 1.
   ;;
   ;; Usage:
   ;;
   ;;     quantile(x, ...)
   ;;
   ;;     ## Default S3 method:
   ;;     quantile(x, probs = seq(0, 1, 0.25), na.rm = FALSE,
   ;;              names = TRUE, type = 7, ...)
   ;;
   ;; Arguments:
   ;;
   ;;       x: numeric vectors whose sample quantiles are wanted.  Missing
   ;;          values are ignored.
   ;;
   ;;   probs: numeric vector of probabilities with values in [0,1].
   ;;
   ;;   na.rm: logical; if true, any 'NA' and 'NaN''s are removed from 'x'
   ;;          before the quantiles are computed.
   ;;
   ;;   names: logical; if true, the result has a 'names' attribute.  Set to
   ;;          'FALSE' for speedup with many 'probs'.
   ;;
   ;;    type: an integer between 1 and 9 selecting one of the nine quantile
   ;;          algorithms detailed below to be used.
   ;;
   ;;     ...: further arguments passed to or from other methods.
   ;;
   ;; Details:
   ;;
   ;;     A vector of length 'length(probs)' is returned; if 'names = TRUE',
   ;;     it has a 'names' attribute.
   ;;
   ;;     'NA' and 'NaN' values in 'probs' are propagated to the result.
   ;;
   ;; Types:
   ;;
   ;;     'quantile' returns estimates of underlying distribution quantiles
   ;;     based on one or two order statistics from the supplied elements in
   ;;     'x' at probabilities in 'probs'.  One of the nine quantile
   ;;     algorithms discussed in Hyndman and Fan (1996), selected by
   ;;     'type', is employed.
   ;;
   ;;     Sample quantiles of type i are defined by
   ;;
   ;;              Q[i](p) = (1 - gamma) x[j] + gamma x[j+1],
   ;;
   ;;     where 1 <= i <= 9, (j-m)/n <= p < (j-m+1)/ n, x[j] is the jth
   ;;     order statistic, n is the sample size, and m is a constant
   ;;     determined by the sample quantile type. Here gamma depends on the
   ;;     fractional part of g = np+m-j.
   ;;
   ;;     For the continuous sample quantile types (4 through 9), the sample
   ;;     quantiles can be obtained by linear interpolation between the kth
   ;;     order statistic and p(k):
   ;;
   ;;             p(k) = (k - alpha) / (n - alpha - beta + 1),
   ;;
   ;;     where alpha and beta are constants determined by the type.
   ;;     Further, m = alpha + p(1 - alpha - beta), and gamma = g.
   ;;
   ;;     *Discontinuous sample quantile types 1, 2, and 3*
   ;;
   ;;
   ;;     Type 1 Inverse of empirical distribution function.
   ;;
   ;;     Type 2 Similar to type 1 but with averaging at discontinuities.
   ;;
   ;;     Type 3 SAS definition: nearest even order statistic.
   ;;
   ;;     *Continuous sample quantile types 4 through 9*
   ;;
   ;;
   ;;     Type 4 p(k) = k / n. That is, linear interpolation of the
   ;;          empirical cdf.
   ;;
   ;;
   ;;     Type 5 p(k) = (k - 0.5) / n. That is a piecewise linear function
   ;;          where the knots are the values midway through the steps of
   ;;          the empirical cdf. This is popular amongst hydrologists.
   ;;
   ;;
   ;;     Type 6 p(k) = k / (n + 1). Thus p(k) = E[F(x[k])]. This is used by
   ;;          Minitab and by SPSS.
   ;;
   ;;
   ;;     Type 7 p(k) = (k - 1) / (n - 1). In this case, p(k) =
   ;;          mode[F(x[k])]. This is used by S.
   ;;
   ;;
   ;;     Type 8 p(k) = (k - 1/3) / (n + 1/3). Then p(k) =~ median[F(x[k])].
   ;;          The resulting quantile estimates are approximately
   ;;          median-unbiased regardless of the distribution of 'x'.
   ;;
   ;;
   ;;     Type 9 p(k) = (k - 3/8) / (n + 1/4). The resulting quantile
   ;;          estimates are approximately unbiased for the expected order
   ;;          statistics if 'x' is normally distributed.
   ;;
   ;;
   ;;     Hyndman and Fan (1996) recommend type 8. The default method is
   ;;     type 7, as used by S and by R < 2.0.0.
   ;;
   ;; Author(s):
   ;;
   ;;     of the version used in R >= 2.0.0, Ivan Frohne and Rob J Hyndman.
   ;;
   ;; References:
   ;;
   ;;     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S
   ;;     Language_. Wadsworth & Brooks/Cole.
   ;;
   ;;     Hyndman, R. J. and Fan, Y. (1996) Sample quantiles in statistical
   ;;     packages, _American Statistician_, *50*, 361-365.
   ;;
   ;; See Also:
   ;;
   ;;     'ecdf' for empirical distributions of which 'quantile' is an
   ;;     inverse; 'boxplot.stats' and 'fivenum' for computing other
   ;;     versions of quartiles, etc.
   ;;
   ;; Examples:
   ;;
   ;;     quantile(x <- rnorm(1001))# Extremes & Quartiles by default
   ;;     quantile(x,  probs=c(.1,.5,1,2,5,10,50, NA)/100)
   ;;
   ;;     ### Compare different types
   ;;     p <- c(0.1,0.5,1,2,5,10,50)/100
   ;;     res <- matrix(as.numeric(NA), 9, 7)
   ;;     for(type in 1:9) res[type, ] <- y <- quantile(x,  p, type=type)
   ;;     dimnames(res) <- list(1:9, names(y))
   ;;     round(res, 3)


   

   common machine_precision, eps, epsneg, xmin, xmax

   if (n_elements(eps) eq 0) Then begin
      mtmp = machar(/double)
      eps = mtmp.eps
      epsneg = mtmp.epsneg
      xmin = mtmp.xmin
      xmax = mtmp.xmax
   endif

   n_x = n_elements(x)

   if (type le 3) then begin
      ;;------------------------
      ;; Discrete estimators
      ;;------------------------

      ;; The m value
      m_types = [0, 0, -0.5]
      m = m_types[type-1]

      ;; Find the j value.
      j = floor(p*n_x + m)
      ;; Find g
      g = p*n_x + m - j

      ;; determine gamma.
      case type of
         1: if (g gt 0) then gamma = 1.0 else gamma = 0.0
         2: if (g gt 0) Then gamma = 1.0 else gamma = 0.5
         3: begin
            if (g gt 0) Then gamma = 1.0 $
            else begin
               if ((j mod 2) eq 0) then gamma = 0.0 else gamma = 1.0
            endelse
         end
      endcase

   endif else begin
      ;;-------------------------
      ;; Continuous estimators
      ;;-------------------------
      
      alpha_all = [0, 0.5, 0., 1, 0.333333333, 0.375]
      alpha = alpha_all[type-4.]
      beta = alpha

      m = alpha+p*(1.0-alpha-beta)
      j = floor(p*n_x + m + 4.0*eps)
      g = p*n_x+m - j
      if (abs(g) lt 4*eps) then gamma = 0.0
      gamma = g


   endelse

   j = j-1

   Q_p = (1.0-gamma)*x[j > 0]+gamma*x[j+1 < (n_x-1)]


;   ii = findgen(n_elements(xs))/(n_elements(xs)-1.0)
;   
;   for i = 0,N_elements(p)-1 do begin
;      res[i] = lin_interp_solve(xs, ii, p[i])
;   endfor;

   return, Q_p

end



function quantile, x, p, type = type, sorted = sorted, $
                   nan=nan
;+
; NAME: QUANTILE
;
; PURPOSE: Calculate the quantiles of a distribution of points
; 
; CATEGORY: Statistics, R emulation
;
; CALLING SEQUENCE: 
;       res = QUANTILE(X, P [KEYWORDS=KEYWORDS])
;
; INPUTS: 
;
;     X: The data. This should be a numerical vector.
;     P: The quantile levels requested. This can be a scalar or a
;        vector with values beteen 0 and 1.
; 
;
; OPTIONAL INPUTS:
;
; KEYWORD PARAMETERS: 
;
;             NAN: Filter out NaN
;          SORTED: If the data is already sorted, set this keyword to
;                  avoid redoing the sort.
;            TYPE: The type of quantile calculation. See the
;                  documentation of the R function quantile for
;                  details (or look at the source code for
;                  quantile_int which contains a copy of this
;                  documentation) 
; 
;
; OUTPUTS:
;
; OPTIONAL OUTPUTS:
;
; COMMON BLOCKS:
;
; SIDE EFFECTS:
;
; RESTRICTIONS:
;
; PROCEDURE:
;
; EXAMPLE:
;
;    x = randomn(sss, 1000)
;    print, quantile(x, [0.025, 0.16, 0.5, 0.84, 0.975])
;
; This should print something close to -2, -1, 0, 1, 2
;    
;
; MODIFICATION HISTORY:
;
;       Oct 22, 2008, Jarle Brinchmann (jarle@astro.up.pt)
;          Documented routine
;
;-

   
   ;;
   ;; Calculate quantiles of a distribution
   ;; 
   ;; Extended to work as R's quantile routine.
   ;;
   if (n_Elements(type) eq 0) Then type = 8
   if (type lt 1 or type gt 9) Then begin
      print, 'QUANTILE: Only type 1-9 is supported!'
      return, -1
   endif

   ;;-----------------------------------------------------------------
   ;; XS is X_(i) in the statistical lingo - ie. the order statistic
   ;; of X
   ;;-----------------------------------------------------------------

   n_p = n_elements(p)
   if (size(p, /n_dim) eq 0) then is_scalar = 1 else is_scalar = 0
   res = fltarr(n_p)

   if (keyword_set(sorted)) then xs = x $
   else $
    xs = x[sort(x)]

   if (keyword_set(nan)) then begin
      bad = where(finite(x) eq 0, n_bad, compl=good)
      if (n_bad eq n_elements(xs)) then begin
         res[*] = !values.f_nan
         if (is_scalar) then return ,res[0] else return, res
      endif
      tmp_x = x[good]
      si = sort(tmp_x)
      xs = tmp_x[si]
      xs = xs[good]
   endif 



   for i = 0L, n_p-1 do $
           res[i] = quantile_int(xs, p[i], type)
   
   if (is_scalar) then return ,res[0] else return, res

end







 
 
 
 
 
 
 

 
 
  